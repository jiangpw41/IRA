[
    "MATCH(n:player)-[:like]->(m)\n  WHERE n.player.age > 35\n  RETURN DISTINCT id(n) AS id,\n                  count(n) AS count,\n                  sum(floor(n.player.age)) AS sum,\n                  max(m.player.age) AS max,\n                  min(n.player.age) AS min,\n                  avg(distinct n.player.age)+1 AS age,\n                  labels(m) AS lb\n        ORDER BY id, count, max, min\n        SKIP 10 LIMIT 20;",
    "MATCH (v:player{name: \"Tony Parker\"})-[:serve]->(t:team)\nWITH DISTINCT v.player.age as age, t\nRETURN t",
    "MATCH (v:player{name: 'Tim Duncan'})-[e:like{likeness: 95}]->() return v.player.name AS name",
    "MATCH p = shortestPath( (a:player{name:\"Tiago Splitter\"})-[e*..5]->(b:player{name:\"LaMarcus Aldridge\"}) ) RETURN  p",
    "MATCH (v:player)\nWHERE v[toLower(\"AGE\")] < 21\nRETURN v.player.name, v.player.age",
    "MATCH (v1) -[:like]-> () -[:like]-> (v3)\nWHERE id(v1) == 'Dwyane Wade'\nRETURN v3.player.name AS Name",
    "MATCH (v:player{name:\"Ben Simmons\"})-[e:serve]-(v2)\nRETURN e",
    "MATCH (v:player) RETURN v.player.name AS Name, v.player.age AS Age\nORDER BY Name DESC",
    "MATCH p = (v:player{name: \"Cory Joseph\"})-[e:like]-(v2)\nRETURN p",
    "MATCH (v:player)\nWHERE v.player.age NOT IN range(20,25)\nRETURN v.player.name AS Name, v.player.age AS Age\nORDER BY Age",
    "MATCH (v1)-[:like]->(v2:player)-[:serve]->(v3)\nWHERE id(v3) == 'Spurs' AND id(v1) == 'Tony Parker'\nRETURN v1, v2, v3",
    "MATCH (v:player)\nWHERE NOT v.player.name ENDS WITH \"R\"\nRETURN v.player.name, v.player.age",
    "match (v:player) where properties(v).name==\"LaMarcus Aldridge\" return v.player.sex,properties(v).age;",
    "MATCH (v:player{name:\"Tim Duncan\"})-[e]->(t)\nWHERE NOT (v)-[e]->(t:team)\nRETURN (v)-->()",
    "match (v:player) return v.player.name, v",
    "MATCH (v:player{name: \"Damian Lillard\"})-[:like]-(v2)--(v3)\nWITH v3, v3.player.age AS age\nRETURN v3, age ORDER BY age LIMIT 3",
    "MATCH (v:player{name: \"abc\"}) -[:serve*..3]-> ()\nRETURN *",
    "MATCH (v)-[e:follow]->()\nWHERE rank(e)==0\nRETURN *",
    "MATCH p = shortestPath( (a:player)-[e:serve*..3]-(b:team) )\n  WHERE a.player.age > 45 AND b.team.name == 'Spurs'\n  RETURN length(p)",
    "match (v:player{name:\"LaMarcus Aldridge\"}) return properties(v).age,v.player.sex;",
    "MATCH (v:player{name:\"Tim Duncan\"}) --> (v2)\nRETURN v2.player.name AS Name, v2.player.age AS Age\nORDER BY Age",
    "MATCH (v:player {name: \"Rudy Gay\"})-[:serve*0..1]->(n) RETURN n.player.name",
    "MATCH (v)<-[e:follow]- (v2) WHERE id(v) =='player100'\nRETURN id(v2) AS destination",
    "MATCH (v:player) RETURN min(v.player.age)",
    "MATCH (v1)-[:like]->(v2:player)-[:serve]->(v3)\nWHERE id(v2) == 'Tim Duncan'\nRETURN COUNT(*)",
    "MATCH () -[]-> (v) RETURN *",
    "MATCH p=(v:player{name:\"Tim Duncan\"})-[e:follow*1..3]->(v2)\nRETURN v2 AS Friends",
    "MATCH (:player{name:\"Tim Duncan\"})-[e:like*2..3{likeness: 90}]-(v)\nRETURN e, v",
    "MATCH ()<-[e]-()\nRETURN e\nLIMIT 3",
    "MATCH (v) WHERE id(v) == 'Boris Diaw' RETURN (v)",
    "MATCH (v:player{name:\"Tim Duncan\"})-->()<--(v3)\nRETURN v3.player.name AS Name",
    "MATCH (v:player)\nWHERE exists(v.player.age)\nRETURN v.player.name, v.player.age",
    "MATCH (v:player{name:\"Tim Duncan\"})--(v2:player)\nRETURN v2.player.name AS Name",
    "MATCH (v:player{name: 'Tim Duncan'}) return v.player.name AS name",
    "MATCH (v:player)\nWHERE v.player.name == \"Tim Duncan\"\nXOR (v.player.age < 30 AND v.player.name == \"Yao Ming\")\nOR NOT (v.player.name == \"Yao Ming\" OR v.player.name == \"Tim Duncan\")\nRETURN v.player.name, v.player.age",
    "MATCH (v:player) WHERE v.player.score < 20 RETURN v.player.name AS name",
    "match (src_v)-[e:like|serve]->(dst_v)-[e2]-(dst_v2) where  id(src_v)==\"Rajon Rondo\"\n  return properties(e).degree as degree,properties(e2).degree AS degree1\n  order by degree, degree1 limit 5;",
    "MATCH (v:player) RETURN v.player.age AS Age, v.player.name AS Name\nORDER BY Age DESC, Name ASC",
    "MATCH (v:player{name:\"Tony Parker\"})--(v2:player)\nRETURN DISTINCT v2.player.name, v2.player.age",
    "match (src_v:player{name:\"Manu Ginobili\"})-[e:like*2..3]-(dst_v)\n  return distinct properties(src_v).sex,properties(e[0]).degree as degree,properties(dst_v).name as name,src_v.player.age AS age, e[1].start_year,dst_v.player.age\n  order by degree, name, age limit 5;",
    "MATCH (v1) -[:like]-> (v2) -[:like]-> (v3)\nWHERE id(v1) == \"Tim Duncan\"\nRETURN v1.player.name AS Player, v2.player.name AS Friend, v3.player.name AS FoF",
    "MATCH (v1) -[r:serve]-> (v2)\nWHERE id(v1) == \"LeBron James\"\nRETURN type(r) AS Type, v2.team.name AS Name",
    "MATCH (v) RETURN v",
    "MATCH (n:player) WHERE id(n) == \"Boris Diaw\" RETURN n;",
    "MATCH (a:player)-[b:serve]-(c:team{name: \"Lakers\"})\nWHERE a.player.age > 45\nRETURN concat_ws(\"@\",a.player.name, NULL, \"hello\", b.likeness, c.team.name) as result",
    "MATCH (v:player{name:\"Tim Duncan\"}) --> (v2)\nRETURN v2.player.name AS Name, v2.player.age AS Age\nORDER BY Age DESC",
    "MATCH (v)-[:serve]->(t)\nWHERE id(t) == 'Pistons'\nRETURN v.player.name AS Name",
    "MATCH (v:player{name:\"Tim Duncan\"})-->(v2)<--(v3)\nRETURN v3.player.name AS Name",
    "MATCH (a)--(b) WHERE id(b) == 'Tony Parker' RETURN DISTINCT id(a)\nUNION\nMATCH (a)--(b) WHERE id(b) == 'Tony Parker' RETURN DISTINCT id(a)",
    "MATCH (v)\nWHERE id(v) IN ['James Harden', 'Jonathon Simmons', 'Klay Thompson', 'Dejounte Murray', 'Paul Gasol']\n      OR true\nRETURN v.player.name AS Name",
    "MATCH (v:player) RETURN sum(v.player.age)",
    "MATCH (v:player) RETURN v.player.name AS Name, v.player.age AS Age\nORDER BY Age LIMIT 5",
    "match ()-[e]->()\nwhere abs(rank(e)) == 1 and e.start_year == 2020\nRETURN e\nlimit 1000",
    "MATCH p=(v:player{name:\"Tim Duncan\"})-[e:follow|serve*2]->(v2)\nRETURN DISTINCT v2",
    "match (v:player{name:\"LaMarcus Aldridge\"}) return v.player.age;",
    "MATCH (v:player:bachelor) RETURN v",
    "MATCH (v)-[:serve]->(t)\nWHERE (NOT NOT id(v) == 'Paul Gasol') AND id(v) == 'Paul Gasol' AND id(t) IN ['Grizzlies', 'Lakers']\nRETURN v.player.name AS Name, t.team.name AS Team",
    "MATCH p = shortestPath( (a:player{name:\"Tim Duncan\"})-[e*..5]-(b:player{name:\"Tony Parker\"}) )  RETURN e, p",
    "MATCH p=(v:player{name:\"Tim Duncan\"})-[e:follow*2]->(v2)\nWHERE ALL(e_ in e WHERE e_.degree > 0)\nRETURN DISTINCT v2 AS Friends",
    "MATCH p=(v:player{name:\"Tim Duncan\"})-[e:follow*2]->(v2)\nWHERE e.degree > 1\nRETURN DISTINCT v2 AS Friends",
    "MATCH (v:player {name: \"Yao Ming\"})-[:serve*0..1]->() RETURN v.player.name",
    "MATCH (:player{name:\"Tim Duncan\"})<-[e:serve|like*2..3{likeness: 90}]-(v)\nRETURN e, v",
    "MATCH (p:player {name: 'Yao Ming'} ), (t:team {name: 'Rockets'}), pth = (p)-[:serve*1..4]-(t)\nRETURN pth",
    "MATCH p=(v:player{name:\"Tim Duncan\"})-->(v2) return length(p)",
    "MATCH p = shortestPath( (a)-[e:like*..4]->(b) )\n  WHERE id(b) IN ['Manu Ginobili', 'Spurs', 'Lakers'] and id(a) in ['xxx', 'zzz']\n  RETURN p",
    "MATCH (:player{name:\"Tracy McGrady\"})-[e:serve|like{start_year: 2000}]-(v)\nRETURN e, v",
    "MATCH (v:player)\nWITH v.player.name AS n\nRETURN n ORDER BY n LIMIT 3\nUNION\nUNWIND [\"Tony Parker\", \"Ben Simmons\"] AS n\nRETURN n",
    "MATCH (:player{name:\"Tim Duncan\"})-[e:like*2..3{likeness: 90}]->(v)\nRETURN e, v",
    "MATCH (v:player)\nWITH v.player.name AS Name\nORDER BY Name DESC\nLIMIT 3\nRETURN collect(Name)",
    "MATCH (v)\nWHERE id(v)==\"player100\"\nWITH labels(v) AS tags_unf\nUNWIND tags_unf AS tags_f\nRETURN tags_f",
    "MATCH (v)-[e:serve]->()\nWHERE id(v)==\"player100\"\nRETURN labels(v)",
    "MATCH (v:player{name:\"Giannis Antetokounmpo\"}) RETURN v.name AS vname",
    "MATCH p=(v)-[e*1]->(v2) WHERE id(v) IN [\"Tom\"] RETURN p",
    "MATCH (v:player) RETURN max(v.player.age)",
    "MATCH (:player{name:\"Tim Duncan\"})<-[e:like*2..3{likeness: 90}]-(v)\nRETURN e, v",
    "MATCH (v:player {name: \"DeAndre Jordan\"}) RETURN v",
    "MATCH p = (n)-[:like]->()-[:like]->()\nWHERE id(n) == \"LeBron James\"\nRETURN *",
    "MATCH (n)-[e:like*2..3{likeness: 90}]-(v)\nWHERE id(n) == \"Tim Duncan\"\nRETURN e, v",
    "MATCH p=(v:player{name:\"Tim Duncan\"})-->(v2)\nRETURN relationships(p)",
    "MATCH (v:player)-[:like]->(t) WHERE v.player.name==\"Tim Duncan\" RETURN v.player.name, t.errortag.name, properties(v), t",
    "MATCH (:player{name:\"Tracy McGrady\"})-[e:like*1{likeness: 90}]->(v)\nRETURN e, v",
    "MATCH (n)<-[e:like*2..3{likeness: 90}]-(v)\nWHERE id(n) == \"Tim Duncan\"\nRETURN e, v",
    "MATCH (v:player{name:\"Tony Parker\"})\nWITH v AS a\nMATCH p=(o:player{name:\"Tim Duncan\"})-[]->(a)\nRETURN o.player.name",
    "MATCH (:player{name:\"Tracy McGrady\"})-[e:like*0{likeness: 90}]-(v)\nRETURN e, v",
    "MATCH (v:player{name:\"Tim Duncan\"}) --> (v2)\nRETURN v2.player.name AS Name, v2.player.age AS Age\nORDER BY Age DESC SKIP 1",
    "MATCH (v:player{name:\"Tim Duncan\"})-[e:follow{degree:95}]->(v2)\nRETURN e",
    "MATCH p=(v:player{name:\"Tim Duncan\"})-[e:follow*]->(v2)\nRETURN v2 AS Friends",
    "MATCH (v:player{name:\"Tim Duncan\"})-->(v2:player)\nRETURN v2.player.name AS Name",
    "MATCH (n)-[e:like*2..3]-(v)\nWHERE id(n) == \"Tim Duncan\"\nRETURN e, v",
    "MATCH (:player{name:\"Tim Duncan\"})-[e:serve*2..3{start_year: 2000}]->(v)\nRETURN e, v",
    "MATCH (v:player)-[e:like]->(v2) WHERE none_direct_dst(e) IN [\"Tony Parker\", \"Tim Duncan\"] RETURN *\nMINUS\nMATCH (v:player)-[e:like]->(v2) WHERE id(v2) IN [\"Tony Parker\", \"Tim Duncan\"] RETURN *",
    "match (v1)-->(v2:player)-->(v3) where v2.player.name==\"Shaquille O'Neal\"\n  return properties(v1).name,properties(v2).age as age,properties(v3).name AS name\n  order by name limit 1;",
    "MATCH (:player{name:\"Tracy McGrady\"})-[e:serve|like*0..1]->(v)\nRETURN e, v",
    "MATCH (v:player)\nWHERE v.player.name STARTS WITH \"t\"\nRETURN v.player.name, v.player.age",
    "MATCH (v)\nRETURN v.person.name LIMIT 3",
    "MATCH (:player{name: \"Tim Duncan\"})-[e:like*2..3]->(v)\nRETURN e, v",
    "MATCH p=(v:player{name:\"Tim Duncan\"})-[e:follow*2]->(v2)\nRETURN DISTINCT v2 AS Friends",
    "MATCH (v1) -[r]-> (v2)\nWHERE id(v1) == \"LeBron James\"\nRETURN type(r) AS Type, v2.team.name AS Name",
    "MATCH (:player{name:\"Tracy McGrady\"})-[e:serve|like*0..1{likeness: 90}]->(v)\nRETURN e, v",
    "MATCH (v)-[:serve]->(t)\nWHERE (NOT NOT id(v) == 'Paul Gasol') AND id(v) == 'Paul Gasol'\nRETURN v.player.name AS Name, t.team.name AS Team",
    "MATCH () --> (v) --> () RETURN count(*)",
    "MATCH (v:player{name:\"Tim Duncan\"}) --> (v2)\nRETURN v2.player.name AS Name, v2.player.age AS Age\nORDER BY Age DESC SKIP 1+1",
    "MATCH (v:player)\nWHERE v.player.name ENDS WITH \"r\"\nRETURN v.player.name, v.player.age",
    "MATCH (v:player{name:\"Tim Duncan\"}) RETURN v",
    "MATCH p = shortestPath( (a:player{age:30})-[e*..5]->(b:team) )\n  WHERE length(p) == 1\n  RETURN p",
    "MATCH p2=(:player{name:\"Tim Duncan\"})-[e:like*1..2]-(:player{name:\"Tim Duncan\"})\nRETURN e.likeness AS e1",
    "MATCH (n:player)\nRETURN n.player.age as age, count(*) as number\nORDER BY number DESC, age DESC",
    "MATCH ()-[e]->()\nWITH e, properties(e) as props, keys(properties(e)) as kk\nLIMIT 10000 WHERE [i in kk where props[i] == 90]\nRETURN e",
    "MATCH (v:player{name:\"Tim Duncan\"}) -[e]- (v2)\nRETURN count(e)",
    "match (v0:player)-[e0]->(v1) where id(v0) == \"Tim Duncan\" unwind e0.start_year as a return avg(a)",
    "MATCH (v:player)-[e:like]->(t) WHERE v.player.name=='Carmelo Anthony'  RETURN v.player.name, v.player.age",
    "MATCH (v:player{name:\"Tony Parker\"})--(v2:player)\nRETURN v2.player.name, v2.player.age",
    "MATCH p = allShortestPaths( (a:player)-[e:serve*..3]-(b:team) )\n  WHERE a.player.name == 'Tim Duncan' AND b.team.name == 'Spurs'\n  RETURN p",
    "MATCH p = (n)<-[:like]-(m)\nWHERE id(n) == \"LeBron James\"\nRETURN p, n.player.name, m.player.name",
    "MATCH (v1) -[r]-> (v2)\nWHERE id(v1) == \"LeBron James\"\nRETURN type(r) AS Type, CASE WHEN v2.team.name IS NOT NULL THEN v2.team.name WHEN v2.player.name IS NOT NULL THEN v2.player.name END AS Name",
    "MATCH (a:player)\nWHERE id(a)=='Tim Duncan'\nMATCH (a)-[:like]-(b)\nRETURN count(*) AS cnt",
    "MATCH (v:player{name:\"Tim Duncan\"})-[e]->(t)\nWHERE (v)-[e]->(t:team)\nRETURN (v)-->()",
    "MATCH p=(v:player{name:\"Tim Duncan\"})-->(v2)\nRETURN p",
    "MATCH p=(v:player{name:\"Tim Duncan\"})-[e:follow*0..3]->(v2:player)\nRETURN DISTINCT v2 AS Friends, count(v2)",
    "MATCH (v1)-[:like]->(v2:player)-[:serve]->(v3)\nWHERE id(v3) == 'Spurs'\nRETURN COUNT(*)",
    "MATCH (v:player)-[e:follow]->(v2)\nWHERE id(v) ==\"player102\"\nRETURN id(v2) AS id\nMINUS\nMATCH (v:player)-[e:follow]->(v2)\nWHERE id(v) ==\"player100\"\nRETURN id(v2) AS id",
    "MATCH (v:player)-->(v2:player)\nWITH DISTINCT v2 AS v2, v2.player.age AS Age\nORDER BY Age\nWHERE Age<25\nRETURN v2.player.name AS Name, Age",
    "match ()-[e]->()\nwhere rank(e) == 0\nRETURN rank(e)\nlimit 3",
    "MATCH p=(v:player{name:\"Tim Duncan\"})-->(v2)\nRETURN nodes(p)",
    "MATCH (v:player)\nWHERE v.player.name>\"Grant Hill\" and  v.player.name<=\"Yao Ming\"\nRETURN v",
    "MATCH (:player{name:\"Tracy McGrady\"})-[e:like{likeness: 90}]->(v)\nRETURN e, v",
    "MATCH (v:player {name: \"Yao Ming\"})-[:serve*2..3]->() RETURN v.player.name",
    "MATCH p=(v:player{name:\"Tim Duncan\"})-[e:follow*1..3]->(v2:player)\nRETURN DISTINCT v2 AS Friends, count(v2)",
    "MATCH (:player{name: \"Tim Duncan\"})-[e:like*2..3]-(v)\nRETURN COUNT(1)",
    "MATCH (:player{name: \"Tim Duncan\"})-[e:like*2..3]-(v)\nRETURN count(v)",
    "MATCH (v:player{name:\"Tim Duncan\"})--(v2)\nRETURN\nCASE WHEN v2.team.name IS NOT NULL\nTHEN v2.team.name\nWHEN v2.player.name IS NOT NULL\nTHEN v2.player.name END AS Name",
    "match (v:player) where id(v)==\"Carmelo Anthony\" return properties(v).age;",
    "MATCH (v:player) WHERE [t in [v] | (v)-[:like]->(t)] RETURN v.player.name AS name",
    "MATCH (v:player{name: 'Tim Duncan'})-[e]->() RETURN type(e), count(*)",
    "MATCH (n)-[e:serve*2..3]->(v)\nWHERE id(n) == \"Tim Duncan\"\nRETURN e, v",
    "UNWIND [\"Tony Parker\", \"Tim Duncan\", \"Yao Ming\"] AS a MATCH (v:player) WHERE v.player.name == a RETURN distinct a, v",
    "MATCH (v1) -[:like]-> (v)\nWHERE id(v1) == 'Dejounte Murray'\nRETURN v.player.name AS Name, v.player.age AS Age\nORDER BY Age DESC, Name ASC\nLIMIT 0",
    "match (v:player{age: 1+19}) RETURN v",
    "MATCH (a:player)-[b:serve]-(c:team{name: \"Lakers\"})\nWHERE a.player.age > 45\nRETURN  concat(a.player.name, \"hello\")",
    "MATCH (:player{name: \"Tim Duncan\"})-[e1:like]->()-[e2:serve*0..3]->()<-[e3:serve]-(v)\nRETURN count(v)",
    "match ()-[e]->()\nwhere abs(rank(e)) == 1 and e.start_year == 2016\nRETURN e\nlimit 1000",
    "MATCH (:player{name:\"Tracy McGrady\"})-[e:like*0..1{likeness: 90}]->(v)\nRETURN e, v",
    "MATCH p = (n)-[:like]->(m)-[:like]->(k)\nWHERE id(n) == \"LeBron James\"\nRETURN p, n.player.name, m.player.name, k.player.name",
    "MATCH (n)-[e:serve|like*2..3{likeness: 90}]->(v)\nWHERE id(n) == \"Tim Duncan\"\nRETURN e, v",
    "MATCH (v:player) UNWIND (v)-[:teammate]->() AS p RETURN p",
    "MATCH p=(v:player{name:\"Tim Duncan\"})-[e:follow*1..]->(v2)\nRETURN v2 AS Friends",
    "MATCH (v:player{name:\"Tim Duncan\"}) -[*0]-> (v2)\nRETURN v2",
    "MATCH (v1) -[:like]-> (v)\nWHERE id(v1) == 'Dejounte Murray'\nRETURN v.player.name AS Name, v.player.age AS Age\nORDER BY Age DESC, Name ASC\nSKIP 11\nLIMIT 3",
    "MATCH (:player{name:\"Tim Duncan\"})-[e:serve|like*2..3]-(v)\nRETURN COUNT(e)",
    "MATCH (v)\nWHERE id(v) IN ['James Harden', 'Jonathon Simmons', 'Klay Thompson', 'Dejounte Murray', 'Paul Gasol']\n      AND (id(v) == 'James Harden' OR v.player.age == 23)\nRETURN v.player.name AS Name",
    "match (player)-[s:serve]->(team) where s.start_year == 2001 return player.player.name AS player, team.team.name AS team",
    "MATCH (:player{name:\"Tim Duncan\"})-[e:serve|like*2..3{start_year: 2000}]-(v)\nRETURN e, v",
    "MATCH (:player{name:\"Tracy McGrady\"})-[e:serve*0..1{start_year: 2000}]-(v)\nRETURN e, v",
    "MATCH (n)-[e:serve*2..3{start_year: 2000}]-(v)\nWHERE id(n) == \"Tim Duncan\"\nRETURN e, v",
    "MATCH (n)-[e:serve|like*2..3{likeness: 90}]-(v)\nWHERE id(n) == \"Tim Duncan\"\nRETURN e, v",
    "MATCH (:player{name:\"Tim Duncan\"})-[e:like*2..3]->()\nRETURN *",
    "MATCH (:player{name:\"Tracy McGrady\"})-[e:like*0..1]-(v)\nRETURN e, v",
    "MATCH (v:player{name: \"abc\"}) -[:serve*1..3]-> ()\nRETURN *",
    "MATCH p = (n)-[:like]->(m)\nWHERE id(n) == \"LeBron James\"\nRETURN p, n.player.name, m.player.name",
    "MATCH (v:player)\nWITH v.player.name AS n\nRETURN n ORDER BY n LIMIT 3\nUNION ALL\nUNWIND [\"Tony Parker\", \"Ben Simmons\"] AS n\nRETURN n",
    "match (src_v:player{name:\"Manu Ginobili\"})-[e*2]-(dst_v)\n  return properties(src_v).sex,properties(e[0]).degree as degree,properties(dst_v).name as name,src_v.player.age AS age, e[1].start_year,dst_v.player.age\n  order by degree, name, age limit 5;",
    "MATCH (v) -[e:follow*1..2]->(v2)\nWHERE id(v) == \"player100\"\nRETURN id(v2) AS destination",
    "MATCH (v1) -[:like]-> (v2)\nWHERE id(v1) == \"Danny Green\"\nRETURN v1.player.name AS Name, v2.player.name AS Friend",
    "match (v:player) where id(v)==\"Carmelo Anthony\" return properties(v).age,v.player.sex;",
    "MATCH (:player{name: \"Vince Carter\"})-[e1:like]->()-[e2:serve*0..3]->()<-[e3:serve]-(v)\nRETURN count(v)",
    "MATCH (v:player)-[e]->()\nWHERE e.start_year < 2000\nRETURN DISTINCT v.player.name, v.player.age",
    "MATCH(n:player)\n  RETURN id(n) AS id,\n         count(n) AS count,\n         sum(floor(n.player.age)) AS sum,\n         max(n.player.age) AS max,\n         min(n.player.age) AS min,\n         avg(distinct n.player.age)+1 AS age,\n         labels(n) AS lb\n    ORDER BY id, count, max, min\n    SKIP 10 LIMIT 8;",
    "match (v1)-->(v2:player)-->(v3) where v2.player.name==\"Shaquille O'Neal\"\n  return properties(v1).name,properties(v2).age as age,properties(v3).name AS name,v2.player.sex,v1.player.age\n  order by age, name limit 1;",
    "MATCH (n)-[e:like*2..3{likeness: 90}]->(v)\nWHERE id(n) == \"Tim Duncan\"\nRETURN e, v",
    "MATCH (v)\nWHERE id(v) == 'Tim Duncan'\nRETURN v.player.name AS Name",
    "match (src_v:player{name:\"Manu Ginobili\"})-[e]-(dst_v)\n  return properties(src_v).age,properties(e).degree,properties(dst_v).name AS name,src_v.player.sex,e.start_year,dst_v.player.age\n  order by name limit 3;",
    "MATCH (:player{name:\"Tim Duncan\"})-[e:serve|like*2..3]-(v)\nRETURN COUNT(1)",
    "MATCH (v:player{name:\"Tim Duncan\"})-[e:follow|:serve]->(v2)\nRETURN e",
    "MATCH (v:player{name: 'Rudy Gay'})-[e]->() RETURN type(e), count(*)",
    "MATCH (v1:player{name: \"LeBron James\"}) -[r]-> (v2)\nRETURN type(r) AS Type, CASE WHEN v2.tea.name IS NOT NULL THEN v2.tea.name WHEN v2.playe.name IS NOT NULL THEN v2.playe.name ELSE \"abc\" END AS Name",
    "MATCH (v1) -[:like]-> (v)\nWHERE id(v1) == 'Dejounte Murray'\nRETURN v.player.name AS Name, v.player.age AS Age\nORDER BY Age DESC, Name ASC\nSKIP 3\nLIMIT 3",
    "MATCH p = ()-[:like*2]->(v:player) WHERE id(v) == 'Grant Hill' RETURN p",
    "MATCH (:player{name:\"Kyrie Irving\"})-[e:serve|like*2..3]-(v)\nRETURN count(v)",
    "MATCH (v)\nWHERE id(v) != 'Paul Gasol'\nRETURN v.player.name AS Name",
    "MATCH (:player{name:\"Tracy McGrady\"})-[e:serve|like*0..1{start_year: 2000}]-(v)\nRETURN e, v",
    "MATCH (v:player{name:\"Tim Duncan\"})-[e]->(t) WHERE (v)-[e]->(t:team) RETURN (v)-->()",
    "MATCH (v:player) WITH (v)-[:teammate]->() AS p RETURN p",
    "MATCH p=(v:player{name:\"Tim Duncan\"})-[e:follow*2]->(v2)\nWHERE e[0].degree > 98\nRETURN DISTINCT v2 AS Friends",
    "MATCH (v:player)-[e:like]->(v2) WHERE none_direct_src(e) IN [\"Tony Parker\", \"Tim Duncan\"] RETURN *\nMINUS\nMATCH (v:player)-[e:like]->(v2) WHERE id(v) IN [\"Tony Parker\", \"Tim Duncan\"] RETURN *",
    "MATCH (v)<-[e:follow]- (v2)-[e2:serve]->(v3)\nWHERE id(v) =='player100'\nRETURN v2.player.name AS FriendOf, v3.team.name AS Team",
    "MATCH (v:player)-[e]-(v2)\nWHERE id(v)=='Marco Belinelli'\nRETURN v2",
    "MATCH (v:player {name: \"Yao Ming\"})-[:serve*1..3]->() RETURN v.player.name",
    "MATCH (:player{name:\"Tracy McGrady\"})-[e:serve|like{start_year: 2000}]->(v)\nRETURN e, v",
    "match (v:player) return properties(v).name AS name order by name limit 2;",
    "match p= (v:player)-[e:like*1..2]->(d) where v.player.age > 20 return e",
    "MATCH (v:player) RETURN std(v.player.age)",
    "MATCH p = (n)-[:like]-(m)\nWHERE id(n) == \"LeBron James\"\nRETURN p, n.player.name, m.player.name",
    "MATCH (v:player{name:\"Tim Duncan\"})-[]->(v2)<-[e:serve]-(v3)\nRETURN v2, v3",
    "MATCH p=(v:player{name:\"Tim Duncan\"})--()\nWITH nodes(p) AS n\nUNWIND n AS n1\nRETURN DISTINCT n1",
    "MATCH p= (v:player) -- (v2) WHERE id(v)==\"A\" RETURN p",
    "match (v:player{name:\"LaMarcus Aldridge\"}) return properties(v).age;",
    "MATCH (:player{name:\"Tracy McGrady\"})-[e:serve|like*0..1{start_year: 2000}]->(v)\nRETURN e, v",
    "MATCH (n)-[e:serve|like*2..3]->(v)\nWHERE id(n) == \"Tim Duncan\"\nRETURN e, v",
    "MATCH (v1) -[:like]-> (v)\nWHERE id(v1) == 'Dejounte Murray'\nRETURN v.player.name AS Name, v.player.age AS Age\nORDER BY Age DESCENDING, Name ASC\nSKIP 3",
    "MATCH p = shortestPath( (a:player{name:\"Tiago Splitter\"})-[e*..5]->(b:player{name:\"LaMarcus Aldridge\"}) )\n  WHERE length(p) > 2\n  RETURN  p",
    "match (v:player)-[e:like{likeness:-1}]->()  RETURN e",
    "MATCH (v1:player{name: \"LeBron James\"}) -[r:serve]-> (v2:team{name: \"Cavaliers\"})\nRETURN type(r) AS Type, v2.team.name AS Name",
    "MATCH (p)-[:serve*0..3]->(t) RETURN p",
    "match (v:player) where id(v)==\"Carmelo Anthony\" return v.player.age;",
    "MATCH (:player{name:\"Kyrie Irving\"})-[e:like*2..3]->()\nRETURN *",
    "MATCH (v:player)\nWHERE v.player.name CONTAINS \"Pa\"\nRETURN v.player.name, v.player.age",
    "MATCH (v:player)-[e]->(v2)\nWHERE v2.player.age < 25\nRETURN v2.player.name, v2.player.age",
    "MATCH (v1:player)-[:follow]-(v2:player)\nWHERE id(v1)== \"player101\"\nRETURN v2.player.name AS Name, count(*) as cnt ORDER BY cnt DESC",
    "MATCH ()-[e:follow]->()\nRETURN e\nlimit 3",
    "MATCH (v:player)\nWHERE v.player.age IN range(20,25)\nRETURN v.player.name, v.player.age",
    "MATCH (:player{name:\"Tracy McGrady\"})-[e:serve|like*0..1]-(v)\nRETURN e, v",
    "MATCH (v)\nWHERE id(v) IN ['James Harden', 'Jonathon Simmons', 'Klay Thompson', 'Dejounte Murray', 'Paul Gasol']\n      AND true\nRETURN v.player.name AS Name",
    "MATCH (v:player)-[e:like]->(v2)\nWHERE id(v) == \"Tim Duncan\"\nRETURN DISTINCT properties(e) as props, e",
    "MATCH (v:player{name:\"Tim Duncan\"}) --> (v2)\nRETURN v2.player.name AS Name, v2.player.age AS Age\nORDER BY Age DESC SKIP 1 LIMIT 1",
    "MATCH (v1) -[:like]-> (v)\nWHERE id(v1) == 'Dejounte Murray'\nRETURN v.player.name AS Name, v.player.age AS Age\nORDER BY Age DESC, Name ASC\nLIMIT 3",
    "match (src_v)-[e:like|serve]->(dst_v)-[e2]-(dst_v2) where  id(src_v)==\"Rajon Rondo\" return properties(e).degree1,properties(e).degree1,e2.a,dst_v.p.name,dst_v.player.sex1,properties(src_v).name2 limit 5;",
    "MATCH (v:player{name:\"Tim Duncan\"})-[e]->()\nRETURN keys(e)",
    "MATCH (v:team{name:\"Spurs\"})--(v2)\nRETURN v2 AS Player",
    "MATCH (n:player {name : \"Tim Duncan\"})-[]->(friend:player)-[]->(fof:player)\nRETURN count(fof), count(DISTINCT fof)",
    "MATCH (v:player)-[e:follow]->(v2)\nWHERE id(v) == \"player102\"\nRETURN id(v2) As id, e.degree As Degree, v2.player.age AS Age\nINTERSECT\nMATCH (v:player)-[e:follow]->(v2)\nWHERE id(v) == \"player100\"\nRETURN id(v2) As id, e.degree As Degree, v2.player.age AS Age",
    "MATCH (p1)-[:teammate]->(p2)\nRETURN p1.player.name, p2.player.name",
    "MATCH p=(v:player)-[]->(n)\nWHERE id(v)==\"Tim Duncan\" and n.player.age>30\nRETURN p LIMIT 100",
    "MATCH (v:player{name:\"Tony Parker\"}) RETURN v",
    "MATCH (n)-[e:like*2..3]->(v)\nWHERE id(n) == \"Tim Duncan\"\nRETURN e, v",
    "MATCH (:player{name:\"Tracy McGrady\"})-[e:like*0..1{likeness: 90}]-(v)\nRETURN e, v"
]