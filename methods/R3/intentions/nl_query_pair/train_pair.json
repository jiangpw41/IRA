[
    {
        "用户": "找出名为'Tim Duncan'的球员的所有为'follow'关系的1到3度好友，并返回这些好友及其数量。",
        "查询": "MATCH p=(v:player{name:\"Tim Duncan\"})-[e:follow*1..3]->(v2:player)\nRETURN DISTINCT v2 AS Friends, count(v2)"
    },
    {
        "用户": "查找名为'Tracy McGrady'的球员所服务或喜欢最多距离为1的实体，并返回这些关系和实体。",
        "查询": "MATCH (:player{name:\"Tracy McGrady\"})-[e:serve|like*0..1]-(v)\nRETURN e, v"
    },
    {
        "用户": "请帮我删除 'Tim Duncan' 和 'Tony Parker' 的 'player' 标签。",
        "查询": "DELETE TAG player FROM \"Tim Duncan\", \"Tony Parker\";"
    },
    {
        "用户": "您好，请帮我找出以 'Russell Westbrook' 为起点，通过所有边类型（包括反向边）能够到达的所有实体，并返回这些实体在 like、serve、teammate 属性中的目标实体 ID。",
        "查询": "GO FROM \"Russell Westbrook\" OVER * REVERSELY YIELD like._dst, serve._dst, teammate._dst"
    },
    {
        "用户": "查看和糖尿病相关的所有信息？",
        "查询": "GET SUBGRAPH 1 STEPS FROM \"糖尿病\" YIELD VERTICES AS nodes, EDGES AS all_edges;"
    },
    {
        "用户": "您好，请帮我查找一下以 'Russell Westbrook' 为起点，通过所有边类型（包括反向边）能够到达的所有实体，并返回这些实体在 like、serve、teammate 边中的目标实体 ID。",
        "查询": "GO FROM \"Russell Westbrook\" OVER * REVERSELY YIELD like._dst, serve._dst, teammate._dst"
    },
    {
        "用户": "Please read the variable_ Set only to true.",
        "查询": "SET VARIABLES read_only=true"
    },
    {
        "用户": "Can you help me find all the query statements?",
        "查询": "SHOW QUERIES"
    },
    {
        "用户": "Returns the age attribute of a player named 'LaMarcus Aldridge'.",
        "查询": "match (v:player{name:\"LaMarcus Aldridge\"}) return properties(v).age;"
    },
    {
        "用户": "找出名为'Tim Duncan'的球员所服务或喜欢的所有实体，包括2-3度关系，返回实体数量。",
        "查询": "MATCH (:player{name:\"Tim Duncan\"})-[e:serve|like*2..3]-(v)\nRETURN COUNT(1)"
    },
    {
        "用户": "Hello, please help me find the entities and relationships related to 'Tim Duncan' at a distance of 2 to 3.",
        "查询": "MATCH (n)-[e:serve|like*2..3]->(v)\nWHERE id(n) == \"Tim Duncan\"\nRETURN e, v"
    },
    {
        "用户": "Find all entities that Boris Diaw likes and delete their relationships with Boris Diaw.",
        "查询": "GO FROM \"Boris Diaw\" OVER like YIELD like._dst as id | DELETE VERTEX $-.id WITH EDGE"
    },
    {
        "用户": "Please help me find all the relationships between a player named 'Tim Duncan' and other entities, and return the properties of these relationships.",
        "查询": "MATCH (v:player{name:\"Tim Duncan\"})-[e]->()\nRETURN keys(e)"
    },
    {
        "用户": "Starting from 'Tim Duncan' and 'Tony Parker' respectively, identify all entities they play for, return the player's name, the year they started serving, and the name of the team they served, and finally return all results",
        "查询": "$var = GO FROM \"Tim Duncan\" OVER serve YIELD $^.player.name, serve.start_year, $$.team.name\nUNION ALL\nGO FROM \"Tony Parker\" OVER serve YIELD $^.player.name, serve.start_year, $$.team.name;\nYIELD $var.*"
    },
    {
        "用户": "Identify all entities that 'player101' is interested in and return the source and target nodes of these entities.",
        "查询": "$var = GO FROM \"player101\" OVER follow\nYIELD src(edge) AS s, dst(edge) AS d"
    },
    {
        "用户": "嘿，你好！我想从 'Tim Duncan' 开始，沿着 'serve' 关系向外扩展10000000000000步，能帮我返回经过的所有边的终点实体吗？",
        "查询": "GO 10000000000000 STEPS FROM \"Tim Duncan\" OVER serve YIELD dst(edge) as dst"
    },
    {
        "用户": "请帮我从实体'player101'开始，通过边'serve'往外延伸一步，返回所有顶点和边。",
        "查询": "GET SUBGRAPH WITH PROP 1 STEPS FROM \"player101\" OUT serve YIELD VERTICES AS nodes, EDGES AS relationships"
    },
    {
        "用户": "找出 'Russell Westbrook' 的实体所 '喜欢' 的所有实体，并返回这些实体的 ID。",
        "查询": "GO FROM \"Russell Westbrook\" OVER like YIELD like._dst"
    },
    {
        "用户": "请帮我找出名为'Tim Duncan'的球员与其他实体之间的所有关系，并返回这些关系的属性。",
        "查询": "MATCH (v:player{name:\"Tim Duncan\"})-[e]->()\nRETURN keys(e)"
    },
    {
        "用户": "您好，请帮我查找一下学号为1的学生，我需要知道他的ID和年龄。",
        "查询": "LOOKUP ON student WHERE student.number == 1 YIELD id(vertex) as name, student.age"
    },
    {
        "用户": "Create a label named team that contains a string attribute named name.",
        "查询": "CREATE TAG team(name string)"
    },
    {
        "用户": "Find all entities associated with a player named 'Tim Duncan' and sort them by their age, returning their name and age.",
        "查询": "MATCH (v:player{name:\"Tim Duncan\"}) --> (v2)\nRETURN v2.player.name AS Name, v2.player.age AS Age\nORDER BY Age"
    },
    {
        "用户": "Find the names of all players and sort them in descending alphabetical order to return the names of the first three players.",
        "查询": "MATCH (v:player)\nWITH v.player.name AS Name\nORDER BY Name DESC\nLIMIT 3\nRETURN collect(Name)"
    },
    {
        "用户": "请找出年龄大于等于42岁的'player100'所关注的所有实体，并将这些实体的信息返回给我。",
        "查询": "GO FROM \"player100\" OVER follow\nWHERE $^.player.age >= 42\nYIELD dst(edge)"
    },
    {
        "用户": "请展示一下任务25的信息。",
        "查询": "SHOW JOB 25"
    },
    {
        "用户": "找出从 'Yao Ming' 到 'Danny Green' 的所有路径，三步之内，路径上的边必须满足 '喜欢' 属性为空或大于等于80，最多3步，返回路径和起始节点。",
        "查询": "FIND ALL PATH WITH PROP FROM \"Yao Ming\" TO \"Danny Green\" OVER * BIDIRECT\nWHERE like.likeness is  EMPTY OR like.likeness >= 80 UPTO 3 STEPS YIELD path as p |\nYIELD startnode($-.p) as startnode"
    },
    {
        "用户": "Hello, I would like to search for information about 'Tim Duncan', specifically about his' likes' and 'services'. Can you help me identify all related entities with a distance of 2 and their relationships?",
        "查询": "GET SUBGRAPH WITH PROP 2 STEPS FROM 'Tim Duncan' IN like, serve YIELD EDGES as relationships"
    },
    {
        "用户": "Set edge on edge_ 1_ Create an index on TTL with the attribute start_ Time.",
        "查询": "CREATE EDGE INDEX edge_1_ttl_index_second_start_time ON edge_1_ttl(start_time)"
    },
    {
        "用户": "Returns the age of the oldest player among all players.",
        "查询": "MATCH (v:player) RETURN max(v.player.age)"
    },
    {
        "用户": "您好，请帮我查找一下，从'Tim Duncan'这个人开始，沿着'喜欢'这个关系，向两个方向扩展4步，然后把所有的实体和关系都返回给我好吗？",
        "查询": "GET SUBGRAPH 4 steps from 'Tim Duncan' BOTH like YIELD VERTICES as nodes, EDGES as relationships"
    },
    {
        "用户": "Identify all entities and relationships that have a 2-3 hop 'like' relationship with entity 'Tim Duncan'.",
        "查询": "MATCH (n)-[e:like*2..3]->(v)\nWHERE id(n) == \"Tim Duncan\"\nRETURN e, v"
    },
    {
        "用户": "Hey, hello! Can you help me check and find a player named 'Grant Hill' and tell me his name and age?",
        "查询": "FETCH PROP ON player \"Grant Hill\" YIELD player.name, player.age"
    },
    {
        "用户": "嘿，你好！我需要找出所有曾经为'Thunders'提供服务的实体，然后返回它们的源节点、边上的标签、边的ID、目标节点以及目标节点的ID。你能帮我完成这个任务吗？",
        "查询": "GO FROM 'Thunders' OVER serve REVERSELY YIELD $^ as src,tags($^), id($^), id($$), $$ as dst"
    },
    {
        "用户": "Hello, could you please help me find the IDs of all entities in type t1 where col4 is' banana 'and col3 is true?",
        "查询": "LOOKUP ON t1 WHERE t1.col4 == \"banana\" AND t1.col3 == true YIELD id(vertex) as id"
    },
    {
        "用户": "查找所有 '喜欢' 关系中，亲密度大于89的边，并返回这些边的源节点、目标节点和权重。",
        "查询": "LOOKUP ON like where like.likeness > 89 YIELD src(edge) as src, dst(edge) as dst, rank(edge) as rank"
    },
    {
        "用户": "Please help me return the time of 12:31 minutes, 14 seconds, 111 milliseconds, 222 microseconds.",
        "查询": "WITH time({hour: 12, minute: 31, second: 14, millisecond:111, microsecond: 222}) AS d RETURN d"
    },
    {
        "用户": "将边edge_1_ttl的过期时间修改为100，并将过期策略设置为degree。",
        "查询": "ALTER edge edge_1_ttl ttl_duration = 100, ttl_col = \"degree\""
    },
    {
        "用户": "找出名为'Tony Parker'的球员。",
        "查询": "MATCH (v:player{name:\"Tony Parker\"}) RETURN v"
    },
    {
        "用户": "Obtain the name and age of player 'Tim Duncan'.",
        "查询": "FETCH PROP ON player \"Tim Duncan\" YIELD player.name, player.age"
    },
    {
        "用户": "找出所有球员的名字，并按照字母降序排序，返回前三个球员的名字。",
        "查询": "MATCH (v:player)\nWITH v.player.name AS Name\nORDER BY Name DESC\nLIMIT 3\nRETURN collect(Name)"
    },
    {
        "用户": "Returns the student entity ID with alias' abc '.",
        "查询": "LOOKUP ON student WHERE student.alias == \"abc\" YIELD id(vertex) as id"
    },
    {
        "用户": "Identify all entities that have a 2-3 hop 'like' relationship with 'Tim Duncan' and return these relationships and entities.",
        "查询": "MATCH (n)-[e:like*2..3]->(v)\nWHERE id(n) == \"Tim Duncan\"\nRETURN e, v"
    },
    {
        "用户": "插入两个顶点，一个顶点的ID为team203，名称为'Trail Blazers'，另一个顶点的ID为team204，名称为'Spurs'。",
        "查询": "INSERT VERTEX team(name) VALUES \"team203\":(\"Trail Blazers\"), \"team204\":(\"Spurs\")"
    },
    {
        "用户": "Find all the entities that Tracy McGrady likes and return their IDs.",
        "查询": "GO FROM \"Tracy McGrady\" OVER like YIELD like._dst"
    },
    {
        "用户": "Find the name and age of the entity corresponding to players under the age of 25.",
        "查询": "MATCH (v:player)-[e]->(v2)\nWHERE v2.player.age < 25\nRETURN v2.player.name, v2.player.age"
    },
    {
        "用户": "查找名为'Tony Parker'的球员的姓名和年龄。",
        "查询": "LOOKUP ON player WHERE player.name == \"Tony Parker\"\nYIELD properties(vertex).name AS name, properties(vertex).age AS age"
    },
    {
        "用户": "Hello, please help me search for relationships. Starting from 'Russell Westbrook', go through up to two steps, traverse all entities and relationships, and then filter out entities older than 20 and return their information. Thank you!",
        "查询": "GO 1 TO 2 STEPS FROM 'Russell Westbrook' OVER * where properties($$).age > 20 YIELD $$ as dst"
    },
    {
        "用户": "获取实体类型为player或t1，标识为player100的实体的属性，并返回该实体的顶点信息。",
        "查询": "FETCH PROP ON player, t1 \"player100\" YIELD vertex AS v"
    },
    {
        "用户": "请使用<your_graph_space>图空间帮助我。",
        "查询": "USE <your_graph_space>"
    },
    {
        "用户": "Create an edge follow containing an integer attribute degree.",
        "查询": "CREATE EDGE follow(degree int)"
    },
    {
        "用户": "Obtain all attributes of entity 'player101'.",
        "查询": "FETCH PROP ON player \"player101\" YIELD properties(vertex)"
    },
    {
        "用户": "Identify entities that 'Tim Duncan' and 'Chris Paul' like, and then identify their relationships and attributes with other entities, excluding edges and attributes related to 'Tim Duncan' and 'Chris Paul'.",
        "查询": "$var = GO FROM 'Tim Duncan', 'Chris Paul' OVER like YIELD $^.player.name AS name, id($$) AS id;\nGO FROM $var.id OVER like  WHERE $var.name != $$.player.name YIELD $var.name, properties(edge) as props"
    },
    {
        "用户": "Obtain the relationship properties of 'Tony Parker' liking 'Tim Duncan' and 'Grant Hill' liking 'Tracy McGrady' and return these properties.",
        "查询": "FETCH PROP ON like \"Tony Parker\"->\"Tim Duncan\", \"Grant Hill\" -> \"Tracy McGrady\" YIELD edge as e |\nYIELD properties($-.e)"
    },
    {
        "用户": "Find all players whose names include Pa and return their names and ages.",
        "查询": "MATCH (v:player)\nWHERE v.player.name CONTAINS \"Pa\"\nRETURN v.player.name, v.player.age"
    },
    {
        "用户": "Create an index on the student tab with the attribute 'teacher' and a length of 10.",
        "查询": "CREATE TAG INDEX student_teacher ON student(teacher(10))"
    },
    {
        "用户": "Please help me use space2 space.",
        "查询": "USE space2"
    },
    {
        "用户": "Insert a player entity named 'David West' and aged 38, with the logo 'player111'.",
        "查询": "INSERT VERTEX player(name,age) VALUES \"player111\":(\"David West\", 38)"
    },
    {
        "用户": "如果标签t1不存在，则创建一个包含字符串类型字段a和整数类型字段b的标签。",
        "查询": "CREATE TAG IF NOT EXISTS t1(a string, b int)"
    },
    {
        "用户": "找出名为'Tim Duncan'的球员所关注或服务的所有实体，并返回这些关系。",
        "查询": "MATCH (v:player{name:\"Tim Duncan\"})-[e:follow|:serve]->(v2)\nRETURN e"
    },
    {
        "用户": "Find all the following relationship paths for a player named 'Tim Duncan' and return the friend nodes on the path.",
        "查询": "MATCH p=(v:player{name:\"Tim Duncan\"})-[e:follow*]->(v2)\nRETURN v2 AS Friends"
    },
    {
        "用户": "Please help me submit an assignment called INGEST.",
        "查询": "SUBMIT JOB INGEST"
    },
    {
        "用户": "Hello, could you please help me find the source node, target node, and weight of 'Boris Diaw' service relationship in 'Spurs'?",
        "查询": "FETCH PROP ON serve 'Boris Diaw'->\"Spurs\" YIELD serve._src, serve._dst, serve._rank"
    },
    {
        "用户": "找出从 'Tim Duncan' 到 'Tony Parker' 的所有路径，路径上包含 '喜欢' 属性的关系，最多包含三个步骤，并返回这些路径上的所有关系。",
        "查询": "FIND ALL PATH WITH PROP FROM \"Tim Duncan\" TO \"Tony Parker\" OVER like UPTO 3 STEPS YIELD path as p |\nYIELD relationships($-.p) as relationships"
    },
    {
        "用户": "双向查找从Tim Duncan到Yao Ming之间，满足喜欢程度在80到90之间或是2001年后的队友的所有路径，最多3步，并返回这些路径。",
        "查询": "FIND ALL PATH WITH PROP FROM \"Tim Duncan\" TO \"Yao Ming\" OVER * BIDIRECT\nWHERE (like.likeness >= 80 and like.likeness <= 90) OR (teammate.start_year is not EMPTY and teammate.start_year > 2001) UPTO 3 STEPS YIELD path as p"
    },
    {
        "用户": "得了白血病的治愈概率是多少？",
        "查询": "LOOKUP ON disease WHERE disease.name == \"白血病\" YIELD properties(vertex).cured_prob"
    },
    {
        "用户": "Find all entities that 'player101' is interested in and return their IDs.",
        "查询": "$var = GO FROM \"player101\" OVER follow YIELD dst(edge) AS id"
    },
    {
        "用户": "Hello, please help me find out which teams Boris Diaw has worked for since 2005, and tell me Boris Diaw's name, starting year, team name, and 123.",
        "查询": "$var = GO FROM \"Boris Diaw\" OVER serve YIELD $^.player.name as name, serve.start_year as start, $$.team.name as team;YIELD $var.*, 123 as hash WHERE $var.start > 2005"
    },
    {
        "用户": "返回1+1的结果。",
        "查询": "RETURN 1+1"
    },
    {
        "用户": "Obtain the grade and number attributes of the student named 'Amber'.",
        "查询": "FETCH PROP ON student \"Amber\" YIELD student.grade, student.number"
    },
    {
        "用户": "Hello, could you please help me find the shortest path from 'Tiago Splitter' to 'LaMarcus Aldridge', with a path length of less than 5, and return all entities and relationships on the path to me?",
        "查询": "MATCH p = shortestPath( (a:player{name:\"Tiago Splitter\"})-[e*..5]->(b:player{name:\"LaMarcus Aldridge\"}) ) RETURN  p"
    },
    {
        "用户": "Please help me find the shortest path from 'team204' to 'player100' and provide me with detailed information about that path.",
        "查询": "FIND SHORTEST PATH WITH PROP FROM \"team204\" TO \"player100\" OVER * REVERSELY YIELD path AS p"
    },
    {
        "用户": "获取从'player100'到'team204'的'serve'关系上的起始年份属性。",
        "查询": "FETCH PROP ON serve \"player100\" -> \"team204\"\nYIELD properties(edge).start_year"
    },
    {
        "用户": "Please help me identify all entities that 'player102' is interested in and return the edges between these entities.",
        "查询": "GO 2 STEPS FROM \"player102\" OVER follow YIELD dst(edge)"
    },
    {
        "用户": "Hey, can you help me join a student named Bob? I need his age, alias, name, and teacher information.",
        "查询": "INSERT VERTEX\n  student(age, alias, name, teacher)\nVALUES\n  \"Bob\" : (28, \"abc\", \"Bob\", \"Candy\")"
    },
    {
        "用户": "找出 'Tim Duncan' 所 '喜欢' 的实体的 ID 和该实体对应的球员年龄，统计去重后的年龄大于40的实体数量并返回。",
        "查询": "GO FROM \"Tim Duncan\" OVER like YIELD like._dst AS dst, $$.player.age AS age\n| YIELD DISTINCT count(*) AS count where $-.age > 40"
    },
    {
        "用户": "找出从 'Tim Duncan' 到 'Tony Parker' 或 'Manu Ginobili' 的不重复路径，路径上的关系为 '喜欢'，最多包含3个步骤，并返回这些路径。",
        "查询": "FIND NOLOOP PATH FROM \"Tim Duncan\" TO \"Tony Parker\", \"Manu Ginobili\" OVER like UPTO 3 STEPS YIELD path as p"
    },
    {
        "用户": "Hello, please help me identify all relationships with a starting year of 2016 and a weight of 1, and return a maximum of 1000 relationships.",
        "查询": "match ()-[e]->()\nwhere abs(rank(e)) == 1 and e.start_year == 2016\nRETURN e\nlimit 1000"
    },
    {
        "用户": "嘿，我想从 'Tim Duncan' 开始，沿着 'serve' 关系向外扩展10步，能帮我返回所有扩展出的实体的 ID 吗？",
        "查询": "GO 10 STEPS FROM \"Tim Duncan\" OVER serve YIELD $$ as dst"
    },
    {
        "用户": "请帮我找到一个日期，该日期是公元前123年12月3日。",
        "查询": "RETURN DATE({year:-123, month:12, day:3})"
    },
    {
        "用户": "请帮我删除所有与'Tim Duncan'有关的团队标签。",
        "查询": "GO FROM \"Tim Duncan\" OVER serve YIELD serve._dst as id | DELETE TAG team FROM $-.id"
    },
    {
        "用户": "找出与 'Dejounte Murray' 有 '喜欢' 关系的实体，返回这些实体的姓名和年龄，并按年龄降序、姓名升序排序，返回第0条记录。",
        "查询": "MATCH (v1) -[:like]-> (v)\nWHERE id(v1) == 'Dejounte Murray'\nRETURN v.player.name AS Name, v.player.age AS Age\nORDER BY Age DESC, Name ASC\nLIMIT 0"
    },
    {
        "用户": "请问您能帮我查找与 'Tim Duncan' 有 '服务' 关系的所有实体，并返回它们的 ID 吗？",
        "查询": "YIELD \"Tim Duncan\" as vid | GO FROM $-.vid OVER serve YIELD serve._dst"
    },
    {
        "用户": "找出从 'Tim Duncan' 到 'Tony Parker' 或 'LaMarcus Aldridge' 的最短路径，路径为喜欢关系，最多经过3个步骤，并返回路径信息。",
        "查询": "FIND SHORTEST PATH FROM \"Tim Duncan\" TO \"Tony Parker\", \"LaMarcus Aldridge\" OVER like UPTO 3 STEPS YIELD path as p"
    },
    {
        "用户": "查找名为'Tracy McGrady'的球员所服务或喜欢最多距离为1的实体，并返回这些关系和实体。",
        "查询": "MATCH (:player{name:\"Tracy McGrady\"})-[e:serve|like*0..1]-(v)\nRETURN e, v"
    },
    {
        "用户": "Obtain the serve relationship from 'player100' to 'team204' and return the edge.",
        "查询": "FETCH PROP ON serve \"player100\" -> \"team204\" YIELD edge AS e"
    },
    {
        "用户": "返回'apple'是否以'app'结尾、是否以'e'结尾、是否以'E'结尾、是否以'b'结尾。",
        "查询": "RETURN'apple'ENDS WITH'app','apple'ENDS WITH'e','apple'ENDS WITH'E','apple'ENDS WITH'b'"
    },
    {
        "用户": "Delete all teams that 'player100' joined in '2021'.",
        "查询": "GO FROM \"player100\" OVER serve WHERE properties(edge).start_year == \"2021\" YIELD dst(edge) AS id | DELETE VERTEX $-.id"
    },
    {
        "用户": "Find all paths from 'Tim Duncan' to 'Tony Parker' that contain relationships with the 'like' attribute, up to three steps, and return all relationships on these paths.",
        "查询": "FIND ALL PATH WITH PROP FROM \"Tim Duncan\" TO \"Tony Parker\" OVER like UPTO 3 STEPS YIELD path as p |\nYIELD relationships($-.p) as relationships"
    },
    {
        "用户": "Find a player named 'Tony Parker'.",
        "查询": "MATCH (v:player{name:\"Tony Parker\"}) RETURN v"
    },
    {
        "用户": "请帮我找到从'player100'开始，经过最多3步的路径，返回终点实体的姓名和年龄。在第一跳时，只能选择1条边；第二跳时，可以选择2条边；第三跳时，可以选择3条边。",
        "查询": "GO 3 STEPS FROM \"player100\"\nOVER *\nYIELD properties($$).name AS NAME, properties($$).age AS Age\nSAMPLE [1,2,3]"
    },
    {
        "用户": "Please help me find all the paths from 'player100' to 'team204' and return them.",
        "查询": "FIND NOLOOP PATH FROM \"player100\" TO \"team204\" OVER * YIELD path AS p"
    },
    {
        "用户": "返回球员 Carmelo Anthony 的年龄和性别属性。",
        "查询": "match (v:player) where id(v)==\"Carmelo Anthony\" return properties(v).age,v.player.sex;"
    },
    {
        "用户": "您好，请帮我找出与'Tim Duncan'相关的所有实体，并提供它们的边终点。",
        "查询": "GO FROM 'Tim Duncan' OVER * YIELD dst(edge) as dst"
    },
    {
        "用户": "找出所有被 'Tony Parker' 和 'Tim Duncan' 喜欢的实体，并返回这些实体及其关系，但排除 'Tony Parker' 和 'Tim Duncan' 自身的关系。",
        "查询": "MATCH (v:player)-[e:like]->(v2) WHERE none_direct_src(e) IN [\"Tony Parker\", \"Tim Duncan\"] RETURN *\nMINUS\nMATCH (v:player)-[e:like]->(v2) WHERE id(v) IN [\"Tony Parker\", \"Tim Duncan\"] RETURN *"
    },
    {
        "用户": "请展示一下指定的作业 <job_id>。",
        "查询": "SHOW JOB <job_id>"
    },
    {
        "用户": "Find entities connected to 'Dwyane Wade' through two 'like' relationships and return the names of these entities.",
        "查询": "MATCH (v1) -[:like]-> () -[:like]-> (v3)\nWHERE id(v1) == 'Dwyane Wade'\nRETURN v3.player.name AS Name"
    },
    {
        "用户": "Find all edges of entity e1 that meet the condition that col3 is false and col2 is 1.0, and return the source and target nodes of these edges.",
        "查询": "LOOKUP ON e1 WHERE e1.col3 == false AND e1.col2 == 1.0 YIELD src(edge) as src, dst(edge) as dst"
    },
    {
        "用户": "Can you show me all the spaces?",
        "查询": "SHOW SPACES"
    },
    {
        "用户": "请找出所有属性值为90的关系，并帮我返回这些关系。",
        "查询": "MATCH ()-[e]->()\nWITH e, properties(e) as props, keys(properties(e)) as kk\nLIMIT 10000 WHERE [i in kk where props[i] == 90]\nRETURN e"
    },
    {
        "用户": "请找出从名为'Tim Duncan'的球员出发所关联的所有球员，并告诉我这些球员的姓名。",
        "查询": "MATCH (v:player{name:\"Tim Duncan\"})-->(v2:player)\nRETURN v2.player.name AS Name"
    },
    {
        "用户": "您好，我想请您帮忙找一下，从 'Tony Parker' 和 'Yao Ming' 到 'Manu Ginobili'、'Spurs'、'Lakers' 中的任意一个实体，最短路径最多包含5个步骤，能给我返回一下路径信息吗？",
        "查询": "FIND SHORTEST PATH FROM \"Tony Parker\", \"Yao Ming\" TO \"Manu Ginobili\", \"Spurs\", \"Lakers\" OVER * UPTO 5 STEPS YIELD path as p"
    },
    {
        "用户": "Hello, please help me find out. Starting from 'Tim Duncan' and following the 'serve' relationship, we have taken 100000000000 steps outward. Can we return the endpoint entities of all the edges we have passed through?",
        "查询": "GO 10000000000000 STEPS FROM \"Tim Duncan\" OVER serve YIELD dst(edge) as dst"
    },
    {
        "用户": "插入一个名为'Tony Parker'，年龄为36的球员实体，其ID为'player101'\"。",
        "查询": "INSERT VERTEX player(name, age) VALUES \"player101\":(\"Tony Parker\", 36)"
    },
    {
        "用户": "Returns the player names of all entities except 'Paul Gasol'.",
        "查询": "MATCH (v)\nWHERE id(v) != 'Paul Gasol'\nRETURN v.player.name AS Name"
    },
    {
        "用户": "Hey, can you help me check out the entities that 'Tim Duncan' likes or has served since 2000? The distance should be between 2 and 3.",
        "查询": "MATCH (:player{name:\"Tim Duncan\"})-[e:serve|like*2..3{start_year: 2000}]-(v)\nRETURN e, v"
    },
    {
        "用户": "您好，请帮我找到'Boris Diaw'所服务的所有实体，包括实体的名称、服务开始年份和所在团队的名称。",
        "查询": "$var = GO FROM \"Boris Diaw\" OVER serve YIELD $^.player.name as name, serve.start_year as start, $$.team.name as team;YIELD $var.*"
    },
    {
        "用户": "Please help me balance the data.",
        "查询": "BALANCE DATA"
    },
    {
        "用户": "找出从 'Tony Parker' 到 'Yao Ming' 的所有路径，路径上的关系属性需满足条件：队友关系的起始年份晚于2000年，或者喜欢关系的喜欢程度不为空且大于等于80。最多返回3步路径，并返回路径信息。",
        "查询": "FIND ALL PATH WITH PROP FROM \"Tony Parker\" TO \"Yao Ming\" OVER * BIDIRECT\nWHERE  teammate.start_year > 2000 OR (like.likeness is not EMPTY AND like.likeness >= 80) UPTO 3 STEPS YIELD path as p"
    },
    {
        "用户": "将边edge_1_ttl的过期时间设置为100，并将过期时间的列名设置为'degree'。",
        "查询": "ALTER edge edge_1_ttl ttl_duration = 100, ttl_col = \"degree\""
    },
    {
        "用户": "Please help me add an e1 type edge, pointing from '1' to '2', with attribute p1 of 11 and weight of @ 1.",
        "查询": "INSERT EDGE e1(p1) VALUES \"1\"->\"2\"@1:(11)"
    },
    {
        "用户": "您好，请帮我查找一下实体类型为player且名称为'Boris Diaw'的实体的名称属性，然后将名称属性返回给我两次好吗？",
        "查询": "FETCH PROP ON player 'Boris Diaw' YIELD player.name, player.name"
    },
    {
        "用户": "找出名为'Tim Duncan'的球员的所有1到3度关系中的朋友，并返回这些朋友的信息。",
        "查询": "MATCH p=(v:player{name:\"Tim Duncan\"})-[e:follow*1..3]->(v2)\nRETURN v2 AS Friends"
    },
    {
        "用户": "什么病会伴随着头痛？",
        "查询": "MATCH (n:disease)-[e:accompany_with]->(n1:disease{name:'头痛'}) return n.disease.name"
    },
    {
        "用户": "Find the entities that Tony Parker likes, but does not include entities with likes of 95, 56, or 21, and return the names and likes of these entities.",
        "查询": "GO FROM 'Tony Parker' OVER like\nWHERE like.likeness NOT IN {95,56,21}\nYIELD $$.player.name, like.likeness"
    },
    {
        "用户": "Please help me return the penultimate element in an array from 1 to 5.",
        "查询": "RETURN range(1,5)[-2]"
    },
    {
        "用户": "Starting from 'Tim Duncan' and following the 'like' relationship, find an entity with a distance of 3. The return result is limited to the first hop automatically selecting 1 edge, the second hop selecting 2 edges, and the third hop selecting 2 edges.",
        "查询": "GO 3 STEPS FROM \"Tim Duncan\" OVER like LIMIT [1, 2, 2];"
    },
    {
        "用户": "返回11加12的结果。",
        "查询": "RETURN 11 + 12"
    },
    {
        "用户": "查找名为'LaMarcus Aldridge'的球员的年龄并返回。",
        "查询": "match (v:player{name:\"LaMarcus Aldridge\"}) return v.player.age;"
    },
    {
        "用户": "Create a label called player, containing two attributes: name and age.",
        "查询": "CREATE TAG player(name string, age int)"
    },
    {
        "用户": "从 'Tim Duncan' 出发，沿着 '喜欢' 关系，找到距离为3的实体，返回结果限制为第一跳自动选择1条边，第二跳选择2条边，第三跳选择2条边。",
        "查询": "GO 3 STEPS FROM \"Tim Duncan\" OVER like LIMIT [1, 2, 2];"
    },
    {
        "用户": "找出 'Tracy McGrady' 所 '喜欢' 的所有实体，并返回这些实体的 ID。",
        "查询": "GO FROM \"Tracy McGrady\" OVER like YIELD like._dst"
    },
    {
        "用户": "计算2加3的结果，如果结果是4，则返回0，如果结果是5，则返回1，否则返回-1。",
        "查询": "YIELD\nCASE 2+3\nWHEN 4 THEN 0\nWHEN 5 THEN 1\nELSE -1\nEND\nAS result"
    },
    {
        "用户": "获取名为'Tony Parker'的球员的姓名和年龄。",
        "查询": "FETCH PROP ON player \"Tony Parker\" YIELD player.name, player.age"
    },
    {
        "用户": "Please help me return the current timestamp.",
        "查询": "RETURN timestamp()"
    },
    {
        "用户": "请帮我找出从'player102'到'team204'的最短路径，并返回路径信息。",
        "查询": "FIND SHORTEST PATH FROM \"player102\" TO \"team204\" OVER * YIELD path AS p"
    },
    {
        "用户": "找出与 'Dejounte Murray' 有 '喜欢' 关系的实体，按照年龄降序、姓名升序排序，跳过前11个结果，返回接下来的3个实体的姓名和年龄。",
        "查询": "MATCH (v1) -[:like]-> (v)\nWHERE id(v1) == 'Dejounte Murray'\nRETURN v.player.name AS Name, v.player.age AS Age\nORDER BY Age DESC, Name ASC\nSKIP 11\nLIMIT 3"
    },
    {
        "用户": "请您展示一下数据库中Graph、Storage、Meta服务的主机信息和版本信息。",
        "查询": "SHOW HOSTS"
    },
    {
        "用户": "Starting from 'Tim Duncan', extend the 'like' relationship outward by 3 steps, and the returned results are limited to page 1, with 2 results per page.",
        "查询": "GO 3 STEPS FROM \"Tim Duncan\" OVER like LIMIT [1, 2, 2];"
    },
    {
        "用户": "Hello, could you please help me find the start and end years of Boris Diaw's employment with 'Spurs'?",
        "查询": "FETCH PROP ON serve \"Boris Diaw\"->\"Spurs\" YIELD serve.start_year, serve.start_year"
    },
    {
        "用户": "Starting from 'Tim Duncan', reverse search along the 'like' relationship to find all paths of 'Nobody' or 'Spur', with a maximum of 3 steps, and return these paths.",
        "查询": "FIND ALL PATH FROM \"Tim Duncan\" TO \"Nobody\", \"Spur\" OVER like REVERSELY UPTO 3 STEPS YIELD path as p"
    },
    {
        "用户": "请帮我返回1、1.3、1000和NaN的浮点数值。",
        "查询": "RETURN toFloat(1), toFloat('1.3'), toFloat('1e3'), toFloat('not a number')"
    },
    {
        "用户": "Can you help me delete the label index player_ Name_ Index?",
        "查询": "DROP TAG INDEX player_name_index"
    },
    {
        "用户": "Find a non repeating path from 'Tim Duncan' to 'Tony Parker' or 'LaMarcus Aldridge', with a relationship of 'like' on the path, and go through a maximum of three steps, returning path information.",
        "查询": "FIND NOLOOP PATH FROM \"Tim Duncan\" TO \"Tony Parker\", \"LaMarcus Aldridge\" OVER like UPTO 3 STEPS YIELD path as p"
    },
    {
        "用户": "您好，请帮我查找一下从'Thunders'顶点出发，沿着边serve遍历的关系，我需要知道它们的源节点、边的属性、边的ID、目标节点以及目标节点的ID。",
        "查询": "GO FROM 'Thunders' OVER serve REVERSELY YIELD $^ as src,tags($^), id($^), id($$), $$ as dst"
    },
    {
        "用户": "找出ID为'A'的球员节点和与其相连的所有节点，并返回这些节点之间的关系。",
        "查询": "MATCH p= (v:player) -- (v2) WHERE id(v)==\"A\" RETURN p"
    },
    {
        "用户": "找出 'Tony Parker' 喜欢的实体中，喜欢程度不为 95、56、21 的所有实体，并返回这些实体的名称和喜欢程度。",
        "查询": "GO FROM 'Tony Parker' OVER like\nWHERE like.likeness NOT IN [95,56,21]\nYIELD $$.player.name, like.likeness"
    },
    {
        "用户": "查找名为'Tim Duncan'的球员实体，并返回该实体的ID。",
        "查询": "LOOKUP ON player WHERE player.name == \"Tim Duncan\" YIELD id(vertex) as id"
    },
    {
        "用户": "查找年龄大于等于40岁的球员实体，并返回这些实体的ID和年龄信息。",
        "查询": "LOOKUP ON player WHERE player.age >= 40.0 YIELD id(vertex) as name, player.age AS Age"
    },
    {
        "用户": "找出 'Carmelo Anthony' 和 'Dwyane Wade' 所 '喜欢' 的实体，按照实体名称分组并统计数量和总和，最后按照总和和名称降序排序并返回前两个结果。",
        "查询": "GO FROM 'Carmelo Anthony', 'Dwyane Wade' OVER like\n   YIELD $$.player.name AS name\n   | GROUP BY $-.name\n     YIELD $-.name AS name,\n           SUM(1.5) AS sum,\n           COUNT(*) AS count\n      | ORDER BY $-.sum, $-.name  DESC\n      | LIMIT 2"
    },
    {
        "用户": "Identify entities and their relationships that have a 'service' or 'like' relationship with entity 'Tim Duncan', and return these entities.",
        "查询": "MATCH (n)-[e:serve|like*2..3]->(v)\nWHERE id(n) == \"Tim Duncan\"\nRETURN e, v"
    },
    {
        "用户": "Obtain the name and age of the player named 'Boris Diaw' and return the result of whether the player's age is greater than 30.",
        "查询": "FETCH PROP ON player 'Boris Diaw' YIELD player.name, player.age, player.age > 30"
    },
    {
        "用户": "请帮我创建一个球员实体，名字是'Tim Duncan'，年龄是42岁，并给他一个唯一标识'player100'。",
        "查询": "INSERT VERTEX player(name, age) VALUES \"player100\":(\"Tim Duncan\", 42)"
    },
    {
        "用户": "请帮我创建一个名为player的标签。",
        "查询": "SHOW CREATE TAG player"
    },
    {
        "用户": "Returns the age and names of all players, sorted in descending age and ascending name order.",
        "查询": "MATCH (v:player) RETURN v.player.age AS Age, v.player.name AS Name\nORDER BY Age DESC, Name ASC"
    },
    {
        "用户": "Find the path starting from 'Tim Duncan' through the 'like' relationship and with a 'like degree' greater than 90, take up to 3 steps, and return to the first 5 paths.",
        "查询": "$a = GO FROM \"Tim Duncan\" over * YIELD like._dst AS src, serve._src AS dst;\nFIND NOLOOP PATH WITH PROP FROM $a.src TO $a.dst OVER like WHERE like.likeness > 90 UPTO 3 STEPS YIELD path as p |\nORDER BY $-.p | LIMIT 5"
    },
    {
        "用户": "Please help me find the shortest path from 'player102' to 'team204' and return it to me.",
        "查询": "FIND SHORTEST PATH FROM \"player102\" TO \"team204\" OVER * YIELD path AS p"
    },
    {
        "用户": "Could you please help me find all the students whose teacher's name is' a '? I need their IDs.",
        "查询": "LOOKUP ON student WHERE student.teacher == \"a\" YIELD id(vertex) as id"
    },
    {
        "用户": "查找 'Tim Duncan' 所喜欢的所有实体，并返回这些实体。",
        "查询": "GO FROM \"Tim Duncan\" OVER like YIELD like._dst"
    },
    {
        "用户": "找出名为'Tim Duncan'的球员所关联的所有实体，并返回这些实体。",
        "查询": "MATCH p=(v:player{name:\"Tim Duncan\"})--()\nWITH nodes(p) AS n\nUNWIND n AS n1\nRETURN DISTINCT n1"
    },
    {
        "用户": "如果没有名为t2的标签，能否帮我创建一个名为t2的标签，该标签里面有一个名为p2的字符串属性呢？",
        "查询": "CREATE TAG IF NOT EXISTS t2 (p2 STRING)"
    },
    {
        "用户": "请找出所有具有年龄信息的球员，并告诉我他们的姓名和年龄。",
        "查询": "MATCH (v:player)\nWHERE exists(v.player.age)\nRETURN v.player.name, v.player.age"
    },
    {
        "用户": "请帮我返回一个范围从1到5的整数列表中从第三个元素开始的所有元素。",
        "查询": "RETURN range(1,5)[3..] AS a"
    },
    {
        "用户": "Hello, please help me find all entities that have a 'service' relationship with 'Tim Duncan' and return their IDs.",
        "查询": "GO FROM 'Tim Duncan' OVER serve bidirect YIELD serve._dst"
    },
    {
        "用户": "I want to insert two team nodes, one is a team named 'Trail Blazers' and the other is a team named' Spurs'.",
        "查询": "INSERT VERTEX team(name) VALUES \"team203\":(\"Trail Blazers\"), \"team204\":(\"Spurs\")"
    },
    {
        "用户": "您好，请帮我查找满足以下条件的实体e1：e1.col1大于等于1且e1.col5大于等于时间11:11:11。并且返回它们的源节点和目标节点。",
        "查询": "LOOKUP ON e1 WHERE e1.col1 >= 1 AND e1.col5 >= time(\"11:11:11\") YIELD src(edge) as src, dst(edge) as dst"
    },
    {
        "用户": "查找 'Tony Parker' 所 '喜欢' 的所有实体，返回这些实体。",
        "查询": "GO FROM \"Tony Parker\" OVER like YIELD like._dst"
    },
    {
        "用户": "Find all entities associated with a player named 'Tim Duncan' and return these entities.",
        "查询": "MATCH p=(v:player{name:\"Tim Duncan\"})--()\nWITH nodes(p) AS n\nUNWIND n AS n1\nRETURN DISTINCT n1"
    },
    {
        "用户": "额叶癫痫的症状有哪些？",
        "查询": "MATCH (n:disease)-[e:has_symptom]->(n1:symptom) WHERE n.disease.name=='额叶癫痫' return n1.symptom.name"
    },
    {
        "用户": "得了脑瘤的治疗方法有哪些？",
        "查询": "GO FROM \"脑瘤\" OVER cure_way YIELD dst(edge);"
    },
    {
        "用户": "找出'player100'所'关注'的所有实体，并返回这些实体的年龄",
        "查询": "GO FROM \"player100\" OVER follow YIELD properties($^).age AS SrcAge, properties($$).age AS DestAge"
    },
    {
        "用户": "请问您能帮我查找一下，在2000年之后与 'Tim Duncan' 有2-3跳服务关系的所有实体及关系吗？",
        "查询": "MATCH (n)-[e:serve*2..3{start_year: 2000}]-(v)\nWHERE id(n) == \"Tim Duncan\"\nRETURN e, v"
    },
    {
        "用户": "Find all the entities that 'James Harden' likes and return their IDs.",
        "查询": "GO FROM \"James Harden\" OVER like YIELD like._dst"
    },
    {
        "用户": "请帮我查找'follow'关系中的所有边，并告诉我关系的数量。",
        "查询": "LOOKUP ON follow YIELD edge AS e|\nYIELD COUNT(*) AS Follow_Number"
    },
    {
        "用户": "Hello, could you please help me find the col1 attribute in t1 type with a value of 'sheep' 🐏’ Entity and give me their IDs. Thank you!",
        "查询": "LOOKUP ON t1 WHERE t1.col1 == \"羊🐏\" YIELD id(vertex) as id"
    },
    {
        "用户": "查找名为'LaMarcus Aldridge'的球员的年龄并返回。",
        "查询": "match (v:player{name:\"LaMarcus Aldridge\"}) return v.player.age;"
    },
    {
        "用户": "从'player100'出发，经过任意类型的边，进行1到3跳的遍历，返回遍历到的实体的姓名和年龄，每跳都可以自动选择两条边。",
        "查询": "GO 1 TO 3 STEPS FROM \"player100\"\nOVER *\nYIELD properties($$).name AS NAME, properties($$).age AS Age\nSAMPLE [2,2,2]"
    },
    {
        "用户": "找出 'Chris Paul' 所 '喜欢' 的所有实体，并返回这些实体的 ID。",
        "查询": "GO FROM \"Chris Paul\" OVER like YIELD like._dst"
    },
    {
        "用户": "Starting from 'Tim Duncan' and following the 'like' relationship, traverse 4 steps in both directions to return all entities and edges traversed.",
        "查询": "GET SUBGRAPH 4 steps from 'Tim Duncan' BOTH like YIELD vertices as a, edges as b"
    },
    {
        "用户": "找出和 'Tim Duncan' 或 'Chris Paul' 有 '喜欢' 关系的实体，再找出这些实体所 '喜欢' 的实体，并返回这些实体的名称和ID。",
        "查询": "GO FROM 'Tim Duncan', 'Chris Paul' OVER like YIELD $^.player.name AS name, dst(edge) AS id |\nGO FROM $-.id OVER like YIELD $-.name, dst(edge) as dst"
    },
    {
        "用户": "计算2加3的结果，如果结果是4，则返回0；如果结果是5，则返回1；否则返回-1。",
        "查询": "YIELD\nCASE 2+3\nWHEN 4 THEN 0\nWHEN 5 THEN 1\nELSE -1\nEND\nAS result"
    },
    {
        "用户": "Returns teammate information for all players.",
        "查询": "MATCH (v:player) UNWIND (v)-[:teammate]->() AS p RETURN p"
    },
    {
        "用户": "Identify entities that have a 'like' relationship with 'Tim Duncan' or 'Chris Paul', then identify the entities that these entities like, and return the names and IDs of these entities.",
        "查询": "GO FROM 'Tim Duncan', 'Chris Paul' OVER like YIELD $^.player.name AS name, dst(edge) AS id |\nGO FROM $-.id OVER like YIELD $-.name, dst(edge) as dst"
    },
    {
        "用户": "请帮我获取'player100'的属性，并告诉我该实体的名称。",
        "查询": "FETCH PROP ON player \"player100\"\nYIELD properties(vertex).name"
    },
    {
        "用户": "哪些病要去耳鼻喉科就诊？",
        "查询": "MATCH (n:disease)-[e:cure_department]->(n1:department{name:'耳鼻喉科'}) return n.disease.name"
    },
    {
        "用户": "查找所有作业信息。",
        "查询": "SHOW JOBS;"
    },
    {
        "用户": "将名为'player667'的球员实体更新为年龄为 31，返回更新后的姓名和年龄。",
        "查询": "UPSERT VERTEX ON player \"player667\"\nSET age = 31\nYIELD name AS Name, age AS Age"
    },
    {
        "用户": "找出从 'Tim Duncan' 到 'Tony Parker' 的所有路径，路径上包含 '喜欢' 属性的关系，最多包含三个步骤，并返回这些路径上的所有关系。",
        "查询": "FIND ALL PATH WITH PROP FROM \"Tim Duncan\" TO \"Tony Parker\" OVER like UPTO 3 STEPS YIELD path as p |\nYIELD relationships($-.p) as relationships"
    },
    {
        "用户": "Please identify all players who are not within the age range of 20 to 25 and sort them by age, then tell me their names and ages.",
        "查询": "MATCH (v:player)\nWHERE v.player.age NOT IN range(20,25)\nRETURN v.player.name AS Name, v.player.age AS Age\nORDER BY Age"
    },
    {
        "用户": "Find players aged 40 and return their names.",
        "查询": "LOOKUP ON player WHERE player.age == 40 YIELD id(vertex) as id |\nFETCH PROP ON player $-.id YIELD player.name"
    },
    {
        "用户": "Please help me find the name of the team or player associated with a player named 'Tim Duncan' and return it to me.",
        "查询": "MATCH (v:player{name:\"Tim Duncan\"})--(v2)\nRETURN\nCASE WHEN v2.team.name IS NOT NULL\nTHEN v2.team.name\nWHEN v2.player.name IS NOT NULL\nTHEN v2.player.name END AS Name"
    },
    {
        "用户": "查找名为'Tony Parker'的球员所在的所有球队，并返回这些球队的去重结果和该球员的年龄。",
        "查询": "MATCH (v:player{name: \"Tony Parker\"})-[:serve]->(t:team)\nWITH DISTINCT v.player.age as age, t\nRETURN t"
    },
    {
        "用户": "获取 'Tim Duncan' 球员的姓名和年龄属性。",
        "查询": "FETCH PROP ON player \"Tim Duncan\" YIELD player.name, player.age"
    },
    {
        "用户": "获取从 'Tim Duncan' 出发，通过 '喜欢' 关系能够到达的所有实体，并返回这些实体的信息。",
        "查询": "GET SUBGRAPH FROM 'Tim Duncan' OUT like  YIELD vertices as v"
    },
    {
        "用户": "Find all the entities that a player named 'Tim Duncan' is following and return them as his friends.",
        "查询": "MATCH p=(v:player{name:\"Tim Duncan\"})-[e:follow*1..]->(v2)\nRETURN v2 AS Friends"
    },
    {
        "用户": "Identify non repeating paths from 'Tim Duncan' to 'Tony Parker' or 'Manu Ginobili', with a relationship of 'like' and a maximum of 3 hops, and return path information.",
        "查询": "FIND NOLOOP PATH FROM \"Tim Duncan\" TO \"Tony Parker\", \"Manu Ginobili\" OVER like UPTO 3 STEPS YIELD path as p"
    },
    {
        "用户": "您好，我想查找一下关于 'Tim Duncan' 的信息，具体是关于他 '喜欢' 和 '服务' 的事情。能帮我找出距离为2的所有相关实体和它们之间的关系吗？",
        "查询": "GET SUBGRAPH WITH PROP 2 STEPS FROM 'Tim Duncan' IN like, serve YIELD EDGES as relationships"
    },
    {
        "用户": "找出从 'Tim Duncan' 到 'Tony Parker' 的所有路径，路径上必须经过 '喜欢' 关系，最多经过3个步骤，并返回路径和路径上的关系。",
        "查询": "FIND ALL PATH WITH PROP FROM \"Tim Duncan\" TO \"Tony Parker\" OVER like UPTO 3 STEPS YIELD path as p |\nYIELD relationships($-.p) as relationships"
    },
    {
        "用户": "查找所有 '喜欢' 关系中，亲密度小于39的源节点、目标节点和边的rank。",
        "查询": "LOOKUP ON like where like.likeness < 39 YIELD src(edge) as src, dst(edge) as dst, rank(edge) as rank"
    },
    {
        "用户": "找出年龄大于45岁的球员在Lakers队中的服务关系，并返回球员名字后加上hello的字符串。",
        "查询": "MATCH (a:player)-[b:serve]-(c:team{name: \"Lakers\"})\nWHERE a.player.age > 45\nRETURN  concat(a.player.name, \"hello\")"
    },
    {
        "用户": "高血压的治愈概率是多少？",
        "查询": "FETCH PROP ON disease \"高血压\" YIELD properties(vertex).cured_prob as prob"
    },
    {
        "用户": "找出ID为player102的球员所关注的球员ID，排除ID为player100的球员所关注的球员ID。",
        "查询": "MATCH (v:player)-[e:follow]->(v2)\nWHERE id(v) ==\"player102\"\nRETURN id(v2) AS id\nMINUS\nMATCH (v:player)-[e:follow]->(v2)\nWHERE id(v) ==\"player100\"\nRETURN id(v2) AS id"
    },
    {
        "用户": "Please return the entity aged 32 and named Marco Bellinelli.",
        "查询": "RETURN {age: 32, name: \"Marco Belinelli\"}"
    },
    {
        "用户": "找出以'player101'为起点，通过'follow'关系双向连接的所有实体，并根据实体的属性'name'进行分组，返回每个分组中实体的数量和名称。",
        "查询": "GO FROM \"player101\" OVER follow BIDIRECT\nYIELD properties($$).name AS Name\n| GROUP BY $-.Name YIELD $-.Name, count(*)"
    },
    {
        "用户": "If my_ If space does not exist, create a file named 'my'_ The space of space, where the type of entity ID is a fixed length string with a length of 30.",
        "查询": "CREATE SPACE IF NOT EXISTS my_space (vid_type=FIXED_STRING(30))"
    },
    {
        "用户": "请创建一条边，用来表示服务的开始年份和结束年份。",
        "查询": "CREATE EDGE serve(start_year int, end_year int)"
    },
    {
        "用户": "找出'player100'所'关注'的所有实体，并返回这些实体的姓名和年龄。",
        "查询": "GO FROM \"player100\" OVER follow\nYIELD properties($$).name AS Friend, properties($$).age AS Age"
    },
    {
        "用户": "您好，请帮我找出与'Tim Duncan'相关的所有实体，并提供它们的边终点。",
        "查询": "GO FROM 'Tim Duncan' OVER * YIELD dst(edge) as dst"
    },
    {
        "用户": "找出'McGrady'的实体所喜欢的所有实体，并返回这些实体的ID。",
        "查询": "GO FROM \"Tracy McGrady\" OVER like YIELD like._dst"
    },
    {
        "用户": "Can you display the index information of the label?",
        "查询": "SHOW TAG INDEXES"
    },
    {
        "用户": "Find all the entities that the player named 'Tim Duncan' likes, with a distance of 2-3 jumps, and return quantity statistics results.",
        "查询": "MATCH (:player{name: \"Tim Duncan\"})-[e:like*2..3]-(v)\nRETURN count(v)"
    },
    {
        "用户": "Find the student with student ID 1 and return their ID and age.",
        "查询": "LOOKUP ON student WHERE student.number == 1 YIELD id(vertex) as name, student.age"
    },
    {
        "用户": "请问您能帮我查找一下ID为1的人的年龄属性吗？",
        "查询": "FETCH PROP ON person \"1\" YIELD person.age as age;"
    },
    {
        "用户": "描述标签woman的创建信息。",
        "查询": "SHOW CREATE TAG woman;"
    },
    {
        "用户": "找出'player100'关注的所有实体，并返回这些实体的边的目标节点",
        "查询": "$var = GO FROM \"player100\" OVER follow\nYIELD dst(edge) AS dst"
    },
    {
        "用户": "查找名为'Tracy McGrady'的球员在2000年之后所效力过的球队，返回他们之间的关系及实体的相关信息。",
        "查询": "MATCH (:player{name:\"Tracy McGrady\"})-[e:serve*0..1{start_year: 2000}]-(v)\nRETURN e, v"
    },
    {
        "用户": "找出'player100'关注的实体中，不关注'player102'的实体。",
        "查询": "GO FROM \"player100\" OVER follow YIELD dst(edge)\nMINUS\nGO FROM \"player102\" OVER follow YIELD dst(edge)"
    },
    {
        "用户": "我想要插入两个球队节点，一个是名为'Trail Blazers'的球队，另一个是名为'Spurs'的球队。",
        "查询": "INSERT VERTEX team(name) VALUES \"team203\":(\"Trail Blazers\"), \"team204\":(\"Spurs\")"
    },
    {
        "用户": "如果团队标签的名字长度不超过20个字符，则创建一个团队标签的索引。",
        "查询": "CREATE TAG INDEX IF NOT EXISTS team_index ON team(name(20))"
    },
    {
        "用户": "Determine if the number 4 is greater than the number 3 and return the result.",
        "查询": "WITH 4 AS one, 3 AS two RETURN one > two AS result"
    },
    {
        "用户": "请问您能帮我查找前三个人的姓名吗？",
        "查询": "MATCH (v)\nRETURN v.person.name LIMIT 3"
    },
    {
        "用户": "Please help me remove DRAINER.",
        "查询": "REMOVE DRAINER"
    },
    {
        "用户": "请找出以't'开头的球员的姓名和年龄。",
        "查询": "MATCH (v:player)\nWHERE v.player.name STARTS WITH \"t\"\nRETURN v.player.name, v.player.age"
    },
    {
        "用户": "查找年龄为40的球员，并返回这些球员的姓名。",
        "查询": "LOOKUP ON player WHERE player.age == 40 YIELD id(vertex) as id |\nFETCH PROP ON player $-.id YIELD player.name"
    },
    {
        "用户": "Find the shortest path from 'Tim Duncan' to 'Tony Parker' or 'Spurs', with a preference or service relationship, up to 3 steps, and return the found path information.",
        "查询": "FIND SHORTEST PATH FROM \"Tim Duncan\" TO \"Tony Parker\", \"Spurs\" OVER like,serve UPTO 3 STEPS YIELD path as p"
    },
    {
        "用户": "查找名为'Tim Duncan'的球员实体，并返回其ID。",
        "查询": "LOOKUP ON player WHERE player.name == \"Tim Duncan\" YIELD id(vertex) as id"
    },
    {
        "用户": " 您好，请帮我查找一下名为Tim Duncan的球员在2000年之后所服务过的实体，包括服务关系和实体本身，可以遍历2到3步吗？",
        "查询": "MATCH (:player{name:\"Tim Duncan\"})-[e:serve*2..3{start_year: 2000}]->(v)\nRETURN e, v"
    },
    {
        "用户": "Can you help me identify the secondary relationships of other entities associated with 'Tony Parker'? I need their IDs.",
        "查询": "GO 1 STEPS FROM 'Tony Parker' OVER like YIELD like._dst AS id\n| GO 2 STEPS FROM $-.id OVER like YIELD like._dst"
    },
    {
        "用户": "找出 'Tim Duncan' 和 'Chris Paul' 喜欢的实体，然后找出这些实体与其他实体之间的关系及属性，但排除与 'Tim Duncan' 和 'Chris Paul' 相关的边和属性。",
        "查询": "$var = GO FROM 'Tim Duncan', 'Chris Paul' OVER like YIELD $^.player.name AS name, id($$) AS id;\nGO FROM $var.id OVER like  WHERE $var.name != $$.player.name YIELD $var.name, properties(edge) as props"
    },
    {
        "用户": "When the age of a player named 'Tony Parker' is increased by 2 years, the player's name and age are returned.",
        "查询": "UPDATE VERTEX ON player \"player101\"\nSET age = age + 2\nWHEN name == \"Tony Parker\"\nYIELD name AS Name, age AS Age"
    },
    {
        "用户": "Add an alias attribute with a default value of 'abc' to the label student.",
        "查询": "ALTER TAG student ADD (alias string default \"abc\")"
    },
    {
        "用户": "请帮我获取'Kobe'球员的所有属性，并返回这些属性的值。",
        "查询": "FETCH PROP ON player \"Kobe\" YIELD properties(vertex)"
    },
    {
        "用户": "Submit job statistics.",
        "查询": "submit job stats;"
    },
    {
        "用户": "Find a player entity named 'Tim Duncan' and return the ID of that entity.",
        "查询": "LOOKUP ON player WHERE player.name == \"Tim Duncan\" YIELD id(vertex) as id"
    },
    {
        "用户": "找出名为'Manu Ginobili'的球员，与其有两跳关系的实体，返回这些实体的性别、关系强度、姓名、年龄、关系开始年份，并按照关系强度、姓名、年龄排序，最多返回5条记录。",
        "查询": "match (src_v:player{name:\"Manu Ginobili\"})-[e*2]-(dst_v)\n  return properties(src_v).sex,properties(e[0]).degree as degree,properties(dst_v).name as name,src_v.player.age AS age, e[1].start_year,dst_v.player.age\n  order by degree, name, age limit 5;"
    },
    {
        "用户": "找出球员ID为'Paul Gasol'，和'Grizzlies'或'Lakers'有效力关系的球队名称，并返回这些顶点下球员的名称和他们效力球队名称。",
        "查询": "MATCH (v)-[:serve]->(t)\nWHERE (NOT NOT id(v) == 'Paul Gasol') AND id(v) == 'Paul Gasol' AND id(t) IN ['Grizzlies', 'Lakers']\nRETURN v.player.name AS Name, t.team.name AS Team"
    },
    {
        "用户": "Returns the age and gender attributes of a player named 'LaMarcus Aldridge'.",
        "查询": "match (v:player{name:\"LaMarcus Aldridge\"}) return properties(v).age,v.player.sex;"
    },
    {
        "用户": "找出ID为player102和player100的球员所关注的共同球员，并返回这些共同球员的ID、关注度和年龄。",
        "查询": "MATCH (v:player)-[e:follow]->(v2)\nWHERE id(v) == \"player102\"\nRETURN id(v2) As id, e.degree As Degree, v2.player.age AS Age\nINTERSECT\nMATCH (v:player)-[e:follow]->(v2)\nWHERE id(v) == \"player100\"\nRETURN id(v2) As id, e.degree As Degree, v2.player.age AS Age"
    },
    {
        "用户": "找出所有 '喜欢' 'Grant Hill' 的实体，并返回这些实体与 'Grant Hill' 的关系中的目标实体 ID。",
        "查询": "GO FROM \"Grant Hill\" OVER like REVERSELY YIELD like._dst"
    },
    {
        "用户": "Obtain entities whose teacher's name dictionary order is less than 'a' among all students and return the IDs of these entities.",
        "查询": "LOOKUP ON student WHERE student.teacher < \"a\" YIELD id(vertex) as id"
    },
    {
        "用户": "请问您能帮我找一下从 'Shaquille O'Neal' 到 'Manu Ginobili' 的最短路径吗？路径上最多经过5个实体，并且能返回路径信息吗？",
        "查询": "YIELD \"Shaquille O\\'Neal\" AS src\n| FIND SHORTEST PATH FROM $-.src TO \"Manu Ginobili\" OVER * UPTO 5 STEPS YIELD path as p"
    },
    {
        "用户": "请问您能帮我找一下，从 'Shaquille O'Neal' 到 'Manu Ginobili'、'Spurs'、'Lakers' 的关系吗？我需要找到不超过5步的最短路径。",
        "查询": "FIND SHORTEST PATH FROM \"Shaquille O\\'Neal\" TO \"Manu Ginobili\", \"Spurs\", \"Lakers\" OVER * UPTO 5 STEPS YIELD path as p"
    },
    {
        "用户": "找出年龄大于45岁的球员在Lakers队中的服务关系，并返回球员名字后加上hello的字符串。",
        "查询": "MATCH (a:player)-[b:serve]-(c:team{name: \"Lakers\"})\nWHERE a.player.age > 45\nRETURN  concat(a.player.name, \"hello\")"
    },
    {
        "用户": "Please help me find all the relationships between a player named 'Tim Duncan' and the players he follows, and return these relationships.",
        "查询": "MATCH (v:player{name:\"Tim Duncan\"})-[e:follow{degree:95}]->(v2)\nRETURN e"
    },
    {
        "用户": "从以'Tim Duncan'的为起点，通过任意类型的边进行遍历，返回遍历路径中'喜欢'边的目标顶点作为起点，'服务'边的起始顶点作为目标，找到从起点到目标顶点的最多3步之间不包含环路的路径，并返回这些路径",
        "查询": "GO FROM \"Tim Duncan\" over * YIELD like._dst AS src, serve._src AS dst\n| FIND NOLOOP PATH FROM $-.src TO $-.dst OVER like UPTO 3 STEPS YIELD path as p"
    },
    {
        "用户": "获取'player101'的属性，并返回该实体的属性。",
        "查询": "FETCH PROP ON player \"player101\" YIELD properties(vertex)"
    },
    {
        "用户": "找出名为Tim Duncan的球员所喜欢的点赞程度为90的实体，距离为2到3个关系，并返回这些关系和实体。",
        "查询": "MATCH (:player{name:\"Tim Duncan\"})-[e:like*2..3{likeness: 90}]->(v)\nRETURN e, v"
    },
    {
        "用户": "您好，请帮我找一下，从 'Russell Westbrook' 开始，经过最多两个关系，找出所有年龄大于20的实体，并给我返回这些实体的信息好吗？",
        "查询": "GO 1 TO 2 STEPS FROM 'Russell Westbrook' OVER * where properties($$).age > 20 YIELD $$ as dst"
    },
    {
        "用户": "Find all entities served by a player named 'Tim Duncan' and return these entities and their relationships.",
        "查询": "MATCH (v:player{name:\"Tim Duncan\"})-[]->(v2)<-[e:serve]-(v3)\nRETURN v2, v3"
    },
    {
        "用户": "请将实体'player101'关注实体'player102'，关注度为90，谢谢。",
        "查询": "INSERT EDGE follow(degree) VALUES \"player101\" -> \"player102\":(90)"
    },
    {
        "用户": "给标签tag_1添加一个整型属性col5。",
        "查询": "ALTER TAG tag_1 ADD (col5 int)"
    },
    {
        "用户": "找出 'Tony Parker' 所喜欢的除 'Danny Green' 外的所有实体，并返回这些实体的名称。",
        "查询": "GO FROM 'Tony Parker' OVER like\nWHERE like._dst NOT IN ['Danny Green']\nYIELD $$.player.name"
    },
    {
        "用户": "将'player668'与'team200'之间的边'serve'进行更新，设置起始年份为2000，结束年份为原来的年份加1，并返回起始年份和结束年份。",
        "查询": "UPSERT EDGE on serve\n\"player668\" -> \"team200\"@0\nSET start_year = 2000, end_year = end_year + 1\nYIELD start_year, end_year"
    },
    {
        "用户": "Find all edges in e1 where col1 is less than or equal to 2 and col3 is true, and return the source and target nodes of these edges.",
        "查询": "LOOKUP ON e1 WHERE e1.col1 <= 2 AND e1.col3 < true YIELD src(edge) as src, dst(edge) as dst"
    },
    {
        "用户": "查找名为'Tim Duncan'的球员实体，并返回其ID。",
        "查询": "LOOKUP ON player WHERE player.name == \"Tim Duncan\" YIELD id(vertex) as id"
    },
    {
        "用户": "霍奇金病的注意事项有哪些？",
        "查询": "LOOKUP ON disease WHERE disease.name == \"霍奇金病\" YIELD properties(vertex).prevent"
    },
    {
        "用户": "找到ID为'Carmelo Anthony'的球员实体，返回其年龄属性值。",
        "查询": "match (v:player) where id(v)==\"Carmelo Anthony\" return v.player.age;"
    },
    {
        "用户": "如果only_polygon标签不存在，能否帮我创建一个带有多边形地理属性的only_polygon标签呢？",
        "查询": "CREATE TAG IF NOT EXISTS only_polygon(geo geography(polygon))"
    },
    {
        "用户": "Find the names of players named 'James Harden', 'Jonathan Simmons',' Klay Thompson ',' Dejounte Murray ', and' Paul Gasol 'with age 23 or ID' James Harden '.",
        "查询": "MATCH (v)\nWHERE id(v) IN ['James Harden', 'Jonathon Simmons', 'Klay Thompson', 'Dejounte Murray', 'Paul Gasol']\n      AND (id(v) == 'James Harden' OR v.player.age == 23)\nRETURN v.player.name AS Name"
    },
    {
        "用户": "请问您能帮我找一下，有关球员 'Yao Ming' 和球队 'Rockets' 之间的服务关系的路径吗？\n帮我一下，找一下球员 'Yao Ming' 和球队 'Rockets' 之间的服务关系路径。\n您好，我想请您帮我找一下，球员 'Yao Ming' 和球队 'Rockets' 之间的服务关系路径，可以吗？",
        "查询": "MATCH (p:player {name: 'Yao Ming'} ), (t:team {name: 'Rockets'}), pth = (p)-[:serve*1..4]-(t)\nRETURN pth"
    },
    {
        "用户": "查询名字为'abc'的人，并返回他们的名字。",
        "查询": "LOOKUP ON person WHERE person.name==\"abc\" YIELD person.name"
    },
    {
        "用户": "Find all students with names less than 'a' and return their IDs, names, and ages.",
        "查询": "LOOKUP ON student WHERE student.name < \"a\" YIELD id(vertex) as id, student.name as name, student.age as age"
    },
    {
        "用户": "Please help me return all the elements in the list [1, 2, 3].",
        "查询": "YIELD list[1, 2, 3][0..-1] AS a"
    },
    {
        "用户": "找出名为'Tim Duncan'的球员所服务的所有实体，并返回这些实体及其关系。",
        "查询": "MATCH (v:player{name:\"Tim Duncan\"})-[]->(v2)<-[e:serve]-(v3)\nRETURN v2, v3"
    },
    {
        "用户": "Find all the entities that Boris Diaw likes and delete their relationships with Boris Diaw.",
        "查询": "GO FROM \"Boris Diaw\" OVER like YIELD like._dst as id | DELETE VERTEX $-.id WITH EDGE"
    },
    {
        "用户": "Return all entities with a player named 'Tim Duncan' liking level of 95, and return the original node name.",
        "查询": "MATCH (v:player{name: 'Tim Duncan'})-[e:like{likeness: 95}]->() return v.player.name AS name"
    },
    {
        "用户": "找出 'Boris Diaw' 所效力的所有球队，且起始球员年龄大于18岁，返回其对这些球队的服务起始年份。",
        "查询": "GO 1 STEPS FROM \"Boris Diaw\" OVER serve\nWHERE $^.player.age > 18\nYIELD serve.start_year as start_year"
    },
    {
        "用户": "Identify entities that have a 'like' relationship with 'Dejounte Murray', return the names and ages of these entities, and sort them in descending age and ascending name order, with a maximum of 3 results returned.",
        "查询": "MATCH (v1) -[:like]-> (v)\nWHERE id(v1) == 'Dejounte Murray'\nRETURN v.player.name AS Name, v.player.age AS Age\nORDER BY Age DESC, Name ASC\nLIMIT 3"
    },
    {
        "用户": "Hello, please help me find all the entities served by 'Boris Diaw', including the entity name, service start year, and team name.",
        "查询": "$var = GO FROM \"Boris Diaw\" OVER serve YIELD $^.player.name as name, serve.start_year as start, $$.team.name as team;YIELD $var.*"
    },
    {
        "用户": "获取从'player101'到'player100'的关注关系的属性。",
        "查询": "FETCH PROP ON follow \"player101\" -> \"player100\" YIELD properties(edge)"
    },
    {
        "用户": "找出所有 'Boris Diaw' 喜欢的实体，返回这些实体的 ID。",
        "查询": "GO FROM \"Boris Diaw\" OVER like YIELD like._dst"
    },
    {
        "用户": "Please help me find players aged between 30 and 32 and tell me the ages of these players.",
        "查询": "LOOKUP ON player\nWHERE player.age < 32 and player.age >30\nYIELD DISTINCT properties(vertex).age as v"
    },
    {
        "用户": "Count the ages of all players and arrange them in descending order based on the number and age of players.",
        "查询": "MATCH (n:player)\nRETURN n.player.age as age, count(*) as number\nORDER BY number DESC, age DESC"
    },
    {
        "用户": "找出球员名为'James Harden', 'Jonathon Simmons', 'Klay Thompson', 'Dejounte Murray', 'Paul Gasol'中，年龄为23或者ID为'James Harden'的球员的姓名。",
        "查询": "MATCH (v)\nWHERE id(v) IN ['James Harden', 'Jonathon Simmons', 'Klay Thompson', 'Dejounte Murray', 'Paul Gasol']\n      AND (id(v) == 'James Harden' OR v.player.age == 23)\nRETURN v.player.name AS Name"
    },
    {
        "用户": "Could you please help me find all 'serve' relationships and corresponding endpoint entities with a distance of 2 or 3 from 'Tim Duncan'?",
        "查询": "MATCH (n)-[e:serve*2..3]->(v)\nWHERE id(n) == \"Tim Duncan\"\nRETURN e, v"
    },
    {
        "用户": "请帮我使用space2空间。",
        "查询": "USE space2"
    },
    {
        "用户": "Hello, please help me find the entities, relationship types, and team names related to 'LeBron James'.",
        "查询": "MATCH (v1) -[r]-> (v2)\nWHERE id(v1) == \"LeBron James\"\nRETURN type(r) AS Type, v2.team.name AS Name"
    },
    {
        "用户": "获取球员 'Tim Duncan' 的姓名和年龄。",
        "查询": "FETCH PROP ON player \"Tim Duncan\" YIELD player.name, player.age"
    },
    {
        "用户": "返回别名为'abc'的学生实体ID。",
        "查询": "LOOKUP ON student WHERE student.alias == \"abc\" YIELD id(vertex) as id"
    },
    {
        "用户": "Please help me find all the friends of a player named 'Tim Duncan' and tell me the number of each friend.",
        "查询": "MATCH p=(v:player{name:\"Tim Duncan\"})-[e:follow*0..3]->(v2:player)\nRETURN DISTINCT v2 AS Friends, count(v2)"
    },
    {
        "用户": "请帮我创建一个学校实体，它的id是'dut'，名字是'dut'，创建时间是当前时间。",
        "查询": "INSERT VERTEX school(name, found_time) VALUES \"dut\":(\"dut\", now())"
    },
    {
        "用户": "Insert the relationship between 'player101' and 'player102' with a 90 degree of attention.",
        "查询": "INSERT EDGE follow(degree) VALUES \"player101\" -> \"player102\":(90)"
    },
    {
        "用户": "请帮我查找any_shape中所有实体的地理位置，并返回这些地理位置的文本表示。",
        "查询": "LOOKUP ON any_shape YIELD ST_ASText(any_shape.geo)"
    },
    {
        "用户": "治疗糖尿病的科室是哪个？",
        "查询": "GO FROM \"糖尿病\" OVER cure_department YIELD dst(edge);"
    },
    {
        "用户": "Identify the entities connected to 'LeBron James' through a' like 'relationship, and return the relationships and names of these entities.",
        "查询": "MATCH p = (n)-[:like]-(m)\nWHERE id(n) == \"LeBron James\"\nRETURN p, n.player.name, m.player.name"
    },
    {
        "用户": "Find the entity that has a 'like' relationship with 'Nobody' and return the number 1.",
        "查询": "GO FROM \"Nobody\" OVER like YIELD like._dst | YIELD 1"
    },
    {
        "用户": "找出所有被 'Tony Parker' 和 'Tim Duncan' 喜欢的实体，并返回这些实体及其关系，但排除 'Tony Parker' 和 'Tim Duncan' 自身的关系。",
        "查询": "MATCH (v:player)-[e:like]->(v2) WHERE none_direct_src(e) IN [\"Tony Parker\", \"Tim Duncan\"] RETURN *\nMINUS\nMATCH (v:player)-[e:like]->(v2) WHERE id(v) IN [\"Tony Parker\", \"Tim Duncan\"] RETURN *"
    },
    {
        "用户": "Returns the element with subscript 2 in array [1, 2, 3].",
        "查询": "YIELD [1, 2, 3][2]"
    },
    {
        "用户": "请问您能帮我创建一个名为student_alias的标签索引吗？该索引是基于student标签的alias属性，并且最大长度为10。",
        "查询": "CREATE TAG INDEX student_alias ON student(alias(10))"
    },
    {
        "用户": "Find student entities with alias' abc 'and return the IDs of these entities.",
        "查询": "LOOKUP ON student WHERE student.alias == \"abc\" YIELD id(vertex) as id"
    },
    {
        "用户": "If my_ If space does not exist, create a file named 'my'_ Space, where the type of entity ID is a fixed length string of 30.",
        "查询": "CREATE SPACE IF NOT EXISTS my_space (vid_type=FIXED_STRING(30))"
    },
    {
        "用户": "创建一个名为student_ta的标签索引，该索引包含了student标签中alias和teacher属性的前10个字符。",
        "查询": "CREATE TAG INDEX student_ta ON student(alias(10), teacher(10))"
    },
    {
        "用户": "Describe information about basketball player space.",
        "查询": "DESCRIBE SPACE basketballplayer"
    },
    {
        "用户": "请问您能帮我删除边索引edge_1_ttl_index_2_degree吗？",
        "查询": "DROP EDGE INDEX edge_1_ttl_index_2_degree"
    },
    {
        "用户": "Please help me delete the entity named 'Tony Parker' and all related connections.",
        "查询": "DELETE VERTEX \"Tony Parker\" WITH EDGE;"
    },
    {
        "用户": "找出'player100'所'关注'的所有实体，并返回这些实体的边的目标实体",
        "查询": "GO FROM \"player100\" OVER follow WHERE properties($$).name IS NOT EMPTY YIELD dst(edge)"
    },
    {
        "用户": "Identify the names and ages of the top three oldest players among all entities that like 'Dejounte Murray', arranged in descending age order and ascending name order.",
        "查询": "MATCH (v1) -[:like]-> (v)\nWHERE id(v1) == 'Dejounte Murray'\nRETURN v.player.name AS Name, v.player.age AS Age\nORDER BY Age DESC, Name ASC\nSKIP 3\nLIMIT 3"
    },
    {
        "用户": "If there is no tag named t2, can you help me create a tag named t2 that contains a string attribute named p2?",
        "查询": "CREATE TAG IF NOT EXISTS t2 (p2 STRING)"
    },
    {
        "用户": "找出年龄大于20的'Tim Duncan'和'Chris Paul'所 '喜欢' 的实体，并返回这些实体的ID，然后从这些实体出发找出'喜欢程度'大于80的所有关系。返回这些关系的目标实体。",
        "查询": "$var = GO FROM \"Tim Duncan\", \"Chris Paul\" OVER like WHERE properties($$).age > 20 YIELD id($$) as id;\nGO FROM $var.id OVER * WHERE properties(edge).likeness > 80 YIELD $$ as dst"
    },
    {
        "用户": "您好，请帮我找一下从 'Tiago Splitter' 到 'LaMarcus Aldridge' 的最短路径，路径长度要小于5，然后把路径上的所有实体和关系都返回给我好吗？",
        "查询": "MATCH p = shortestPath( (a:player{name:\"Tiago Splitter\"})-[e*..5]->(b:player{name:\"LaMarcus Aldridge\"}) ) RETURN  p"
    },
    {
        "用户": "找出名为 'Tracy McGrady' 的球员所 '喜欢' 的所有实体，包括直接和间接的关系，且喜欢程度为90，返回这些实体及其关系。",
        "查询": "MATCH (:player{name:\"Tracy McGrady\"})-[e:like*0..1{likeness: 90}]-(v)\nRETURN e, v"
    },
    {
        "用户": "将属性a设为'Hello'，属性b设为100，插入一个名为'player100'的t1类型顶点。",
        "查询": "INSERT VERTEX t1(a, b) VALUES \"player100\":(\"Hello\", 100)"
    },
    {
        "用户": "请帮我找出'player100'所关注和服务的所有实体，并返回这些边的属性度和起始年份。",
        "查询": "GO FROM \"player100\" OVER follow, serve\nYIELD properties(edge).degree, properties(edge).start_year"
    },
    {
        "用户": "查找名为'Tracy McGrady'的球员所服务或喜欢，最多距离为1的实体，并返回这些关系和实体。",
        "查询": "MATCH (:player{name:\"Tracy McGrady\"})-[e:serve|like*0..1]-(v)\nRETURN e, v"
    },
    {
        "用户": "您好，请帮我查找一下，我需要找到一个名叫'Tony Parker'的球员，然后告诉我他的姓名和年龄。谢谢！",
        "查询": "FETCH PROP ON player \"Tony Parker\" YIELD player.name, player.age"
    },
    {
        "用户": "Hello, could you help me find the shortest path from 'Tim Duncan' to 'Tony Parker'? Please also return all nodes on the path together.",
        "查询": "FIND SHORTEST PATH FROM \"Tim Duncan\" TO \"Tony Parker\" OVER like YIELD path as p\n| YIELD nodes($-.p) AS nodes | UNWIND $-.nodes AS a | YIELD $-.a AS a"
    },
    {
        "用户": "Please help me check the current timestamp.",
        "查询": "RETURN timestamp()"
    },
    {
        "用户": "查找e1中col1小于等于2且col3为true的所有边，返回这些边的源节点和目标节点。",
        "查询": "LOOKUP ON e1 WHERE e1.col1 <= 2 AND e1.col3 < true YIELD src(edge) as src, dst(edge) as dst"
    },
    {
        "用户": "找出与 'Nobody' 有 '喜欢' 关系的实体，并返回数字 1。",
        "查询": "GO FROM \"Nobody\" OVER like YIELD like._dst | YIELD 1"
    },
    {
        "用户": "Please read the variable_ Set only to true.",
        "查询": "SET VARIABLES read_only=true"
    },
    {
        "用户": "Please help me submit tasks to balance the data.",
        "查询": "SUBMIT JOB BALANCE DATA"
    },
    {
        "用户": "Set edge on edge_ 1_ Add an index on TTL with the attribute 'start'_ Time.",
        "查询": "CREATE EDGE INDEX edge_1_ttl_index_second_start_time ON edge_1_ttl(start_time)"
    },
    {
        "用户": "高血压疾病不推荐吃什么？",
        "查询": "MATCH (n:disease{name:'高血压'})-[e:no_eat]->(n1:food) return n1.food.name"
    },
    {
        "用户": "查找名为'Tony Parker'的球员，并返回他的姓名和年龄。",
        "查询": "LOOKUP ON player WHERE player.name == \"Tony Parker\"\nYIELD properties(vertex).name AS name, properties(vertex).age AS age"
    },
    {
        "用户": "Find all entities served by a player named 'Tim Duncan' and return these entities and their relationships.",
        "查询": "MATCH (v:player{name:\"Tim Duncan\"})-[]->(v2)<-[e:serve]-(v3)\nRETURN v2, v3"
    },
    {
        "用户": "Please find all entities associated with a player named 'Tim Duncan' and arrange them in descending order of age, then tell me the name and age of the entity.",
        "查询": "MATCH (v:player{name:\"Tim Duncan\"}) --> (v2)\nRETURN v2.player.name AS Name, v2.player.age AS Age\nORDER BY Age DESC"
    },
    {
        "用户": "找出名为'Tim Duncan'的球员所服务或喜欢的实体，距离为2-3跳，计算数量并返回。",
        "查询": "MATCH (:player{name:\"Tim Duncan\"})-[e:serve|like*2..3]-(v)\nRETURN COUNT(1)"
    },
    {
        "用户": "Describe the creation information of the label woman.",
        "查询": "SHOW CREATE TAG woman;"
    },
    {
        "用户": "新增一个名为ttl_tag06的标签，包含两个时间戳属性a和b，设置过期时间为3，过期列为a。",
        "查询": "CREATE TAG ttl_tag06(a timestamp, b timestamp) ttl_duration=3,ttl_col=\"a\";"
    },
    {
        "用户": "查找球员'Tony Parker'的实体，并返回其ID。",
        "查询": "LOOKUP ON player WHERE player.name == \"Tony Parker\" YIELD id(vertex) as id"
    },
    {
        "用户": "请问您能帮我计算一下Label_0类型的实体数量吗？",
        "查询": "match p = (v:Label_0)\nreturn count(p)"
    },
    {
        "用户": "Find all entities connected to a player named 'Manu Ginobili', return their attributes such as gender, relationship strength, name, age, and sort them by relationship strength, name, and age, and return a maximum of 5 records.",
        "查询": "match (src_v:player{name:\"Manu Ginobili\"})-[e*2]-(dst_v)\n  return properties(src_v).sex,properties(e[0]).degree as degree,properties(dst_v).name as name,src_v.player.age AS age, e[1].start_year,dst_v.player.age\n  order by degree, name, age limit 5;"
    },
    {
        "用户": "您好，请帮我找一下，在t1类型中，我想获取col4等于'durian'且col2小于等于2.0的所有实体的ID。谢谢！",
        "查询": "LOOKUP ON t1 WHERE t1.col4 == \"durian\" AND t1.col2 <= 2.0 YIELD id(vertex) as id"
    },
    {
        "用户": "Please help me return the names and ages of all players and sort them in descending order according to their names.",
        "查询": "MATCH (v:player) RETURN v.player.name AS Name, v.player.age AS Age\nORDER BY Name DESC"
    },
    {
        "用户": "您好，请帮我找出ID为'Tom'的实体，并找出与其直接相连的实体，然后返回它们之间的所有关系路径。",
        "查询": "MATCH p=(v)-[e*1]->(v2) WHERE id(v) IN [\"Tom\"] RETURN p"
    },
    {
        "用户": "找出名为'Tim Duncan'的球员的所有朋友，并返回每个朋友的数量。",
        "查询": "MATCH p=(v:player{name:\"Tim Duncan\"})-[e:follow*0..3]->(v2:player)\nRETURN DISTINCT v2 AS Friends, count(v2)"
    },
    {
        "用户": "Please help me find the relationships between a player named 'Tim Duncan' and other entities and return these relationships.",
        "查询": "MATCH p=(v:player{name:\"Tim Duncan\"})-->(v2)\nRETURN p"
    },
    {
        "用户": "Find the relationship and endpoint node information between 'Tim Duncan' liked by 'Tony Parker' and 'Tracy McGrady' liked by 'Grant Hill'.",
        "查询": "FETCH PROP ON like \"Tony Parker\"->\"Tim Duncan\", \"Grant Hill\" -> \"Tracy McGrady\" YIELD edge as relationship |\nYIELD endNode($-.relationship) AS node"
    },
    {
        "用户": "Return the names and ages of the top 5 players, sorted by age.",
        "查询": "MATCH (v:player) RETURN v.player.name AS Name, v.player.age AS Age\nORDER BY Age LIMIT 5"
    },
    {
        "用户": "Hello, could you please help me find the start and end years of Tony Parker's service with 'Spurs'? Thank you.",
        "查询": "FETCH PROP ON serve \"Tony Parker\"->\"Spurs\" YIELD serve.start_year, serve.end_year"
    },
    {
        "用户": "Insert two vertices, one representing the team named 'Trail Blazers' and the other representing the team named' Spurs'.",
        "查询": "INSERT VERTEX team(name) VALUES \"team203\":(\"Trail Blazers\"), \"team204\":(\"Spurs\")"
    },
    {
        "用户": "请帮我创建一条边，表示服务的开始年份和结束年份。",
        "查询": "CREATE EDGE serve(start_year int, end_year int)"
    },
    {
        "用户": "请帮我使用space1空间。",
        "查询": "USE space1"
    },
    {
        "用户": "If the t1 tag does not exist, create a tag with p1 string and p2 integer attributes.",
        "查询": "CREATE TAG IF NOT EXISTS t1 (p1 string, p2 int)"
    },
    {
        "用户": "找出喜欢'Tony Parker'的球员'Tim Duncan'，并返回'Tim Duncan'球员的姓名。",
        "查询": "MATCH (v:player{name:\"Tony Parker\"})\nWITH v AS a\nMATCH p=(o:player{name:\"Tim Duncan\"})-[]->(a)\nRETURN o.player.name"
    },
    {
        "用户": "Delete two entities with IDs of 'player111' and 'team203'.",
        "查询": "DELETE VERTEX \"player111\", \"team203\""
    },
    {
        "用户": "请展示一下所有的分区。",
        "查询": "SHOW PARTS"
    },
    {
        "用户": "胃炎的治疗时长是多少？",
        "查询": "LOOKUP ON disease WHERE disease.name == \"胃炎\" YIELD properties(vertex).cure_lasttime"
    },
    {
        "用户": " 您好，请帮我找一下从Yao Ming到Danny Green之间的关系，要求是空或相似度大于等于80的路径，最多3步，并将这些路径返回给我。",
        "查询": "FIND ALL PATH WITH PROP FROM \"Yao Ming\" TO \"Danny Green\" OVER * BIDIRECT\nWHERE like.likeness is  EMPTY OR like.likeness >= 80 UPTO 3 STEPS YIELD path as p"
    },
    {
        "用户": "查找名字小于'a'的所有学生，返回它们的ID、姓名和年龄。",
        "查询": "LOOKUP ON student WHERE student.name < \"a\" YIELD id(vertex) as id, student.name as name, student.age as age"
    },
    {
        "用户": "Find the ID of the entity 'Tim Duncan' likes' and the corresponding player age for that entity, count the number of entities with an age greater than 40 after deduplication, and return it.",
        "查询": "GO FROM \"Tim Duncan\" OVER like YIELD like._dst AS dst, $$.player.age AS age\n| YIELD DISTINCT count(*) AS count where $-.age > 40"
    },
    {
        "用户": "Please help me find all the players associated with a player named 'Tim Duncan' and return their names.",
        "查询": "MATCH (v:player{name:\"Tim Duncan\"})--(v2:player)\nRETURN v2.player.name AS Name"
    },
    {
        "用户": "删除从 'Boris Diaw' 出发的所有 '喜欢' 边",
        "查询": "GO FROM \"Boris Diaw\" OVER like\nYIELD like._src as src, like._dst as dst, like._rank as rank\n| DELETE EDGE like $-.src->$-.dst @ $-.rank"
    },
    {
        "用户": "Find a player named 'Manu Ginobili' and entities that have a two hop relationship with them. Return the gender, relationship strength, name, age, and relationship start year of these entities, sorted by relationship strength, name, and age, with a maximum of 5 records returned.",
        "查询": "match (src_v:player{name:\"Manu Ginobili\"})-[e*2]-(dst_v)\n  return properties(src_v).sex,properties(e[0]).degree as degree,properties(dst_v).name as name,src_v.player.age AS age, e[1].start_year,dst_v.player.age\n  order by degree, name, age limit 5;"
    },
    {
        "用户": "寻找从球员 'Tim Duncan' 到球员 'Tony Parker' 的最短路径，并返回路径上的关系和节点信息。",
        "查询": "MATCH p = shortestPath( (a:player{name:\"Tim Duncan\"})-[e*..5]-(b:player{name:\"Tony Parker\"}) )  RETURN e, p"
    },
    {
        "用户": "Please show me all the hosts.",
        "查询": "SHOW HOSTS"
    },
    {
        "用户": "Please help me identify all the players associated with the player named 'Tim Duncan' and tell me the names of these players.",
        "查询": "MATCH (v:player{name:\"Tim Duncan\"})--(v2:player)\nRETURN v2.player.name AS Name"
    },
    {
        "用户": "找出名为'Tony Parker'的球员所关联的所有球员，并返回这些球员的姓名和年龄。",
        "查询": "MATCH (v:player{name:\"Tony Parker\"})--(v2:player)\nRETURN v2.player.name, v2.player.age"
    },
    {
        "用户": "查找球员Manu Ginobili的关系，返回他的年龄、关系的度数、关系的终点实体名字、性别、关系开始年份和终点实体的年龄，按名字排序并限制返回前三个结果。",
        "查询": "match (src_v:player{name:\"Manu Ginobili\"})-[e]-(dst_v)\n  return properties(src_v).age,properties(e).degree,properties(dst_v).name AS name,src_v.player.sex,e.start_year,dst_v.player.age\n  order by name limit 3;"
    },
    {
        "用户": "Find all friends of a player named 'Tim Duncan' and return the number of each friend.",
        "查询": "MATCH p=(v:player{name:\"Tim Duncan\"})-[e:follow*0..3]->(v2:player)\nRETURN DISTINCT v2 AS Friends, count(v2)"
    },
    {
        "用户": "我想提交任务，请帮我平衡数据。",
        "查询": "SUBMIT JOB BALANCE DATA"
    },
    {
        "用户": "你能帮我删除一个不存在的标签索引吗？",
        "查询": "DROP TAG INDEX IF EXISTS not_exists_tag_index"
    },
    {
        "用户": "找出名为'Ben Simmons'的球员所服务的所有关系，并返回这些关系。",
        "查询": "MATCH (v:player{name:\"Ben Simmons\"})-[e:serve]-(v2)\nRETURN e"
    },
    {
        "用户": "Hello, please help me find all the teams' Tim Duncan 'plays for and remove their' team 'tags.",
        "查询": "$var = GO FROM \"Tim Duncan\" OVER serve YIELD serve._dst as id; DELETE TAG team FROM $var.id"
    },
    {
        "用户": "Find all second time followers of players named 'Tim Duncan' and return their names.",
        "查询": "MATCH p=(v:player{name:\"Tim Duncan\"})-[e:follow*2]->(v2)\nWHERE ALL(e_ in e WHERE e_.degree > 0)\nRETURN DISTINCT v2 AS Friends"
    },
    {
        "用户": "在边集合edge_1_ttl上创建一个索引，索引的属性为start_time。",
        "查询": "CREATE EDGE INDEX edge_1_ttl_index_second_start_time ON edge_1_ttl(start_time)"
    },
    {
        "用户": "如果没有的话，能否帮我创建一个名为only_polygon的标签，它的属性是一个地理多边形呢？",
        "查询": "CREATE TAG IF NOT EXISTS only_polygon(geo geography(polygon))"
    },
    {
        "用户": "Could you please help me find the shortest path from 'Shaquille' to Manu Ginobili? Can a maximum of 5 entities pass through the path and return path information?",
        "查询": "YIELD \"Shaquille O\\'Neal\" AS src\n| FIND SHORTEST PATH FROM $-.src TO \"Manu Ginobili\" OVER * UPTO 5 STEPS YIELD path as p"
    },
    {
        "用户": "您好，请帮我获取'Boris Diaw'和'Tony Parker'的属性，并将它们的ID返回给我。",
        "查询": "FETCH PROP ON player 'Boris Diaw', 'Tony Parker' YIELD vertex as node | YIELD id($-.node) as id"
    },
    {
        "用户": "获取 'Tony Parker' 球员的属性，包括姓名和年龄。",
        "查询": "$v1 = FETCH PROP ON player \"Tony Parker\"\nYIELD properties(Vertex) AS props, properties(Vertex).name AS name, properties(Vertex).age AS age"
    },
    {
        "用户": "多少种病能够通过手术治疗方式治愈？",
        "查询": "MATCH (n:disease)-[]->(n1:cure{name:'手术治疗'}) return count(n)"
    },
    {
        "用户": "Find a player named 'Tim Duncan' and find another player who has a relationship with a certain entity, and return the names of these players.",
        "查询": "MATCH (v:player{name:\"Tim Duncan\"})-->(v2)<--(v3)\nRETURN v3.player.name AS Name"
    },
    {
        "用户": "请帮我找出名为'Tim Duncan'的球员，并返回与他关联的所有实体及这些实体之间的关系长度。",
        "查询": "MATCH p=(v:player{name:\"Tim Duncan\"})-->(v2) return length(p)"
    },
    {
        "用户": "您好，请帮我获取 serve 关系中所有实体的起始年份，并将这些起始年份返回给我。",
        "查询": "LOOKUP ON serve YIELD serve.start_year AS startYear"
    },
    {
        "用户": "Please insert a person node with a value of 1 into the vertex with attribute p1 being 1.",
        "查询": "INSERT VERTEX person(p1) VALUES \"1\":(1)"
    },
    {
        "用户": "返回球员名为James Harden、Jonathon Simmons、Klay Thompson、Dejounte Murray、Paul Gasol的实体的姓名。",
        "查询": "MATCH (v)\nWHERE id(v) IN ['James Harden', 'Jonathon Simmons', 'Klay Thompson', 'Dejounte Murray', 'Paul Gasol']\n      AND true\nRETURN v.player.name AS Name"
    },
    {
        "用户": "Could you please insert a player named 'Tony Parker' and aged 36 into the player type set with ID 'player101'?",
        "查询": "INSERT VERTEX player(name, age) VALUES \"player101\":(\"Tony Parker\", 36)"
    },
    {
        "用户": "请帮我找出ID为player100的实体的标签。",
        "查询": "MATCH (v)-[e:serve]->()\nWHERE id(v)==\"player100\"\nRETURN labels(v)"
    },
    {
        "用户": "Returns elements that appear simultaneously in two lists.",
        "查询": "UNWIND [1,2] AS a RETURN a\nINTERSECT\nUNWIND [1,2,3,4] AS a\nRETURN a"
    },
    {
        "用户": "请问您能帮我找一下从 'Tiago Splitter' 到 'LaMarcus Aldridge' 的最短路径吗？路径长度要在5之内。",
        "查询": "MATCH p = shortestPath( (a:player{name:\"Tiago Splitter\"})-[e*..5]->(b:player{name:\"LaMarcus Aldridge\"}) )\n  WHERE length(p) > 2\n  RETURN  p"
    },
    {
        "用户": "Please help me add a data receiver with the address 192.168.10.106:9889.",
        "查询": "ADD DRAINER 192.168.10.106:9889"
    },
    {
        "用户": "Find the relationship properties of 'Tim Duncan' that Tony Parker likes and 'Tracy McGrady' that Grant Hill likes, and return the termination nodes of these relationships.",
        "查询": "FETCH PROP ON like \"Tony Parker\"->\"Tim Duncan\", \"Grant Hill\" -> \"Tracy McGrady\" YIELD edge as e |\nYIELD endNode($-.e) AS nodes"
    },
    {
        "用户": "请帮我创建一个学校实体，ID为'dut'，名为'dut'，创建时间为当前时间。",
        "查询": "INSERT VERTEX school(name, found_time) VALUES \"dut\":(\"dut\", now())"
    },
    {
        "用户": "找出名为'Tim Duncan'的球员所连接的所有实体，并按照年龄降序排列，跳过第一个结果，返回实体的姓名和年龄。",
        "查询": "MATCH (v:player{name:\"Tim Duncan\"}) --> (v2)\nRETURN v2.player.name AS Name, v2.player.age AS Age\nORDER BY Age DESC SKIP 1"
    },
    {
        "用户": "Please help me find all entities associated with a player named 'Tim Duncan' and sort them in descending order of age, skip the first result, and then tell me the name and age of the oldest entity.",
        "查询": "MATCH (v:player{name:\"Tim Duncan\"}) --> (v2)\nRETURN v2.player.name AS Name, v2.player.age AS Age\nORDER BY Age DESC SKIP 1 LIMIT 1"
    },
    {
        "用户": "Create an edge called follow, which has an attribute called degree.",
        "查询": "CREATE EDGE follow(degree int)"
    },
    {
        "用户": "Please help me display the information for the first partition.",
        "查询": "SHOW PARTS 1"
    },
    {
        "用户": "将实体'player101'和实体'player102'之间建立一条'关注'边，边的属性为'degree'，值为 90。",
        "查询": "INSERT EDGE follow(degree) VALUES \"player101\" -> \"player102\":(90)"
    },
    {
        "用户": "请帮我返回当前的时间戳。",
        "查询": "RETURN timestamp()"
    },
    {
        "用户": "Please tell me the different roles of basketball players.",
        "查询": "SHOW ROLES in basketballplayer"
    },
    {
        "用户": "Starting from 'Tim Duncan', take three steps along the 'like' relationship, and return to the result limit where the first hop automatically selects 1 edge, the second hop selects 3 edges, and the third hop selects 2 edges",
        "查询": "GO 3 STEPS FROM \"Tim Duncan\" OVER like YIELD like._dst SAMPLE [1, 3, 2];"
    },
    {
        "用户": "Add a string alias attribute with a default value of 'abc' to the student tag.",
        "查询": "ALTER TAG student ADD (alias string default \"abc\")"
    },
    {
        "用户": "获取'Boris Diaw'的球员的姓名、年龄，并返回该球员年龄是否大于30的布尔值。",
        "查询": "FETCH PROP ON player 'Boris Diaw' YIELD player.name, player.age, player.age > 30"
    },
    {
        "用户": "找出从 'Tim Duncan' 到 'Tony Parker' 或 'Manu Ginobili' 的不重复路径，路径上的关系为 '喜欢'，最多包含3个跳，并返回路径信息。",
        "查询": "FIND NOLOOP PATH FROM \"Tim Duncan\" TO \"Tony Parker\", \"Manu Ginobili\" OVER like UPTO 3 STEPS YIELD path as p"
    },
    {
        "用户": "计算1+1的结果作为sum的值并返回。",
        "查询": "RETURN 1+1 AS sum"
    },
    {
        "用户": "Starting from 'Tony Parker', heading towards the entities of 'teammates' and' services', along the 'like' edges, find a subgraph with a distance of 5, and return the nodes and edges in the subgraph.",
        "查询": "GET SUBGRAPH WITH PROP 5 steps from 'Tony Parker' IN teammate OUT serve BOTH like YIELD VERTICES as nodes, EDGES as relationships"
    },
    {
        "用户": "请找出所有关注'player100'的实体，并返回这些实体的边的源节点作为destination。",
        "查询": "GO FROM \"player100\" OVER follow REVERSELY\nYIELD src(edge) AS destination"
    },
    {
        "用户": "Find all the relationships served by a player named 'Ben Simmons' and return these relationships.",
        "查询": "MATCH (v:player{name:\"Ben Simmons\"})-[e:serve]-(v2)\nRETURN e"
    },
    {
        "用户": "从 'Tim Duncan' 开始，沿着 '喜欢' 的关系找到 'Tony Parker' 或 'LaMarcus Aldridge' 的所有路径，最多不超过3步，并返回这些路径。",
        "查询": "FIND ALL PATH FROM \"Tim Duncan\" TO \"Tony Parker\", \"LaMarcus Aldridge\" OVER like UPTO 3 STEPS YIELD path as p"
    },
    {
        "用户": "Find the IDs of all entities that 'Tony Parker' likes' and return the IDs of these entities and the age of 'Tony Parker'.",
        "查询": "$v1 = GO FROM \"Tony Parker\" OVER like YIELD id($$) AS dst, $^.player.age AS age"
    },
    {
        "用户": "Please help me find all the entities served by a player named 'Tim Duncan' and return these entities and their relationships.",
        "查询": "MATCH (v:player{name:\"Tim Duncan\"})-[]->(v2)<-[e:serve]-(v3)\nRETURN v2, v3"
    },
    {
        "用户": "您好，请帮我查找与 'Tim Duncan' 有 '服务' 关系的所有实体，并返回它们的 ID。",
        "查询": "GO FROM 'Tim Duncan' OVER serve bidirect YIELD serve._dst"
    },
    {
        "用户": "Search for entities related to 'LeBron James', return the relationship type and entity name. If it is a team, return the team name. If it is a player, return the player name.",
        "查询": "MATCH (v1) -[r]-> (v2)\nWHERE id(v1) == \"LeBron James\"\nRETURN type(r) AS Type, CASE WHEN v2.team.name IS NOT NULL THEN v2.team.name WHEN v2.player.name IS NOT NULL THEN v2.player.name END AS Name"
    },
    {
        "用户": "您好，请帮我找出与节点p通过'serve'关系，最多经过3个节点，连接到节点t的节点p。",
        "查询": "MATCH (p)-[:serve*0..3]->(t) RETURN p"
    },
    {
        "用户": "Find players aged 40 or older and return their ID and age.",
        "查询": "LOOKUP ON player WHERE player.age >= 40.0 YIELD id(vertex) as name, player.age AS Age"
    },
    {
        "用户": "查询所有球员节点的ID、数量、年龄总和、最大年龄、最小年龄、平均年龄和标签，并按照ID、数量、最大年龄、最小年龄排序，跳过前10个结果，返回接下来的8个结果。",
        "查询": "MATCH(n:player)\n  RETURN id(n) AS id,\n         count(n) AS count,\n         sum(floor(n.player.age)) AS sum,\n         max(n.player.age) AS max,\n         min(n.player.age) AS min,\n         avg(distinct n.player.age)+1 AS age,\n         labels(n) AS lb\n    ORDER BY id, count, max, min\n    SKIP 10 LIMIT 8;"
    },
    {
        "用户": "找出名为'Tim Duncan'的球员所喜欢的喜好度为90的实体，距离该球员2到3个关系，并返回这些实体及关系。",
        "查询": "MATCH (:player{name:\"Tim Duncan\"})<-[e:like*2..3{likeness: 90}]-(v)\nRETURN e, v"
    },
    {
        "用户": "Set attribute a to 'Hello' and attribute b to 100, and insert it as a vertex with ID 'player100' into t1.",
        "查询": "INSERT VERTEX t1(a, b) VALUES \"player100\":(\"Hello\", 100)"
    },
    {
        "用户": "从 'Tim Duncan' 出发，沿着 '喜欢' 关系向外扩展3步，返回结果限制为第一跳自动选择一条边，第二跳选择两条边，第三跳选择两条边。",
        "查询": "GO 3 STEPS FROM \"Tim Duncan\" OVER like LIMIT [1, 2, 2];"
    },
    {
        "用户": "找出 'Tim Duncan' 所 '喜欢' 的实体的 ID 和该实体对应的球员年龄，统计去重后的年龄大于40的实体数量并返回。",
        "查询": "GO FROM \"Tim Duncan\" OVER like YIELD like._dst AS dst, $$.player.age AS age\n| YIELD DISTINCT count(*) AS count where $-.age > 40"
    },
    {
        "用户": "Find the relationships between a player named 'Tracy McGrady' and entities with a 90 degree of service or liking, and return these relationships and entities.",
        "查询": "MATCH (:player{name:\"Tracy McGrady\"})-[e:serve|like*0..1{likeness: 90}]->(v)\nRETURN e, v"
    },
    {
        "用户": "I want to create a space called basketball player, which has 10 partitions, each with 1 replica. The type of entity ID is 30 fixed length strings.",
        "查询": "CREATE SPACE basketballplayer\n(partition_num = 10,\nreplica_factor = 1,\nvid_type = FIXED_STRING(30))"
    },
    {
        "用户": "Please help me find all 1-3 degree friends of a player named 'Tim Duncan' who have a 'follow' relationship, and return these friends and their numbers.",
        "查询": "MATCH p=(v:player{name:\"Tim Duncan\"})-[e:follow*1..3]->(v2:player)\nRETURN DISTINCT v2 AS Friends, count(v2)"
    },
    {
        "用户": "创建一条名为follow的边，该边具有一个名为degree的属性。",
        "查询": "CREATE EDGE follow(degree int)"
    },
    {
        "用户": "Hey, can you help me find all the paths from Yao Ming to Danny Green in both directions? The edges on the path can be of any type, as long as the likeness of the 'like' attribute is empty or greater than or equal to 80. Go through a maximum of 3 steps and then provide me with the path information.",
        "查询": "FIND ALL PATH WITH PROP FROM \"Yao Ming\" TO \"Danny Green\" OVER * BIDIRECT\nWHERE like.likeness is  EMPTY OR like.likeness >= 80 AND 1 > 2 UPTO 3 STEPS YIELD path as p"
    },
    {
        "用户": "Identify all entities connected through the 'follow' relationship (bidirectional) starting from 'player101', and group them based on their attribute 'name', returning the 'name' of each group and the corresponding number of entities.",
        "查询": "GO FROM \"player101\" OVER follow BIDIRECT\nYIELD properties($$).name AS Name\n| GROUP BY $-.Name YIELD $-.Name, count(*)"
    },
    {
        "用户": "Please identify all entities that 'player100' with a focus greater than 90 and return the edge information of these entities.",
        "查询": "GO FROM \"player100\" OVER follow\nWHERE follow.degree > 90\nYIELD dst(edge)"
    },
    {
        "用户": "从'test'中删除'test1'标签。",
        "查询": "DELETE TAG test1 FROM \"test\""
    },
    {
        "用户": "Find a player named 'Tim Duncan' and find another player who has a relationship with a certain entity, and return the names of these players.",
        "查询": "MATCH (v:player{name:\"Tim Duncan\"})-->()<--(v3)\nRETURN v3.player.name AS Name"
    },
    {
        "用户": "Change the comment for label t1 to 'test1'.",
        "查询": "ALTER TAG t1 COMMENT ='test1'"
    },
    {
        "用户": "找出与球员'Shaquille O'Neal'有关系的实体，返回这些实体的姓名、年龄、性别和年龄，按年龄和姓名排序，只返回一条记录。",
        "查询": "match (v1)-->(v2:player)-->(v3) where v2.player.name==\"Shaquille O'Neal\"\n  return properties(v1).name,properties(v2).age as age,properties(v3).name AS name,v2.player.sex,v1.player.age\n  order by age, name limit 1;"
    },
    {
        "用户": "查找年龄大于等于40岁的球员，并返回他们的ID和年龄。",
        "查询": "LOOKUP ON player WHERE player.age >= 40.0 YIELD id(vertex) as name, player.age AS Age"
    },
    {
        "用户": "Find the entities that have reached the 'service' relationship in a maximum of 3 steps, starting from 'Tim Duncan' and using a 'like' relationship with a liking level greater than 90, and sort them by path length to return to the top 5 paths.",
        "查询": "$a = GO FROM \"Tim Duncan\" over * YIELD like._dst AS src, serve._src AS dst;\nFIND NOLOOP PATH WITH PROP FROM $a.src TO $a.dst OVER like WHERE like.likeness > 90 UPTO 3 STEPS YIELD path as p |\nORDER BY $-.p | LIMIT 5"
    },
    {
        "用户": "请问您能帮我找一下，从 'Shaquille O'Neal' 到 'Manu Ginobili'、'Spurs'、'Lakers' 的关系吗？我需要找到不超过5步的最短路径。",
        "查询": "FIND SHORTEST PATH FROM \"Shaquille O\\'Neal\" TO \"Manu Ginobili\", \"Spurs\", \"Lakers\" OVER * UPTO 5 STEPS YIELD path as p"
    },
    {
        "用户": "If the player_ With_ If the default label does not exist, create a file named player_ With_ The default label contains the name and age attributes, with a default value of 20 for the age attribute.",
        "查询": "CREATE TAG IF NOT EXISTS player_with_default(name string, age int DEFAULT 20)"
    },
    {
        "用户": "Find the team names with a player ID of 'Paul Gasol' and a playing relationship with 'Grizzlies' or' Lakers', and return the names of the players and their playing teams under these vertices.",
        "查询": "MATCH (v)-[:serve]->(t)\nWHERE (NOT NOT id(v) == 'Paul Gasol') AND id(v) == 'Paul Gasol' AND id(t) IN ['Grizzlies', 'Lakers']\nRETURN v.player.name AS Name, t.team.name AS Team"
    },
    {
        "用户": "Find all students whose teacher's name is greater than 'a' and return their IDs.",
        "查询": "LOOKUP ON student WHERE student.teacher > \"a\" YIELD id(vertex) as id"
    },
    {
        "用户": "Identify entities that 'Tim Duncan' and 'Chris Paul' like, and then identify their relationships and attributes with other entities, excluding edges and attributes related to 'Tim Duncan' and 'Chris Paul'.",
        "查询": "$var = GO FROM 'Tim Duncan', 'Chris Paul' OVER like YIELD $^.player.name AS name, id($$) AS id;\nGO FROM $var.id OVER like  WHERE $var.name != $$.player.name YIELD $var.name, properties(edge) as props"
    },
    {
        "用户": "查找名为'Tim Duncan'的球员实体，并返回该实体的ID。",
        "查询": "LOOKUP ON player WHERE player.name == \"Tim Duncan\" YIELD id(vertex) as id"
    },
    {
        "用户": "获取实体'player100'的属性并返回。",
        "查询": "FETCH PROP ON player \"player100\" YIELD properties(vertex)"
    },
    {
        "用户": "查找球员Manu Ginobili的关系，返回他的年龄、关系强度、关联球员的姓名、性别、关系开始年份和关联球员的年龄，并按姓名排序，限制结果为3条。",
        "查询": "match (src_v:player{name:\"Manu Ginobili\"})-[e]-(dst_v)\n  return properties(src_v).age,properties(e).degree,properties(dst_v).name AS name,src_v.player.sex,e.start_year,dst_v.player.age\n  order by name limit 3;"
    },
    {
        "用户": "Set the attention level of the attention edge from 'player101' to 'player100' to 96.",
        "查询": "UPDATE EDGE ON follow \"player101\" -> \"player100\" SET degree = 96"
    },
    {
        "用户": "请帮我找出从'team204'到'player100'的最短路径，并返回路径信息。",
        "查询": "FIND SHORTEST PATH WITH PROP FROM \"team204\" TO \"player100\" OVER * REVERSELY YIELD path AS p"
    },
    {
        "用户": "Obtain the edges and starting nodes of 'Tim Duncan' liked by 'Tony Parker' and 'Tracy McGrady' liked by 'Grant Hill'.",
        "查询": "FETCH PROP ON like \"Tony Parker\"->\"Tim Duncan\", \"Grant Hill\" -> \"Tracy McGrady\" YIELD edge as relationship |\nYIELD startNode($-.relationship) AS node"
    },
    {
        "用户": "请帮我提交一个任务，从HDFS下载文件'hdfs://*.*.*.*:9000/sst'。",
        "查询": "SUBMIT JOB DOWNLOAD HDFS \"hdfs://*.*.*.*:9000/sst"
    },
    {
        "用户": "请帮我去除字符串'basketball player'的前导空格并返回结果。",
        "查询": "RETURN ltrim(\" basketball player \")"
    },
    {
        "用户": "将标签t1添加一个名为p5的double类型属性，该属性不能为空且默认值为0.4，用于注释为'test2'的测试。",
        "查询": "ALTER TAG t1 ADD (p5 double NOT NULL DEFAULT 0.4 COMMENT'p5') COMMENT='test2'"
    },
    {
        "用户": "Find all the entities that Tim Duncan likes and return them.",
        "查询": "GO FROM \"Tim Duncan\" OVER like YIELD like._dst"
    },
    {
        "用户": "寻找名为'Tim Duncan'的球员的所有朋友，他们之间的关系为两跳'follow'，并且关系的度大于1，返回这些朋友的姓名。",
        "查询": "MATCH p=(v:player{name:\"Tim Duncan\"})-[e:follow*2]->(v2)\nWHERE e.degree > 1\nRETURN DISTINCT v2 AS Friends"
    },
    {
        "用户": "请将实体'player102'关注实体'player100'，并将关注度设置为75。",
        "查询": "INSERT EDGE follow(degree) VALUES \"player102\" -> \"player100\":(75)"
    },
    {
        "用户": "插入两个顶点test1和test2，test1的属性为p1为'123'，p2为1，test2的属性为p3为'456'，p4为2。",
        "查询": "INSERT VERTEX test1(p1, p2),test2(p3, p4) VALUES \"test\":(\"123\", 1, \"456\", 2)"
    },
    {
        "用户": "您好，请帮我找到'Boris Diaw'所服务的所有实体，然后告诉我它们的名称、开始年份和所属团队名称好吗？",
        "查询": "GO FROM \"Boris Diaw\" OVER serve YIELD $^.player.name as name, serve.start_year as start, $$.team.name as team | YIELD $-.*"
    },
    {
        "用户": "Find a player entity named 'Tim Duncan' and return its ID.",
        "查询": "LOOKUP ON player WHERE player.name == \"Tim Duncan\" YIELD id(vertex) as id"
    },
    {
        "用户": "请将名为'Kobe'的选手插入到player节点，并设置其name属性为'Kobe'，谢谢。",
        "查询": "INSERT VERTEX player(name) VALUES \"Kobe\":(\"Kobe\")"
    },
    {
        "用户": "找出名为'Tony Parker'的球员实体并返回。",
        "查询": "MATCH (v:player{name:\"Tony Parker\"}) RETURN v"
    },
    {
        "用户": "请帮我计算名为'Tim'的哈希值除以100的余数。",
        "查询": "YIELD hash(\"Tim\") % 100"
    },
    {
        "用户": "Find all job information.",
        "查询": "SHOW JOBS;"
    },
    {
        "用户": "查找名为'Tracy McGrady'的球员所服务或喜欢最多距离为1的实体及其关系。",
        "查询": "MATCH (:player{name:\"Tracy McGrady\"})-[e:serve|like*0..1]->(v)\nRETURN e, v"
    },
    {
        "用户": "Please find the entity with ID 'player100' and return the label of that entity.",
        "查询": "MATCH (v)-[e:serve]->()\nWHERE id(v)==\"player100\"\nRETURN labels(v)"
    },
    {
        "用户": "将标签t1的TTL_DURATION设置为2，TTL_COL设置为'p2'。",
        "查询": "ALTER TAG t1 TTL_DURATION = 2, TTL_COL = \"p2\""
    },
    {
        "用户": "计算字符串'Boris'的哈希值并返回。",
        "查询": "RETURN hash(\"Boris\")"
    },
    {
        "用户": "Please help me submit a task to download the file 'hdfs://*. *. *. *: 9000/st' from HDFS.",
        "查询": "SUBMIT JOB DOWNLOAD HDFS \"hdfs://*.*.*.*:9000/sst"
    },
    {
        "用户": "Add two attributes p3 and p4 to label t1, where p3 is an integer and p4 is a fixed string of length 10.",
        "查询": "ALTER TAG t1 ADD (p3 int32, p4 fixed_string(10))"
    },
    {
        "用户": "请帮我查找一下学号为1的学生，我需要知道他的ID和年龄。",
        "查询": "LOOKUP ON student WHERE student.number == 1 YIELD id(vertex) as name, student.age"
    },
    {
        "用户": "Obtain the attributes of the 'Tony Parker' player, including name and age.",
        "查询": "$v1 = FETCH PROP ON player \"Tony Parker\"\nYIELD properties(Vertex) AS props, properties(Vertex).name AS name, properties(Vertex).age AS age"
    },
    {
        "用户": "Rebuild label index player_ Index_ 1.",
        "查询": "REBUILD TAG INDEX player_index_"
    },
    {
        "用户": "获取'player666'、'player667'、'player668'的所有属性。",
        "查询": "FETCH PROP ON * \"player666\", \"player667\", \"player668\" YIELD properties(vertex)"
    },
    {
        "用户": "请帮我查询时间戳1625469277对应的时间。",
        "查询": "RETURN datetime(timestamp(1625469277))"
    },
    {
        "用户": "查找名为'Tim Duncan'的球员实体，并返回其ID。",
        "查询": "LOOKUP ON player WHERE player.name == \"Tim Duncan\" YIELD id(vertex) as id"
    },
    {
        "用户": "如果没有only_point标签，能否创建一个带有地理位置信息的标签呢？",
        "查询": "CREATE TAG IF NOT EXISTS only_point(geo geography(point))"
    },
    {
        "用户": "Update or insert the edge 'serve' between 'player668' and 'team200', set the start year to 2000, increase the end year by 1, and return the start and end years.",
        "查询": "UPSERT EDGE on serve\n\"player668\" -> \"team200\"@0\nSET start_year = 2000, end_year = end_year + 1\nYIELD start_year, end_year"
    },
    {
        "用户": "Starting from 'Tim Duncan' and through the 'like' relationship, reach entities with a distance of 1 or 2 steps, excluding 'YAO MING'. Count the number of edges for each entity and return the number of entities with the same number of edges.",
        "查询": "GO 1 TO 2 STEPS FROM \"Tim Duncan\" OVER like WHERE like._dst != \"YAO MING\" YIELD dst(edge) AS vid\n| GROUP BY $-.vid YIELD 1 AS id\n| GROUP BY $-.id YIELD COUNT($-.id);"
    },
    {
        "用户": "Find the entities that a player named 'Tracy McGrady' serves or likes with a maximum distance of 1, and return these relationships and entities.",
        "查询": "MATCH (:player{name:\"Tracy McGrady\"})-[e:serve|like*0..1]-(v)\nRETURN e, v"
    },
    {
        "用户": "Please help me insert a player entity named 'Tony Parker', aged 36, with an ID of 'player101'.",
        "查询": "INSERT VERTEX player(name, age) VALUES \"player101\":(\"Tony Parker\", 36)"
    },
    {
        "用户": "Find all the entities that Boris Diaw likes and delete their relationships with Boris Diaw.",
        "查询": "GO FROM \"Boris Diaw\" OVER like YIELD like._dst as id | DELETE VERTEX $-.id WITH EDGE"
    },
    {
        "用户": "找出和 'Tim Duncan' 或 'Chris Paul' 有 '喜欢' 关系的实体，再找出这些实体所 '喜欢' 的实体，并返回这些实体的名称和ID。",
        "查询": "GO FROM 'Tim Duncan', 'Chris Paul' OVER like YIELD $^.player.name AS name, dst(edge) AS id |\nGO FROM $-.id OVER like YIELD $-.name, dst(edge) as dst"
    },
    {
        "用户": "Please help me find players named 'Tony Parker' and tell me their names and ages.",
        "查询": "LOOKUP ON player WHERE player.name == \"Tony Parker\"\nYIELD properties(vertex).name, properties(vertex).age"
    },
    {
        "用户": "Hello, could you help me find the ID of a student entity with the alias' abc '?",
        "查询": "LOOKUP ON student WHERE student.alias == \"abc\" YIELD id(vertex) as id"
    },
    {
        "用户": "查找球员'Tim Duncan'的实体，返回该实体的ID。",
        "查询": "LOOKUP ON player WHERE player.name == \"Tim Duncan\" YIELD id(vertex) as id"
    },
    {
        "用户": "Hello, please help me find the entity with ID 'Tom' and the entities directly connected to it, and then return all the relationship paths between them.",
        "查询": "MATCH p=(v)-[e*1]->(v2) WHERE id(v) IN [\"Tom\"] RETURN p"
    },
    {
        "用户": "Please help me obtain the attributes of the t2 entity with ID '11'.",
        "查询": "FETCH PROP ON t2 \"11\" YIELD properties(vertex)"
    },
    {
        "用户": "If it does not exist, create a label without attributes.",
        "查询": "CREATE TAG IF NOT EXISTS no_property()"
    },
    {
        "用户": "插入一个名为'player100'的球员实体，其姓名为'Tim Duncan'，年龄为 42 岁。",
        "查询": "INSERT VERTEX player(name, age) VALUES \"player100\":(\"Tim Duncan\", 42)"
    },
    {
        "用户": "查找与球员 'Manu Ginobili' 有2到3跳 '喜欢' 关系的实体，返回这些实体的性别、关系强度、姓名、年龄和关系开始年份，并按照关系强度、姓名、年龄排序，最多返回5条记录。",
        "查询": "match (src_v:player{name:\"Manu Ginobili\"})-[e:like*2..3]-(dst_v)\n  return distinct properties(src_v).sex,properties(e[0]).degree as degree,properties(dst_v).name as name,src_v.player.age AS age, e[1].start_year,dst_v.player.age\n  order by degree, name, age limit 5;"
    },
    {
        "用户": "获取'player100'在'team204'上权重为1的关系边，并返回该边。",
        "查询": "FETCH PROP ON serve \"player100\" -> \"team204\"@1 YIELD edge AS e"
    },
    {
        "用户": "Please help me find all relevant entities for a player named 'Tim Duncan', but the entity is not a team type and return these path information.",
        "查询": "MATCH (v:player{name:\"Tim Duncan\"})-[e]->(t)\nWHERE NOT (v)-[e]->(t:team)\nRETURN (v)-->()"
    },
    {
        "用户": "请从'player101'开始，沿着'follow'关系向外扩展1步，帮我返回扩展出的所有节点和边。",
        "查询": "GET SUBGRAPH 1 STEPS FROM \"player101\" IN follow YIELD VERTICES AS nodes, EDGES AS relationships"
    },
    {
        "用户": "找出所有 'Boris Diaw' 所 '喜欢' 的实体，并返回这些实体的 ID。",
        "查询": "GO FROM \"Boris Diaw\" OVER like YIELD like._dst"
    },
    {
        "用户": "请问您能帮我获取'Boris Diaw'和'Spurs'之间的边属性吗？我需要知道边的关系、源节点、目标节点、类型和权重。",
        "查询": "FETCH PROP ON serve \"Boris Diaw\"->\"Spurs\" YIELD edge as relationship, src(edge) as src_edge, dst(edge) as dst_edge, type(edge) as type, rank(edge) as rank"
    },
    {
        "用户": "Please help me start from 'player100' and go through steps 1 to 3 to identify all entities and return their names and ages. Each step can sample two edges.",
        "查询": "GO 1 TO 3 STEPS FROM \"player100\"\nOVER *\nYIELD properties($$).name AS NAME, properties($$).age AS Age\nSAMPLE [2,2,2]"
    },
    {
        "用户": " 请问您能帮我找出与 'Tim Duncan' 有关系的人吗？他们之间的 'like' 关系的权重是90，路径长度为2或3。我想知道这些关系的终点的信息。",
        "查询": "MATCH (n)-[e:like*2..3{likeness: 90}]-(v)\nWHERE id(n) == \"Tim Duncan\"\nRETURN e, v"
    },
    {
        "用户": "Can you help me find all relevant entities and their attributes?",
        "查询": "MATCH () -[]-> (v) RETURN *"
    },
    {
        "用户": "Find the shortest path from 'Tim Duncan' to 'Tony Parker' or 'Spurs', which includes' like' and 'service' relationships, and go through a maximum of 3 steps, returning path information.",
        "查询": "FIND SHORTEST PATH FROM \"Tim Duncan\" TO \"Tony Parker\", \"Spurs\" OVER like,serve UPTO 3 STEPS YIELD path as p"
    },
    {
        "用户": "返回名为'Tim Duncan'的球员喜欢程度为95的所有实体，并返回原始节点名字。",
        "查询": "MATCH (v:player{name: 'Tim Duncan'})-[e:like{likeness: 95}]->() return v.player.name AS name"
    },
    {
        "用户": "能否帮我创建一个名为student_ta的标签索引，它包含了student标签中alias和teacher属性的前10个字符。",
        "查询": "CREATE TAG INDEX student_ta ON student(alias(10), teacher(10))"
    },
    {
        "用户": "Hello, please help me obtain the start years of all entities in the serve relationship and return them to me.",
        "查询": "LOOKUP ON serve YIELD serve.start_year AS startYear"
    },
    {
        "用户": "Obtain the name and age of the player for 'Boris Diaw'.",
        "查询": "FETCH PROP ON player 'Boris Diaw' YIELD player.name, player.age"
    },
    {
        "用户": "Please help me identify all entities that are not being followed by other entities and return all their information.",
        "查询": "MATCH (v)-[e:follow]->()\nWHERE rank(e)==0\nRETURN *"
    },
    {
        "用户": "Obtain the attributes of the attention relationship from 'player101' to 'player100'.",
        "查询": "FETCH PROP ON follow \"player101\" -> \"player100\" YIELD properties(edge)"
    },
    {
        "用户": "Find all the entities that Tony Parker likes and return their IDs.",
        "查询": "GO FROM \"Tony Parker\" OVER like YIELD like._dst"
    },
    {
        "用户": "得了心脏病需要吃什么药？",
        "查询": "GO FROM \"心脏病\" OVER recommend_drug YIELD dst(edge);"
    },
    {
        "用户": "Find all favorite entities and their relationships for a player named 'Tracy McGrady' with a distance of 0 to 1.",
        "查询": "MATCH (:player{name:\"Tracy McGrady\"})-[e:like*0..1]-(v)\nRETURN e, v"
    },
    {
        "用户": "Obtain all attributes of 'player666', 'player667', and 'player668'.",
        "查询": "FETCH PROP ON * \"player666\", \"player667\", \"player668\" YIELD properties(vertex)"
    },
    {
        "用户": "Can you help me find the entity with ID 'Boris Diaw'?",
        "查询": "MATCH (v) WHERE id(v) == 'Boris Diaw' RETURN (v)"
    },
    {
        "用户": "您好，请帮我获取'Boris Diaw'这个实体的所有属性，并将其作为节点返回。",
        "查询": "FETCH PROP ON * 'Boris Diaw' YIELD vertex as node"
    },
    {
        "用户": "Please help me calculate the arccosine value to be 0.5.",
        "查询": "RETURN acos(0.5)"
    },
    {
        "用户": "查找名为Tim Duncan的球员在2000年之后服务过的，遍历2到3步的所有实体，包括服务关系和实体本身。",
        "查询": "MATCH (:player{name:\"Tim Duncan\"})-[e:serve*2..3{start_year: 2000}]->(v)\nRETURN e, v"
    },
    {
        "用户": "Find all entities connected by a player named 'Tim Duncan' and arrange them in descending order of age. Skip the first result and return the name and age of the entities.",
        "查询": "MATCH (v:player{name:\"Tim Duncan\"}) --> (v2)\nRETURN v2.player.name AS Name, v2.player.age AS Age\nORDER BY Age DESC SKIP 1"
    },
    {
        "用户": "Find all the teams' Boris Diaw 'plays for, and if the starting player is over 18 years old, return the starting year of their service to these teams.",
        "查询": "GO 1 STEPS FROM \"Boris Diaw\" OVER serve\nWHERE $^.player.age > 18\nYIELD serve.start_year as start_year"
    },
    {
        "用户": "找出 'Tim Duncan' 和 'Tony Parker' 所服务过的球队,合并结果，并返回起点姓名，服务开始年份和终点队名。",
        "查询": "GO FROM \"Tim Duncan\" OVER serve YIELD $^.player.name, serve.start_year, $$.team.name\nUNION ALL\nGO FROM \"Tony Parker\" OVER like YIELD like._dst AS id |\n   GO FROM $-.id OVER serve YIELD $^.player.name, serve.start_year, $$.team.name"
    },
    {
        "用户": "Tom 喜欢 Conan，喜欢程度为 100。",
        "查询": "INSERT EDGE like(likeness) VALUES \"Tom\"->\"Conan\":(100)"
    },
    {
        "用户": "Find edges with an intimacy greater than 89 in all 'like' relationships, and return the source nodes, target nodes, and weights of these edges.",
        "查询": "LOOKUP ON like where like.likeness > 89 YIELD src(edge) as src, dst(edge) as dst, rank(edge) as rank"
    },
    {
        "用户": "找出年龄大于45岁的球员在Lakers队中的服务关系，并返回球员名字后加上hello的字符串。",
        "查询": "MATCH (a:player)-[b:serve]-(c:team{name: \"Lakers\"})\nWHERE a.player.age > 45\nRETURN  concat(a.player.name, \"hello\")"
    },
    {
        "用户": "Hello, please help me find the IDs of all entities in type t1 where col4 is equal to 'durian' and col2 is less than or equal to 2.0. Thank you!",
        "查询": "LOOKUP ON t1 WHERE t1.col4 == \"durian\" AND t1.col2 <= 2.0 YIELD id(vertex) as id"
    },
    {
        "用户": "获取 'Tony Parker' 球员的姓名和年龄属性。",
        "查询": "FETCH PROP ON player \"Tony Parker\" YIELD player.name, player.age"
    },
    {
        "用户": "Count the number of elements in the list, including the number of duplicate elements and the number of elements after deduplication.",
        "查询": "WITH [NULL, 1, 1, 2, 2] As a UNWIND a AS b\nRETURN count(b), count(*), count(DISTINCT b)"
    },
    {
        "用户": "找出从 'Tim Duncan' 到 'Tony Parker' 的所有路径，路径上包含 '喜欢' 属性的关系，最多包含三个步骤，并返回这些路径上的所有关系。",
        "查询": "FIND ALL PATH WITH PROP FROM \"Tim Duncan\" TO \"Tony Parker\" OVER like UPTO 3 STEPS YIELD path as p |\nYIELD relationships($-.p) as relationships"
    },
    {
        "用户": "Please start from entity 'player101', extend outward by one step through the 'serve' relationship, and then return the extended entity and relationship.",
        "查询": "GET SUBGRAPH WITH PROP 1 STEPS FROM \"player101\" OUT serve YIELD VERTICES AS nodes, EDGES AS relationships"
    },
    {
        "用户": "Please help me obtain the attributes of 'player100' and tell me the name of the entity.",
        "查询": "FETCH PROP ON player \"player100\"\nYIELD properties(vertex).name"
    },
    {
        "用户": "能否展示一下所有的空间呢？",
        "查询": "SHOW SPACES"
    },
    {
        "用户": "获取 'Tony Parker' 球员的姓名和年龄属性。",
        "查询": "FETCH PROP ON player \"Tony Parker\" YIELD player.name, player.age"
    },
    {
        "用户": "Please help me insert a geographic shape of any shape into the vertex with ID '103', which is a polygon composed of multiple points.",
        "查询": "INSERT VERTEX any_shape(geo) VALUES \"103\":(ST_GeogFromText(\"POLYGON((0 1, 1 2, 2 3, 0 1))\"))"
    },
    {
        "用户": "找出'McGrady'的实体所喜欢的所有实体，并返回这些实体的ID。",
        "查询": "GO FROM \"Tracy McGrady\" OVER like YIELD like._dst"
    },
    {
        "用户": "Insert a player entity named LaMarcus Aldridge, aged 33, and set its ID to player102.",
        "查询": "INSERT VERTEX player(name, age) VALUES \"player102\":(\"LaMarcus Aldridge\", 33)"
    },
    {
        "用户": "Please help me identify all entities that 'player100' focuses on and serves, and return the degrees and starting years of these edges.",
        "查询": "GO FROM \"player100\" OVER follow, serve\nYIELD properties(edge).degree, properties(edge).start_year"
    },
    {
        "用户": "Find all the teams served by 'Boris Diaw' and return four values, including the name of the starting node, the starting time of the service relationship, the name of the ending team, and the team.",
        "查询": "$var = GO FROM \"Boris Diaw\" OVER serve YIELD $^.player.name as name, serve.start_year as start, $$.team.name as team;YIELD $var.team"
    },
    {
        "用户": "Hello, I would like to ask for your help in finding any entity from 'Tony Parker' or 'Yao Ming' to 'Manu Ginobili', 'Spurs', or' Lakes'. The shortest path can contain up to 5 steps. Can you return the path information to me?",
        "查询": "FIND SHORTEST PATH FROM \"Tony Parker\", \"Yao Ming\" TO \"Manu Ginobili\", \"Spurs\", \"Lakers\" OVER * UPTO 5 STEPS YIELD path as p"
    },
    {
        "用户": "Obtain the attributes of 'player100' and return the attribute information of the entity.",
        "查询": "FETCH PROP ON player \"player100\" YIELD properties(vertex)"
    },
    {
        "用户": "您好，请帮我获取'Tony Parker'和'Tim Duncan'之间的'喜欢'关系边，以及'Grant Hill'和'Tracy McGrady'之间的'喜欢'关系边，并返回所有边的关系属性。",
        "查询": "FETCH PROP ON like \"Tony Parker\"->\"Tim Duncan\", \"Grant Hill\" -> \"Tracy McGrady\" YIELD properties(edge) as properties"
    },
    {
        "用户": "Returns the XOR result of true or false, and false or false.",
        "查询": "RETURN NOT FALSE OR FALSE AND FALSE XOR FALSE"
    },
    {
        "用户": "如果标签不存在，则创建一个没有属性的标签。",
        "查询": "CREATE TAG IF NOT EXISTS no_property()"
    },
    {
        "用户": "Please help me find all entities that a player named 'Tim Duncan' follows or serves, and return these relationships.",
        "查询": "MATCH (v:player{name:\"Tim Duncan\"})-[e:follow|:serve]->(v2)\nRETURN e"
    },
    {
        "用户": "找出 'Tim Duncan' 和 'Tony Parker' 所服务过的球队,合并结果，并返回起点姓名，服务开始年份和终点队名。",
        "查询": "GO FROM \"Tim Duncan\" OVER serve YIELD $^.player.name, serve.start_year, $$.team.name\nUNION ALL\nGO FROM \"Tony Parker\" OVER like YIELD like._dst AS id |\n   GO FROM $-.id OVER serve YIELD $^.player.name, serve.start_year, $$.team.name"
    },
    {
        "用户": "Identify entities with a two to three jump 'like' relationship with 'Tim Duncan' and a 90 degree of liking, and return these relationships and entities.",
        "查询": "MATCH (n)-[e:like*2..3{likeness: 90}]->(v)\nWHERE id(n) == \"Tim Duncan\"\nRETURN e, v"
    },
    {
        "用户": "请帮我创建一个名为team的标签，该标签包含一个名为name的字符串属性。",
        "查询": "CREATE TAG team(name string)"
    },
    {
        "用户": "Find the first 'Tony Parker' entity that Tim Duncan likes.",
        "查询": "GO FROM \"Tim Duncan\" OVER like WHERE [like._dst == \"Tony Parker\"]  LIMIT [1];"
    },
    {
        "用户": "Please find the entity connected through the 'follow' relationship starting from 'player100' and tell me the name of the starting entity and the age of the ending entity.",
        "查询": "GO FROM \"player100\" OVER follow YIELD $^.player.name AS startName, $$.player.age AS endAge"
    },
    {
        "用户": "Please help me insert a player entity named LaMarcus Aldridge, aged 33, with an ID of player102.",
        "查询": "INSERT VERTEX player(name, age) VALUES \"player102\":(\"LaMarcus Aldridge\", 33)"
    },
    {
        "用户": "计算1加1等于多少。",
        "查询": "RETURN 1+1"
    },
    {
        "用户": "找出名为'Ben Simmons'的球员与其他球员之间的所有'serve'关系，并返回这些关系。",
        "查询": "MATCH (v:player{name:\"Ben Simmons\"})-[e:serve]-(v2)\nRETURN e"
    },
    {
        "用户": "Please help me find the relationships between a player named 'Tim Duncan' and the players I follow, and then return to these relationships.",
        "查询": "MATCH (v:player{name:\"Tim Duncan\"})-[e:follow{degree:95}]->(v2)\nRETURN e"
    },
    {
        "用户": "Hello, please help me return two IDs, one is 1 and the other is 2.",
        "查询": "YIELD 1 AS id, 2 AS id"
    },
    {
        "用户": "Identify non repeating paths from 'Tim Duncan' to 'Tony Parker' or 'Manu Ginobili', with a relationship of 'like' and a maximum of 3 steps, and return these paths.",
        "查询": "FIND NOLOOP PATH FROM \"Tim Duncan\" TO \"Tony Parker\", \"Manu Ginobili\" OVER like UPTO 3 STEPS YIELD path as p"
    },
    {
        "用户": "Can you help me find the source node on the edge from 'Boris Diaw' to 'Not Exist'? And give it a name called 'a'.",
        "查询": "FETCH PROP ON serve \"Boris Diaw\"->\"Not Exist\" YIELD src(edge) as a"
    },
    {
        "用户": "请帮我计算反正切值为0.5。",
        "查询": "RETURN atan(0.5)"
    },
    {
        "用户": "Obtain the relationship attributes of 'Tim Duncan' liked by 'Tony Parker' and 'Tracy McGrady' liked by 'Grant Hill', and return the starting nodes of these relationships.",
        "查询": "FETCH PROP ON like \"Tony Parker\"->\"Tim Duncan\", \"Grant Hill\" -> \"Tracy McGrady\" YIELD edge as e |\nYIELD startNode($-.e) AS nodes"
    },
    {
        "用户": "Focus entity 'player101' on entity 'player100' and set the attention level to 95.",
        "查询": "INSERT EDGE follow(degree) VALUES \"player101\" -> \"player100\":(95)"
    },
    {
        "用户": "找出 'Russell Westbrook' 所 '喜欢' 的所有实体，并返回这些实体的 ID。",
        "查询": "GO FROM \"Russell Westbrook\" OVER like YIELD like._dst"
    },
    {
        "用户": "请帮我获取ID为'11'的t2实体的属性。",
        "查询": "FETCH PROP ON t2 \"11\" YIELD properties(vertex)"
    },
    {
        "用户": "Please help me return a list where the elements are numbers greater than 2 from 1 to 5 plus 10.",
        "查询": "RETURN [n IN range(1,5) WHERE n > 2 | n + 10] AS a"
    },
    {
        "用户": "Please help me find all the friends who have been following me twice for a player named 'Tim Duncan' and tell me the names of these friends.",
        "查询": "MATCH p=(v:player{name:\"Tim Duncan\"})-[e:follow*2]->(v2)\nRETURN DISTINCT v2 AS Friends"
    },
    {
        "用户": "Hello, could you please help me find a subgraph starting from 'Tim Duncan'? At most, only one result is needed.",
        "查询": "GET SUBGRAPH WITH PROP FROM 'Tim Duncan' | LIMIT 1"
    },
    {
        "用户": "Identify the names and ages of players whose names include Pa.",
        "查询": "MATCH (v:player)\nWHERE v.player.name CONTAINS \"Pa\"\nRETURN v.player.name, v.player.age"
    },
    {
        "用户": "Find all entities associated with player ID 'A' and return the path to these entities.",
        "查询": "MATCH p= (v:player) -- (v2) WHERE id(v)==\"A\" RETURN p"
    },
    {
        "用户": "如果player标签不存在的话，能否帮我创建一个player标签呢？它包含名字和年龄属性，年龄属性默认为18岁。",
        "查询": "CREATE TAG IF NOT EXISTS player(name string, age int NOT NULL DEFAULT 18)"
    },
    {
        "用户": "Can you help me identify all entities and relationships that have a 2-3 hop 'serve' relationship with 'Tim Duncan'?",
        "查询": "MATCH (n)-[e:serve*2..3]->(v)\nWHERE id(n) == \"Tim Duncan\"\nRETURN e, v"
    },
    {
        "用户": "Starting from 'Tim Duncan' and following the 'like' relationship, traverse 4 steps in both directions to return all entities and edges traversed.",
        "查询": "GET SUBGRAPH 4 steps from 'Tim Duncan' BOTH like YIELD vertices as a, edges as b"
    },
    {
        "用户": "Please help me find the names and ages of players under the age of 25.",
        "查询": "MATCH (v:player)-[e]->(v2)\nWHERE v2.player.age < 25\nRETURN v2.player.name, v2.player.age"
    },
    {
        "用户": "Hello, please help me find the entities and their relationship types related to 'LeBron James' and return the entity name or' abc '.",
        "查询": "MATCH (v1:player{name: \"LeBron James\"}) -[r]-> (v2)\nRETURN type(r) AS Type, CASE WHEN v2.tea.name IS NOT NULL THEN v2.tea.name WHEN v2.playe.name IS NOT NULL THEN v2.playe.name ELSE \"abc\" END AS Name"
    },
    {
        "用户": "Please help me remove DRAINER.",
        "查询": "REMOVE DRAINER"
    },
    {
        "用户": "Please help me create a tag called player, which includes two attributes: name and age.",
        "查询": "CREATE TAG player(name string, age int)"
    },
    {
        "用户": "Insert a player node named 'A Loner' with an age of 0 and delete it and all its edges.",
        "查询": "INSERT VERTEX player(name, age) VALUES \"A Loner\": (\"A Loner\", 0);\nDELETE VERTEX \"A Loner\" WITH EDGE;"
    },
    {
        "用户": "您好，请帮我获取'Tony Parker'和'Tim Duncan'之间的'喜欢'关系边，以及'Grant Hill'和'Tracy McGrady'之间的'喜欢'关系边，并返回所有边的关系属性。",
        "查询": "FETCH PROP ON like \"Tony Parker\"->\"Tim Duncan\", \"Grant Hill\" -> \"Tracy McGrady\" YIELD properties(edge) as properties"
    },
    {
        "用户": "获取'player666'、'player667'、'player668'的所有属性。",
        "查询": "FETCH PROP ON * \"player666\", \"player667\", \"player668\" YIELD properties(vertex)"
    },
    {
        "用户": "Find all entities that 'player101' is interested in and return their IDs.",
        "查询": "GO FROM \"player101\" OVER follow YIELD id($$)"
    },
    {
        "用户": "Obtain all attributes of 'player666', 'player667', and 'player668'.",
        "查询": "FETCH PROP ON * \"player666\", \"player667\", \"player668\" YIELD properties(vertex)"
    },
    {
        "用户": "找出在2000年之前开始参加队伍的所有球员的姓名和年龄。",
        "查询": "MATCH (v:player)-[e]->()\nWHERE e.start_year < 2000\nRETURN DISTINCT v.player.name, v.player.age"
    },
    {
        "用户": "Bi-directional search for all entities' served 'or' liked 'by' Tim Duncan 'and return the deduplicated IDs of these entities.",
        "查询": "GO FROM 'Tim Duncan' OVER serve, like bidirect YIELD distinct dst(edge) as dst"
    },
    {
        "用户": "找出所有以字母'r'结尾的球员的姓名和年龄。",
        "查询": "MATCH (v:player)\nWHERE v.player.name ENDS WITH \"r\"\nRETURN v.player.name, v.player.age"
    },
    {
        "用户": "找出名为'Tim Duncan'的球员所关注或效力的所有实体，并返回这些实体。",
        "查询": "MATCH p=(v:player{name:\"Tim Duncan\"})-[e:follow|serve*2]->(v2)\nRETURN DISTINCT v2"
    },
    {
        "用户": "您好，我想请您帮忙找一下，从 'Tony Parker' 和 'Yao Ming' 到 'Manu Ginobili'、'Spurs'、'Lakers' 中的任意一个实体，最短路径最多包含5个步骤，能给我返回一下路径信息吗？",
        "查询": "FIND SHORTEST PATH FROM \"Tony Parker\", \"Yao Ming\" TO \"Manu Ginobili\", \"Spurs\", \"Lakers\" OVER * UPTO 5 STEPS YIELD path as p"
    },
    {
        "用户": "Find a player named Tim Duncan who has served since 2000 and traverse all entities in steps 2 to 3, including service relationships and the entity itself.",
        "查询": "MATCH (:player{name:\"Tim Duncan\"})-[e:serve*2..3{start_year: 2000}]->(v)\nRETURN e, v"
    },
    {
        "用户": "Find friends of all friends of a player named 'Tim Duncan' and return their names.",
        "查询": "MATCH p=(v:player{name:\"Tim Duncan\"})-[e:follow*2]->(v2)\nWHERE ALL(e_ in e WHERE e_.degree > 0)\nRETURN DISTINCT v2 AS Friends"
    },
    {
        "用户": "Find a path starting from 'Tim Duncan' and traversing through any type of edge, returning the target vertex of the 'like' edge as the starting point and the starting vertex of the 'service' edge as the target in the traversal path. Find a path that does not contain a loop within a maximum of 3 steps from the starting point to the target vertex, and return these paths",
        "查询": "GO FROM \"Tim Duncan\" over * YIELD like._dst AS src, serve._src AS dst\n| FIND NOLOOP PATH FROM $-.src TO $-.dst OVER like UPTO 3 STEPS YIELD path as p"
    },
    {
        "用户": "请帮我返回所有球员的姓名和年龄，并按照球员姓名降序排序。",
        "查询": "MATCH (v:player) RETURN v.player.name AS Name, v.player.age AS Age\nORDER BY Name DESC"
    },
    {
        "用户": "Identify all entities that have a two hop 'like' relationship with 'LeBron James' and return all attributes of these entities.",
        "查询": "MATCH p = (n)-[:like]->()-[:like]->()\nWHERE id(n) == \"LeBron James\"\nRETURN *"
    },
    {
        "用户": "Returns the cube root, exponent, and base 2 exponent of a null value.",
        "查询": "RETURN cbrt(NULL) AS value1, exp(NULL) AS value4, exp2(NULL) AS value5"
    },
    {
        "用户": "Obtain the properties of 'player100' and return its name.",
        "查询": "FETCH PROP ON player \"player100\"\nYIELD properties(vertex).name AS name"
    },
    {
        "用户": "将'player100'从 1990 年到 2018 年期间服务于'team204'，且边的权重为2。",
        "查询": "insert edge serve(start_year,end_year)\nvalues \"player100\"->\"team204\"@2:(1990, 2018)"
    },
    {
        "用户": "Find all entities that a player named 'Tracy McGrady' likes, with a level of 90, and return these relationships and entities.",
        "查询": "MATCH (:player{name:\"Tracy McGrady\"})-[e:like*0..1{likeness: 90}]->(v)\nRETURN e, v"
    },
    {
        "用户": "插入一个名为'David West'，年龄为 38 的选手实体，其标识为'player111'。",
        "查询": "INSERT VERTEX player(name,age) VALUES \"player111\":(\"David West\", 38)"
    },
    {
        "用户": "返回前5个球员的姓名和年龄，按年龄从小到大排序。",
        "查询": "MATCH (v:player) RETURN v.player.name AS Name, v.player.age AS Age\nORDER BY Age LIMIT 5"
    },
    {
        "用户": "Please help me delete the vertex named 'Tony Parker' and all related edges.",
        "查询": "DELETE VERTEX \"Tony Parker\" WITH EDGE;"
    },
    {
        "用户": "找出与 'Dejounte Murray' 有 '喜欢' 关系的实体，返回这些实体的姓名和年龄，并按年龄降序、姓名升序排序，最多返回3个结果。",
        "查询": "MATCH (v1) -[:like]-> (v)\nWHERE id(v1) == 'Dejounte Murray'\nRETURN v.player.name AS Name, v.player.age AS Age\nORDER BY Age DESC, Name ASC\nLIMIT 3"
    },
    {
        "用户": "Obtain the name and age attributes of the 'Tim Duncan' player.",
        "查询": "FETCH PROP ON player \"Tim Duncan\" YIELD player.name, player.age"
    },
    {
        "用户": "获取名为 'Tony Parker' 的球员的姓名和年龄属性。",
        "查询": "FETCH PROP ON player \"Tony Parker\" YIELD player.name, player.age"
    },
    {
        "用户": "嗨，能帮我在ttl_expire_tag02标签下插入一个新节点吗？节点名叫't-e-t-02'，它有两个属性a和b。a属性要设置为当前时间戳，b属性要设置为10。",
        "查询": "INSERT VERTEX ttl_expire_tag02(a,b) VALUES \"t-e-t-02\":(timestamp(),10);"
    },
    {
        "用户": "请帮我找出从'player102'到'team204'的最短路径，并返回给我。",
        "查询": "FIND SHORTEST PATH FROM \"player102\" TO \"team204\" OVER * YIELD path AS p"
    },
    {
        "用户": "您好，请帮我获取'Boris Diaw'的所有实体的属性，并将这些实体的节点信息返回给我。",
        "查询": "FETCH PROP ON * 'Boris Diaw' YIELD vertex as node"
    },
    {
        "用户": "Please identify all player names ending in 'r' and tell me their age.",
        "查询": "MATCH (v:player)\nWHERE v.player.name ENDS WITH \"r\"\nRETURN v.player.name, v.player.age"
    },
    {
        "用户": "找出球员ID为'Paul Gasol'，和'Grizzlies'或'Lakers'有效力关系的球队名称，并返回这些顶点下球员的名称和他们效力球队名称。",
        "查询": "MATCH (v)-[:serve]->(t)\nWHERE (NOT NOT id(v) == 'Paul Gasol') AND id(v) == 'Paul Gasol' AND id(t) IN ['Grizzlies', 'Lakers']\nRETURN v.player.name AS Name, t.team.name AS Team"
    },
    {
        "用户": "找出年龄大于45岁的球员与洛杉矶湖人队有服务关系的所有实体，并返回这些实体的姓名、'hello'、喜欢程度和所属球队名称，用'@'组合姓名和所属球队名称。",
        "查询": "MATCH (a:player)-[b:serve]-(c:team{name: \"Lakers\"})\nWHERE a.player.age > 45\nRETURN concat_ws(\"@\",a.player.name, NULL, \"hello\", b.likeness, c.team.name) as result"
    },
    {
        "用户": "请问您能帮我找出从 'Tim Duncan' 到 'Tony Parker' 之间通过喜欢关系连接的最短路径吗？",
        "查询": "FIND SHORTEST PATH FROM \"Tim Duncan\" TO \"Tony Parker\" OVER like YIELD path as p"
    },
    {
        "用户": "请问您能帮我找一下前三个人的姓名吗？",
        "查询": "MATCH (v)\nRETURN v.person.name LIMIT 3"
    },
    {
        "用户": "找出名字以't'开头的球员，并返回他们的姓名和年龄。",
        "查询": "MATCH (v:player)\nWHERE v.player.name STARTS WITH \"t\"\nRETURN v.player.name, v.player.age"
    },
    {
        "用户": "Please return 1, 1.3, 1e3, and not a number as floating-point numbers.",
        "查询": "RETURN toFloat(1), toFloat('1.3'), toFloat('1e3'), toFloat('not a number')"
    },
    {
        "用户": "If the test tag does not exist, create a test tag that contains two attributes p1 and p2.",
        "查询": "CREATE TAG IF NOT EXISTS test(p1 string, p2 int)"
    },
    {
        "用户": "Show sorting rules.",
        "查询": "SHOW COLLATION"
    },
    {
        "用户": "请找出以'player100'为起点，通过'follow'关系，且边的属性中的度数大于90或者终点实体的年龄不等于33且名字不等于'Tony Parker'的所有实体，并返回这些实体的属性。",
        "查询": "GO FROM \"player100\"\nOVER follow\nWHERE properties(edge).degree > 90\nOR properties($$).age != 33\nAND properties($$).name != \"Tony Parker\"\nYIELD properties($$)"
    },
    {
        "用户": "May I ask if you know what time it is now?",
        "查询": "RETURN datetime().hour"
    },
    {
        "用户": "Can you help me obtain all the attributes of the entity 'Boris Diaw' and return its ID?",
        "查询": "FETCH PROP ON * 'Boris Diaw' YIELD id(vertex)"
    },
    {
        "用户": "Obtain the relationship attributes of 'Tim Duncan' liked by 'Tony Parker' and 'Tracy McGrady' liked by 'Grant Hill', and return the starting nodes of these relationships.",
        "查询": "FETCH PROP ON like \"Tony Parker\"->\"Tim Duncan\", \"Grant Hill\" -> \"Tracy McGrady\" YIELD edge as e |\nYIELD startNode($-.e) AS nodes"
    },
    {
        "用户": "从'player101'开始，获取1步内的所有实体和关系。",
        "查询": "GET SUBGRAPH 1 STEPS FROM \"player101\" YIELD VERTICES AS nodes, EDGES AS relationships"
    },
    {
        "用户": "请帮我返回一个从1到5的范围，从第3个元素开始的所有元素作为a。",
        "查询": "RETURN range(1,5)[3..] AS a"
    },
    {
        "用户": "Remove the label 'test1' from 'test'.",
        "查询": "DELETE TAG test1 FROM \"test\""
    },
    {
        "用户": "寻找从球员 'Tim Duncan' 到球员 'Tony Parker' 的最短路径，并返回路径上的关系和节点信息。",
        "查询": "MATCH p = shortestPath( (a:player{name:\"Tim Duncan\"})-[e*..5]-(b:player{name:\"Tony Parker\"}) )  RETURN e, p"
    },
    {
        "用户": "Please identify all entities that 'player100' is interested in and help me return the target nodes of their edges.",
        "查询": "$var = GO FROM \"player100\" OVER follow\nYIELD dst(edge) AS dst"
    },
    {
        "用户": "Find a player named 'Tim Duncan' and all its related entities, require that the entity is not of team type, and return these path information.",
        "查询": "MATCH (v:player{name:\"Tim Duncan\"})-[e]->(t)\nWHERE NOT (v)-[e]->(t:team)\nRETURN (v)-->()"
    },
    {
        "用户": "Identify all entities over the age of 30 that have any relationship with player 'Tim Duncan' and return the relationship paths of these entities, up to a maximum of 100.",
        "查询": "MATCH p=(v:player)-[]->(n)\nWHERE id(v)==\"Tim Duncan\" and n.player.age>30\nRETURN p LIMIT 100"
    },
    {
        "用户": "Hello, could you please help me find the team name and relationship type related to 'LeBron James'?",
        "查询": "MATCH (v1) -[r:serve]-> (v2)\nWHERE id(v1) == \"LeBron James\"\nRETURN type(r) AS Type, v2.team.name AS Name"
    },
    {
        "用户": " 嘿，你好！能不能帮我查一下，找一下名字叫'Grant Hill'的球员，然后告诉我他的名字和年龄呢？",
        "查询": "FETCH PROP ON player \"Grant Hill\" YIELD player.name, player.age"
    },
    {
        "用户": "您好，请帮我找一下从 'Tony Parker' 和 'Yao Ming' 到 'Manu Ginobili'、'Spurs' 和 'Lakers' 的最短路径，路径上的关系属性要求 'teammate.start_year' 不为空或 'like.likeness' 大于90，最多经过3个步骤，并返回路径上的所有节点。",
        "查询": "FIND SHORTEST PATH WITH PROP FROM \"Tony Parker\", \"Yao Ming\" TO \"Manu Ginobili\", \"Spurs\", \"Lakers\" OVER * BIDIRECT WHERE teammate.start_year is not EMPTY OR like.likeness > 90 UPTO 3 STEPS YIELD path as p |\nYIELD nodes($-.p) as nodes"
    },
    {
        "用户": "Find all entities that like 'Grant Hill' and return the target entity ID in their relationship with 'Grant Hill'.",
        "查询": "GO FROM \"Grant Hill\" OVER like REVERSELY YIELD like._dst"
    },
    {
        "用户": "Find entities connected to 'Dwyane Wade' through two 'like' relationships and return the names of these entities.",
        "查询": "MATCH (v1) -[:like]-> () -[:like]-> (v3)\nWHERE id(v1) == 'Dwyane Wade'\nRETURN v3.player.name AS Name"
    },
    {
        "用户": "Return the relationship properties where 'Tony Parker' likes' Tim Duncan 'and' Grant Hill 'likes' Tracy McGrady'.",
        "查询": "FETCH PROP ON like \"Tony Parker\"->\"Tim Duncan\", \"Grant Hill\" -> \"Tracy McGrady\" YIELD edge as e |\nYIELD properties($-.e)"
    },
    {
        "用户": "Please find all players who are unidirectionally associated with players named 'Tim Duncan' and tell me the names of these players.",
        "查询": "MATCH (v:player{name:\"Tim Duncan\"})-->(v2:player)\nRETURN v2.player.name AS Name"
    },
    {
        "用户": "查找名为'Tracy McGrady'的球员所最多距离为1服务或喜欢的实体及关系，并返回这些关系和实体。",
        "查询": "MATCH (:player{name:\"Tracy McGrady\"})-[e:serve|like*0..1]->(v)\nRETURN e, v"
    },
    {
        "用户": "Please find a player node named 'Tim Duncan' and all its related nodes.",
        "查询": "MATCH p=(v:player{name:\"Tim Duncan\"})-->(v2)\nRETURN nodes(p)"
    },
    {
        "用户": "Find all the entities that 'Russell Westbrook' likes' and return their IDs.",
        "查询": "GO FROM \"Russell Westbrook\" OVER like YIELD like._dst"
    },
    {
        "用户": "您好，请问您能帮我找到创建名为work2的边类型的语句吗？",
        "查询": "SHOW CREATE EDGE work2;"
    },
    {
        "用户": "请问能帮我找一下'Zion Williamson'和'Spurs'之间服务关系的start_year'属性值，还有'Boris Diaw'和'Hawks'之间的'serve.start_year'属性值吗？",
        "查询": "FETCH PROP ON serve \"Zion Williamson\"->\"Spurs\", \"Boris Diaw\"->\"Hawks\" YIELD serve.start_year"
    },
    {
        "用户": "糖尿病的原因是什么？",
        "查询": "LOOKUP ON disease WHERE disease.name == \"糖尿病\" YIELD properties(vertex).cause"
    },
    {
        "用户": "插入一条边，Tom 喜欢 Conan，喜欢程度为 200。",
        "查询": "INSERT EDGE like VALUES \"Tom\"->\"Conan\":(200)"
    },
    {
        "用户": "Please help me find all the entities served by the player named 'Tim Duncan' and return these entities and their relationships.",
        "查询": "MATCH (v:player{name:\"Tim Duncan\"})-[]->(v2)<-[e:serve]-(v3)\nRETURN v2, v3"
    },
    {
        "用户": "Find all edges of entity e1 that meet the conditions e1. col1>=1 and e1. col3>=false, and return the source and target nodes of these edges.",
        "查询": "LOOKUP ON e1 WHERE e1.col1 >= 1 AND e1.col3 >= false YIELD src(edge) as src, dst(edge) as dst"
    },
    {
        "用户": "请帮我返回修剪后的字符串'basketball player'。",
        "查询": "RETURN trim(\" basketball player \")"
    },
    {
        "用户": "获取'player100'与'team204'之间的关系，以及'player133'与'team202'之间的关系，并返回这些关系的边。",
        "查询": "FETCH PROP ON serve \"player100\" -> \"team204\", \"player133\" -> \"team202\" YIELD edge AS e"
    },
    {
        "用户": "找出所有喜欢LeBron James的实体，再找到喜欢这些实体的实体，并返回它们之间的关系和属性。",
        "查询": "MATCH p = (n)-[:like]->()-[:like]->()\nWHERE id(n) == \"LeBron James\"\nRETURN *"
    },
    {
        "用户": "请帮我返回列表[1, 2, 3, 4, 5]中倒数第三个到倒数第一个元素的子列表。",
        "查询": "YIELD list[1, 2, 3, 4, 5][-3..-1] AS a"
    },
    {
        "用户": "您好，请帮我找一下与 'Tim Duncan' 有关系的点，这些点之间的 'like' 关系的权重是90，路径长度为2或3，能给我返回这些边和终点的信息吗？",
        "查询": "MATCH (n)-[e:like*2..3{likeness: 90}]-(v)\nWHERE id(n) == \"Tim Duncan\"\nRETURN e, v"
    },
    {
        "用户": "我需要提交一个作业，从HDFS下载文件。",
        "查询": "SUBMIT JOB DOWNLOAD HDFS \"hdfs://*.*.*.*:9000/sst"
    },
    {
        "用户": "Identify all entities that 'player101' is interested in and return the source and target nodes of these entities.",
        "查询": "$var = GO FROM \"player101\" OVER follow\nYIELD src(edge) AS s, dst(edge) AS d"
    },
    {
        "用户": "Modify tag t1, change the type of attribute p3 to int64, and change the type of attribute p4 to string.",
        "查询": "ALTER TAG t1 CHANGE (p3 int64, p4 string)"
    },
    {
        "用户": "返回时间 '02:59:40' 的分钟数。",
        "查询": "RETURN time(\"02:59:40\").minute AS minute"
    },
    {
        "用户": "您能帮我删除标签ddl_tag和边ddl_edge吗？",
        "查询": "DROP TAG ddl_tag;\nDROP EDGE ddl_edge;"
    },
    {
        "用户": "您好，请帮我获取'Boris Diaw'实体的所有属性，并将该实体的节点返回。",
        "查询": "FETCH PROP ON player 'Boris Diaw' YIELD vertex as node"
    },
    {
        "用户": "请帮我找出名为'Tim Duncan'的球员与其所属的球队之间的关系，并将球员与球队之间的所有连接关系返回给我。",
        "查询": "MATCH (v:player{name:\"Tim Duncan\"})-[e]->(t)\nWHERE (v)-[e]->(t:team)\nRETURN (v)-->()"
    },
    {
        "用户": "请帮我找出名为'Tim Duncan'的球员的所有1到3度好友，并返回这些好友及其数量。",
        "查询": "MATCH p=(v:player{name:\"Tim Duncan\"})-[e:follow*1..3]->(v2:player)\nRETURN DISTINCT v2 AS Friends, count(v2)"
    },
    {
        "用户": "如果边e1不存在，那么请帮我创建一条具有属性p1的边e1，p1的类型是整数。",
        "查询": "CREATE EDGE IF NOT EXISTS e1(p1 int)"
    },
    {
        "用户": "Please display the assignment information with assignment number 25.",
        "查询": "SHOW JOB 25"
    },
    {
        "用户": "找出 'Chris Paul' 所 '喜欢' 的所有实体，返回这些实体的 ID。",
        "查询": "GO FROM \"Chris Paul\" OVER like YIELD like._dst"
    },
    {
        "用户": "请帮我找出名为'Tim Duncan'的球员所关注或效力的所有实体。",
        "查询": "MATCH p=(v:player{name:\"Tim Duncan\"})-[e:follow|serve*2]->(v2)\nRETURN DISTINCT v2"
    },
    {
        "用户": "Returns the result of 11 plus 12.",
        "查询": "RETURN 11 + 12"
    },
    {
        "用户": "Please help me find all team information related to 'Tim Duncan' and remove the labels of these teams.",
        "查询": "GO FROM \"Tim Duncan\" OVER serve YIELD serve._dst as id | DELETE TAG team FROM $-.id"
    },
    {
        "用户": "获取'Boris Diaw'的球员的姓名、年龄，并返回该球员年龄是否大于30的布尔值。",
        "查询": "FETCH PROP ON player 'Boris Diaw' YIELD player.name, player.age, player.age > 30"
    },
    {
        "用户": "获取 'Tony Parker' 喜欢的 'Tim Duncan' 和 'Grant Hill' 喜欢的 'Tracy McGrady' 的关系和终点信息。",
        "查询": "FETCH PROP ON like \"Tony Parker\"->\"Tim Duncan\", \"Grant Hill\" -> \"Tracy McGrady\" YIELD edge as relationship |\nYIELD endNode($-.relationship) AS node"
    },
    {
        "用户": "得了肺炎需要做哪些检查？",
        "查询": "MATCH (n:disease{name:'肺炎'})-[e:need_check]->(n1:check) return n1.check.name"
    },
    {
        "用户": "Insert a player named LaMarcus Aldridge, aged 33, into the player set with ID player102.",
        "查询": "INSERT VERTEX player(name, age) VALUES \"player102\":(\"LaMarcus Aldridge\", 33)"
    },
    {
        "用户": "得了高血压推荐吃什么药？",
        "查询": "GO FROM \"高血压\" OVER recommend_drug YIELD dst(edge);"
    },
    {
        "用户": "查找与球员'Manu Ginobili'有2到3跳喜欢关系的实体，返回这些实体的性别、关系强度、姓名、年龄和关系开始年份，并按照关系强度、姓名和年龄排序，最多返回5个结果。",
        "查询": "match (src_v:player{name:\"Manu Ginobili\"})-[e:like*2..3]-(dst_v)\n  return distinct properties(src_v).sex,properties(e[0]).degree as degree,properties(dst_v).name as name,src_v.player.age AS age, e[1].start_year,dst_v.player.age\n  order by degree, name, age limit 5;"
    },
    {
        "用户": "Please identify all entities one step away from entity 'A' and return the source and target nodes of these entities to me.",
        "查询": "GO 1 STEPS FROM \"A\" OVER follow YIELD src(edge),dst(edge)"
    },
    {
        "用户": "从 'Tony Parker' 出发，沿着 '喜欢' 关系，找出距离不超过2步的所有实体，返回这些实体的ID、边信息、球员姓名、球员年龄和喜欢程度。",
        "查询": "GO 0 TO 2 STEPS FROM 'Tony Parker' OVER like YIELD DISTINCT dst(edge) as dst, edge as e, $$.player.name, $^.player.age, like.likeness"
    },
    {
        "用户": "如果没有标签t5的话，能否帮我创建一个标签t5呢？这个标签包含三个属性：p1是一个固定长度为5的非空字符串类型，p2是整数类型，p3是可选的整数类型（默认为空）。",
        "查询": "CREATE TAG IF NOT EXISTS t5(p1 fixed_string(5) NOT NULL, p2 int, p3 int DEFAULT NULL)"
    },
    {
        "用户": "请找出以'player100'为起点，通过'follow'关系，且边的属性中度数大于90或者终点实体的年龄不等于33且姓名不等于'Tony Parker'的所有实体，并返回这些实体的属性。能帮我做一下吗？",
        "查询": "GO FROM \"player100\"\nOVER follow\nWHERE properties(edge).degree > 90\nOR properties($$).age != 33\nAND properties($$).name != \"Tony Parker\"\nYIELD properties($$)"
    },
    {
        "用户": "找出名为Tracy McGrady的球员在2000年之后所效力过或喜欢过的实体及关系。",
        "查询": "MATCH (:player{name:\"Tracy McGrady\"})-[e:serve|like*0..1{start_year: 2000}]-(v)\nRETURN e, v"
    },
    {
        "用户": "请帮我找出'player100'的所有关注对象，然后获取他们的年龄，并计算平均年龄和关注对象的数量。",
        "查询": "GO FROM \"player100\" OVER follow\nYIELD dst(edge) AS ID\n| FETCH PROP ON player $-.ID\nYIELD properties(vertex).age AS Age\n| YIELD AVG($-.Age) as Avg_age, count(*)as Num_friends"
    },
    {
        "用户": "Please help me insert two edges to indicate that 'player101' served 'team204' from 1999 to 2018, and 'player102' served 'team203' from 2006 to 2015.",
        "查询": "INSERT EDGE serve(start_year, end_year) VALUES \"player101\" -> \"team204\":(1999, 2018),\"player102\" -> \"team203\":(2006, 2015)"
    },
    {
        "用户": "Find all entities associated with a player named 'Tim Duncan' and arrange them in descending order of age. Skip the first result and return the entity name and age in the result.",
        "查询": "MATCH (v:player{name:\"Tim Duncan\"}) --> (v2)\nRETURN v2.player.name AS Name, v2.player.age AS Age\nORDER BY Age DESC SKIP 1"
    },
    {
        "用户": "Change the name of player668 to Amber and increase the age by 1 year to return the modified name and age.",
        "查询": "UPSERT VERTEX ON player \"player668\"\nSET name = \"Amber\", age = age + 1\nYIELD name AS Name, age AS Age"
    },
    {
        "用户": "查找与球员 'Manu Ginobili' 有2到3跳 '喜欢' 关系的实体，返回这些实体的性别、关系强度、姓名、年龄和关系开始年份，并按照关系强度、姓名、年龄排序，最多返回5条记录。",
        "查询": "match (src_v:player{name:\"Manu Ginobili\"})-[e:like*2..3]-(dst_v)\n  return distinct properties(src_v).sex,properties(e[0]).degree as degree,properties(dst_v).name as name,src_v.player.age AS age, e[1].start_year,dst_v.player.age\n  order by degree, name, age limit 5;"
    },
    {
        "用户": "If any_ The geo attribute on the shape does not have an index. Can you help me create a file called any_ Shape_ Geo_ Is the index the index? Using the s2 algorithm, the maximum level is 30 and the maximum number of cells is 8.",
        "查询": "CREATE TAG INDEX IF NOT EXISTS any_shape_geo_index ON any_shape(geo) with (s2_max_level=30, s2_max_cells=8)"
    },
    {
        "用户": "Please help me generate a random number.",
        "查询": "RETURN rand()"
    },
    {
        "用户": "寻找名为'Tim Duncan'的球员所服务的所有实体，并返回这些实体及其关系。",
        "查询": "MATCH (v:player{name:\"Tim Duncan\"})-[]->(v2)<-[e:serve]-(v3)\nRETURN v2, v3"
    },
    {
        "用户": "找出'player100'实体所有关联的实体，其中实体的姓名属性不为空，并返回这些实体通往目的地的边。",
        "查询": "GO FROM \"player100\" OVER * WHERE properties($$).name IS NOT EMPTY YIELD dst(edge)"
    },
    {
        "用户": "Obtain the attributes of 'player101' and return the attributes of the entity.",
        "查询": "FETCH PROP ON player \"player101\" YIELD properties(vertex)"
    },
    {
        "用户": "您好，请帮我查找一下'Boris Diaw'在效力于'Spurs'期间的起始年份和结束年份，可以吗？",
        "查询": "FETCH PROP ON serve \"Boris Diaw\"->\"Spurs\" YIELD serve.start_year, serve.start_year"
    },
    {
        "用户": "If user clear_ Space_ If the user does not exist, create a new user and set the password to 'nebula'.",
        "查询": "CREATE USER IF NOT EXISTS clear_space_user WITH PASSWORD 'nebula';"
    },
    {
        "用户": "您好，请帮我获取'Boris Diaw'实体的所有属性，并将该实体的节点返回。",
        "查询": "FETCH PROP ON player 'Boris Diaw' YIELD vertex as node"
    },
    {
        "用户": "您好，请帮我查找一下别名为'abc'的学生实体，并将它们的ID返回给我。",
        "查询": "LOOKUP ON student WHERE student.alias == \"abc\" YIELD id(vertex) as id"
    },
    {
        "用户": "您好，请帮我找一下从 'Tiago Splitter' 到 'LaMarcus Aldridge' 的最短路径，路径长度要小于5，然后把路径上的所有实体和关系都返回给我好吗？",
        "查询": "MATCH p = shortestPath( (a:player{name:\"Tiago Splitter\"})-[e*..5]->(b:player{name:\"LaMarcus Aldridge\"}) ) RETURN  p"
    },
    {
        "用户": "请找出以'player100'为起点，通过'follow'关系连接的实体，并返回起点实体的姓名和这些终点实体的年龄。",
        "查询": "GO FROM \"player100\" OVER follow YIELD $^.player.name AS startName, $$.player.age AS endAge"
    },
    {
        "用户": "找出喜欢 'Dejounte Murray' 的所有实体中，前三个年龄最大的球员的姓名和年龄，按年龄降序、姓名升序排列。",
        "查询": "MATCH (v1) -[:like]-> (v)\nWHERE id(v1) == 'Dejounte Murray'\nRETURN v.player.name AS Name, v.player.age AS Age\nORDER BY Age DESC, Name ASC\nSKIP 3\nLIMIT 3"
    },
    {
        "用户": "Can you help me find all entities with relationships and their attributes?",
        "查询": "MATCH () -[]-> (v) RETURN *"
    },
    {
        "用户": "请帮我删除名为 'Tony Parker' 的顶点和与之相关的所有边。",
        "查询": "DELETE VERTEX \"Tony Parker\" WITH EDGE;"
    },
    {
        "用户": "您好，请帮我查找与 'Tony Parker' 相关联的所有实体，并将它们的ID返回给我，去除重复后输出。",
        "查询": "MATCH (a)--(b) WHERE id(b) == 'Tony Parker' RETURN DISTINCT id(a)\nUNION\nMATCH (a)--(b) WHERE id(b) == 'Tony Parker' RETURN DISTINCT id(a)"
    },
    {
        "用户": "Obtain the name and age of the 'Tony Parker' player.",
        "查询": "FETCH PROP ON player \"Tony Parker\" YIELD player.name, player.age"
    },
    {
        "用户": "Could you please help me find the path for the service relationship between player 'Yao Ming' and team 'Rockets'?",
        "查询": "MATCH (p:player {name: 'Yao Ming'} ), (t:team {name: 'Rockets'}), pth = (p)-[:serve*1..4]-(t)\nRETURN pth"
    },
    {
        "用户": "将'player668'与'team200'之间的边'serve'更新或插入，设置起始年份为2000，结束年份增加1，并返回起始年份和结束年份。",
        "查询": "UPSERT EDGE on serve\n\"player668\" -> \"team200\"@0\nSET start_year = 2000, end_year = end_year + 1\nYIELD start_year, end_year"
    },
    {
        "用户": "请问您能帮我把名字叫做'Alen'的学生的'teacher'属性更新为'Bob'吗？",
        "查询": "UPDATE VERTEX ON student \"Alen\" SET teacher = \"Bob\""
    },
    {
        "用户": "找出所有 'Boris Diaw' 喜欢的实体，然后删除这些实体与 'Boris Diaw' 的关系。",
        "查询": "GO FROM \"Boris Diaw\" OVER like YIELD like._dst as id | DELETE VERTEX $-.id WITH EDGE"
    },
    {
        "用户": "如果没有的话，能否帮我创建一个名为any_shape的标签？这个标签里包含一个地理形状的geography。",
        "查询": "CREATE TAG IF NOT EXISTS any_shape(geo geography)"
    },
    {
        "用户": "Please insert a player entity named 'Kobe', where the attribute 'name' is' Kobe 'and' age 'is null.",
        "查询": "INSERT VERTEX player(name, age) VALUES \"Kobe\":(\"Kobe\",null)"
    },
    {
        "用户": "请问您能帮我找出与'Tim Duncan'相关的所有实体，并提供它们的边终点信息吗？",
        "查询": "GO FROM 'Tim Duncan' OVER * YIELD dst(edge) as dst"
    },
    {
        "用户": "Identify all entities related to player 'Shaquille O'Neal', return the names, ages, genders, and ages of these entities, and sort them by age and name, returning only one record.",
        "查询": "match (v1)-->(v2:player)-->(v3) where v2.player.name==\"Shaquille O'Neal\"\n  return properties(v1).name,properties(v2).age as age,properties(v3).name AS name,v2.player.sex,v1.player.age\n  order by age, name limit 1;"
    },
    {
        "用户": "Find the names and ages of all players starting with the letter't '.",
        "查询": "MATCH (v:player)\nWHERE v.player.name STARTS WITH \"t\"\nRETURN v.player.name, v.player.age"
    },
    {
        "用户": "找出从 'Tim Duncan' 到 'Tony Parker' 的所有双向 '喜欢' 关系路径，最多包含3跳距离，并返回这些路径。",
        "查询": "FIND NOLOOP PATH FROM \"Tim Duncan\" TO \"Tony Parker\" OVER like BIDIRECT UPTO 3 STEPS YIELD path as p"
    },
    {
        "用户": "Please start from 'player101' and extend outward along the 'follow' relationship by one step, helping me return all the extended nodes and edges.",
        "查询": "GET SUBGRAPH 1 STEPS FROM \"player101\" IN follow YIELD VERTICES AS nodes, EDGES AS relationships"
    },
    {
        "用户": "找出名为'Tim Duncan'的球员所连接的实体，并返回这些实体的姓名和年龄，按年龄降序排列，跳过第一个结果，返回第二个结果。",
        "查询": "MATCH (v:player{name:\"Tim Duncan\"}) --> (v2)\nRETURN v2.player.name AS Name, v2.player.age AS Age\nORDER BY Age DESC SKIP 1 LIMIT 1"
    },
    {
        "用户": "找出对'Duncan'球员有两到三跳喜欢或服务关系所有实体，且与该球员的关系程度为2到3跳，且若为喜欢关系则喜欢程度为为90，返回这些实体及它们与该球员的关系。",
        "查询": "MATCH (:player{name:\"Tim Duncan\"})<-[e:serve|like*2..3{likeness: 90}]-(v)\nRETURN e, v"
    },
    {
        "用户": "Obtain all properties of 'player100'.",
        "查询": "FETCH PROP ON player \"player100\" YIELD properties(vertex)"
    },
    {
        "用户": "Find entities with a likes level of 90 that are liked by players known as Tim Duncan, with a distance of 2 to 3 relationships, and return these relationships and entities.",
        "查询": "MATCH (:player{name:\"Tim Duncan\"})-[e:like*2..3{likeness: 90}]->(v)\nRETURN e, v"
    },
    {
        "用户": "Starting from 'player101', can you help me obtain all nodes and edges within one step?",
        "查询": "GET SUBGRAPH 1 STEPS FROM \"player101\" YIELD VERTICES AS nodes, EDGES AS relationships"
    },
    {
        "用户": "Find all entities associated with a player named 'Tim Duncan' and arrange them in descending order of age. Skip the first two entities and return their names and ages.",
        "查询": "MATCH (v:player{name:\"Tim Duncan\"}) --> (v2)\nRETURN v2.player.name AS Name, v2.player.age AS Age\nORDER BY Age DESC SKIP 1+1"
    },
    {
        "用户": "Identify all entities that are bidirectional connected through the 'follow' relationship starting from 'player101', and group them based on their attribute 'name', returning the number and name of entities in each group.",
        "查询": "GO FROM \"player101\" OVER follow BIDIRECT\nYIELD properties($$).name AS Name\n| GROUP BY $-.Name YIELD $-.Name, count(*)"
    },
    {
        "用户": "找出 'Tim Duncan' 和 'Tony Parker' 所服务过的球队,合并结果，并返回起点姓名，服务开始年份和终点队名。",
        "查询": "GO FROM \"Tim Duncan\" OVER serve YIELD $^.player.name, serve.start_year, $$.team.name\nUNION ALL\nGO FROM \"Tony Parker\" OVER like YIELD like._dst AS id |\n   GO FROM $-.id OVER serve YIELD $^.player.name, serve.start_year, $$.team.name"
    },
    {
        "用户": "Hey, hello! I need to find player entities aged 40 or 20 with non blank names. Can you help me return the ID and age information of these entities?",
        "查询": "LOOKUP ON player WHERE player.age IN [40, 20] AND player.name > \"\" YIELD id(vertex) as id, player.age"
    },
    {
        "用户": "请问您能帮我创建一个名为student_ta的标签索引吗？该索引需要包含student标签中alias和teacher属性的前10个字符。",
        "查询": "CREATE TAG INDEX student_ta ON student(alias(10), teacher(10))"
    },
    {
        "用户": "查找 'Tony Parker' 喜欢的 'Tim Duncan' 和 'Grant Hill' 喜欢的 'Tracy McGrady' 的关系属性，并返回这些关系的终止节点。",
        "查询": "FETCH PROP ON like \"Tony Parker\"->\"Tim Duncan\", \"Grant Hill\" -> \"Tracy McGrady\" YIELD edge as e |\nYIELD endNode($-.e) AS nodes"
    },
    {
        "用户": "获取 'Tony Parker' 喜欢的 'Tim Duncan' 和 'Grant Hill' 喜欢的 'Tracy McGrady' 的关系属性，并返回这些关系的终止节点。",
        "查询": "FETCH PROP ON like \"Tony Parker\"->\"Tim Duncan\", \"Grant Hill\" -> \"Tracy McGrady\" YIELD edge as e |\nYIELD endNode($-.e) AS nodes"
    },
    {
        "用户": "您好，请问您能帮我找出从 'Tim Duncan' 到 'Tony Parker' 的最短路径吗？路径上的所有节点也请一并返回。",
        "查询": "FIND SHORTEST PATH FROM \"Tim Duncan\" TO \"Tony Parker\" OVER like YIELD path as p\n| YIELD nodes($-.p) AS nodes | UNWIND $-.nodes AS a | YIELD $-.a AS a"
    },
    {
        "用户": "Please help me obtain the age and names of entities such as' player100 ',' player101 ',' player102 ', and' player103 ', and sort them in ascending age and descending name order.",
        "查询": "FETCH PROP ON player \"player100\", \"player101\", \"player102\", \"player103\"\nYIELD properties(vertex).age AS age, properties(vertex).name AS name\n| ORDER BY $-.age ASC, $-.name DESC"
    },
    {
        "用户": "Find a player entity named 'Tim Duncan' and return the ID of that entity.",
        "查询": "LOOKUP ON player WHERE player.name == \"Tim Duncan\" YIELD id(vertex) as id"
    },
    {
        "用户": "Find all players associated with a player named 'Tony Parker' and return their names and ages.",
        "查询": "MATCH (v:player{name:\"Tony Parker\"})--(v2:player)\nRETURN v2.player.name, v2.player.age"
    },
    {
        "用户": "找出从 'Tim Duncan' 到 'Tony Parker' 或 'LaMarcus Aldridge' 的所有路径，路径上的关系为 '喜欢'，最多经过三步，并返回这些路径。",
        "查询": "FIND ALL PATH FROM \"Tim Duncan\" TO \"Tony Parker\", \"LaMarcus Aldridge\" OVER like UPTO 3 STEPS YIELD path as p"
    },
    {
        "用户": "请找出所有以'r'结尾的球员名字，并告诉我他们的年龄。",
        "查询": "MATCH (v:player)\nWHERE v.player.name ENDS WITH \"r\"\nRETURN v.player.name, v.player.age"
    },
    {
        "用户": "Find all entities connected by a player named 'Tim Duncan' and return these entities.",
        "查询": "MATCH (v:player{name:\"Tim Duncan\"}) -[*0]-> (v2)\nRETURN v2"
    },
    {
        "用户": "创建一条边，表示服务关系，包括开始年份和结束年份。",
        "查询": "CREATE EDGE serve(start_year int, end_year int)"
    },
    {
        "用户": "Find entities with student alias' abc 'and return the IDs of these entities.",
        "查询": "LOOKUP ON student WHERE student.alias == \"abc\" YIELD id(vertex) as id"
    },
    {
        "用户": "创建一条边follow，包含一个整数属性degree。",
        "查询": "CREATE EDGE follow(degree int)"
    },
    {
        "用户": "查找年龄大于等于40岁的球员，并返回他们的ID和年龄。",
        "查询": "LOOKUP ON player WHERE player.age >= 40.0 YIELD id(vertex) as name, player.age AS Age"
    },
    {
        "用户": "找出名为'Tim Duncan'的球员所属的所有球队，并返回与该球员有关系的所有实体关系。",
        "查询": "MATCH (v:player{name:\"Tim Duncan\"})-[e]->(t) WHERE (v)-[e]->(t:team) RETURN (v)-->()"
    },
    {
        "用户": "查找名为'Tracy McGrady'的球员在2000年之后所效力过的球队，返回他们之间的关系及实体的相关信息。",
        "查询": "MATCH (:player{name:\"Tracy McGrady\"})-[e:serve*0..1{start_year: 2000}]-(v)\nRETURN e, v"
    },
    {
        "用户": "Please help me return the third number in the range 1 to 5.",
        "查询": "RETURN range(1,5)[3]"
    },
    {
        "用户": "返回1+1的结果作为sum。",
        "查询": "RETURN 1+1 AS sum"
    },
    {
        "用户": "Obtain the name and age of the player named 'Boris Diaw' and return the result of whether the player's age is greater than 30.",
        "查询": "FETCH PROP ON player 'Boris Diaw' YIELD player.name, player.age, player.age > 30"
    },
    {
        "用户": "Hello, please help me identify all students with aliases less than 'b' and teacher names less than 'abc'. Please return the IDs, teacher names, and aliases of these students to ensure that the IDs are not duplicate.",
        "查询": "LOOKUP ON student WHERE student.alias < \"b\" and student.teacher < \"abc\" YIELD DISTINCT id(vertex) as id, student.teacher, student.alias"
    },
    {
        "用户": "Please help me remove the 'player' tags for 'Tim Duncan' and 'Tony Parker'.",
        "查询": "DELETE TAG player FROM \"Tim Duncan\", \"Tony Parker\";"
    },
    {
        "用户": "Hello, please help me identify the students whose teacher names have a dictionary order less than 'a' and tell me their IDs.",
        "查询": "LOOKUP ON student WHERE student.teacher < \"a\" YIELD id(vertex) as id"
    },
    {
        "用户": "Identify all entities that 'player100' is interested in and return the source and target nodes of these entities.",
        "查询": "$a = GO FROM \"player100\" OVER follow YIELD src(edge) AS src, dst(edge) AS dst"
    },
    {
        "用户": "Please help me find all edges in the 'follow' relationship and tell me the number of relationships.",
        "查询": "LOOKUP ON follow YIELD edge AS e|\nYIELD COUNT(*) AS Follow_Number"
    },
    {
        "用户": "Please help me create an edge that represents the service relationship, including two attributes: start year and end year.",
        "查询": "CREATE EDGE serve(start_year int, end_year int)"
    },
    {
        "用户": "Could you please help me find the start and end years of Boris Diaw's employment with 'Spurs'?",
        "查询": "FETCH PROP ON serve \"Boris Diaw\"->\"Spurs\" YIELD serve.start_year, serve.start_year"
    },
    {
        "用户": "请帮我返回'basketball_player'的前6个字符。",
        "查询": "RETURN left(\"basketball_player\",6)"
    },
    {
        "用户": "Find all the entities that players named 'Tim Duncan' like, including 2-3 degree relationships, and return the number of entities.",
        "查询": "MATCH (:player{name: \"Tim Duncan\"})-[e:like*2..3]-(v)\nRETURN COUNT(1)"
    },
    {
        "用户": "找出距离实体'A'一步的所有实体，并返回这些实体的源节点和目标节点。",
        "查询": "GO 1 STEPS FROM \"A\" OVER follow YIELD src(edge),dst(edge)"
    },
    {
        "用户": "Can you help me find information about all entities?",
        "查询": "MATCH (v) RETURN v"
    },
    {
        "用户": "Find all the entities that Tracy McGrady likes and return their IDs.",
        "查询": "GO FROM \"Tracy McGrady\" OVER like YIELD like._dst"
    },
    {
        "用户": "Please show me the homework<job_ Information related to id>.",
        "查询": "SHOW JOB <job_id>"
    },
    {
        "用户": "Find all entities that players known as' Tracy McGrady 'have played for or liked since 2000, and return information on these entities and relationships.",
        "查询": "MATCH (:player{name:\"Tracy McGrady\"})-[e:serve|like*0..1{start_year: 2000}]->(v)\nRETURN e, v"
    },
    {
        "用户": "Hello, I would like to search for information about 'Tim Duncan', specifically about his' likes' and 'services'. Can you help me identify all related entities with a distance of 2 and their relationships?",
        "查询": "GET SUBGRAPH WITH PROP 2 STEPS FROM 'Tim Duncan' IN like, serve YIELD EDGES as relationships"
    },
    {
        "用户": "展示所有标签的索引信息。",
        "查询": "Show TAG INDEXES;"
    },
    {
        "用户": "寻找从球员 'Tim Duncan' 到球员 'Tony Parker' 的最短路径，并返回路径上的关系和节点信息。",
        "查询": "MATCH p = shortestPath( (a:player{name:\"Tim Duncan\"})-[e*..5]-(b:player{name:\"Tony Parker\"}) )  RETURN e, p"
    },
    {
        "用户": "Identify all entities that 'player100' is interested in and return the source and target nodes of these entities.",
        "查询": "$a = GO FROM \"player100\" OVER follow YIELD src(edge) AS src, dst(edge) AS dst"
    },
    {
        "用户": "找出名为'Tim Duncan'的球员所关注的所有实体，并返回这些实体作为他的朋友。",
        "查询": "MATCH p=(v:player{name:\"Tim Duncan\"})-[e:follow*]->(v2)\nRETURN v2 AS Friends"
    },
    {
        "用户": "新增一个名为student_alias的标签索引，该索引基于student标签的alias属性，长度为10。",
        "查询": "CREATE TAG INDEX student_alias ON student(alias(10))"
    },
    {
        "用户": "If it does not exist, insert a 'like' edge from 'Tom' to 'Conan' with an edge weight of 10.",
        "查询": "INSERT EDGE IF NOT EXISTS like(likeness) VALUES \"Tom\"->\"Conan\":(10)"
    },
    {
        "用户": "获取 'Tony Parker' 球员的属性，包括姓名和年龄。",
        "查询": "$v1 = FETCH PROP ON player \"Tony Parker\"\nYIELD properties(Vertex) AS props, properties(Vertex).name AS name, properties(Vertex).age AS age"
    },
    {
        "用户": "Please help me obtain all the attributes of the 'Kobe' player and return the values of these attributes.",
        "查询": "FETCH PROP ON player \"Kobe\" YIELD properties(vertex)"
    },
    {
        "用户": "返回所有为'Pistons'队效力的球员的姓名。",
        "查询": "MATCH (v)-[:serve]->(t)\nWHERE id(t) == 'Pistons'\nRETURN v.player.name AS Name"
    },
    {
        "用户": "Obtain the name and age attributes of the 'Tim Duncan' player.",
        "查询": "FETCH PROP ON player \"Tim Duncan\" YIELD player.name, player.age"
    },
    {
        "用户": "获取'player101'、'player102'、'player103'的所有属性。",
        "查询": "FETCH PROP ON player \"player101\", \"player102\", \"player103\" YIELD properties(vertex)"
    },
    {
        "用户": "您好，请帮我找一下从 'Tony Parker' 和 'Yao Ming' 到 'Manu Ginobili'、'Spurs' 和 'Lakers' 的最短路径，路径上的关系属性要求 'teammate.start_year' 不为空或 'like.likeness' 大于90，最多经过3个步骤，并返回路径上的所有节点。",
        "查询": "FIND SHORTEST PATH WITH PROP FROM \"Tony Parker\", \"Yao Ming\" TO \"Manu Ginobili\", \"Spurs\", \"Lakers\" OVER * BIDIRECT WHERE teammate.start_year is not EMPTY OR like.likeness > 90 UPTO 3 STEPS YIELD path as p |\nYIELD nodes($-.p) as nodes"
    },
    {
        "用户": "Can you help me find a student entity ID with the alias' abc '?",
        "查询": "LOOKUP ON student WHERE student.alias == \"abc\" YIELD id(vertex) as id"
    },
    {
        "用户": "Find the names of the top three players and merge them with the names of 'Tony Parker' and 'Ben Simmons' to return.",
        "查询": "MATCH (v:player)\nWITH v.player.name AS n\nRETURN n ORDER BY n LIMIT 3\nUNION\nUNWIND [\"Tony Parker\", \"Ben Simmons\"] AS n\nRETURN n"
    },
    {
        "用户": "Identify the relationships between all entities that 'Russell Westbrook' serves' and 'likes', and return these relationship edges.",
        "查询": "GO FROM 'Russell Westbrook' OVER serve, like YIELD edge as e"
    },
    {
        "用户": "找出 'Tony Parker' 所喜欢的实体，但排除 'Danny Green'，并返回这些实体的名称。",
        "查询": "GO FROM 'Tony Parker' OVER like\nWHERE like._dst NOT IN {'Danny Green'}\nYIELD $$.player.name"
    },
    {
        "用户": "The names of the returned players include ['James Harden ',' Jonathan Simmons', 'Klay Thompson', 'Dejounte Murray', 'Paul Gasol'] and all players.",
        "查询": "MATCH (v)\nWHERE id(v) IN ['James Harden', 'Jonathon Simmons', 'Klay Thompson', 'Dejounte Murray', 'Paul Gasol']\n      OR true\nRETURN v.player.name AS Name"
    },
    {
        "用户": "您好，请帮我查找一下'Boris Diaw'在'Spurs'的服务关系的源节点、目标节点和权重好吗？",
        "查询": "FETCH PROP ON serve 'Boris Diaw'->\"Spurs\" YIELD serve._src, serve._dst, serve._rank"
    },
    {
        "用户": "计算数字123.0的哈希值并返回。",
        "查询": "YIELD hash(123.0)"
    },
    {
        "用户": "您好，请帮我找到一个名为'English'的课程节点，并将它命名为'node'，然后返回它的属性信息。",
        "查询": "FETCH PROP ON course \"English\" YIELD vertex as node"
    },
    {
        "用户": "将列表[1,1,2,2,3,3]去重并按升序排序，然后返回排序后的列表。",
        "查询": "WITH [1,1,2,2,3,3] AS n\nUNWIND n AS r\nWITH DISTINCT r AS r\nORDER BY r\nRETURN collect(r)"
    },
    {
        "用户": "Delete entities with vertex 'team1' and delete related edges.",
        "查询": "DELETE VERTEX \"team1\" WITH EDGE"
    },
    {
        "用户": "找出 'Tim Duncan' 和 'Chris Paul' 喜欢的实体，然后找出这些实体与其他实体之间的关系及属性，但排除与 'Tim Duncan' 和 'Chris Paul' 相关的边和属性。",
        "查询": "$var = GO FROM 'Tim Duncan', 'Chris Paul' OVER like YIELD $^.player.name AS name, id($$) AS id;\nGO FROM $var.id OVER like  WHERE $var.name != $$.player.name YIELD $var.name, properties(edge) as props"
    },
    {
        "用户": "将关注关系中从'player101'到'player100'的边更新为度数为 96。",
        "查询": "UPDATE EDGE ON follow \"player101\" -> \"player100\" SET degree = 96"
    },
    {
        "用户": "Please help me insert two vertices, one representing the team named 'Trail Blazers' and the other representing the team named' Spurs'.",
        "查询": "INSERT VERTEX team(name) VALUES \"team203\":(\"Trail Blazers\"), \"team204\":(\"Spurs\")"
    },
    {
        "用户": "Count the number of players who are 'liked' by other players among all players who serve 'Spurs'.",
        "查询": "MATCH (v1)-[:like]->(v2:player)-[:serve]->(v3)\nWHERE id(v3) == 'Spurs'\nRETURN COUNT(*)"
    },
    {
        "用户": "获取球队 'Spurs' 的名称。",
        "查询": "FETCH PROP ON team \"Spurs\" YIELD team.name"
    },
    {
        "用户": "找出'player102'和'player100'关注的实体，返回这些实体的ID、边的度和'player100'的年龄。",
        "查询": "GO FROM \"player102\" OVER follow\nYIELD dst(edge) AS id, properties(edge).degree AS Degree, properties($$).age AS Age\nUNION /* DISTINCT */\nGO FROM \"player100\" OVER follow\nYIELD dst(edge) AS id, properties(edge).degree AS Degree, properties($$).age AS Age"
    },
    {
        "用户": "请帮我找出名为'Tim Duncan'的球员的所有朋友的朋友，并将这些朋友的姓名返回给我。",
        "查询": "MATCH p=(v:player{name:\"Tim Duncan\"})-[e:follow*2]->(v2)\nWHERE ALL(e_ in e WHERE e_.degree > 0)\nRETURN DISTINCT v2 AS Friends"
    },
    {
        "用户": "获取名为'Tony Parker'的球员的姓名和年龄。",
        "查询": "FETCH PROP ON player \"Tony Parker\" YIELD player.name, player.age"
    },
    {
        "用户": "您好，请帮我查找一下'Tim Duncan'所效力的所有球队，并将这些球队的'team'标签删除。",
        "查询": "$var = GO FROM \"Tim Duncan\" OVER serve YIELD serve._dst as id; DELETE TAG team FROM $var.id"
    },
    {
        "用户": "您好，请帮我找出所有别名小于'b'且老师名小于'abc'的学生。请返回这些学生的ID、老师名和别名，确保ID不重复。",
        "查询": "LOOKUP ON student WHERE student.alias < \"b\" and student.teacher < \"abc\" YIELD DISTINCT id(vertex) as id, student.teacher, student.alias"
    },
    {
        "用户": "将学生 'Alen' 的老师更新为 'Bob'。",
        "查询": "UPDATE VERTEX ON student \"Alen\" SET teacher = \"Bob\""
    },
    {
        "用户": "Identify the entities that Tim Duncan and Chris Paul, who are over 20 years old, like and return their IDs. Then, start from these entities and identify all relationships with a liking level greater than 80. Returns the target entity of these relationships.",
        "查询": "$var = GO FROM \"Tim Duncan\", \"Chris Paul\" OVER like WHERE properties($$).age > 20 YIELD id($$) as id;\nGO FROM $var.id OVER * WHERE properties(edge).likeness > 80 YIELD $$ as dst"
    },
    {
        "用户": "找出 'Tim Duncan' 所喜欢的实体的 ID 和对应的年龄，筛选出年龄大于40岁的实体，并返回这些实体的 ID 和平均年龄加1。",
        "查询": "GO FROM \"Tim Duncan\" OVER like YIELD like._dst AS dst, $$.player.age AS age\n| YIELD $-.dst AS dst, 1+avg(distinct $-.age) AS age where $-.age > 40"
    },
    {
        "用户": "Calculate the total age of all players.",
        "查询": "MATCH (v:player) RETURN sum(v.player.age)"
    },
    {
        "用户": "Please help me find a date, which is December 3rd, 123 BC.",
        "查询": "RETURN DATE({year:-123, month:12, day:3})"
    },
    {
        "用户": "查找名为'Tracy McGrady'的球员所'喜欢'的实体，喜欢程度为90，并返回这些实体与该球员的关系和属性信息。",
        "查询": "MATCH (:player{name:\"Tracy McGrady\"})-[e:like*0{likeness: 90}]-(v)\nRETURN e, v"
    },
    {
        "用户": "Insert a player node named 'A Loner' with an age of 0 and delete it and all its edges.",
        "查询": "INSERT VERTEX player(name, age) VALUES \"A Loner\": (\"A Loner\", 0);\nDELETE VERTEX \"A Loner\" WITH EDGE;"
    },
    {
        "用户": "Find all entities associated with a player named 'Tim Duncan' and sort them in descending order of age. Skip the first two entities and return the names and ages of the remaining entities.",
        "查询": "MATCH (v:player{name:\"Tim Duncan\"}) --> (v2)\nRETURN v2.player.name AS Name, v2.player.age AS Age\nORDER BY Age DESC SKIP 1+1"
    },
    {
        "用户": "找出从 'Tim Duncan' 到 'Tony Parker' 或 'Manu Ginobili' 的不重复路径，路径上的关系为 '喜欢'，最多包含3个跳，并返回路径信息。",
        "查询": "FIND NOLOOP PATH FROM \"Tim Duncan\" TO \"Tony Parker\", \"Manu Ginobili\" OVER like UPTO 3 STEPS YIELD path as p"
    },
    {
        "用户": "嘿，你好！我需要找出所有曾经为'Thunders'提供服务的实体，然后返回它们的源节点、边上的标签、边的ID、目标节点以及目标节点的ID。你能帮我完成这个任务吗？",
        "查询": "GO FROM 'Thunders' OVER serve REVERSELY YIELD $^ as src,tags($^), id($^), id($$), $$ as dst"
    },
    {
        "用户": "查找名为Tim Duncan的球员在2000年之后服务过的，遍历2到3步的所有实体，包括服务关系和实体本身。",
        "查询": "MATCH (:player{name:\"Tim Duncan\"})-[e:serve*2..3{start_year: 2000}]->(v)\nRETURN e, v"
    },
    {
        "用户": "请计算11+12。",
        "查询": "RETURN 11+12"
    },
    {
        "用户": "Find all 'like' relationships with a rating of 666, and return the starting and ending points of these relationships.",
        "查询": "LOOKUP ON like WHERE like.likeness == 666 YIELD src(edge) as src, dst(edge) as dst"
    },
    {
        "用户": "Find the age of player Carmelo Anthony and return.",
        "查询": "match (v:player) where id(v)==\"Carmelo Anthony\" return v.player.age;"
    },
    {
        "用户": "Identify entities and relationships that have a two to three jump 'like' relationship with 'Tim Duncan' and a preference level of 90.",
        "查询": "MATCH (n)-[e:like*2..3{likeness: 90}]-(v)\nWHERE id(n) == \"Tim Duncan\"\nRETURN e, v"
    },
    {
        "用户": "找出与 'Tim Duncan' 有两到三跳 '喜欢' 关系，且喜欢程度为90的实体，返回这些关系和实体。",
        "查询": "MATCH (n)-[e:like*2..3{likeness: 90}]->(v)\nWHERE id(n) == \"Tim Duncan\"\nRETURN e, v"
    },
    {
        "用户": "找出年龄为30的球员和他们所在的球队之间距离不超过5的最短路径，并返回该路径。",
        "查询": "MATCH p = shortestPath( (a:player{age:30})-[e*..5]->(b:team) )\n  WHERE length(p) == 1\n  RETURN p"
    },
    {
        "用户": "找出与实体'player100'有1跳到2跳'follow'关系的实体，并返回这些实体的 ID。",
        "查询": "MATCH (v) -[e:follow*1..2]->(v2)\nWHERE id(v) == \"player100\"\nRETURN id(v2) AS destination"
    },
    {
        "用户": "Please use<your_ Graph_ Map space helps me.",
        "查询": "USE <your_graph_space>"
    },
    {
        "用户": "找出年龄不在20到25岁范围内的所有球员，并按年龄排序，返回球员的姓名和年龄。",
        "查询": "MATCH (v:player)\nWHERE v.player.age NOT IN range(20,25)\nRETURN v.player.name AS Name, v.player.age AS Age\nORDER BY Age"
    },
    {
        "用户": "请帮我找出与'player101'相关的属性为2步的子图，其中关注度大于90且球员年龄大于30的节点和边。",
        "查询": "GET SUBGRAPH WITH PROP 2 STEPS FROM \"player101\"\nWHERE follow.degree > 90 AND $$.player.age > 30\nYIELD VERTICES AS nodes, EDGES AS relationships"
    },
    {
        "用户": "Find entities and their relationships with a 90 likes rating that players known as' Tracy McGrady 'like.",
        "查询": "MATCH (:player{name:\"Tracy McGrady\"})-[e:like*1{likeness: 90}]->(v)\nRETURN e, v"
    },
    {
        "用户": "查找所有学生中，其老师的名字大于'a'的学生，并返回这些学生的ID。",
        "查询": "LOOKUP ON student WHERE student.teacher > \"a\" YIELD id(vertex) as id"
    },
    {
        "用户": "将实体'player101'关注实体'player100'的关系插入，关注度为95。",
        "查询": "INSERT EDGE follow(degree) VALUES \"player101\" -> \"player100\":(95)"
    },
    {
        "用户": "胃病的症状有哪些？",
        "查询": "GO FROM \"胃病\" OVER has_symptom YIELD dst(edge);"
    },
    {
        "用户": "Please help me obtain the age and name in the attributes of 'player100', 'player101', 'player102', and 'player103', and sort them in ascending age and descending name order.",
        "查询": "FETCH PROP ON player \"player100\", \"player101\", \"player102\", \"player103\"\nYIELD properties(vertex).age AS age, properties(vertex).name AS name\n| ORDER BY $-.age ASC, $-.name DESC"
    },
    {
        "用户": "如果名字为'Joe'的球员存在，则将其年龄设置为30，并返回名字为'Joe'和年龄为30的球员的信息。",
        "查询": "UPSERT VERTEX ON player \"player666\"\nSET age = 30\nWHEN name == \"Joe\"\nYIELD name AS Name, age AS Age"
    },
    {
        "用户": "Please help me calculate the tangent value of 0.5.",
        "查询": "RETURN tan(0.5)"
    },
    {
        "用户": "Find the entities connected by a player named 'Tim Duncan' and return the names and ages of these entities, arranged in descending order of age. Skip the first result and return the second result.",
        "查询": "MATCH (v:player{name:\"Tim Duncan\"}) --> (v2)\nRETURN v2.player.name AS Name, v2.player.age AS Age\nORDER BY Age DESC SKIP 1 LIMIT 1"
    },
    {
        "用户": "从'player100'开始，通过'follow'关系，找出距离为1跳到2跳的所有实体，并返回这些实体的目的地。",
        "查询": "GO 1 TO 2 STEPS FROM \"player100\" OVER follow\nYIELD dst(edge) AS destination"
    },
    {
        "用户": "Find all entities that 'player101' is interested in and return the attention level of these entities.",
        "查询": "GO FROM \"player101\" OVER follow\nYIELD src(edge) AS s, dst(edge) AS d\n| FETCH PROP ON follow $-.s -> $-.d\nYIELD properties(edge).degree"
    },
    {
        "用户": "Find the entity that player 'Tim Duncan' likes, with a distance of 2-3 hops, and return the quantity statistics results.",
        "查询": "MATCH (:player{name: \"Tim Duncan\"})-[e:like*2..3]-(v)\nRETURN COUNT(1)"
    },
    {
        "用户": "Hello, please help me create some labels and edges, some of which require setting default values. The label includes person, student, interest, school, and includes classmates and learning.",
        "查询": "CREATE TAG IF NOT EXISTS person(name string, age int);\nCREATE TAG IF NOT EXISTS personWithDefault(\n  name string DEFAULT \"\",\n  age int DEFAULT 18, isMarried bool DEFAULT false,\n  BMI double DEFAULT 18.5, department string DEFAULT \"engineering\",\n  birthday timestamp DEFAULT timestamp(\"2020-01-10T10:00:00\")\n);\nCREATE TAG IF NOT EXISTS student(grade string, number int);\nCREATE TAG IF NOT EXISTS studentWithDefault(grade string DEFAULT \"one\", number int);\nCREATE TAG IF NOT EXISTS employee(name int);\nCREATE TAG IF NOT EXISTS interest(name string);\nCREATE TAG IF NOT EXISTS school(name string, create_time timestamp);\nCREATE EDGE IF NOT EXISTS schoolmate(likeness int, nickname string);\nCREATE EDGE IF NOT EXISTS schoolmateWithDefault(likeness int DEFAULT 80);\nCREATE EDGE IF NOT EXISTS study(start_time timestamp, end_time timestamp);"
    },
    {
        "用户": "Create a tag called 'woman' that contains attributes such as name, age, marital status, salary, and creation time. The creation time attribute has a lifetime of 100 seconds, and the lifetime field is' create '_ Time.",
        "查询": "CREATE TAG IF NOT EXISTS woman(name string, age int,\nmarried bool, salary double, create_time timestamp)\nTTL_DURATION = 100, TTL_COL = \"create_time\""
    },
    {
        "用户": "找出球员'Tim Duncan'所喜欢的实体，距离为2-3跳关系，返回数量统计结果。",
        "查询": "MATCH (:player{name: \"Tim Duncan\"})-[e:like*2..3]-(v)\nRETURN COUNT(1)"
    },
    {
        "用户": "查找与球员'Manu Ginobili'有2到3跳喜欢关系的实体，返回这些实体的性别、关系强度、姓名、年龄和关系开始年份，并按照关系强度、姓名和年龄排序，最多返回5个结果。",
        "查询": "match (src_v:player{name:\"Manu Ginobili\"})-[e:like*2..3]-(dst_v)\n  return distinct properties(src_v).sex,properties(e[0]).degree as degree,properties(dst_v).name as name,src_v.player.age AS age, e[1].start_year,dst_v.player.age\n  order by degree, name, age limit 5;"
    },
    {
        "用户": "Please help me delete the entity named 'Grant Hill' and all related edges.",
        "查询": "DELETE VERTEX \"Grant Hill\" WITH EDGE"
    },
    {
        "用户": "Identify players with a two jump 'follow' relationship with a player named 'Tim Duncan' and a first jump relationship degree greater than 98, and return these players as friends.",
        "查询": "MATCH p=(v:player{name:\"Tim Duncan\"})-[e:follow*2]->(v2)\nWHERE e[0].degree > 98\nRETURN DISTINCT v2 AS Friends"
    },
    {
        "用户": "Find all the entities that Tracy McGrady likes and return their IDs.",
        "查询": "GO FROM \"Tracy McGrady\" OVER like YIELD like._dst"
    },
    {
        "用户": "Identify entities and relationships that are connected to 'Tim Duncan' through a 'service' or 'like' relationship, with a relationship strength of 90 and a distance of 2 to 3.",
        "查询": "MATCH (n)-[e:serve|like*2..3{likeness: 90}]-(v)\nWHERE id(n) == \"Tim Duncan\"\nRETURN e, v"
    },
    {
        "用户": "您好，请帮我找出与'Tim Duncan'相关的所有实体，并提供它们的边终点。",
        "查询": "GO FROM 'Tim Duncan' OVER * YIELD dst(edge) as dst"
    },
    {
        "用户": "请找出ID为1的实体所连接的边中，排名大于2的边，并返回这些边的起始节点、目标节点、排名和属性p1。最后按照排名降序排序。",
        "查询": "GO FROM \"1\"\nOVER e1\nWHERE rank(edge) > 2\nYIELD src(edge), dst(edge), rank(edge) AS Rank, properties(edge).p1 |\nORDER BY $-.Rank DESC"
    },
    {
        "用户": "Can you help me find the names of the first three people?",
        "查询": "MATCH (v)\nRETURN v.person.name LIMIT 3"
    },
    {
        "用户": "请问您能帮我找一下前三个人的姓名吗？",
        "查询": "MATCH (v)\nRETURN v.person.name LIMIT 3"
    },
    {
        "用户": "Identify all bidirectional 'like' relationship paths from 'Tim Duncan' to 'Tony Parker', including a maximum of 3 hop distances, and return these paths.",
        "查询": "FIND NOLOOP PATH FROM \"Tim Duncan\" TO \"Tony Parker\" OVER like BIDIRECT UPTO 3 STEPS YIELD path as p"
    },
    {
        "用户": "Hello, please help me find it. I need to obtain the IDs of students whose teacher names are greater than 'a'.",
        "查询": "LOOKUP ON student WHERE student.teacher > \"a\" YIELD id(vertex) as id"
    },
    {
        "用户": "请帮我创建一条边，表示服务关系，包括起始年份和结束年份两种属性。",
        "查询": "CREATE EDGE serve(start_year int, end_year int)"
    },
    {
        "用户": "请帮我找出名为'Tim Duncan'的球员关注的所有实体，并将这些实体作为他的朋友返回给我。",
        "查询": "MATCH p=(v:player{name:\"Tim Duncan\"})-[e:follow*]->(v2)\nRETURN v2 AS Friends"
    },
    {
        "用户": "请创建一条带有度属性的follow边。",
        "查询": "CREATE EDGE follow(degree int)"
    },
    {
        "用户": "Find all entities in e1 where col1 is less than 'abcde' and return the source and target nodes of these entities.",
        "查询": "LOOKUP ON e1 WHERE e1.col1 < \"abcde\" YIELD src(edge) as src, dst(edge) as dst"
    },
    {
        "用户": "请将监听器添加到空间basketballplayer，然后同步元数据到192.168.10.105:9569，并将其存储到192.168.10.105:9789。",
        "查询": "ADD LISTENER SYNC META 192.168.10.105:9569 STORAGE 192.168.10.105:9789 TO SPACE basketballplayer"
    },
    {
        "用户": "插入一条边，Tom 喜欢 Conan，喜欢程度为 200。",
        "查询": "INSERT EDGE like VALUES \"Tom\"->\"Conan\":(200)"
    },
    {
        "用户": "请展示一下作业号为25的作业信息。",
        "查询": "SHOW JOB 25"
    },
    {
        "用户": "返回所有团队的ID。",
        "查询": "MATCH (v:team)\nRETURN id(v)"
    },
    {
        "用户": "Find all the entities that Tony Parker likes and return them.",
        "查询": "GO FROM \"Tony Parker\" OVER like YIELD like._dst"
    },
    {
        "用户": "Can you help me create a program called student_ The tag index of TA, which contains the first 10 characters of the alias and teacher attributes in the student tag.",
        "查询": "CREATE TAG INDEX student_ta ON student(alias(10), teacher(10))"
    },
    {
        "用户": "找出名为'Yao Ming'的球员所服务的2-3跳实体，并返回原始实体的名称。",
        "查询": "MATCH (v:player {name: \"Yao Ming\"})-[:serve*2..3]->() RETURN v.player.name"
    },
    {
        "用户": "您好，请您帮忙一下，能否帮我找出从 'Tony Parker' 和 'Yao Ming' 到 'Manu Ginobili'、'Spurs' 和 'Lakers' 的最短路径，并将路径信息返回给我呢？",
        "查询": "FIND SHORTEST PATH FROM \"Tony Parker\", \"Yao Ming\" TO \"Manu Ginobili\", \"Spurs\", \"Lakers\" OVER * REVERSELY YIELD path as p"
    },
    {
        "用户": "返回球员的姓名包括在 ['James Harden', 'Jonathon Simmons', 'Klay Thompson', 'Dejounte Murray', 'Paul Gasol'] 以及所有球员。",
        "查询": "MATCH (v)\nWHERE id(v) IN ['James Harden', 'Jonathon Simmons', 'Klay Thompson', 'Dejounte Murray', 'Paul Gasol']\n      OR true\nRETURN v.player.name AS Name"
    },
    {
        "用户": "Find all teams where a player named 'Tony Parker' belongs and return the deduplication results of these teams and the player's age.",
        "查询": "MATCH (v:player{name: \"Tony Parker\"})-[:serve]->(t:team)\nWITH DISTINCT v.player.age as age, t\nRETURN t"
    },
    {
        "用户": "找出与 'LeBron James' 有 '喜欢' 关系的实体，并返回这些实体之间的关系及其名称。",
        "查询": "MATCH p = (n)-[:like]-(m)\nWHERE id(n) == \"LeBron James\"\nRETURN p, n.player.name, m.player.name"
    },
    {
        "用户": "If not, can you help me create a file called any_ Label for shape? This label contains a geography of a geographic shape.",
        "查询": "CREATE TAG IF NOT EXISTS any_shape(geo geography)"
    },
    {
        "用户": "获取'player100'和'player103'的属性，并返回这些属性的顶点。",
        "查询": "FETCH PROP ON player, t1 \"player100\", \"player103\" YIELD vertex AS v"
    },
    {
        "用户": "Update the edges from 'player101' to 'player100' in the attention relationship to a degree of 96.",
        "查询": "UPDATE EDGE ON follow \"player101\" -> \"player100\" SET degree = 96"
    },
    {
        "用户": "Please help me identify all entities that 'player100' focuses on and serves, and return the attribute degrees and starting years of these edges.",
        "查询": "GO FROM \"player100\" OVER follow, serve\nYIELD properties(edge).degree, properties(edge).start_year"
    },
    {
        "用户": "Starting from 'player100', go through up to 3 steps along any relationship to return the name and age of the endpoint entity. It is required that only 1 edge can be selected in the first jump, 2 edges can be selected in the second jump, and 3 edges can be selected in the third jump.",
        "查询": "GO 3 STEPS FROM \"player100\"\nOVER *\nYIELD properties($$).name AS NAME, properties($$).age AS Age\nSAMPLE [1,2,3]"
    },
    {
        "用户": "Hello, could you please help me search for the entities that Tim Duncan has served since 2000, including service relationships and the entity itself? Can you traverse steps 2 to 3?",
        "查询": "MATCH (:player{name:\"Tim Duncan\"})-[e:serve*2..3{start_year: 2000}]->(v)\nRETURN e, v"
    },
    {
        "用户": "白血病的症状有哪些？",
        "查询": "MATCH (n:disease{name:'白血病'})-[e:has_symptom]->(n1:symptom) return n1.symptom.name"
    },
    {
        "用户": "请帮我移除DRAINER。",
        "查询": "REMOVE DRAINER"
    },
    {
        "用户": "得了高血压需要做哪些检查？",
        "查询": "GO FROM \"高血压\" OVER need_check YIELD dst(edge);"
    },
    {
        "用户": "您好，请帮我在t1标签的col1属性上创建一个长度为5的标签索引。",
        "查询": "CREATE TAG INDEX ti1 ON t1(col1(5));"
    },
    {
        "用户": "从 'Tony Parker' 出发，向 '队友' 和 '服务' 的实体方向，沿着 '喜欢' 的边，找出距离为 5 的子图，并返回子图中的节点和边。",
        "查询": "GET SUBGRAPH WITH PROP 5 steps from 'Tony Parker' IN teammate OUT serve BOTH like YIELD VERTICES as nodes, EDGES as relationships"
    },
    {
        "用户": "Find all entities that have two to three likes or service relationships with 'Duncan' players, with a level of 2 to 3 likes and a level of 90 likes if it is a like relationship. Return these entities and their relationships with the player.",
        "查询": "MATCH (:player{name:\"Tim Duncan\"})<-[e:serve|like*2..3{likeness: 90}]-(v)\nRETURN e, v"
    },
    {
        "用户": "找出从 'Tim Duncan' 到 'Tony Parker' 或 'Manu Ginobili' 的不重复路径，路径上的关系为 '喜欢'，最多包含3个步骤，并返回这些路径。",
        "查询": "FIND NOLOOP PATH FROM \"Tim Duncan\" TO \"Tony Parker\", \"Manu Ginobili\" OVER like UPTO 3 STEPS YIELD path as p"
    },
    {
        "用户": "Modify tag t1, change the type of attribute p3 to int64, and change the type of attribute p4 to string.",
        "查询": "ALTER TAG t1 CHANGE (p3 int64, p4 string)"
    },
    {
        "用户": "查找名为'Tim Duncan'的球员实体，并返回其ID。",
        "查询": "LOOKUP ON player WHERE player.name == \"Tim Duncan\" YIELD id(vertex) as id"
    },
    {
        "用户": "Please help me insert a player named 'player100', his name is' Tim Duncan ', and his age is 42 years old.",
        "查询": "INSERT VERTEX player(name, age) VALUES \"player100\":(\"Tim Duncan\", 42)"
    },
    {
        "用户": "Find all the entities that 'Russell Westbrook' likes' and return them.",
        "查询": "GO FROM \"Russell Westbrook\" OVER like YIELD like._dst"
    },
    {
        "用户": "您好,帮忙找出所有标签为player和bachelor的实体，可以吗？",
        "查询": "MATCH (v:player:bachelor) RETURN v"
    },
    {
        "用户": "请以浮点数的形式返回1、1.3、1e3和not a number。",
        "查询": "RETURN toFloat(1), toFloat('1.3'), toFloat('1e3'), toFloat('not a number')"
    },
    {
        "用户": "创建一条名为follow的边，该边具有一个名为degree的属性。",
        "查询": "CREATE EDGE follow(degree int)"
    },
    {
        "用户": "Find the path from 'Tim Duncan' to 'Tony Parker' or 'Spurs' through a' like 'and' service 'relationship, consisting of up to 3 steps, and return the path information.",
        "查询": "FIND NOLOOP PATH FROM \"Tim Duncan\" TO \"Tony Parker\", \"Spurs\" OVER like,serve UPTO 3 STEPS YIELD path as p"
    },
    {
        "用户": "Please help me add a string alias attribute with a default value of 'abc' to the student tag.",
        "查询": "ALTER TAG student ADD (alias string default \"abc\")"
    },
    {
        "用户": "Find all students whose master is' a 'and return their IDs.",
        "查询": "LOOKUP ON student WHERE student.teacher == \"a\" YIELD id(vertex) as id"
    },
    {
        "用户": "Find all entities that Tony Parker likes with a 'liking level' of not 95, 56, or 21, and return the names and 'liking level' of these entities.",
        "查询": "GO FROM 'Tony Parker' OVER like\nWHERE like.likeness NOT IN {95,56,21}\nYIELD $$.player.name, like.likeness"
    },
    {
        "用户": "如果test空间不存在的话，能否帮我创建一个名为test的空间？其中实体ID的类型是固定长度字符串，长度为30。",
        "查询": "CREATE SPACE IF NOT EXISTS test (vid_type=FIXED_STRING(30))"
    },
    {
        "用户": "得了糖尿病应该去哪个科室就诊？",
        "查询": "GO FROM \"糖尿病\" OVER cure_department YIELD dst(edge);"
    },
    {
        "用户": "Please find all entities associated with a player named 'Tim Duncan' and sort them by their age, and then return the names and ages of these entities to me.",
        "查询": "MATCH (v:player{name:\"Tim Duncan\"}) --> (v2)\nRETURN v2.player.name AS Name, v2.player.age AS Age\nORDER BY Age"
    },
    {
        "用户": "返回所有球员中年龄最小的球员的年龄。",
        "查询": "MATCH (v:player) RETURN min(v.player.age)"
    },
    {
        "用户": "Hello, could you please help me find records of type e1 where col1 is equal to 1 and col5 is equal to '11:11:11:11', and return the source and target nodes of these records to me?",
        "查询": "LOOKUP ON e1 WHERE e1.col1 == 1 AND e1.col5 == time(\"11:11:11\") YIELD src(edge) as src, dst(edge) as dst"
    },
    {
        "用户": "Update the relationship between 'player667' and 'team200' to 'serve', set the end year to 2022, and return the start and end years.",
        "查询": "UPSERT EDGE on serve\n\"player667\" -> \"team200\"@0\nSET end_year = 2022\nYIELD start_year, end_year"
    },
    {
        "用户": "查找学生别名为'abc'的实体，并返回这些实体的ID。",
        "查询": "LOOKUP ON student WHERE student.alias == \"abc\" YIELD id(vertex) as id"
    },
    {
        "用户": "请帮我生成一个随机数。",
        "查询": "RETURN rand()"
    },
    {
        "用户": "请帮我找出在2000年之前开始参加比赛的所有球员的姓名和年龄。",
        "查询": "MATCH (v:player)-[e]->()\nWHERE e.start_year < 2000\nRETURN DISTINCT v.player.name, v.player.age"
    },
    {
        "用户": "找出与名为'Tim Duncan'的球员，并找出与其对某个实体有关系的另一球员，并返回这些球员的姓名。",
        "查询": "MATCH (v:player{name:\"Tim Duncan\"})-->()<--(v3)\nRETURN v3.player.name AS Name"
    },
    {
        "用户": "Delete all entities and their edges that 'Russell Westbrook' likes'.",
        "查询": "$var = GO FROM \"Russell Westbrook\" OVER like YIELD like._dst as id; DELETE VERTEX $var.id WITH EDGE"
    },
    {
        "用户": "查找球员Manu Ginobili的关系，返回他的年龄、关系强度、关联球员的姓名、性别、关系开始年份和关联球员的年龄，并按姓名排序，限制结果为3条。",
        "查询": "match (src_v:player{name:\"Manu Ginobili\"})-[e]-(dst_v)\n  return properties(src_v).age,properties(e).degree,properties(dst_v).name AS name,src_v.player.sex,e.start_year,dst_v.player.age\n  order by name limit 3;"
    },
    {
        "用户": "找出与 'Danny Green' 喜欢的实体，返回起点实体的名称和朋友的名称。",
        "查询": "MATCH (v1) -[:like]-> (v2)\nWHERE id(v1) == \"Danny Green\"\nRETURN v1.player.name AS Name, v2.player.name AS Friend"
    },
    {
        "用户": "Hello, please help me find all entities related to 'Marco Bellelli' and return their information to me.",
        "查询": "MATCH (v:player)-[e]-(v2)\nWHERE id(v)=='Marco Belinelli'\nRETURN v2"
    },
    {
        "用户": "If the name of the team tag does not exceed 20 characters in length, can you help me create an index of the team tag?",
        "查询": "CREATE TAG INDEX IF NOT EXISTS team_index ON team(name(20))"
    },
    {
        "用户": "Find a player entity named 'Tim Duncan' and return the ID of that entity.",
        "查询": "LOOKUP ON player WHERE player.name == \"Tim Duncan\" YIELD id(vertex) as id"
    },
    {
        "用户": "Find the age of the player named 'LaMarcus Aldridge' and return.",
        "查询": "match (v:player{name:\"LaMarcus Aldridge\"}) return v.player.age;"
    },
    {
        "用户": "Can you help me return the current hours of time?",
        "查询": "RETURN datetime().hour"
    },
    {
        "用户": "请帮我找出名为'Tim Duncan'的球员关注或效力的所有实体。",
        "查询": "MATCH p=(v:player{name:\"Tim Duncan\"})-[e:follow|serve*2]->(v2)\nRETURN DISTINCT v2"
    },
    {
        "用户": "Hello, could you please help me find the name attribute of an entity with entity type player and name 'Boris Diaw', and return the name attribute to me twice?",
        "查询": "FETCH PROP ON player 'Boris Diaw' YIELD player.name, player.name"
    },
    {
        "用户": "找出名为 'Tracy McGrady' 的球员所 '喜欢' 的所有实体，且喜欢程度为90，并返回这些关系和实体。",
        "查询": "MATCH (:player{name:\"Tracy McGrady\"})-[e:like*0..1{likeness: 90}]->(v)\nRETURN e, v"
    },
    {
        "用户": "请帮我将'Basketball_Player'转换为小写。",
        "查询": "RETURN lower(\"Basketball_Player\")"
    },
    {
        "用户": "请问您能帮我找出从 'Tim Duncan' 到 'Tony Parker' 之间通过喜欢关系连接的最短路径吗？",
        "查询": "FIND SHORTEST PATH FROM \"Tim Duncan\" TO \"Tony Parker\" OVER like YIELD path as p"
    },
    {
        "用户": "Could you please help me find the name and age information of 'Boris Diaw'?",
        "查询": "FETCH PROP ON * 'Boris Diaw' yield player.name, player.age"
    },
    {
        "用户": "返回数组 [1, 2, 3] 的前两个元素。",
        "查询": "YIELD [1, 2, 3][0..1]"
    },
    {
        "用户": "获取从'player100'到'team204'的'serve'关系属性并返回。",
        "查询": "FETCH PROP ON serve \"player100\" -> \"team204\" YIELD properties(edge)"
    },
    {
        "用户": "您好，请帮我查找一下'Boris Diaw'和'Spurs'之间的关系属性，包括边的属性、起点和终点的属性、边的类型以及边的权重。",
        "查询": "FETCH PROP ON serve \"Boris Diaw\"->\"Spurs\" YIELD edge as relationship, src(edge) as src_edge, dst(edge) as dst_edge, type(edge) as type, rank(edge) as rank"
    },
    {
        "用户": "Please help me identify all entities that 'player101' is interested in and return their IDs and attention levels.",
        "查询": "$var1 = GO FROM \"player101\" OVER follow\nYIELD properties(edge).degree AS Degree, dst(edge) as ID"
    },
    {
        "用户": "判断3是否在列表[1, 2, 3]中，并返回结果r。",
        "查询": "WITH [1, 2, 3] AS `list` RETURN 3 IN `list` AS r"
    },
    {
        "用户": "请问您能帮我查一下'Boris Diaw'在' Hawks'效力的起止年份吗？",
        "查询": "FETCH PROP ON serve 'Boris Diaw' -> 'Hawks' YIELD serve.start_year, serve.end_year"
    },
    {
        "用户": "Find all entities that 'Tony Parker' likes', but exclude 'Danny Green' and return the names of these entities.",
        "查询": "GO FROM 'Tony Parker' OVER like\nWHERE like._dst NOT IN ['Danny Green']\nYIELD $$.player.name"
    },
    {
        "用户": "请帮我统计一下'follow'边的数量并返回。",
        "查询": "LOOKUP ON follow YIELD edge AS e|\nYIELD COUNT(*) AS Follow_Number"
    },
    {
        "用户": "If there is no named any_ Please help me create a label called any for the shape_ The label of the shape, which contains the geography attribute of a geographic shape.",
        "查询": "CREATE TAG IF NOT EXISTS any_shape(geo geography)"
    },
    {
        "用户": "请帮我关注'player100'，并将关注度设置为95。",
        "查询": "INSERT EDGE follow(degree) VALUES \"player101\" -> \"player100\":(95)"
    },
    {
        "用户": "请帮我新增一条e1类型的边，从'1'指向'2'，属性p1为11，权重为@1。",
        "查询": "INSERT EDGE e1(p1) VALUES \"1\"->\"2\"@1:(11)"
    },
    {
        "用户": "Please help me identify the elements with indices 0 to 10 in the list [1, 2, 3, 4, 5] as a.",
        "查询": "RETURN list[1, 2, 3, 4, 5] [0..10] AS a"
    },
    {
        "用户": "When the edge type is edge_ 1_ In the graph of TTL, create a secondary edge index edge based on the degree attribute_ 1_ Ttl_ Index_ Second_ Degree.",
        "查询": "CREATE EDGE INDEX edge_1_ttl_index_second_degree ON edge_1_ttl(degree)"
    },
    {
        "用户": "Find a player entity named 'Tim Duncan' and return the ID of that entity.",
        "查询": "LOOKUP ON player WHERE player.name == \"Tim Duncan\" YIELD id(vertex) as id"
    },
    {
        "用户": "Identify all entities that can be reached through a 'like' relationship in up to 3 steps starting from 'Tim Duncan' and return their paths.",
        "查询": "$a = GO FROM \"Tim Duncan\" over * YIELD like._dst AS src, serve._src AS dst;\nFIND ALL PATH FROM $a.src TO $a.dst OVER like UPTO 3 STEPS YIELD path as p"
    },
    {
        "用户": "请帮我给学生标签添加一个默认为'abc'的字符串别名属性。",
        "查询": "ALTER TAG student ADD (alias string default \"abc\")"
    },
    {
        "用户": "查找 'Russell Westbrook' 所 '喜欢' 的所有实体，并返回这些实体。",
        "查询": "GO FROM \"Russell Westbrook\" OVER like YIELD like._dst"
    },
    {
        "用户": "Is 1+1 equal to 2, please",
        "查询": "RETURN 1+1==2"
    },
    {
        "用户": "查找球员'Tony Parker'的实体，并返回其ID。",
        "查询": "LOOKUP ON player WHERE player.name == \"Tony Parker\" YIELD id(vertex) as id"
    },
    {
        "用户": "Find a player named Tim Duncan who has served since 2000 and traverse all entities in steps 2 to 3, including service relationships and the entity itself.",
        "查询": "MATCH (:player{name:\"Tim Duncan\"})-[e:serve*2..3{start_year: 2000}]->(v)\nRETURN e, v"
    },
    {
        "用户": "Find the shortest path from 'Tiago Splitter' to 'LaMarcus Aldridge', which includes likes and teammate relationships, and return the found path information.",
        "查询": "FIND SHORTEST PATH FROM \"Tiago Splitter\" TO \"LaMarcus Aldridge\" OVER like, teammate YIELD path as p"
    },
    {
        "用户": "请帮我把 'LeBron James'、'Dwyane Wade'、'Carmelo Anthony' 这些顶点和它们相关的边给删掉好吗？",
        "查询": "DELETE VERTEX \"LeBron James\", \"Dwyane Wade\", \"Carmelo Anthony\" WITH EDGE;"
    },
    {
        "用户": "If there is no only_ Can we create a point label with geographic location information?",
        "查询": "CREATE TAG IF NOT EXISTS only_point(geo geography(point))"
    },
    {
        "用户": "找出与 'LeBron James' 有 '喜欢' 关系的实体，并返回这些实体之间的关系及其名称。",
        "查询": "MATCH p = (n)<-[:like]-(m)\nWHERE id(n) == \"LeBron James\"\nRETURN p, n.player.name, m.player.name"
    },
    {
        "用户": "Please add a listener to the spatial basketball player and synchronize the metadata with the IP addresses of the storage server to 192.168.10.105:9569 and 192.168.10.105:9789.",
        "查询": "ADD LISTENER SYNC META 192.168.10.105:9569 STORAGE 192.168.10.105:9789 TO SPACE basketballplayer"
    },
    {
        "用户": "Find all entities that 'player101' is interested in and return the attention level of these entities.",
        "查询": "GO FROM \"player101\" OVER follow\nYIELD src(edge) AS s, dst(edge) AS d\n| FETCH PROP ON follow $-.s -> $-.d\nYIELD properties(edge).degree"
    },
    {
        "用户": "找出'player101'所'关注'的所有实体，并返回这些实体的 ID。",
        "查询": "GO FROM \"player101\" OVER follow YIELD id($$)"
    },
    {
        "用户": "在student标签上创建一个索引，索引的属性为teacher，长度为10。",
        "查询": "CREATE TAG INDEX student_teacher ON student(teacher(10))"
    },
    {
        "用户": "返回所有球员的年龄的标准差。",
        "查询": "MATCH (v:player) RETURN std(v.player.age)"
    },
    {
        "用户": "请帮我提交一个名为INGEST的作业。",
        "查询": "SUBMIT JOB INGEST"
    },
    {
        "用户": "Find an entity with a distance of 1 to 3 served by a player named 'Yao Ming' and return the name of the starting entity.",
        "查询": "MATCH (v:player {name: \"Yao Ming\"})-[:serve*1..3]->() RETURN v.player.name"
    },
    {
        "用户": "您好，请帮我查找与 'LeBron James' 相关的实体及其关系类型，并返回实体的名称或 'abc'。",
        "查询": "MATCH (v1:player{name: \"LeBron James\"}) -[r]-> (v2)\nRETURN type(r) AS Type, CASE WHEN v2.tea.name IS NOT NULL THEN v2.tea.name WHEN v2.playe.name IS NOT NULL THEN v2.playe.name ELSE \"abc\" END AS Name"
    },
    {
        "用户": "Identify entities that 'player100' is interested in, excluding entities that 'player102' is interested in.",
        "查询": "GO FROM \"player100\" OVER follow YIELD dst(edge)\nMINUS\nGO FROM \"player102\" OVER follow YIELD dst(edge)"
    },
    {
        "用户": "计算数字1减去负数1的结果并返回。",
        "查询": "YIELD 1- -1"
    },
    {
        "用户": "Returns teammate information for all players.",
        "查询": "MATCH (v:player) UNWIND (v)-[:teammate]->() AS p RETURN p"
    },
    {
        "用户": "请帮我找出名为'Tim Duncan'的球员与他关注的球员之间的所有关系，并返回这些关系。",
        "查询": "MATCH (v:player{name:\"Tim Duncan\"})-[e:follow{degree:95}]->(v2)\nRETURN e"
    },
    {
        "用户": "Delete non-existent label indexes.",
        "查询": "DROP TAG INDEX IF EXISTS not_exists_tag_index"
    },
    {
        "用户": "找出名为'Manu Ginobili'的球员所连接的所有实体，返回这些实体的性别、关系强度、姓名、年龄等属性，并按照关系强度、姓名、年龄排序，最多返回5条记录。",
        "查询": "match (src_v:player{name:\"Manu Ginobili\"})-[e*2]-(dst_v)\n  return properties(src_v).sex,properties(e[0]).degree as degree,properties(dst_v).name as name,src_v.player.age AS age, e[1].start_year,dst_v.player.age\n  order by degree, name, age limit 5;"
    },
    {
        "用户": "获取 'Tim Duncan' 球员的姓名和年龄属性。",
        "查询": "FETCH PROP ON player \"Tim Duncan\" YIELD player.name, player.age"
    },
    {
        "用户": "Could you please help me find the names of the first three people?",
        "查询": "MATCH (v)\nRETURN v.person.name LIMIT 3"
    },
    {
        "用户": "Starting from 'player101', identify 2-step subgraphs with attributes related to them, including nodes and edges with a focus greater than 90 and a player's age greater than 30.",
        "查询": "GET SUBGRAPH WITH PROP 2 STEPS FROM \"player101\"\nWHERE follow.degree > 90 AND $$.player.age > 30\nYIELD VERTICES AS nodes, EDGES AS relationships"
    },
    {
        "用户": "请问您能帮我找出与'Tim Duncan'相关的所有实体，并提供它们的边终点信息吗？",
        "查询": "GO FROM 'Tim Duncan' OVER * YIELD dst(edge) as dst"
    },
    {
        "用户": "获取 'Tony Parker' 球员的姓名和年龄属性。",
        "查询": "FETCH PROP ON player \"Tony Parker\" YIELD player.name, player.age"
    },
    {
        "用户": "您能帮我提交一个压缩任务吗？",
        "查询": "SUBMIT JOB COMPACT"
    },
    {
        "用户": "查找 'Russell Westbrook' 所 '喜欢' 的所有实体，并返回这些实体。",
        "查询": "GO FROM \"Russell Westbrook\" OVER like YIELD like._dst"
    },
    {
        "用户": "Returns a result to determine whether the number 4 is greater than the number 3.",
        "查询": "WITH 4 AS one, 3 AS two RETURN one > two AS result"
    },
    {
        "用户": "Find the entities that Tim Duncan likes or serves, and if their 'service start year' is greater than 1970 or their 'age' is less than 50, return the ID and edge information of these entities.",
        "查询": "GO FROM \"Tim Duncan\" OVER like, serve\n  WHERE serve.start_year > 1970 OR properties($$).age < 50\n  YIELD $$ AS dst, edge AS e"
    },
    {
        "用户": "找出从 'Tim Duncan' 开始，通过 '喜欢' 关系最多三步可到达的所有实体，并返回这些实体的路径。",
        "查询": "$a = GO FROM \"Tim Duncan\" over * YIELD like._dst AS src, serve._src AS dst;\nFIND NOLOOP PATH FROM $a.src TO $a.dst OVER like UPTO 3 STEPS YIELD path as p"
    },
    {
        "用户": " 嘿，你能帮我双向找一下从Yao Ming到Danny Green的所有路径吗？路径上的边可以是任何类型的，只要'like'属性的likeness为空或大于等于80就行。最多经过3步，然后把路径信息给我。",
        "查询": "FIND ALL PATH WITH PROP FROM \"Yao Ming\" TO \"Danny Green\" OVER * BIDIRECT\nWHERE like.likeness is  EMPTY OR like.likeness >= 80 AND 1 > 2 UPTO 3 STEPS YIELD path as p"
    },
    {
        "用户": "Find all entities associated with a player named 'Tim Duncan' and sort them in descending order of age. Skip the first result and return the name and age of the oldest entity.",
        "查询": "MATCH (v:player{name:\"Tim Duncan\"}) --> (v2)\nRETURN v2.player.name AS Name, v2.player.age AS Age\nORDER BY Age DESC SKIP 1 LIMIT 1"
    },
    {
        "用户": "您好，请帮我找一下以 'Tim Duncan' 为起点的子图，最多只需要一个结果。",
        "查询": "GET SUBGRAPH WITH PROP FROM 'Tim Duncan' | LIMIT 1"
    },
    {
        "用户": "Find a player entity named 'Tim Duncan' and return its ID.",
        "查询": "LOOKUP ON player WHERE player.name == \"Tim Duncan\" YIELD id(vertex) as id"
    },
    {
        "用户": "找出从 'Tim Duncan' 到 'Tony Parker'或'Spurs'，经过 '喜欢' 和 '服务' 关系的路径，最多包含3个步骤，并返回路径信息。",
        "查询": "FIND NOLOOP PATH FROM \"Tim Duncan\" TO \"Tony Parker\", \"Spurs\" OVER like,serve UPTO 3 STEPS YIELD path as p"
    },
    {
        "用户": "我想退出Drainer服务，请帮我退出。",
        "查询": "SIGN OUT DRAINER SERVICE"
    },
    {
        "用户": "Hello, could you please help me find the start year, end year, and relationship type of 'Boris Diaw' during the 'Hawks' validity period?",
        "查询": "FETCH PROP ON serve 'Boris Diaw' -> 'Hawks' YIELD serve.start_year, serve.end_year, edge as relationship"
    },
    {
        "用户": "Please help me calculate the arctangent value to be 0.5.",
        "查询": "RETURN atan(0.5)"
    },
    {
        "用户": "找出 'Tim Duncan' 所 '喜欢' 的所有实体，并返回这些实体的源节点ID、球员年龄、名字和喜欢程度的拼接结果。",
        "查询": "GO FROM \"Tim Duncan\" over like YIELD concat(like._src, $^.player.age, $$.player.name, like.likeness) AS A"
    },
    {
        "用户": "查找名为'Tracy McGrady'的球员所服务或喜欢，最多距离为1的实体，并返回这些关系和实体。",
        "查询": "MATCH (:player{name:\"Tracy McGrady\"})-[e:serve|like*0..1]-(v)\nRETURN e, v"
    },
    {
        "用户": "Please help me find the shortest path from 'player102' to 'team204' and return the path information.",
        "查询": "FIND SHORTEST PATH FROM \"player102\" TO \"team204\" OVER * YIELD path AS p"
    },
    {
        "用户": "Hello, could you help me find the shortest path from 'Tiago Splitter' to 'Tony Parker'? The path can only have one step at most, and can you tell me what the path is?",
        "查询": "FIND SHORTEST PATH FROM \"Tiago Splitter\" TO \"Tony Parker\" OVER * UPTO 1 STEPS YIELD path as p"
    },
    {
        "用户": "Find all entities that 'like' and 'Tony Parker', and return the entity IDs of 'like' in their relationship with 'Tony Parker'.",
        "查询": "GO FROM \"Tony Parker\" OVER like REVERSELY YIELD like._dst"
    },
    {
        "用户": "得了高血压忌吃什么食物？",
        "查询": "GO FROM \"高血压\" OVER no_eat YIELD dst(edge);"
    },
    {
        "用户": "找出 'Tony Parker' 所 '喜欢' 的实体，但不包括喜欢程度为95、56、21的实体，并返回这些实体的名称和喜欢程度。",
        "查询": "GO FROM 'Tony Parker' OVER like\nWHERE like.likeness NOT IN {95,56,21}\nYIELD $$.player.name, like.likeness"
    },
    {
        "用户": "创建两条 '喜欢' 边，一条连接 'Tim Duncan' 和 'Tim Parker'，权重为 99，另一条连接 'Tim Parker' 和 'Tony Parker'，喜欢程度为 90。",
        "查询": "INSERT EDGE like(likeness) VALUES \"Tim Duncan\"->\"Tim Parker\":(99);\nINSERT EDGE like(likeness) VALUES \"Tim Parker\"->\"Tony Parker\":(90);"
    },
    {
        "用户": "Please help me find the path starting from 'player100' and going through a maximum of 3 steps to return the name and age of the endpoint entity. At the first jump, only one edge can be selected; During the second jump, 2 edges can be selected; During the third jump, 3 edges can be selected.",
        "查询": "GO 3 STEPS FROM \"player100\"\nOVER *\nYIELD properties($$).name AS NAME, properties($$).age AS Age\nSAMPLE [1,2,3]"
    },
    {
        "用户": "提交作业统计信息。",
        "查询": "submit job stats;"
    },
    {
        "用户": "删除从'player101'到'team204'的关注关系边。",
        "查询": "DELETE EDGE follow \"player101\" -> \"team204\""
    },
    {
        "用户": "Find the 2-3 hop entity served by a player named 'Yao Ming' and return the name of the original entity.",
        "查询": "MATCH (v:player {name: \"Yao Ming\"})-[:serve*2..3]->() RETURN v.player.name"
    },
    {
        "用户": "Calculate the number of each element in the list, including the total number and the number of non repeating elements.",
        "查询": "WITH [NULL, 1, 1, 2, 2] As a\nUNWIND a AS b\nRETURN count(b), COUNT(*), couNT(DISTINCT b)"
    },
    {
        "用户": "Find players whose names start with't 'and return their names and ages.",
        "查询": "MATCH (v:player)\nWHERE v.player.name STARTS WITH \"t\"\nRETURN v.player.name, v.player.age"
    },
    {
        "用户": "Find all the entities that Tim Duncan likes and return their IDs.",
        "查询": "GO FROM \"Tim Duncan\" OVER like YIELD like._dst"
    },
    {
        "用户": "找出所有存在'follow'关系的实体，并返回前三条关系",
        "查询": "MATCH ()-[e:follow]->()\nRETURN e\nlimit 3"
    },
    {
        "用户": "Calculate the result of 2+3, and if the result is 4, return 0; If the result is 5, return 1; Otherwise, it returns -1.",
        "查询": "YIELD\nCASE 2+3\nWHEN 4 THEN 0\nWHEN 5 THEN 1\nELSE -1\nEND\nAS result"
    },
    {
        "用户": "请将实体'player101'关注实体'player100'，并将关注度设置为95。",
        "查询": "INSERT EDGE follow(degree) VALUES \"player101\" -> \"player100\":(95)"
    },
    {
        "用户": "您好，请帮我找一下别名为'abc'的学生实体，然后把他们的ID给我。",
        "查询": "LOOKUP ON student WHERE student.alias == \"abc\" YIELD id(vertex) as id"
    },
    {
        "用户": "Insert a player entity named 'Tony Parker', aged 36, and id 'player101'.",
        "查询": "INSERT VERTEX player(name, age) VALUES \"player101\":(\"Tony Parker\", 36)"
    },
    {
        "用户": "请问您能帮我获取'Boris Diaw'这个实体的所有属性并返回它的ID吗？",
        "查询": "FETCH PROP ON * 'Boris Diaw' YIELD id(vertex)"
    },
    {
        "用户": "Insert an edge to indicate that 'player101' served 'team204' between 1999 and 2018, and insert another edge to indicate that 'player102' served 'team203' between 2006 and 2015.",
        "查询": "INSERT EDGE serve(start_year, end_year) VALUES \"player101\" -> \"team204\":(1999, 2018),\"player102\" -> \"team203\":(2006, 2015)"
    },
    {
        "用户": "获取'player100'的属性，并返回其名称。",
        "查询": "FETCH PROP ON player \"player100\"\nYIELD properties(vertex).name AS name"
    },
    {
        "用户": "您好，请帮我查找一下从2005年开始，Boris Diaw为哪些团队效力过，并且告诉我Boris Diaw的姓名，起始年份，团队名还有123。",
        "查询": "$var = GO FROM \"Boris Diaw\" OVER serve YIELD $^.player.name as name, serve.start_year as start, $$.team.name as team;YIELD $var.*, 123 as hash WHERE $var.start > 2005"
    },
    {
        "用户": "找出与 'Dejounte Murray' 有 '喜欢' 关系的实体，按照年龄降序、姓名升序排序，跳过前11个结果，返回接下来的3个实体的姓名和年龄。",
        "查询": "MATCH (v1) -[:like]-> (v)\nWHERE id(v1) == 'Dejounte Murray'\nRETURN v.player.name AS Name, v.player.age AS Age\nORDER BY Age DESC, Name ASC\nSKIP 11\nLIMIT 3"
    },
    {
        "用户": "找出 'Tony Parker' 所喜欢的实体中，'喜欢程度' 不为 95、56、21 的所有实体，并返回这些实体的名称和 '喜欢程度' 。",
        "查询": "GO FROM 'Tony Parker' OVER like\nWHERE like.likeness NOT IN {95,56,21}\nYIELD $$.player.name, like.likeness"
    },
    {
        "用户": "查找 'Tony Parker' 喜欢的 'Tim Duncan' 和 'Grant Hill' 喜欢的 'Tracy McGrady' 的关系及其终点节点信息。",
        "查询": "FETCH PROP ON like \"Tony Parker\"->\"Tim Duncan\", \"Grant Hill\" -> \"Tracy McGrady\" YIELD edge as relationship |\nYIELD endNode($-.relationship) AS node"
    },
    {
        "用户": "重建标签索引 player_index_1。",
        "查询": "REBUILD TAG INDEX player_index_"
    },
    {
        "用户": "糖尿病的症状有哪些？",
        "查询": "MATCH (n:disease)-[e:has_symptom]->(n1:symptom) WHERE n.disease.name=='糖尿病' return n1.symptom.name"
    },
    {
        "用户": "找出名为'Tracy McGrady'的球员所'喜欢'的所有实体，包括直接和间接，喜欢程度为90的关系，返回这些关系和实体。",
        "查询": "MATCH (:player{name:\"Tracy McGrady\"})-[e:like*0..1{likeness: 90}]-(v)\nRETURN e, v"
    },
    {
        "用户": "将属性a设为'Hello'，属性b设为100，并将其作为ID为'player100'的顶点插入t1中。",
        "查询": "INSERT VERTEX t1(a, b) VALUES \"player100\":(\"Hello\", 100)"
    },
    {
        "用户": "Hello, please help me find all relationships with a starting year of 2020 and edge weight of 1, and return a maximum of 1000 relationships.",
        "查询": "match ()-[e]->()\nwhere abs(rank(e)) == 1 and e.start_year == 2020\nRETURN e\nlimit 1000"
    },
    {
        "用户": "Delete an edge of interest from 'player101' to 'team204'.",
        "查询": "DELETE EDGE follow \"player101\" -> \"team204\""
    },
    {
        "用户": "Please help me remove the synchronization listener.",
        "查询": "REMOVE LISTENER SYNC"
    },
    {
        "用户": "Tom 喜欢 Conan，喜欢程度为 100。",
        "查询": "INSERT EDGE like(likeness) VALUES \"Tom\"->\"Conan\":(100)"
    },
    {
        "用户": "从'test'中删除标签'test1'。",
        "查询": "DELETE TAG test1 FROM \"test\""
    },
    {
        "用户": "Find all entities that a player named 'Tim Duncan' is following or serving, and return these relationships.",
        "查询": "MATCH (v:player{name:\"Tim Duncan\"})-[e:follow|:serve]->(v2)\nRETURN e"
    },
    {
        "用户": "Find all 'serve' relationships between a player named 'Ben Simmons' and other players, and return these relationships.",
        "查询": "MATCH (v:player{name:\"Ben Simmons\"})-[e:serve]-(v2)\nRETURN e"
    },
    {
        "用户": "找出对'Duncan'球员有两到三跳喜欢或服务关系所有实体，且与该球员的关系程度为2到3跳，且若为喜欢关系则喜欢程度为为90，返回这些实体及它们与该球员的关系。",
        "查询": "MATCH (:player{name:\"Tim Duncan\"})<-[e:serve|like*2..3{likeness: 90}]-(v)\nRETURN e, v"
    },
    {
        "用户": "Find all entities that 'like' and 'Grant Hill', and return the endpoint entity IDs in their relationship with 'Grant Hill'.",
        "查询": "GO FROM \"Grant Hill\" OVER like REVERSELY YIELD like._dst"
    },
    {
        "用户": "Find the entities that Tony Parker likes, with a liking level of not 95, 56, or 21, and return the names and liking levels of these entities and Tony Parker.",
        "查询": "$A = GO FROM 'Tony Parker' OVER like YIELD like._dst AS ID;\nGO FROM $A.ID OVER like WHERE like.likeness NOT IN [95,56,21]\nYIELD $^.player.name, $$.player.name, like.likeness"
    },
    {
        "用户": "查找名为'Tim Duncan'的球员实体，并返回该实体的ID。",
        "查询": "LOOKUP ON player WHERE player.name == \"Tim Duncan\" YIELD id(vertex) as id"
    },
    {
        "用户": "更新'player667'和'team200'之间的关系为'serve'，设置结束年份为2022，并返回开始年份和结束年份。",
        "查询": "UPSERT EDGE on serve\n\"player667\" -> \"team200\"@0\nSET end_year = 2022\nYIELD start_year, end_year"
    },
    {
        "用户": "找出与球员 'Shaquille O'Neal' 有关系的所有实体，返回这些实体的姓名、年龄、性别和年龄，并按照年龄和姓名排序，只返回一条记录。",
        "查询": "match (v1)-->(v2:player)-->(v3) where v2.player.name==\"Shaquille O'Neal\"\n  return properties(v1).name,properties(v2).age as age,properties(v3).name AS name,v2.player.sex,v1.player.age\n  order by age, name limit 1;"
    },
    {
        "用户": "请您告诉我篮球运动员的不同角色。",
        "查询": "SHOW ROLES in basketballplayer"
    },
    {
        "用户": "得了肺炎需要吃什么药？",
        "查询": "GO FROM \"肺炎\" OVER recommend_drug YIELD dst(edge);"
    },
    {
        "用户": "Find the entity of player 'Tim Duncan' and return the ID of that entity.",
        "查询": "LOOKUP ON player WHERE player.name == \"Tim Duncan\" YIELD id(vertex) as id"
    },
    {
        "用户": "请帮我找出'player100'关注的所有实体，并告诉我这些实体的姓名和年龄。",
        "查询": "GO FROM \"player100\" OVER follow\nYIELD properties($$).name AS Friend, properties($$).age AS Age"
    },
    {
        "用户": "I need to submit an assignment to download files from HDFS.",
        "查询": "SUBMIT JOB DOWNLOAD HDFS \"hdfs://*.*.*.*:9000/sst"
    },
    {
        "用户": "找出年龄在20到25岁之间的球员的姓名和年龄。",
        "查询": "MATCH (v:player)\nWHERE v.player.age IN range(20,25)\nRETURN v.player.name, v.player.age"
    },
    {
        "用户": "Hello, please help me find entities that meet the following conditions: e1: e1. col1 is greater than or equal to 1 and e1. col5 is greater than or equal to 11:11:11:11 on time. And return their source and target nodes.",
        "查询": "LOOKUP ON e1 WHERE e1.col1 >= 1 AND e1.col5 >= time(\"11:11:11\") YIELD src(edge) as src, dst(edge) as dst"
    },
    {
        "用户": "查找名为'Tim Duncan'的球员所二跳喜欢或三跳喜欢的所有实体，返回数量统计结果。",
        "查询": "MATCH (:player{name: \"Tim Duncan\"})-[e:like*2..3]-(v)\nRETURN count(v)"
    },
    {
        "用户": "请问您能帮我查找一下'Boris Diaw'的姓名和年龄吗？",
        "查询": "FETCH PROP ON * 'Boris Diaw' yield player.name, player.age"
    },
    {
        "用户": "Delete vertex 'team1' and delete its associated edges.",
        "查询": "DELETE VERTEX \"team1\" WITH EDGE"
    },
    {
        "用户": "创建一个标签，包含一个整型数值和一个布尔型数值。",
        "查询": "CREATE tag value(value int, values bool)"
    },
    {
        "用户": "Find the player 'Tim Duncan' who likes' Tony Parker 'and return the name of the' Tim Duncan 'player.",
        "查询": "MATCH (v:player{name:\"Tony Parker\"})\nWITH v AS a\nMATCH p=(o:player{name:\"Tim Duncan\"})-[]->(a)\nRETURN o.player.name"
    },
    {
        "用户": "新增一个ID为'player102'，名为'LaMarcus Aldridge'的33岁的球员。",
        "查询": "INSERT VERTEX player(name, age) VALUES \"player102\":(\"LaMarcus Aldridge\", 33)"
    },
    {
        "用户": "Identify all bidirectional 'like' relationship paths from 'Tim Duncan' to 'Tony Parker', including a maximum of 3 hop distances, and return these paths.",
        "查询": "FIND NOLOOP PATH FROM \"Tim Duncan\" TO \"Tony Parker\" OVER like BIDIRECT UPTO 3 STEPS YIELD path as p"
    },
    {
        "用户": "查找球员'Tim Duncan'的实体，返回该实体的ID。",
        "查询": "LOOKUP ON player WHERE player.name == \"Tim Duncan\" YIELD id(vertex) as id"
    },
    {
        "用户": "查找所有评分为666的'喜欢'关系，返回这些关系的起始点和终止点。",
        "查询": "LOOKUP ON like WHERE like.likeness == 666 YIELD src(edge) as src, dst(edge) as dst"
    },
    {
        "用户": "Please identify the players who have a two jump 'follow' relationship with a player named 'Tim Duncan' and have a first jump relationship degree greater than 98, and return these players to me as friends.",
        "查询": "MATCH p=(v:player{name:\"Tim Duncan\"})-[e:follow*2]->(v2)\nWHERE e[0].degree > 98\nRETURN DISTINCT v2 AS Friends"
    },
    {
        "用户": "Describe the label player.",
        "查询": "DESCRIBE TAG player"
    },
    {
        "用户": "Find entities with a preference of 90 that a player named 'Tim Duncan' likes, 2 to 3 relationships away from the player, and return these entities and relationships.",
        "查询": "MATCH (:player{name:\"Tim Duncan\"})<-[e:like*2..3{likeness: 90}]-(v)\nRETURN e, v"
    },
    {
        "用户": "Hello, please help me find the result of adding 10 to all numbers greater than 2 in list a from 1 to 5, and return the result to me. Thank you!",
        "查询": "YIELD [n IN range(1, 5) WHERE n > 2 | n + 10] AS a"
    },
    {
        "用户": "描述篮球运动员空间的信息。",
        "查询": "DESCRIBE SPACE basketballplayer"
    },
    {
        "用户": "Help me create a new one called ttl_ The tag of tag01 contains two attributes a and b. Please set the expiration time of attribute a to 5 seconds and set the expiration column to a.",
        "查询": "CREATE TAG ttl_tag01(a int, b int) ttl_duration=5, ttl_col=\"a\";"
    },
    {
        "用户": "请帮我查询时间戳为23333的日期。",
        "查询": "RETURN DATE(\"23333\")"
    },
    {
        "用户": "查找与名为'Tim Duncan'的球员有两到三跳服务或喜欢关系的实体，记录路径数量。",
        "查询": "MATCH (:player{name:\"Tim Duncan\"})-[e:serve|like*2..3]-(v)\nRETURN COUNT(e)"
    },
    {
        "用户": "Obtain label test_ Comment_ Create a tag statement.",
        "查询": "SHOW CREATE tag test_comment_tag;"
    },
    {
        "用户": "您好，请帮我查找一下实体类型为player且名称为'Boris Diaw'的实体的名称属性，然后将名称属性返回给我两次好吗？",
        "查询": "FETCH PROP ON player 'Boris Diaw' YIELD player.name, player.name"
    },
    {
        "用户": "找出 'Tracy McGrady' 所 '喜欢' 的所有实体，并返回这些实体的 ID。",
        "查询": "GO FROM \"Tracy McGrady\" OVER like YIELD like._dst"
    },
    {
        "用户": "Serve player 101 with team 204 from 1999 to 2018, and player 102 with team 203 from 2006 to 2015.",
        "查询": "INSERT EDGE serve(start_year, end_year) VALUES \"player101\" -> \"team204\":(1999, 2018),\"player102\" -> \"team203\":(2006, 2015)"
    },
    {
        "用户": "Find all entities that 'player100' is' interested in 'and return the team and player names to which these entities belong.",
        "查询": "GO FROM \"player100\" OVER follow\nYIELD dst(edge) AS id |\nGO FROM $-.id OVER serve\nYIELD properties($^).name AS Player, properties($$).name AS Team"
    },
    {
        "用户": "找出名为'Yao Ming'的球员所服务的2-3跳实体，并返回原始实体的名称。",
        "查询": "MATCH (v:player {name: \"Yao Ming\"})-[:serve*2..3]->() RETURN v.player.name"
    },
    {
        "用户": "Hello, please help me find the intersection of 'Tony Parker', 'Tim Duncan', and 'Yao Ming' entities related to nodes of type 'player'.",
        "查询": "UNWIND [\"Tony Parker\", \"Tim Duncan\", \"Yao Ming\"] AS a MATCH (v:player) WHERE v.player.name == a RETURN distinct a, v"
    },
    {
        "用户": "Find the entities that 'Tony Parker' likes, but exclude 'Danny Green' and return the names of these entities.",
        "查询": "GO FROM 'Tony Parker' OVER like\nWHERE like._dst NOT IN {'Danny Green'}\nYIELD $$.player.name"
    },
    {
        "用户": "从 'Tim Duncan' 出发，经过 '喜欢' 和 '效力' 关系，获取两步内的所有实体和关系。",
        "查询": "GET SUBGRAPH WITH PROP 2 STEPS FROM 'Tim Duncan' IN like OUT serve YIELD vertices as nodes, edges as relationships"
    },
    {
        "用户": "请您展示一下边的索引。",
        "查询": "SHOW EDGE INDEXES"
    },
    {
        "用户": "Obtain the name and age of a player named 'Tony Parker'.",
        "查询": "FETCH PROP ON player \"Tony Parker\" YIELD player.name, player.age"
    },
    {
        "用户": "您能帮我返回当前的日期和时间吗？",
        "查询": "RETURN datetime()"
    },
    {
        "用户": "找出 'Russell Westbrook' 所 '服务' 或 '喜欢' 的所有实体，并返回这些边的类型和属性。",
        "查询": "GO FROM \"Russell Westbrook\" OVER serve, like  YIELD properties(edge) as props, type(edge) as type"
    },
    {
        "用户": "请您帮我解释并以点格式显示标签。",
        "查询": "EXPLAIN format=\"dot\" SHOW TAGS"
    },
    {
        "用户": "Identify the relationships between all entities that 'Russell Westbrook' serves' and 'likes', and return these relationship edges.",
        "查询": "GO FROM 'Russell Westbrook' OVER serve, like YIELD edge as e"
    },
    {
        "用户": "Find all students whose teacher's name dictionary order is less than 'a' and return their IDs.",
        "查询": "LOOKUP ON student WHERE student.teacher < \"a\" YIELD id(vertex) as id"
    },
    {
        "用户": "请帮我返回一个列表，列表中的元素是从1到5中大于2的每个数加上10的结果。",
        "查询": "RETURN [n IN range(1,5) WHERE n > 2 | n + 10] AS a"
    },
    {
        "用户": "请帮我将列表中的元素转换为布尔类型，并返回转换后的结果。",
        "查询": "UNWIND [true, false,'true','false', NULL] AS b\nRETURN toBoolean(b) AS b"
    },
    {
        "用户": "查找球员Manu Ginobili的关系，返回他的年龄、关系的度数、关系的终点实体名字、性别、关系开始年份和终点实体的年龄，按名字排序并限制返回前三个结果。",
        "查询": "match (src_v:player{name:\"Manu Ginobili\"})-[e]-(dst_v)\n  return properties(src_v).age,properties(e).degree,properties(dst_v).name AS name,src_v.player.sex,e.start_year,dst_v.player.age\n  order by name limit 3;"
    },
    {
        "用户": "Please identify all players with age information and tell me their names and ages.",
        "查询": "MATCH (v:player)\nWHERE exists(v.player.age)\nRETURN v.player.name, v.player.age"
    },
    {
        "用户": "Please help me expand the elements in the array one by one, convert them to Boolean types, and return the converted results.",
        "查询": "UNWIND [true, false,'true','false', NULL] AS b\nRETURN toBoolean(b) AS b"
    },
    {
        "用户": "您好，请帮我找一下从 'Tony Parker' 和 'Yao Ming' 到 'Manu Ginobili'、'Spurs' 和 'Lakers' 的最短路径，路径上的关系属性需要满足 'teammate.start_year' 不为空或 'like.likeness' 大于90，最多经过3个步骤，并且返回路径上的所有节点。",
        "查询": "FIND SHORTEST PATH WITH PROP FROM \"Tony Parker\", \"Yao Ming\" TO \"Manu Ginobili\", \"Spurs\", \"Lakers\" OVER * BIDIRECT WHERE teammate.start_year is not EMPTY OR like.likeness > 90 UPTO 3 STEPS YIELD path as p |\nYIELD distinct nodes($-.p) as nodes"
    },
    {
        "用户": "找出所有 'Boris Diaw' 喜欢的实体，然后删除这些实体与 'Boris Diaw' 的关系。",
        "查询": "GO FROM \"Boris Diaw\" OVER like YIELD like._dst as id | DELETE VERTEX $-.id WITH EDGE"
    },
    {
        "用户": "Tim Duncan 喜欢 Tim Parker，喜欢程度为 99；Tim Parker 喜欢 Tony Parker，喜欢程度为 90。",
        "查询": "INSERT EDGE like(likeness) VALUES \"Tim Duncan\"->\"Tim Parker\":(99);\nINSERT EDGE like(likeness) VALUES \"Tim Parker\"->\"Tony Parker\":(90);"
    },
    {
        "用户": "Obtain the attributes of all entities in the 'test' graph and return the vertices of these entities.",
        "查询": "FETCH PROP ON * \"test\" YIELD vertex AS v"
    },
    {
        "用户": "找出前三个球员的名字，并将'Tony Parker'和'Ben Simmons'的名字展开返回。",
        "查询": "MATCH (v:player)\nWITH v.player.name AS n\nRETURN n ORDER BY n LIMIT 3\nUNION ALL\nUNWIND [\"Tony Parker\", \"Ben Simmons\"] AS n\nRETURN n"
    },
    {
        "用户": "Returns the age and gender attributes of player Carmelo Anthony.",
        "查询": "match (v:player) where id(v)==\"Carmelo Anthony\" return properties(v).age,v.player.sex;"
    },
    {
        "用户": "If only_ The linestring tag does not exist. Can you help me create an only containing geographic information of type linestring_ What about the linestring tag?",
        "查询": "CREATE TAG IF NOT EXISTS only_linestring(geo geography(linestring))"
    },
    {
        "用户": "获取名为 'Tony Parker' 的球员的姓名和年龄属性。",
        "查询": "FETCH PROP ON player \"Tony Parker\" YIELD player.name, player.age"
    },
    {
        "用户": "Could you please help me find the shortest path from 'Shaquille O'Neal' to 'Manu Ginobili'? Can a maximum of 5 entities pass through the path and return path information?",
        "查询": "YIELD \"Shaquille O\\'Neal\" AS src\n| FIND SHORTEST PATH FROM $-.src TO \"Manu Ginobili\" OVER * UPTO 5 STEPS YIELD path as p"
    },
    {
        "用户": "Returns the standard deviation of the ages of all players.",
        "查询": "MATCH (v:player) RETURN std(v.player.age)"
    },
    {
        "用户": "请找出名为'Tim Duncan'的球员的所有朋友中，与他有两跳'follow'关系且第一跳关系度数大于98的球员，并返回这些球员作为朋友。",
        "查询": "MATCH p=(v:player{name:\"Tim Duncan\"})-[e:follow*2]->(v2)\nWHERE e[0].degree > 98\nRETURN DISTINCT v2 AS Friends"
    },
    {
        "用户": "Determine whether 3 is in the list [1, 2, 3] and return the result r.",
        "查询": "WITH [1, 2, 3] AS `list` RETURN 3 IN `list` AS r"
    },
    {
        "用户": "请帮我找出'player100'关注的所有实体，并告诉我它们的姓名和年龄。",
        "查询": "GO FROM \"player100\" OVER follow\nYIELD properties($$).name AS Friend, properties($$).age AS Age"
    },
    {
        "用户": "请帮我找出名字中包含Pa的球员的姓名和年龄。",
        "查询": "MATCH (v:player)\nWHERE v.player.name CONTAINS \"Pa\"\nRETURN v.player.name, v.player.age"
    },
    {
        "用户": "If possible, could you please_ Create a shape label named any_ Shape_ Geo_ Is the index based on the geo attribute?",
        "查询": "CREATE TAG INDEX IF NOT EXISTS any_shape_geo_index ON any_shape(geo)"
    },
    {
        "用户": "请问您能帮我找出与'Tim Duncan'有2-3跳'serve'关系的所有实体和关系吗？",
        "查询": "MATCH (n)-[e:serve*2..3]->(v)\nWHERE id(n) == \"Tim Duncan\"\nRETURN e, v"
    },
    {
        "用户": "Delete edge index edge_ 1_ Ttl_ Index_ Second_ Degree.",
        "查询": "DROP EDGE INDEX edge_1_ttl_index_second_degree"
    },
    {
        "用户": "创建一个名为student_alias的标签索引，该索引基于student标签的alias属性，最大长度为10。",
        "查询": "CREATE TAG INDEX student_alias ON student(alias(10))"
    },
    {
        "用户": "找出名为'Tim Duncan'的球员与其关联的所有非球队实体，并返回这些路径信息。",
        "查询": "MATCH (v:player{name:\"Tim Duncan\"})-[e]->(t)\nWHERE NOT (v)-[e]->(t:team)\nRETURN (v)-->()"
    },
    {
        "用户": "Identify entities of common interest between 'player102' and 'player100', and return their IDs, degree of edges, and age of 'player102'.",
        "查询": "GO FROM \"player102\" OVER follow\nYIELD dst(edge) AS id, properties(edge).degree AS Degree, properties($$).age AS Age\nINTERSECT\nGO FROM \"player100\" OVER follow\nYIELD dst(edge) AS id, properties(edge).degree AS Degree, properties($$).age AS Age"
    },
    {
        "用户": "在边类型为edge_1_ttl的图中，创建一个基于degree属性的二级边索引edge_1_ttl_index_second_degree。",
        "查询": "CREATE EDGE INDEX edge_1_ttl_index_second_degree ON edge_1_ttl(degree)"
    },
    {
        "用户": " 您好，请帮我查找一下名为Tim Duncan的球员在2000年之后所服务过的实体，包括服务关系和实体本身，可以遍历2到3步吗？",
        "查询": "MATCH (:player{name:\"Tim Duncan\"})-[e:serve*2..3{start_year: 2000}]->(v)\nRETURN e, v"
    },
    {
        "用户": "Find all entities that 'player100' is' interested in 'and return the age of these entities",
        "查询": "GO FROM \"player100\" OVER follow YIELD properties($^).age AS SrcAge, properties($$).age AS DestAge"
    },
    {
        "用户": "找出名为'Tim Duncan'的球员所喜欢的所有实体，包括2-3度关系，返回实体数量。",
        "查询": "MATCH (:player{name: \"Tim Duncan\"})-[e:like*2..3]-(v)\nRETURN COUNT(1)"
    },
    {
        "用户": "如果test1标签不存在，则创建test1标签，包含两个属性p1和p2。",
        "查询": "CREATE TAG IF NOT EXISTS test1(p1 string, p2 int)"
    },
    {
        "用户": "如果player标签不存在，则创建一个包含姓名和年龄属性的player标签。",
        "查询": "CREATE TAG IF NOT EXISTS player(name string, age int)"
    },
    {
        "用户": "Can you help me find someone related to 'Tim Duncan'? The weight of their 'like' relationship is 90, and the path length is 2 or 3. I want to know the information about the endpoint of these relationships.",
        "查询": "MATCH (n)-[e:like*2..3{likeness: 90}]-(v)\nWHERE id(n) == \"Tim Duncan\"\nRETURN e, v"
    },
    {
        "用户": "Can you help me submit a compression task?",
        "查询": "SUBMIT JOB COMPACT"
    },
    {
        "用户": "Find the age in the player table and sort it in descending order of occurrence and age.",
        "查询": "LOOKUP ON player\nYIELD player.age As playerage\n| GROUP BY $-.playerage\nYIELD $-.playerage as age, count(*) AS number\n| ORDER BY $-.number DESC, $-.age DESC"
    },
    {
        "用户": "删除一条关注边，是从'player101'到'team204'的边。",
        "查询": "DELETE EDGE follow \"player101\" -> \"team204\""
    },
    {
        "用户": "Identify all source and target nodes of entity e1 that meet the conditions e1. col1<=2 and e1. col3<true.",
        "查询": "LOOKUP ON e1 WHERE e1.col1 <= 2 AND e1.col3 < true YIELD src(edge) as src, dst(edge) as dst"
    },
    {
        "用户": "Find all entities that have two to three likes or service relationships with 'Duncan' players, with a level of 2 to 3 likes and a level of 90 likes if it is a like relationship. Return these entities and their relationships with the player.",
        "查询": "MATCH (:player{name:\"Tim Duncan\"})<-[e:serve|like*2..3{likeness: 90}]-(v)\nRETURN e, v"
    },
    {
        "用户": "Please help me identify all entities with relationships and return detailed information about these relationships, up to a maximum of 3.",
        "查询": "MATCH ()<-[e]-()\nRETURN e\nLIMIT 3"
    },
    {
        "用户": "请帮我返回从1到5的范围中的前3个数字。",
        "查询": "RETURN range(1,5)[0..3]"
    },
    {
        "用户": "从 'Tim Duncan' 出发，沿着 '喜欢' 关系向外扩展3步，返回结果限制为第一跳自动选择一条边，第二跳选择两条边，第三跳选择两条边。",
        "查询": "GO 3 STEPS FROM \"Tim Duncan\" OVER like LIMIT [1, 2, 2];"
    },
    {
        "用户": "Show all sorting rules.",
        "查询": "SHOW COLLATION"
    },
    {
        "用户": "Please find all friends of a player named 'Tim Duncan' who have gone through a two jump 'follow' relationship, and the degree of each jump relationship must be greater than 1, and return the names of these friends.",
        "查询": "MATCH p=(v:player{name:\"Tim Duncan\"})-[e:follow*2]->(v2)\nWHERE e.degree > 1\nRETURN DISTINCT v2 AS Friends"
    },
    {
        "用户": "请帮我查询player图中的所有实体，并告诉我实体的数量。",
        "查询": "LOOKUP ON player YIELD id(vertex)|\nYIELD COUNT(*) AS Player_Number"
    },
    {
        "用户": "查找球员'Tim Duncan'的实体，返回该实体的ID。",
        "查询": "LOOKUP ON player WHERE player.name == \"Tim Duncan\" YIELD id(vertex) as id"
    },
    {
        "用户": "您好，请帮我找一下与 'player' 类型的节点相关的 'Tony Parker'、'Tim Duncan'、'Yao Ming' 这三个实体的交集。",
        "查询": "UNWIND [\"Tony Parker\", \"Tim Duncan\", \"Yao Ming\"] AS a MATCH (v:player) WHERE v.player.name == a RETURN distinct a, v"
    },
    {
        "用户": "找出与球员'Shaquille O'Neal'有关系的实体，返回这些实体的姓名、年龄和名称，并按名称排序，只返回第一个结果。",
        "查询": "match (v1)-->(v2:player)-->(v3) where v2.player.name==\"Shaquille O'Neal\"\n  return properties(v1).name,properties(v2).age as age,properties(v3).name AS name\n  order by name limit 1;"
    },
    {
        "用户": "Please find an entity with the player's name 'Tim Duncan', or an entity under 30 with the name 'Yao Ming', or an entity whose name is neither 'Yao Ming' nor 'Tim Duncan', and tell me their name and age.",
        "查询": "MATCH (v:player)\nWHERE v.player.name == \"Tim Duncan\"\nXOR (v.player.age < 30 AND v.player.name == \"Yao Ming\")\nOR NOT (v.player.name == \"Yao Ming\" OR v.player.name == \"Tim Duncan\")\nRETURN v.player.name, v.player.age"
    },
    {
        "用户": "Find all followers of 'player101' who are 35 years old or older and return their names and ages.",
        "查询": "GO FROM \"player101\" OVER follow WHERE properties($$).age >= 35\nYIELD properties($$).name AS Teammate, properties($$).age AS Age"
    },
    {
        "用户": "查找球员'Tim Duncan'的实体，并返回该实体的ID。",
        "查询": "LOOKUP ON player WHERE player.name == \"Tim Duncan\" YIELD id(vertex) as id"
    },
    {
        "用户": "查找年龄为40的球员，并返回这些球员的姓名。",
        "查询": "LOOKUP ON player WHERE player.age == 40 YIELD id(vertex) as id |\nFETCH PROP ON player $-.id YIELD player.name"
    },
    {
        "用户": "Describe the basketball player's space.",
        "查询": "DESCRIBE SPACE basketballplayer"
    },
    {
        "用户": "查看和咳嗽相关的所有信息？",
        "查询": "GET SUBGRAPH 1 STEPS FROM \"咳嗽\" YIELD VERTICES AS nodes, EDGES AS all_edges;"
    },
    {
        "用户": "糖尿病的得病概率是多少？",
        "查询": "LOOKUP ON disease WHERE disease.name == \"糖尿病\" YIELD properties(vertex).get_prob"
    },
    {
        "用户": "请帮我找到名为'Tim Duncan'的球员，并返回与他相关的所有非球队实体的路径信息。",
        "查询": "MATCH (v:player{name:\"Tim Duncan\"})-[e]->(t)\nWHERE NOT (v)-[e]->(t:team)\nRETURN (v)-->()"
    },
    {
        "用户": "找出名为'Tim Duncan'的球员所关联的所有实体，并按照年龄降序排列，跳过前两个实体，返回实体的姓名和年龄。",
        "查询": "MATCH (v:player{name:\"Tim Duncan\"}) --> (v2)\nRETURN v2.player.name AS Name, v2.player.age AS Age\nORDER BY Age DESC SKIP 1+1"
    },
    {
        "用户": "找出'player102'和'player100'所'关注'的所有实体，并返回这些实体的边的目标节点",
        "查询": "GO FROM \"player102\" OVER follow YIELD dst(edge)\nUNION ALL\nGO FROM \"player100\" OVER follow YIELD dst(edge)"
    },
    {
        "用户": "双向查找 'Tim Duncan' 所 '服务' 或 '喜欢' 的所有实体，并返回这些实体的去重后的 ID。",
        "查询": "GO FROM 'Tim Duncan' OVER serve, like bidirect YIELD distinct dst(edge) as dst"
    },
    {
        "用户": "找出名为'Tim Duncan'的球员所喜欢的所有实体，距离2-3跳关系，返回数量统计结果。",
        "查询": "MATCH (:player{name: \"Tim Duncan\"})-[e:like*2..3]-(v)\nRETURN count(v)"
    },
    {
        "用户": "从'player101'开始，找出与之相关的属性为2步的子图，其中关注度大于90且球员年龄大于30的节点和边。",
        "查询": "GET SUBGRAPH WITH PROP 2 STEPS FROM \"player101\"\nWHERE follow.degree > 90 AND $$.player.age > 30\nYIELD VERTICES AS nodes, EDGES AS relationships"
    },
    {
        "用户": "Please identify all players who do not end with 'R' and tell me their names and ages.",
        "查询": "MATCH (v:player)\nWHERE NOT v.player.name ENDS WITH \"R\"\nRETURN v.player.name, v.player.age"
    },
    {
        "用户": "If the edge does not exist, create a serve edge that includes the start and end years.",
        "查询": "CREATE EDGE IF NOT EXISTS serve(start_year int, end_year int)"
    },
    {
        "用户": "Find the entity with ID 1 and return its quantity.",
        "查询": "match p = (v)\nwhere id(v) == 1\nreturn count(*)"
    },
    {
        "用户": "Hello, please help me find those players whose names contain 'Tim', and tell me the age of the people they like, whether they like 'Tony Parker', and tell me their relationship with 'Tony Parker'.",
        "查询": "LOOKUP ON player\nWHERE player.name CONTAINS 'Tim'\nYIELD player.age AS age, id(vertex) AS vid |\nGO FROM $-.vid\nOVER like REVERSELY\nYIELD\n  $-.age AS age,\n  ('Tony Parker' == like._dst) AS liked,\n  like._src AS src,\n  like._dst AS dst"
    },
    {
        "用户": "从'player100'开始，沿着所有边连续走3步，返回所有终点个实体的名称和年龄，要求在第一跳时只能选择1条边，第二跳时可以选择2条边，第三跳时可以选择3条边。\"\n请帮我从'player100'开始，按照以下规则连续走3步：第一步只能选择1条边，第二步可以选择2条边，第三步可以选择3条边。然后告诉我所有终点的实体名称和年龄。",
        "查询": "GO 3 STEPS FROM \"player100\"\nOVER *\nYIELD properties($$).name AS NAME, properties($$).age AS Age\nSAMPLE [1,2,3]"
    },
    {
        "用户": "获取子图，从 'Tony Parker' 出发，经过 5 步 '队友' 关系和 '服务' 关系，找到所有 '喜欢' 关系的实体和边。",
        "查询": "GET SUBGRAPH WITH PROP 5 steps from 'Tony Parker' IN teammate OUT serve BOTH like YIELD VERTICES as nodes, EDGES as relationships"
    },
    {
        "用户": "查找球员'Tim Duncan'的实体，返回该实体的ID。",
        "查询": "LOOKUP ON player WHERE player.name == \"Tim Duncan\" YIELD id(vertex) as id"
    },
    {
        "用户": "请帮我找出'player100'所'关注'的所有实体，并返回这些实体的 ID。",
        "查询": "$var = GO FROM \"player100\" OVER follow YIELD dst(edge) AS id"
    },
    {
        "用户": "Please help me create a school entity with the ID of 'dut', the name of 'dut', and the creation time is the current time.",
        "查询": "INSERT VERTEX school(name, found_time) VALUES \"dut\":(\"dut\", now())"
    },
    {
        "用户": "获取 'Tim Duncan' 球员的姓名和年龄属性。",
        "查询": "FETCH PROP ON player \"Tim Duncan\" YIELD player.name, player.age"
    },
    {
        "用户": "请帮我返回列表[1, 2, 3, 4, 5]中倒数第三个到倒数第一个元素的子列表。",
        "查询": "YIELD list[1, 2, 3, 4, 5][-3..-1] AS a"
    },
    {
        "用户": "嘿，你好！我需要找出年龄为40或20岁且姓名不为空的球员实体。能帮我返回这些实体的ID和年龄信息吗？",
        "查询": "LOOKUP ON player WHERE player.age IN [40, 20] AND player.name > \"\" YIELD id(vertex) as id, player.age"
    },
    {
        "用户": "找出从 'Tim Duncan' 到 'Tony Parker' 或 'Manu Ginobili' 的不重复路径，路径上的关系为 '喜欢'，最多包含3个步骤，并返回这些路径。",
        "查询": "FIND NOLOOP PATH FROM \"Tim Duncan\" TO \"Tony Parker\", \"Manu Ginobili\" OVER like UPTO 3 STEPS YIELD path as p"
    },
    {
        "用户": "Obtain all students with aliases less than 'b' and teacher names less than 'abc', and return their IDs, teacher names, and aliases to ensure that the IDs in the results are not duplicate.",
        "查询": "LOOKUP ON student WHERE student.alias < \"b\" and student.teacher < \"abc\" YIELD DISTINCT id(vertex) as id, student.teacher, student.alias"
    },
    {
        "用户": "Find the relationship of player Manu Ginobili, return his age, degree of relationship, end entity name of relationship, gender, start year of relationship, and age of end entity, sort by name and limit the return of the first three results.",
        "查询": "match (src_v:player{name:\"Manu Ginobili\"})-[e]-(dst_v)\n  return properties(src_v).age,properties(e).degree,properties(dst_v).name AS name,src_v.player.sex,e.start_year,dst_v.player.age\n  order by name limit 3;"
    },
    {
        "用户": "您好，请帮我查找一下关系，从 'Russell Westbrook' 开始，经过最多两个步骤，遍历所有的实体和关系，然后筛选出年龄大于20的实体，并返回它们的信息。谢谢！",
        "查询": "GO 1 TO 2 STEPS FROM 'Russell Westbrook' OVER * where properties($$).age > 20 YIELD $$ as dst"
    },
    {
        "用户": "Please create a school entity with ID 'dut', name 'dut', and establishment time as the current timestamp.",
        "查询": "INSERT VERTEX school(name, found_time) VALUES \"dut\":(\"dut\", timestamp())"
    },
    {
        "用户": "Find entities and relationships that players known as Tracy McGrady have played for or liked since 2000.",
        "查询": "MATCH (:player{name:\"Tracy McGrady\"})-[e:serve|like*0..1{start_year: 2000}]-(v)\nRETURN e, v"
    },
    {
        "用户": "Please help me delete all team tags related to 'Tim Duncan'.",
        "查询": "GO FROM \"Tim Duncan\" OVER serve YIELD serve._dst as id | DELETE TAG team FROM $-.id"
    },
    {
        "用户": "Show all labels.",
        "查询": "SHOW TAGS"
    },
    {
        "用户": "找出与实体 'Tim Duncan' 有 '喜欢' 关系的所有实体及其关系。",
        "查询": "MATCH (n)-[e:like*2..3]-(v)\nWHERE id(n) == \"Tim Duncan\"\nRETURN e, v"
    },
    {
        "用户": "查找名为Tim Duncan的球员在2000年之后服务过的，遍历2到3步的所有实体，包括服务关系和实体本身。",
        "查询": "MATCH (:player{name:\"Tim Duncan\"})-[e:serve*2..3{start_year: 2000}]->(v)\nRETURN e, v"
    },
    {
        "用户": "请帮我查询终止会话ID为1625553545984255，计划ID为163的信息。",
        "查询": "KILL QUERY(SESSION=1625553545984255,PLAN=163)"
    },
    {
        "用户": "Find the player ID that players with ID player102 are following and exclude the player ID that players with ID player100 are following.",
        "查询": "MATCH (v:player)-[e:follow]->(v2)\nWHERE id(v) ==\"player102\"\nRETURN id(v2) AS id\nMINUS\nMATCH (v:player)-[e:follow]->(v2)\nWHERE id(v) ==\"player100\"\nRETURN id(v2) AS id"
    },
    {
        "用户": "查询所有球员节点的ID、数量、年龄总和、最大年龄、最小年龄、平均年龄和标签，并按照ID、数量、最大年龄、最小年龄排序，跳过前10个结果，返回接下来的8个结果。",
        "查询": "MATCH(n:player)\n  RETURN id(n) AS id,\n         count(n) AS count,\n         sum(floor(n.player.age)) AS sum,\n         max(n.player.age) AS max,\n         min(n.player.age) AS min,\n         avg(distinct n.player.age)+1 AS age,\n         labels(n) AS lb\n    ORDER BY id, count, max, min\n    SKIP 10 LIMIT 8;"
    },
    {
        "用户": "Find all the entities that 'Russell Westbrook' likes and return their IDs.",
        "查询": "GO FROM \"Russell Westbrook\" OVER like YIELD like._dst"
    },
    {
        "用户": "Find all entities that Boris Diaw likes and delete their relationships with Boris Diaw.",
        "查询": "GO FROM \"Boris Diaw\" OVER like YIELD like._dst as id | DELETE VERTEX $-.id WITH EDGE"
    },
    {
        "用户": "Find the age attribute of a player named 'LaMarcus Aldridge' and return it.",
        "查询": "match (v:player{name:\"LaMarcus Aldridge\"}) return properties(v).age;"
    },
    {
        "用户": "请帮我退出Drainer服务。",
        "查询": "SIGN OUT DRAINER SERVICE"
    },
    {
        "用户": "找出与 'Dejounte Murray' 有 '喜欢' 关系的实体，返回这些实体的姓名和年龄，并按年龄降序、姓名升序排序，最多返回3个结果。",
        "查询": "MATCH (v1) -[:like]-> (v)\nWHERE id(v1) == 'Dejounte Murray'\nRETURN v.player.name AS Name, v.player.age AS Age\nORDER BY Age DESC, Name ASC\nLIMIT 3"
    },
    {
        "用户": "Returns whether the string 'apple' starts with 'app', starts with 'a', and starts with the uppercase letter 'A'.",
        "查询": "RETURN'apple'STARTS WITH'app','apple'STARTS WITH'a','apple'STARTS WITH toUpper('a')"
    },
    {
        "用户": "从 'Tim Duncan' 开始，沿着 '喜欢' 的关系找到 'Tony Parker' 或 'LaMarcus Aldridge' 的所有路径，最多不超过3步，并返回这些路径。",
        "查询": "FIND ALL PATH FROM \"Tim Duncan\" TO \"Tony Parker\", \"LaMarcus Aldridge\" OVER like UPTO 3 STEPS YIELD path as p"
    },
    {
        "用户": "Obtain the age and name in the attributes of \"player100\", \"player101\", \"player102\", and \"player103\", and sort them in ascending age and descending name order.",
        "查询": "FETCH PROP ON player \"player100\", \"player101\", \"player102\", \"player103\"\nYIELD properties(vertex).age AS age, properties(vertex).name AS name\n| ORDER BY $-.age ASC, $-.name DESC"
    },
    {
        "用户": "如果any_shape上的geo属性没有索引，您能帮我创建一个名为any_shape_geo_index的索引吗？使用s2算法，最大层级为30，最大单元格数为8。",
        "查询": "CREATE TAG INDEX IF NOT EXISTS any_shape_geo_index ON any_shape(geo) with (s2_max_level=30, s2_max_cells=8)"
    },
    {
        "用户": "Add a 33 year old player with ID 'player102' and name 'LaMarcus Aldridge'.",
        "查询": "INSERT VERTEX player(name, age) VALUES \"player102\":(\"LaMarcus Aldridge\", 33)"
    },
    {
        "用户": "Hello, please help me identify all entities related to 'Tim Duncan' and provide their edge endpoints.",
        "查询": "GO FROM 'Tim Duncan' OVER * YIELD dst(edge) as dst"
    },
    {
        "用户": "您好，请问您能帮我找出从 'Tim Duncan' 到 'Tony Parker' 的最短路径吗？路径上的所有节点也请一并返回。",
        "查询": "FIND SHORTEST PATH FROM \"Tim Duncan\" TO \"Tony Parker\" OVER like YIELD path as p\n| YIELD nodes($-.p) AS nodes | UNWIND $-.nodes AS a | YIELD $-.a AS a"
    },
    {
        "用户": "Insert two vertices, one with ID team203 and name 'Trail Blazers', and the other with ID team204 and name' Spurs'.",
        "查询": "INSERT VERTEX team(name) VALUES \"team203\":(\"Trail Blazers\"), \"team204\":(\"Spurs\")"
    },
    {
        "用户": "Find all entities that a player named 'Tim Duncan' is following or playing for, and return these entities.",
        "查询": "MATCH p=(v:player{name:\"Tim Duncan\"})-[e:follow|serve*2]->(v2)\nRETURN DISTINCT v2"
    },
    {
        "用户": "Hello, please help me obtain all attribute information about 'Tim Duncan', including ID, key, label, and attribute values.",
        "查询": "FETCH PROP ON * 'Tim Duncan' YIELD  id(vertex), keys(vertex) as keys, tags(vertex) as tags_, properties(vertex) as props"
    },
    {
        "用户": "Find all the names, incorrect tags, and attribute information that players known as' Tim Duncan 'like.",
        "查询": "MATCH (v:player)-[:like]->(t) WHERE v.player.name==\"Tim Duncan\" RETURN v.player.name, t.errortag.name, properties(v), t"
    },
    {
        "用户": "Obtain all entities and edges that can be reached in one step through the 'follow' relationship starting from 'player101'.",
        "查询": "GET SUBGRAPH 1 STEPS FROM \"player101\" IN follow YIELD VERTICES AS nodes, EDGES AS relationships"
    },
    {
        "用户": "请问您能帮我找出与 'Tony Parker' 相关联的其他实体的二度关系吗？我需要它们的 ID。",
        "查询": "GO 1 STEPS FROM 'Tony Parker' OVER like YIELD like._dst AS id\n| GO 2 STEPS FROM $-.id OVER like YIELD like._dst"
    },
    {
        "用户": "Obtain the relationship edges and starting nodes of 'Tim Duncan' liked by 'Tony Parker' and 'Tracy McGrady' liked by 'Grant Hill'.",
        "查询": "FETCH PROP ON like \"Tony Parker\"->\"Tim Duncan\", \"Grant Hill\" -> \"Tracy McGrady\" YIELD edge as relationship |\nYIELD startNode($-.relationship) AS node"
    },
    {
        "用户": "Please insert a node with entity type person into the graph database and assign an attribute value of 1 with ID 1 to this node. Thank you.",
        "查询": "INSERT VERTEX person(p1) VALUES \"1\":(1)"
    },
    {
        "用户": "Obtain all attributes of 'player100', 'player106', and 'team200', and return their vertices.",
        "查询": "FETCH PROP ON * \"player100\", \"player106\", \"team200\" YIELD vertex AS v"
    },
    {
        "用户": "查找名为'Tim Duncan'的球员实体，并返回该实体的ID。",
        "查询": "LOOKUP ON player WHERE player.name == \"Tim Duncan\" YIELD id(vertex) as id"
    },
    {
        "用户": "Obtain all edges of type e1 with col1 being 1 and col3 being false, and return the source and target nodes of these edges.",
        "查询": "LOOKUP ON e1 WHERE e1.col1 == 1 AND e1.col3 == false YIELD src(edge) as src, dst(edge) as dst"
    },
    {
        "用户": "Hello, could you please help me find the IDs of all entities starting from 'Tim Duncan' and following the 'serve' relationship outward through steps 1 to 10?",
        "查询": "GO 1 TO 10 STEPS FROM \"Tim Duncan\" OVER serve YIELD $$ as dst"
    },
    {
        "用户": "If the start year of the edge is 2016 and the edge represents' player149 'serving' team219 'starting in 2016, update the end year of the edge by adding 1 and return the start and end years.",
        "查询": "UPSERT EDGE on serve\n\"player149\" -> \"team219\"\nSET end_year = end_year + 1\nWHEN start_year == 2016\nYIELD start_year, end_year"
    },
    {
        "用户": "找出Tim Duncan所服务过的球队及起始年份，以及Tony Parker所服务过的球队及起始年份，并将两者结果去重合并。",
        "查询": "(GO FROM \"Tim Duncan\" OVER like YIELD like._dst as id |\n   GO FROM $-.id OVER serve YIELD $^.player.name, serve.start_year, $$.team.name)\nUNION DISTINCT\nGO FROM \"Tony Parker\" OVER serve YIELD $^.player.name, serve.start_year, $$.team.name"
    },
    {
        "用户": "Find all entities that 'Tim Duncan' likes' or 'is liked' by, and return edge information between these entities and 'Tim Duncan'.",
        "查询": "GO FROM 'Tim Duncan' OVER like bidirect YIELD edge as e"
    },
    {
        "用户": "Find all relationships' serve 'by' player666 ',' player667 ', and' player668 ', and return the start and end years of these relationships.",
        "查询": "GO FROM \"player666\", \"player667\", \"player668\"\nOVER serve\nYIELD properties(edge).start_year, properties(edge).end_year"
    },
    {
        "用户": "Show all spaces.",
        "查询": "show spaces"
    },
    {
        "用户": "找出与'player100'有关系的实体，返回这些实体的朋友和朋友所属的球队。",
        "查询": "MATCH (v)<-[e:follow]- (v2)-[e2:serve]->(v3)\nWHERE id(v) =='player100'\nRETURN v2.player.name AS FriendOf, v3.team.name AS Team"
    },
    {
        "用户": "找出与球员 'Shaquille O'Neal' 有关系的实体，返回这些实体的姓名、年龄和名称，并按名称排序，只返回第一个结果。",
        "查询": "match (v1)-->(v2:player)-->(v3) where v2.player.name==\"Shaquille O'Neal\"\n  return properties(v1).name,properties(v2).age as age,properties(v3).name AS name\n  order by name limit 1;"
    },
    {
        "用户": "Please help me check the time corresponding to the timestamp 1625469277.",
        "查询": "RETURN datetime(1625469277)"
    },
    {
        "用户": "Could you please help me find all the information about 'Boris Diaw', including his name and age?",
        "查询": "FETCH PROP ON * 'Boris Diaw', 'Boris Diaw' yield player.name, player.age"
    },
    {
        "用户": "Could you please help me find the name and age of 'Boris Diaw'?",
        "查询": "FETCH PROP ON * 'Boris Diaw' yield player.name, player.age"
    },
    {
        "用户": "您好，请帮我找一下从 'Tony Parker' 和 'Yao Ming' 到 'Manu Ginobili'、'Spurs' 和 'Lakers' 的最短路径，路径上的关系属性需要满足 'teammate.start_year' 不为空或 'like.likeness' 大于90，最多经过3个步骤，并且返回路径上的所有节点。",
        "查询": "FIND SHORTEST PATH WITH PROP FROM \"Tony Parker\", \"Yao Ming\" TO \"Manu Ginobili\", \"Spurs\", \"Lakers\" OVER * BIDIRECT WHERE teammate.start_year is not EMPTY OR like.likeness > 90 UPTO 3 STEPS YIELD path as p |\nYIELD distinct nodes($-.p) as nodes"
    },
    {
        "用户": "请问您能帮我找到所有与'Tim Duncan'有关的边并提供相关信息吗？",
        "查询": "GO 0 STEPS FROM 'Tim Duncan' OVER serve YIELD edge as e"
    },
    {
        "用户": "Returns the names and ages of all players, sorted in descending order by player name.",
        "查询": "MATCH (v:player) RETURN v.player.name AS Name, v.player.age AS Age\nORDER BY Name DESC"
    },
    {
        "用户": "Please show me all the hosts.",
        "查询": "SHOW HOSTS"
    },
    {
        "用户": "找出从 'xxx' 或 'zzz' 出发，经过不超过4个 '喜欢' 关系，到达 'Manu Ginobili'、'Spurs' 或 'Lakers' 的最短路径，并返回该路径。",
        "查询": "MATCH p = shortestPath( (a)-[e:like*..4]->(b) )\n  WHERE id(b) IN ['Manu Ginobili', 'Spurs', 'Lakers'] and id(a) in ['xxx', 'zzz']\n  RETURN p"
    },
    {
        "用户": "请帮我找出名为'Tim Duncan'的球员，并找出与其有关系的另一位球员的姓名。",
        "查询": "MATCH (v:player{name:\"Tim Duncan\"})-->(v2)<--(v3)\nRETURN v3.player.name AS Name"
    },
    {
        "用户": "查找名为'Tim Duncan'的球员实体，并返回其ID。",
        "查询": "LOOKUP ON player WHERE player.name == \"Tim Duncan\" YIELD id(vertex) as id"
    },
    {
        "用户": "Create a 'like' edge from 'Tom' to 'Conan' with an edge weight of 100.",
        "查询": "INSERT EDGE like(likeness) VALUES \"Tom\"->\"Conan\":(100)"
    },
    {
        "用户": "请帮我给标签 student 添加一个默认值为 'abc' 的别名属性。",
        "查询": "ALTER TAG student ADD (alias string default \"abc\")"
    },
    {
        "用户": "Delete all 'likes' edges starting from' Boris Diaw '",
        "查询": "GO FROM \"Boris Diaw\" OVER like\nYIELD like._src as src, like._dst as dst, like._rank as rank\n| DELETE EDGE like $-.src->$-.dst @ $-.rank"
    },
    {
        "用户": "您好，请帮我找一下，我需要获取那些老师名字大于'a'的学生的ID。",
        "查询": "LOOKUP ON student WHERE student.teacher > \"a\" YIELD id(vertex) as id"
    },
    {
        "用户": "Rebuild as player_ Index_ 1's label index.",
        "查询": "REBUILD TAG INDEX player_index_"
    },
    {
        "用户": "Please help me query all entities in the player diagram and tell me the number of entities.",
        "查询": "LOOKUP ON player YIELD id(vertex)|\nYIELD COUNT(*) AS Player_Number"
    },
    {
        "用户": "Can you help me find the relevant test_ Comment_ Do you have detailed information about tag tags?",
        "查询": "DESC tag test_comment_tag;"
    },
    {
        "用户": "Hello, could you please help me find the 'serve. start' between 'Zion Williamson' and 'Spurs'_ Year 'attribute value, as well as' serve. start' between 'Boris Diaw' and 'Hawks'_ Year 'attribute value.",
        "查询": "FETCH PROP ON serve \"Zion Williamson\"->\"Spurs\", \"Boris Diaw\"->\"Hawks\" YIELD serve.start_year"
    },
    {
        "用户": "Find entities with a preference of 90 that a player named 'Tim Duncan' likes, 2 to 3 relationships away from the player, and return these entities and relationships.",
        "查询": "MATCH (:player{name:\"Tim Duncan\"})<-[e:like*2..3{likeness: 90}]-(v)\nRETURN e, v"
    },
    {
        "用户": "找出名为'Tim Duncan'的球员与其所属的球队之间的关系，并返回球员与球队之间的所有连接关系。",
        "查询": "MATCH (v:player{name:\"Tim Duncan\"})-[e]->(t)\nWHERE (v)-[e]->(t:team)\nRETURN (v)-->()"
    },
    {
        "用户": "如果边不存在，则创建一条serve边，该边具有start_year和end_year属性。",
        "查询": "CREATE EDGE IF NOT EXISTS serve(start_year int, end_year int)"
    },
    {
        "用户": "Find all paths from 'Yao Ming' to 'Danny Green'. Within three steps, the edges on the path must satisfy the 'like' attribute to be empty or greater than or equal to 80, with a maximum of three steps. Return the path and starting node.",
        "查询": "FIND ALL PATH WITH PROP FROM \"Yao Ming\" TO \"Danny Green\" OVER * BIDIRECT\nWHERE like.likeness is  EMPTY OR like.likeness >= 80 UPTO 3 STEPS YIELD path as p |\nYIELD startnode($-.p) as startnode"
    },
    {
        "用户": "返回同时出现在两个列表中的元素。",
        "查询": "UNWIND [1,2] AS a RETURN a\nINTERSECT\nUNWIND [1,2,3,4] AS a\nRETURN a"
    },
    {
        "用户": "Identify entities that have a 'like' relationship with 'LeBron James' and return the relationships and names between these entities.",
        "查询": "MATCH p = (n)<-[:like]-(m)\nWHERE id(n) == \"LeBron James\"\nRETURN p, n.player.name, m.player.name"
    },
    {
        "用户": "Hello, please help me obtain all the attributes of the 'Boris Diaw' entity, including its ID, 'player. age' attribute, and the entity itself.",
        "查询": "FETCH PROP ON * 'Boris Diaw' YIELD id(vertex), player.age, vertex as node"
    },
    {
        "用户": "如果团队标签的名称长度不超过20个字符，能否帮我创建一个名为team_index的标签索引呢？",
        "查询": "CREATE TAG INDEX IF NOT EXISTS team_index ON team(name(20))"
    },
    {
        "用户": "统计所有效力于'Spurs'的球员被喜欢的实体数量。",
        "查询": "MATCH (v1)-[:like]->(v2:player)-[:serve]->(v3)\nWHERE id(v3) == 'Spurs'\nRETURN COUNT(*)"
    },
    {
        "用户": "Hello, please help me obtain the 'like' relationship edges between 'Tony Parker' and 'Tim Duncan', as well as the 'like' relationship edges between 'Grant Hill' and 'Tracy McGrady', and return the relationship attributes of all edges.",
        "查询": "FETCH PROP ON like \"Tony Parker\"->\"Tim Duncan\", \"Grant Hill\" -> \"Tracy McGrady\" YIELD properties(edge) as properties"
    },
    {
        "用户": "Please identify all interest relationships that are associated with entity 'A' and return the starting and ending points of these relationships.",
        "查询": "GO 1 STEPS FROM \"A\" OVER follow YIELD src(edge),dst(edge)"
    },
    {
        "用户": "插入test1和test2两个顶点，test1的属性为(p1:'123', p2: 1)，test2的属性为(p3:'456', p4: 2)",
        "查询": "INSERT VERTEX test1(p1, p2),test2(p3, p4) VALUES \"test\":(\"123\", 1, \"456\", 2)"
    },
    {
        "用户": "描述标签 player。",
        "查询": "DESCRIBE TAG player"
    },
    {
        "用户": "Find all the entities that Russell Westbrook likes and return their IDs.",
        "查询": "GO FROM \"Russell Westbrook\" OVER like YIELD like._dst"
    },
    {
        "用户": "得了糖尿病推荐吃什么食物？",
        "查询": "MATCH (n:disease)-[e:recommend_eat]->(n1:food) WHERE n.disease.name=='糖尿病' return n1.food.name"
    },
    {
        "用户": "Identify all bidirectional 'like' relationship paths from 'Tim Duncan' to 'Tony Parker', including a maximum of 3 hop distances, and return these paths.",
        "查询": "FIND NOLOOP PATH FROM \"Tim Duncan\" TO \"Tony Parker\" OVER like BIDIRECT UPTO 3 STEPS YIELD path as p"
    },
    {
        "用户": "将球员player101从1999年到2018年期间服务于球队team204，将球员player102从2006年到2015年期间服务于球队team203。",
        "查询": "INSERT EDGE serve(start_year, end_year) VALUES \"player101\" -> \"team204\":(1999, 2018),\"player102\" -> \"team203\":(2006, 2015)"
    },
    {
        "用户": "您好，请问您能帮我找一下从 'Tiago Splitter' 到 'Tony Parker' 的最短路径吗？路径最多只能有一步哦，麻烦您帮我查一下并返回给我。",
        "查询": "FIND SHORTEST PATH FROM \"Tiago Splitter\" TO \"Tony Parker\" OVER * UPTO 1 STEPS YIELD path as p"
    },
    {
        "用户": "找出从 'Tim Duncan' 到 'Tony Parker' 的所有双向 '喜欢' 关系路径，最多包含3跳距离，并返回这些路径。",
        "查询": "FIND NOLOOP PATH FROM \"Tim Duncan\" TO \"Tony Parker\" OVER like BIDIRECT UPTO 3 STEPS YIELD path as p"
    },
    {
        "用户": "May I ask if you could help me find the start year, end year, and relationship type of 'Boris Diaw' during his tenure with 'Hawks'?",
        "查询": "FETCH PROP ON serve 'Boris Diaw' -> 'Hawks' YIELD serve.start_year, serve.end_year, edge as relationship"
    },
    {
        "用户": "Hey, hello! I need to find all the entities that have previously provided services to 'Thunders', and then return their source nodes, labels on edges, edge IDs, target nodes, and target node IDs. Can you help me complete this task?",
        "查询": "GO FROM 'Thunders' OVER serve REVERSELY YIELD $^ as src,tags($^), id($^), id($$), $$ as dst"
    },
    {
        "用户": "您好，请帮我查找一下从 'Tim Duncan' 开始，沿着 'serve' 关系向外扩展1到10步的所有实体的ID。",
        "查询": "GO 1 TO 10 STEPS FROM \"Tim Duncan\" OVER serve YIELD $$ as dst"
    },
    {
        "用户": "Hey, I want to start with 'Tim Duncan' and extend 10 steps outward along the 'serve' relationship. Can you help me return the IDs of all the extended entities?",
        "查询": "GO 10 STEPS FROM \"Tim Duncan\" OVER serve YIELD $$ as dst"
    },
    {
        "用户": "Please identify all entities that focus on 'player100' and return the source nodes of their edges as destinations.",
        "查询": "GO FROM \"player100\" OVER follow REVERSELY\nYIELD src(edge) AS destination"
    },
    {
        "用户": "您好，请帮我找出以 'Russell Westbrook' 为起点，通过任意边反向到达的所有实体，并返回这些实体在 serve 和 like 属性中的源实体 ID。",
        "查询": "GO FROM \"Russell Westbrook\" OVER * REVERSELY YIELD serve._dst, like._dst"
    },
    {
        "用户": "Please help me insert a vertex named t5 with attributes p1 being 'Abe', p2 being 2, p3 being 3, and vertex ID being '001'.",
        "查询": "INSERT VERTEX t5(p1, p2, p3) VALUES \"001\":(\"Abe\", 2, 3)"
    },
    {
        "用户": "找出从 'Tim Duncan' 到 'Tony Parker' 或 'LaMarcus Aldridge' 的所有路径，路径上的关系为 '喜欢'，最多经过三步，并返回这些路径。",
        "查询": "FIND ALL PATH FROM \"Tim Duncan\" TO \"Tony Parker\", \"LaMarcus Aldridge\" OVER like UPTO 3 STEPS YIELD path as p"
    },
    {
        "用户": "Find all paths from 'Tony Parker' to 'Yao Ming', and the relationship attributes on the path must meet the following conditions: the starting year of the teammate relationship is later than 2000, or the liking level of the liking relationship is not empty and greater than or equal to 80. Return a maximum of 3 paths and path information.",
        "查询": "FIND ALL PATH WITH PROP FROM \"Tony Parker\" TO \"Yao Ming\" OVER * BIDIRECT\nWHERE  teammate.start_year > 2000 OR (like.likeness is not EMPTY AND like.likeness >= 80) UPTO 3 STEPS YIELD path as p"
    },
    {
        "用户": "Please help me find all the entities connected to a player named 'Tim Duncan' and return them.",
        "查询": "MATCH (v:player{name:\"Tim Duncan\"}) -[*0]-> (v2)\nRETURN v2"
    },
    {
        "用户": "Please help me identify all entities with 'follow' relationships and return the first three relationships",
        "查询": "MATCH ()-[e:follow]->()\nRETURN e\nlimit 3"
    },
    {
        "用户": "Starting from 'Tim Duncan' and 'Tony Parker' respectively, identify all entities they play for, return the player's name, the year they started serving, and the name of the team they served, and finally return all results",
        "查询": "$var = GO FROM \"Tim Duncan\" OVER serve YIELD $^.player.name, serve.start_year, $$.team.name\nUNION ALL\nGO FROM \"Tony Parker\" OVER serve YIELD $^.player.name, serve.start_year, $$.team.name;\nYIELD $var.*"
    },
    {
        "用户": "您好，请帮我查找一下'Boris Diaw'曾经为哪些实体工作过，以及这些实体之间的关系和服务时间。",
        "查询": "$var = GO FROM 'Boris Diaw','Boris Diaw' OVER serve YIELD serve._src AS src, serve._dst AS dst;\nFETCH PROP ON serve $var.src->$var.dst YIELD DISTINCT serve.start_year, serve.end_year, edge as relationship"
    },
    {
        "用户": " 嘿，你能帮我查一下2000年以后，'Tim Duncan'喜欢或者服务过的实体吗？距离要在2到3之间哦。",
        "查询": "MATCH (:player{name:\"Tim Duncan\"})-[e:serve|like*2..3{start_year: 2000}]-(v)\nRETURN e, v"
    },
    {
        "用户": "请帮我获取从'player101'开始，1步内的所有实体和关系。",
        "查询": "GET SUBGRAPH 1 STEPS FROM \"player101\" YIELD VERTICES AS nodes, EDGES AS relationships"
    },
    {
        "用户": "Find a player entity named 'Tony Parker' and return the ID of that entity.",
        "查询": "LOOKUP ON player WHERE player.name == \"Tony Parker\" YIELD id(vertex) as id"
    },
    {
        "用户": "Hello, could you help me find the shortest path from 'Tiago Splitter' to 'Tony Parker'? The path can only have one step at most. Could you please help me check and return it to me.",
        "查询": "FIND SHORTEST PATH FROM \"Tiago Splitter\" TO \"Tony Parker\" OVER * UPTO 1 STEPS YIELD path as p"
    },
    {
        "用户": "Find an entity that a player named 'Tim Duncan' serves or likes, with a distance of 2-3 hops, calculate the quantity, and return.",
        "查询": "MATCH (:player{name:\"Tim Duncan\"})-[e:serve|like*2..3]-(v)\nRETURN COUNT(1)"
    },
    {
        "用户": "请帮我找出年龄大于等于42岁的'player100'所关注的所有实体，并返回终点",
        "查询": "GO FROM \"player100\" OVER follow\nWHERE $^.player.age >= 42\nYIELD dst(edge)"
    },
    {
        "用户": "Please help me create a label called team, which contains a string type attribute name.",
        "查询": "CREATE TAG team(name string)"
    },
    {
        "用户": "找出以'player101'为起点，通过'follow'关系（双向）所连接的所有实体，并根据实体的属性'name'进行分组，返回每个分组的'name'和对应的实体数量。",
        "查询": "GO FROM \"player101\" OVER follow BIDIRECT\nYIELD properties($$).name AS Name\n| GROUP BY $-.Name YIELD $-.Name, count(*)"
    },
    {
        "用户": "\"插入一个名为'player111'，年龄为 38 岁的球员'David West'的顶点\"。",
        "查询": "INSERT VERTEX player(name,age) VALUES \"player111\":(\"David West\", 38)"
    },
    {
        "用户": "Insert an edge to indicate that 'player101' served 'team204' between 1999 and 2018, and insert another edge to indicate that 'player102' served 'team203' between 2006 and 2015.",
        "查询": "INSERT EDGE serve(start_year, end_year) VALUES \"player101\" -> \"team204\":(1999, 2018),\"player102\" -> \"team203\":(2006, 2015)"
    },
    {
        "用户": "获取'Boris Diaw'的球员的姓名和年龄。",
        "查询": "FETCH PROP ON player 'Boris Diaw' YIELD player.name, player.age"
    },
    {
        "用户": "获取'player100','player101','player102','player103'这些实体的年龄和姓名，并按照年龄升序、姓名降序进行排序。",
        "查询": "FETCH PROP ON player \"player100\", \"player101\", \"player102\", \"player103\"\nYIELD properties(vertex).age AS age, properties(vertex).name AS name\n| ORDER BY $-.age ASC, $-.name DESC"
    },
    {
        "用户": "双向查找从Tim Duncan到Yao Ming之间，满足喜欢程度在80到90之间或是2001年后的队友的所有路径，最多3步，并返回这些路径。",
        "查询": "FIND ALL PATH WITH PROP FROM \"Tim Duncan\" TO \"Yao Ming\" OVER * BIDIRECT\nWHERE (like.likeness >= 80 and like.likeness <= 90) OR (teammate.start_year is not EMPTY and teammate.start_year > 2001) UPTO 3 STEPS YIELD path as p"
    },
    {
        "用户": "Find the shortest path between players aged 30 and their team that does not exceed 5, and return to that path.",
        "查询": "MATCH p = shortestPath( (a:player{age:30})-[e*..5]->(b:team) )\n  WHERE length(p) == 1\n  RETURN p"
    },
    {
        "用户": "显示所有的空间。",
        "查询": "show spaces"
    },
    {
        "用户": "Create an edge that represents the service relationship, including the start and end years.",
        "查询": "CREATE EDGE serve(start_year int, end_year int)"
    },
    {
        "用户": "使用MY_SPACE空间。",
        "查询": "use MY_SPACE"
    },
    {
        "用户": "Please help me create an edge called follow, which has an attribute called degree.",
        "查询": "CREATE EDGE follow(degree int)"
    },
    {
        "用户": "从 'Tim Duncan' 开始，通过 '喜欢' 关系反向查找不超过3步的路径，直到到达 'Nobody' 或 'Spur'，并返回路径。",
        "查询": "FIND NOLOOP PATH FROM \"Tim Duncan\" TO \"Nobody\", \"Spur\" OVER like REVERSELY UPTO 3 STEPS YIELD path as p"
    },
    {
        "用户": "Hello, please help me find all entities related to 'Marco Bellelli' and return their attribute information.",
        "查询": "MATCH (v:player)-[e]-(v2)\nWHERE id(v)=='Marco Belinelli'\nRETURN v2"
    },
    {
        "用户": "您好，请帮我查找一下与 'LeBron James' 有关的团队名称和关系类型，可以吗？",
        "查询": "MATCH (v1) -[r:serve]-> (v2)\nWHERE id(v1) == \"LeBron James\"\nRETURN type(r) AS Type, v2.team.name AS Name"
    },
    {
        "用户": "If a player with the name 'Joe' exists, set their age to 30 and return the player's name and age.",
        "查询": "UPSERT VERTEX ON player \"player666\"\nSET age = 30\nWHEN name == \"Joe\"\nYIELD name AS Name, age AS Age"
    },
    {
        "用户": "您好，请帮我找出所有标签为player和bachelor的实体v。",
        "查询": "MATCH (v:player:bachelor) RETURN v"
    },
    {
        "用户": "您好，请帮我查找一下与 'LeBron James' 有关的团队名称和关系类型，可以吗？",
        "查询": "MATCH (v1) -[r:serve]-> (v2)\nWHERE id(v1) == \"LeBron James\"\nRETURN type(r) AS Type, v2.team.name AS Name"
    },
    {
        "用户": "Please identify all entities that start with 'player100' and have a 'follow' relationship, and have a degree greater than 90 in the attributes of the edge or an age not equal to 33 in the endpoint entity and a name not equal to 'Tony Parker', and return the attributes of these entities. Can you help me with it?",
        "查询": "GO FROM \"player100\"\nOVER follow\nWHERE properties(edge).degree > 90\nOR properties($$).age != 33\nAND properties($$).name != \"Tony Parker\"\nYIELD properties($$)"
    },
    {
        "用户": "在边集合edge_1_ttl上新增一个索引，索引的属性为start_time。",
        "查询": "CREATE EDGE INDEX edge_1_ttl_index_second_start_time ON edge_1_ttl(start_time)"
    },
    {
        "用户": "Please help me obtain all entities and edges that can be reached in one step through the 'follow' relationship starting from 'player101'.",
        "查询": "GET SUBGRAPH 1 STEPS FROM \"player101\" IN follow YIELD VERTICES AS nodes, EDGES AS relationships"
    },
    {
        "用户": "找出从 'Tim Duncan' 到 'Tony Parker' 的所有路径，路径上必须经过 '喜欢' 关系，最多经过3个步骤，并返回路径和路径上的关系。",
        "查询": "FIND ALL PATH WITH PROP FROM \"Tim Duncan\" TO \"Tony Parker\" OVER like UPTO 3 STEPS YIELD path as p |\nYIELD relationships($-.p) as relationships"
    },
    {
        "用户": "请帮我找出名为'Tim Duncan'的球员的所有1到3度关系中的朋友，并返回这些朋友的信息。",
        "查询": "MATCH p=(v:player{name:\"Tim Duncan\"})-[e:follow*1..3]->(v2)\nRETURN v2 AS Friends"
    },
    {
        "用户": "Can you help me obtain all the attributes of 'Boris Diaw'? I want to know his' player. name 'and' player. age '.",
        "查询": "FETCH PROP ON * 'Boris Diaw', 'Boris Diaw' yield player.name, player.age"
    },
    {
        "用户": "您好，请帮我找出所有起始年份为2016且权重为1的关系，最多返回1000条。",
        "查询": "match ()-[e]->()\nwhere abs(rank(e)) == 1 and e.start_year == 2016\nRETURN e\nlimit 1000"
    },
    {
        "用户": "Please insert a player named 'Kobe' into the player node and set its name attribute to 'Kobe'. Thank you.",
        "查询": "INSERT VERTEX player(name) VALUES \"Kobe\":(\"Kobe\")"
    },
    {
        "用户": "If there is no player tag, can you help me create one? The label needs to include two attributes: non empty name and age.",
        "查询": "CREATE TAG IF NOT EXISTS player(name string NOT NULL, age int)"
    },
    {
        "用户": "At ttl_ Find all entities with b equal to 10 in the tag and calculate their a and b attribute values.",
        "查询": "LOOKUP ON ttl_tag where ttl_tag.b==10 yield ttl_tag.a as a,ttl_tag.b as b;"
    },
    {
        "用户": "找出 'Tony Parker' 所 '喜欢' 的所有实体，但排除 'Danny Green'，并返回这些实体的名称。",
        "查询": "GO FROM 'Tony Parker' OVER like\nWHERE like._dst NOT IN ['Danny Green']\nYIELD $$.player.name"
    },
    {
        "用户": "请找出所有属性值为90的关系，并且把这些关系返回给我。",
        "查询": "MATCH ()-[e]->()\nWITH e, properties(e) as props, keys(properties(e)) as kk\nLIMIT 10000 WHERE [i in kk where props[i] == 90]\nRETURN e"
    },
    {
        "用户": "Find the entities that a player named 'Tracy McGrady' likes', with a liking level of 90, and return the relationship and attribute information between these entities and the player.",
        "查询": "MATCH (:player{name:\"Tracy McGrady\"})-[e:like*0{likeness: 90}]-(v)\nRETURN e, v"
    },
    {
        "用户": "找出名为 'Tracy McGrady' 的球员所 '喜欢' 的所有实体，且喜欢程度为90，并返回这些关系和实体。",
        "查询": "MATCH (:player{name:\"Tracy McGrady\"})-[e:like*0..1{likeness: 90}]->(v)\nRETURN e, v"
    },
    {
        "用户": "创建一个名为test_permission的用户，如果该用户不存在，并设置密码为test，并授予该用户在nba图上的USER角色权限。",
        "查询": "CREATE USER IF NOT EXISTS test_permission WITH PASSWORD 'test';\nGRANT ROLE USER ON nba TO test_permission;"
    },
    {
        "用户": "请帮我插入一个名为'Tony Parker'，年龄为36的球员实体，其ID为'player101'。",
        "查询": "INSERT VERTEX player(name, age) VALUES \"player101\":(\"Tony Parker\", 36)"
    },
    {
        "用户": "找出Tim Duncan所服务过的球队及起始年份，以及Tony Parker所服务过的球队及起始年份，并将两者结果去重合并。",
        "查询": "(GO FROM \"Tim Duncan\" OVER like YIELD like._dst as id |\n   GO FROM $-.id OVER serve YIELD $^.player.name, serve.start_year, $$.team.name)\nUNION DISTINCT\nGO FROM \"Tony Parker\" OVER serve YIELD $^.player.name, serve.start_year, $$.team.name"
    },
    {
        "用户": "Please add a data receiver with address 192.168.10.106:9889.",
        "查询": "ADD DRAINER 192.168.10.106:9889"
    },
    {
        "用户": "获取'test'图中所有实体的属性，并返回这些实体的顶点。",
        "查询": "FETCH PROP ON * \"test\" YIELD vertex AS v"
    },
    {
        "用户": "请问您能帮我找出从 'Tim Duncan' 到 'LaMarcus Aldridge' 之间通过喜欢关系连接的最短路径吗？",
        "查询": "FIND SHORTEST PATH FROM \"Tim Duncan\" TO \"LaMarcus Aldridge\" OVER like YIELD path as p"
    },
    {
        "用户": "Please help me add a player node named 'A Loner' with an age of 0, and then delete this node and all related connections.",
        "查询": "INSERT VERTEX player(name, age) VALUES \"A Loner\": (\"A Loner\", 0);\nDELETE VERTEX \"A Loner\" WITH EDGE;"
    },
    {
        "用户": "Please help me check the information for terminating session ID 1625553545984255 and plan ID 163.",
        "查询": "KILL QUERY(SESSION=1625553545984255,PLAN=163)"
    },
    {
        "用户": "如果'player149'与'team219'之间的边存在且起始年份不等于2016，则将结束年份加1，并返回起始年份和结束年份。",
        "查询": "UPSERT EDGE on serve\n\"player149\" -> \"team219\"\nSET end_year = end_year + 1\nWHEN start_year != 2016\nYIELD start_year, end_year"
    },
    {
        "用户": "Please help me insert a t2 type entity named 'n2' with an age of 13.",
        "查询": "INSERT VERTEX t2 (name, age) VALUES \"11\":(\"n2\", 13)"
    },
    {
        "用户": "Hello, please help me find all entities that can be reached through all edge types (including reverse edges) starting from 'Russell Westbrook' and return the target entity IDs of these entities in the like, serve, and teammate attributes.",
        "查询": "GO FROM \"Russell Westbrook\" OVER * REVERSELY YIELD like._dst, serve._dst, teammate._dst"
    },
    {
        "用户": "请帮我返回时间为12点31分14秒111毫秒222微秒的时间。",
        "查询": "WITH time({hour: 12, minute: 31, second: 14, millisecond:111, microsecond: 222}) AS d RETURN d"
    },
    {
        "用户": "请帮我找出从名为'Tim Duncan'的球员出发，到达其他实体之间的所有关系，并返回这些关系。",
        "查询": "MATCH p=(v:player{name:\"Tim Duncan\"})-->(v2)\nRETURN relationships(p)"
    },
    {
        "用户": "删除'player100'在'2021'年加入的所有球队。",
        "查询": "GO FROM \"player100\" OVER serve WHERE properties(edge).start_year == \"2021\" YIELD dst(edge) AS id | DELETE VERTEX $-.id"
    },
    {
        "用户": "返回名为'LaMarcus Aldridge'的球员的年龄属性。",
        "查询": "match (v:player{name:\"LaMarcus Aldridge\"}) return properties(v).age;"
    },
    {
        "用户": "创建一个名为TAG的标签，标签包含一个姓名属性。",
        "查询": "CREATE TAG TAG(name string)"
    },
    {
        "用户": "Obtain the name and age of the player named 'Boris Diaw' and return a Boolean value indicating whether the player's age is greater than 30.",
        "查询": "FETCH PROP ON player 'Boris Diaw' YIELD player.name, player.age, player.age > 30"
    },
    {
        "用户": "查找名为'LaMarcus Aldridge'的球员的年龄属性并返回。",
        "查询": "match (v:player{name:\"LaMarcus Aldridge\"}) return properties(v).age;"
    },
    {
        "用户": "Please create an edge to represent the start and end years of the service.",
        "查询": "CREATE EDGE serve(start_year int, end_year int)"
    },
    {
        "用户": "Find entities served or liked by a player named 'Tracy McGrady' with a maximum distance of 1, and return these relationships and entities.",
        "查询": "MATCH (:player{name:\"Tracy McGrady\"})-[e:serve|like*0..1]-(v)\nRETURN e, v"
    },
    {
        "用户": "请帮我获取'player100','player101','player102','player103'这些实体的年龄和姓名，并按照年龄升序、姓名降序进行排序。",
        "查询": "FETCH PROP ON player \"player100\", \"player101\", \"player102\", \"player103\"\nYIELD properties(vertex).age AS age, properties(vertex).name AS name\n| ORDER BY $-.age ASC, $-.name DESC"
    },
    {
        "用户": "Hello, please help me find the relationship between these entities and nodes. They are 'Tony Parker', 'Tim Duncan', and 'Yao Ming', and the node type is' player '. Thank you!",
        "查询": "UNWIND [\"Tony Parker\", \"Tim Duncan\", \"Yao Ming\"] AS a MATCH (v:player) WHERE v.player.name == a RETURN distinct a, v"
    },
    {
        "用户": "Find all entities associated with a player named 'Tim Duncan' and return their unique nodes.",
        "查询": "MATCH p=(v:player{name:\"Tim Duncan\"})--()\nWITH nodes(p) AS n\nUNWIND n AS n1\nRETURN DISTINCT n1"
    },
    {
        "用户": "查找名为'abc'的球员所服务的距离为1到3的所有实体，并返回它们的所有属性。",
        "查询": "MATCH (v:player{name: \"abc\"}) -[:serve*1..3]-> ()\nRETURN *"
    },
    {
        "用户": "Please insert a person node with a value of 2 into the graph database.",
        "查询": "INSERT VERTEX person(p1) VALUES \"2\":(2)"
    },
    {
        "用户": "请帮我找出'player101'所'关注'的所有实体，并返回这些实体的 ID 和关注度。",
        "查询": "$var1 = GO FROM \"player101\" OVER follow\nYIELD properties(edge).degree AS Degree, dst(edge) as ID"
    },
    {
        "用户": "Search for entities that have 2-3 preferred relationships with player 'Manu Ginobili', return their gender, relationship strength, name, age, and relationship start year, and sort them by relationship strength, name, and age, with a maximum of 5 results returned.",
        "查询": "match (src_v:player{name:\"Manu Ginobili\"})-[e:like*2..3]-(dst_v)\n  return distinct properties(src_v).sex,properties(e[0]).degree as degree,properties(dst_v).name as name,src_v.player.age AS age, e[1].start_year,dst_v.player.age\n  order by degree, name, age limit 5;"
    },
    {
        "用户": "请帮我计算1984年10月11日的日期加1后的结果。",
        "查询": "WITH date({year: 1984, month: 10, day: 11}) AS x RETURN x + 1"
    },
    {
        "用户": "Can you help me find all the edges related to 'Tim Duncan' and provide relevant information?",
        "查询": "GO 0 STEPS FROM 'Tim Duncan' OVER serve YIELD edge as e"
    },
    {
        "用户": "将名为LaMarcus Aldridge，年龄为33的球员插入到player集合中，其ID为player102。",
        "查询": "INSERT VERTEX player(name, age) VALUES \"player102\":(\"LaMarcus Aldridge\", 33)"
    },
    {
        "用户": "Obtain the relationship and endpoint information between 'Tim Duncan' liked by 'Tony Parker' and 'Tracy McGrady' liked by 'Grant Hill'.",
        "查询": "FETCH PROP ON like \"Tony Parker\"->\"Tim Duncan\", \"Grant Hill\" -> \"Tracy McGrady\" YIELD edge as relationship |\nYIELD endNode($-.relationship) AS node"
    },
    {
        "用户": "请找出关注度超过90的'player100'的实体，并告诉我这些实体的边的目标节点。",
        "查询": "GO FROM \"player100\" OVER follow\nWHERE follow.degree > 90\nYIELD dst(edge)"
    },
    {
        "用户": "查找别名为'abc'的学生实体，并返回这些实体的ID。",
        "查询": "LOOKUP ON student WHERE student.alias == \"abc\" YIELD id(vertex) as id"
    },
    {
        "用户": "Insert a player entity with ID 'player101', name 'Tony Parker', and age 36.",
        "查询": "INSERT VERTEX player(name, age) VALUES \"player101\":(\"Tony Parker\", 36)"
    },
    {
        "用户": "请帮我找出'player102'关注的所有实体，并返回这些实体之间的边。",
        "查询": "GO 2 STEPS FROM \"player102\" OVER follow YIELD dst(edge)"
    },
    {
        "用户": "Can you help me generate a random 64 bit integer in the range of 1 to 100?",
        "查询": "RETURN rand64(1,100)"
    },
    {
        "用户": "Find all the entities that Tim Duncan likes and return them.",
        "查询": "GO FROM \"Tim Duncan\" OVER like YIELD like._dst"
    },
    {
        "用户": "请问您能帮我查找一下'Boris Diaw'在效力于'Hawks'期间的起始年份、结束年份以及关系类型吗？",
        "查询": "FETCH PROP ON serve 'Boris Diaw' -> 'Hawks' YIELD serve.start_year, serve.end_year, edge as relationship"
    },
    {
        "用户": "请帮我显示第一个分区的信息。",
        "查询": "SHOW PARTS 1"
    },
    {
        "用户": "Find the names of players named 'James Harden', 'Jonathan Simmons',' Klay Thompson ',' Dejounte Murray ', and' Paul Gasol 'with age 23 or ID' James Harden '.",
        "查询": "MATCH (v)\nWHERE id(v) IN ['James Harden', 'Jonathon Simmons', 'Klay Thompson', 'Dejounte Murray', 'Paul Gasol']\n      AND (id(v) == 'James Harden' OR v.player.age == 23)\nRETURN v.player.name AS Name"
    },
    {
        "用户": "获取 'Tim Duncan' 球员的姓名和年龄。",
        "查询": "FETCH PROP ON player \"Tim Duncan\" YIELD player.name, player.age"
    },
    {
        "用户": "将'player102'关注'player100'，并设置关注度为75。",
        "查询": "INSERT EDGE follow(degree) VALUES \"player102\" -> \"player100\":(75)"
    },
    {
        "用户": "Insert a player node named 'A Loner' with an age of 0 and delete it and all its edges.",
        "查询": "INSERT VERTEX player(name, age) VALUES \"A Loner\": (\"A Loner\", 0);\nDELETE VERTEX \"A Loner\" WITH EDGE;"
    },
    {
        "用户": "寻找从 'Tiago Splitter' 到 'LaMarcus Aldridge' 的最短路径，路径上包括喜欢和队友关系，并返回找到的路径信息。",
        "查询": "FIND SHORTEST PATH FROM \"Tiago Splitter\" TO \"LaMarcus Aldridge\" OVER like, teammate YIELD path as p"
    },
    {
        "用户": "找出年龄大于45岁的球员与洛杉矶湖人队有服务关系的所有实体，并返回这些实体的姓名、'hello'、喜欢程度和所属球队名称，用'@'组合姓名和所属球队名称。",
        "查询": "MATCH (a:player)-[b:serve]-(c:team{name: \"Lakers\"})\nWHERE a.player.age > 45\nRETURN concat_ws(\"@\",a.player.name, NULL, \"hello\", b.likeness, c.team.name) as result"
    },
    {
        "用户": "Hello, please help me find all entities that can be reached through all edge types (including reverse edges) starting from 'Russell Westbrook' and return the target entity IDs of these entities in the like, serve, and teammate edges.",
        "查询": "GO FROM \"Russell Westbrook\" OVER * REVERSELY YIELD like._dst, serve._dst, teammate._dst"
    },
    {
        "用户": "Find all the entities that Chris Paul likes and return their IDs.",
        "查询": "GO FROM \"Chris Paul\" OVER like YIELD like._dst"
    },
    {
        "用户": "插入两个顶点，一个顶点表示球队，名称为'Trail Blazers'，另一个顶点表示球队，名称为'Spurs'。",
        "查询": "INSERT VERTEX team(name) VALUES \"team203\":(\"Trail Blazers\"), \"team204\":(\"Spurs\")"
    },
    {
        "用户": "Delete all entities and their edges that 'Russell Westbrook' likes'.",
        "查询": "$var = GO FROM \"Russell Westbrook\" OVER like YIELD like._dst as id; DELETE VERTEX $var.id WITH EDGE"
    },
    {
        "用户": "请帮我查找年龄为25或28的所有球员，然后返回他们的姓名和年龄。",
        "查询": "LOOKUP ON player\nWHERE player.age IN [25,28]\nYIELD properties(vertex).name, properties(vertex).age"
    },
    {
        "用户": "Insert a player entity named LaMarcus Aldridge, aged 33, with an ID of player102.",
        "查询": "INSERT VERTEX player(name, age) VALUES \"player102\":(\"LaMarcus Aldridge\", 33)"
    },
    {
        "用户": "Can you help me add a 10 length index with the attribute 'teacher' on the student tab?",
        "查询": "CREATE TAG INDEX student_teacher ON student(teacher(10))"
    },
    {
        "用户": "在edge_1_ttl边上新增一个索引edge_1_ttl_index_second_degree，以degree属性为关键字，用于加速二度关系查询。",
        "查询": "CREATE EDGE INDEX edge_1_ttl_index_second_degree ON edge_1_ttl(degree)"
    },
    {
        "用户": "Please help me identify all the entities that 'player100' is interested in and return their IDs.",
        "查询": "$var = GO FROM \"player100\" OVER follow YIELD dst(edge) AS id"
    },
    {
        "用户": "您好，请帮我找出所有起始年份为2016且权重为1的关系，最多返回1000条。",
        "查询": "match ()-[e]->()\nwhere abs(rank(e)) == 1 and e.start_year == 2016\nRETURN e\nlimit 1000"
    },
    {
        "用户": "插入一个id为'player101'，名为'Tony Parker'，年龄为 36 的球员实体。",
        "查询": "INSERT VERTEX player(name, age) VALUES \"player101\":(\"Tony Parker\", 36)"
    },
    {
        "用户": "Can you help me find the names of the first three people?",
        "查询": "MATCH (v)\nRETURN v.person.name LIMIT 3"
    },
    {
        "用户": "Find the gender and age attributes of a player known as LaMarcus Aldridge.",
        "查询": "match (v:player) where properties(v).name==\"LaMarcus Aldridge\" return v.player.sex,properties(v).age;"
    },
    {
        "用户": "删除实体'player111'和'team203'。",
        "查询": "DELETE VERTEX \"player111\", \"team203\""
    },
    {
        "用户": "请问您能帮我查找一下，与'Tim Duncan'之间距离为2或3的所有'serve'关系以及对应的终点实体吗？",
        "查询": "MATCH (n)-[e:serve*2..3]->(v)\nWHERE id(n) == \"Tim Duncan\"\nRETURN e, v"
    },
    {
        "用户": "请帮我创建一个名为player的标签。",
        "查询": "SHOW CREATE TAG player"
    },
    {
        "用户": "创建一条从 'Tom' 到 'Conan' 的 '喜欢' 边，边权为 100。",
        "查询": "INSERT EDGE like(likeness) VALUES \"Tom\"->\"Conan\":(100)"
    },
    {
        "用户": "您好，请帮我获取'Boris Diaw'这个实体的所有属性，并将其作为节点返回。",
        "查询": "FETCH PROP ON * 'Boris Diaw' YIELD vertex as node"
    },
    {
        "用户": "If edge e1 does not exist, can you help me create an edge of e1 and set the property p1 of edge e1 to an integer type?",
        "查询": "CREATE EDGE IF NOT EXISTS e1(p1 int)"
    },
    {
        "用户": "返回所有球员的姓名和年龄，并按照姓名降序排列。",
        "查询": "MATCH (v:player) RETURN v.player.name AS Name, v.player.age AS Age\nORDER BY Name DESC"
    },
    {
        "用户": "Can you help me find the entities and their relationship types related to 'LeBron James'? Alternatively, return the name of the entity or 'abc'.",
        "查询": "MATCH (v1:player{name: \"LeBron James\"}) -[r]-> (v2)\nRETURN type(r) AS Type, CASE WHEN v2.tea.name IS NOT NULL THEN v2.tea.name WHEN v2.playe.name IS NOT NULL THEN v2.playe.name ELSE \"abc\" END AS Name"
    },
    {
        "用户": "Find all 1-3 degree friends of a player named 'Tim Duncan' and return their information.",
        "查询": "MATCH p=(v:player{name:\"Tim Duncan\"})-[e:follow*1..3]->(v2)\nRETURN v2 AS Friends"
    },
    {
        "用户": "Please use<your_ Graph_ Map space helps me.",
        "查询": "USE <your_graph_space>"
    },
    {
        "用户": "找出ID为player101的球员所关注的球员，并按关注人数从多到少排序，返回球员的姓名和关注人数。",
        "查询": "MATCH (v1:player)-[:follow]-(v2:player)\nWHERE id(v1)== \"player101\"\nRETURN v2.player.name AS Name, count(*) as cnt ORDER BY cnt DESC"
    },
    {
        "用户": "您能展示一下标签的索引信息吗？",
        "查询": "SHOW TAG INDEXES"
    },
    {
        "用户": "在t1类型中查找col1小于等于2且col8小于等于'banana'的所有实体，并返回这些实体的ID。",
        "查询": "LOOKUP ON t1 WHERE t1.col1 <= 2 AND t1.col8 <= \"banana\" YIELD id(vertex) as id"
    },
    {
        "用户": "找出Tim Duncan所服务过的球队及起始年份，以及Tony Parker所服务过的球队及起始年份，并将两者结果去重合并。",
        "查询": "(GO FROM \"Tim Duncan\" OVER like YIELD like._dst as id |\n   GO FROM $-.id OVER serve YIELD $^.player.name, serve.start_year, $$.team.name)\nUNION DISTINCT\nGO FROM \"Tony Parker\" OVER serve YIELD $^.player.name, serve.start_year, $$.team.name"
    },
    {
        "用户": "Create a label named TAG with name attributes",
        "查询": "CREATE TAG `TAG` (name string)"
    },
    {
        "用户": "查找e1类型中col1为1且col3为false的所有边，返回这些边的源节点和目标节点。",
        "查询": "LOOKUP ON e1 WHERE e1.col1 == 1 AND e1.col3 == false YIELD src(edge) as src, dst(edge) as dst"
    },
    {
        "用户": "找出名为'Tim Duncan'的球员所关联的所有实体，并按照年龄降序排列，跳过第一个结果，返回结果中的实体名称和年龄。",
        "查询": "MATCH (v:player{name:\"Tim Duncan\"}) --> (v2)\nRETURN v2.player.name AS Name, v2.player.age AS Age\nORDER BY Age DESC SKIP 1"
    },
    {
        "用户": "Returns some Boolean values indicating whether 'apple' ends with 'app', 'e', 'E', or 'b'.",
        "查询": "RETURN'apple'ENDS WITH'app','apple'ENDS WITH'e','apple'ENDS WITH'E','apple'ENDS WITH'b'"
    },
    {
        "用户": "Starting from 'Tim Duncan', follow the 'like' relationship to find all paths of 'Tony Parker' or 'LaMarcus Aldridge', up to a maximum of 3 steps, and return these paths.",
        "查询": "FIND ALL PATH FROM \"Tim Duncan\" TO \"Tony Parker\", \"LaMarcus Aldridge\" OVER like UPTO 3 STEPS YIELD path as p"
    },
    {
        "用户": "得了风湿病推荐吃什么食物？",
        "查询": "GO FROM \"风湿病\" OVER recommend_eat YIELD dst(edge);"
    },
    {
        "用户": "展开数组[1,2,3]并返回每个元素。",
        "查询": "UNWIND [1,2,3] AS n RETURN n"
    },
    {
        "用户": "Hello, could you please help me find a subgraph starting from 'Tim Duncan'? At most, only one result is needed.",
        "查询": "GET SUBGRAPH WITH PROP FROM 'Tim Duncan' | LIMIT 1"
    },
    {
        "用户": "如果没有only_point标签，能否创建一个包含地理位置信息的标签呢？",
        "查询": "CREATE TAG IF NOT EXISTS only_point(geo geography(point))"
    },
    {
        "用户": "请将'player102'关注'player100'，并将关注度设置为75。",
        "查询": "INSERT EDGE follow(degree) VALUES \"player102\" -> \"player100\":(75)"
    },
    {
        "用户": "查找 'Tracy McGrady' 所 '喜欢' 的所有实体，返回这些实体的 ID。",
        "查询": "GO FROM \"Tracy McGrady\" OVER like YIELD like._dst"
    },
    {
        "用户": "您好，请帮我找到一个包含键值对{k1:1, k2:true}的对象，我需要获取k1对应的值。",
        "查询": "RETURN {k1 : 1, k2: true}.k1 AS k"
    },
    {
        "用户": "您好，请帮我查找一下t1类型中col4为‘banana’且col3为真的所有实体的ID，可以吗？",
        "查询": "LOOKUP ON t1 WHERE t1.col4 == \"banana\" AND t1.col3 == true YIELD id(vertex) as id"
    },
    {
        "用户": "请帮我找出以'player100'为起点，通过'follow'关系连接的实体，并返回这些实体的'Team'和'Player'属性。",
        "查询": "GO FROM \"player100\" OVER follow YIELD dst(edge) AS id |\nGO FROM $-.id OVER serve YIELD properties($$).name AS Team,\nproperties($^).name AS Player"
    },
    {
        "用户": "返回空值的立方根、指数和以2为底的指数。",
        "查询": "RETURN cbrt(NULL) AS value1, exp(NULL) AS value4, exp2(NULL) AS value5"
    },
    {
        "用户": "Find all paths from 'player100' to 'team204' and return these paths.",
        "查询": "FIND ALL PATH FROM \"player100\" TO \"team204\" OVER * WHERE follow.degree is EMPTY or follow.degree >=0 YIELD path AS p"
    },
    {
        "用户": "请问您能帮我找出从 'Tim Duncan' 到 'Tony Parker' 之间通过喜欢关系连接的最短路径吗？",
        "查询": "FIND SHORTEST PATH FROM \"Tim Duncan\" TO \"Tony Parker\" OVER like YIELD path as p"
    },
    {
        "用户": "请帮我使用test图空间。",
        "查询": "USE test"
    },
    {
        "用户": "查找球员Manu Ginobili的关系，返回他的年龄、关系的度数、关系的终点实体名字、性别、关系开始年份和终点实体的年龄，按名字排序并限制返回前三个结果。",
        "查询": "match (src_v:player{name:\"Manu Ginobili\"})-[e]-(dst_v)\n  return properties(src_v).age,properties(e).degree,properties(dst_v).name AS name,src_v.player.sex,e.start_year,dst_v.player.age\n  order by name limit 3;"
    },
    {
        "用户": "查找名为'Tracy McGrady'的球员在2000年之后所效力的所有球队及其相关信息。",
        "查询": "MATCH (:player{name:\"Tracy McGrady\"})-[e:serve*0..1{start_year: 2000}]-(v)\nRETURN e, v"
    },
    {
        "用户": "找出 'Tony Parker' 喜欢的实体，但不包括喜欢程度为95、56、21的实体，并返回这些实体的名称和喜欢程度。",
        "查询": "GO FROM 'Tony Parker' OVER like\nWHERE like.likeness NOT IN [95,56,21]\nYIELD $$.player.name, like.likeness"
    },
    {
        "用户": "Please identify all entities and relationships with a focus greater than 90 and an age greater than 30, starting from 'player101' and following a two-step relationship.",
        "查询": "GET SUBGRAPH WITH PROP 2 STEPS FROM \"player101\"\nWHERE follow.degree > 90 AND $$.player.age > 30\nYIELD VERTICES AS nodes, EDGES AS relationships"
    },
    {
        "用户": "请问您能帮我找出与'Tim Duncan'相关的所有实体，并提供它们的边终点信息吗？",
        "查询": "GO FROM 'Tim Duncan' OVER * YIELD dst(edge) as dst"
    },
    {
        "用户": "统计与 'Tim Duncan' 有 '喜欢' 关系的球员所在的球队数量。",
        "查询": "MATCH (v1)-[:like]->(v2:player)-[:serve]->(v3)\nWHERE id(v2) == 'Tim Duncan'\nRETURN COUNT(*)"
    },
    {
        "用户": "Hello, please help me obtain all the attributes of the entity 'Boris Diaw' and return it as a node.",
        "查询": "FETCH PROP ON * 'Boris Diaw' YIELD vertex as node"
    },
    {
        "用户": "Hello, please help me find the relationship between Yao Ming and Danny Green. It is required to be a path with a null or similarity greater than or equal to 80, with a maximum of 3 steps, and return these paths to me.",
        "查询": "FIND ALL PATH WITH PROP FROM \"Yao Ming\" TO \"Danny Green\" OVER * BIDIRECT\nWHERE like.likeness is  EMPTY OR like.likeness >= 80 UPTO 3 STEPS YIELD path as p"
    },
    {
        "用户": "获取从'player100'到'team204'和从'player133'到'team202'的所有关系边，并返回这些边。",
        "查询": "FETCH PROP ON serve \"player100\" -> \"team204\", \"player133\" -> \"team202\" YIELD edge AS e"
    },
    {
        "用户": "Identify entities that are connected to 'Tim Duncan' through a 'service' or 'like' relationship and have a liking level of 90, and return these relationships and entities.",
        "查询": "MATCH (n)-[e:serve|like*2..3{likeness: 90}]->(v)\nWHERE id(n) == \"Tim Duncan\"\nRETURN e, v"
    },
    {
        "用户": "将实体'player102'关注实体'player100'，并设置关注度为75。",
        "查询": "INSERT EDGE follow(degree) VALUES \"player102\" -> \"player100\":(75)"
    },
    {
        "用户": "Establish a service relationship between 'player100' and 'team204', starting in 1990 and ending in 2018, with an edge weight of @ 2.",
        "查询": "insert edge serve(start_year,end_year)\nvalues \"player100\"->\"team204\"@2:(1990, 2018)"
    },
    {
        "用户": "找出名为'Tim Duncan'的球员所连接的所有实体，并返回这些实体。",
        "查询": "MATCH (v:player{name:\"Tim Duncan\"}) -[*0]-> (v2)\nRETURN v2"
    },
    {
        "用户": "Hello, please help me obtain all the attributes of the 'Boris Diaw' entity and return the nodes of that entity.",
        "查询": "FETCH PROP ON player 'Boris Diaw' YIELD vertex as node"
    },
    {
        "用户": "Obtain the name and age attributes of the 'Tony Parker' player.",
        "查询": "FETCH PROP ON player \"Tony Parker\" YIELD player.name, player.age"
    },
    {
        "用户": "Find all players whose names do not end with 'R' and return their names and ages.",
        "查询": "MATCH (v:player)\nWHERE NOT v.player.name ENDS WITH \"R\"\nRETURN v.player.name, v.player.age"
    },
    {
        "用户": "If it does not exist, insert a 'like' edge from 'Tom' to 'Conan' with an edge weight of 10.",
        "查询": "INSERT EDGE IF NOT EXISTS like(likeness) VALUES \"Tom\"->\"Conan\":(10)"
    },
    {
        "用户": "Please help me insert a player entity named 'Tim Duncan', aged 42, with an ID of 'player100'.",
        "查询": "INSERT VERTEX player(name, age) VALUES \"player100\":(\"Tim Duncan\", 42)"
    },
    {
        "用户": "返回所有球员中年龄最大的球员的年龄。",
        "查询": "MATCH (v:player) RETURN max(v.player.age)"
    },
    {
        "用户": "Starting from 'Tony Parker', heading towards the entities of 'teammates' and' services', along the 'like' edges, find a subgraph with a distance of 5, and return the nodes and edges in the subgraph.",
        "查询": "GET SUBGRAPH WITH PROP 5 steps from 'Tony Parker' IN teammate OUT serve BOTH like YIELD VERTICES as nodes, EDGES as relationships"
    },
    {
        "用户": "Hello, please help me obtain all the attributes of the entity 'Boris Diaw' and return it as a node.",
        "查询": "FETCH PROP ON * 'Boris Diaw' YIELD vertex as node"
    },
    {
        "用户": "Hello, could you help me find the IDs of those students? Their teacher names must be greater than 'a'.",
        "查询": "LOOKUP ON student WHERE student.teacher > \"a\" YIELD id(vertex) as id"
    },
    {
        "用户": "Hello, please help me obtain all the attributes of the entity 'Boris Diaw' and return it as a node.",
        "查询": "FETCH PROP ON * 'Boris Diaw' YIELD vertex as node"
    },
    {
        "用户": "如果没有任何形状的边存在，那么请创建一个具有地理属性的任意形状的边。",
        "查询": "CREATE EDGE IF NOT EXISTS any_shape_edge(geo geography)"
    },
    {
        "用户": "Hello, please help me find out which teams Boris Diaw has worked for since 2005, and tell me Boris Diaw's name, starting year, team name, and 123.",
        "查询": "$var = GO FROM \"Boris Diaw\" OVER serve YIELD $^.player.name as name, serve.start_year as start, $$.team.name as team;YIELD $var.*, 123 as hash WHERE $var.start > 2005"
    },
    {
        "用户": "Bidirectional search for all paths from Tim Duncan to Yao Ming, with a liking level between 80 and 90, or for teammates after 2001, up to 3 steps, and return these paths.",
        "查询": "FIND ALL PATH WITH PROP FROM \"Tim Duncan\" TO \"Yao Ming\" OVER * BIDIRECT\nWHERE (like.likeness >= 80 and like.likeness <= 90) OR (teammate.start_year is not EMPTY and teammate.start_year > 2001) UPTO 3 STEPS YIELD path as p"
    },
    {
        "用户": "嘿，你好！我需要找出所有曾经为'Thunders'提供服务的实体，然后返回它们的源节点、边上的标签、边的ID、目标节点以及目标节点的ID。你能帮我完成这个任务吗？",
        "查询": "GO FROM 'Thunders' OVER serve REVERSELY YIELD $^ as src,tags($^), id($^), id($$), $$ as dst"
    },
    {
        "用户": " 嘿，你能帮我查找一下名字里有'Tim'的球员吗？然后看看他们喜欢的人里有没有'Tony Parker'，最后告诉我这些球员的年龄好吗？",
        "查询": "LOOKUP ON player\nWHERE player.name CONTAINS 'Tim'\nYIELD player.age as age, id(vertex) as vid |\nGO FROM $-.vid OVER like REVERSELY YIELD $-.age AS age, like._dst AS dst |\nYIELD\n  any(d IN COLLECT(DISTINCT $-.dst) WHERE d=='Tony Parker') AS d,\n  $-.age as age"
    },
    {
        "用户": "您好，请帮我找出与 'Tim Duncan' 相关的实体，这些实体在 'like' 关系中的目标实体的 ID。",
        "查询": "GO 2 STEPS FROM \"Tim Duncan\" OVER like YIELD like._dst AS dst | YIELD DISTINCT $-.dst AS dst"
    },
    {
        "用户": "请帮我找到名为'Tim Duncan'的球员的所有2度关注的朋友，并告诉我这些朋友的名称。",
        "查询": "MATCH p=(v:player{name:\"Tim Duncan\"})-[e:follow*2]->(v2)\nRETURN DISTINCT v2 AS Friends"
    },
    {
        "用户": "Insert a player entity with ID 'player100', name 'Tim Duncan', and age 42.",
        "查询": "INSERT VERTEX player(name, age) VALUES \"player100\":(\"Tim Duncan\", 42)"
    },
    {
        "用户": "Identify entities related to player 'Shaquille O'Neal', return the names, ages, genders, and ages of these entities, sorted by age and name, and return only one record.",
        "查询": "match (v1)-->(v2:player)-->(v3) where v2.player.name==\"Shaquille O'Neal\"\n  return properties(v1).name,properties(v2).age as age,properties(v3).name AS name,v2.player.sex,v1.player.age\n  order by age, name limit 1;"
    },
    {
        "用户": "Hello, could you help me? I need to obtain the attributes of the edges between 'Boris Diaw' and 'Not Exist', and store the information of the source node in the variable 'a' and return it.",
        "查询": "FETCH PROP ON serve \"Boris Diaw\"->\"Not Exist\" YIELD src(edge) as a"
    },
    {
        "用户": "您好，请帮我获取'Tony Parker'和'Tim Duncan'之间的'喜欢'关系边，以及'Grant Hill'和'Tracy McGrady'之间的'喜欢'关系边，并返回所有边的关系属性。",
        "查询": "FETCH PROP ON like \"Tony Parker\"->\"Tim Duncan\", \"Grant Hill\" -> \"Tracy McGrady\" YIELD properties(edge) as properties"
    },
    {
        "用户": "Find all the entities that Chris Paul likes and return their IDs.",
        "查询": "GO FROM \"Chris Paul\" OVER like YIELD like._dst"
    },
    {
        "用户": "初潮痛经的原因是什么？",
        "查询": "LOOKUP ON disease WHERE disease.name == \"初潮痛经\" YIELD properties(vertex).cause"
    },
    {
        "用户": "Please help me find a player named 'Tim Duncan' and return the path information of all non team entities related to him.",
        "查询": "MATCH (v:player{name:\"Tim Duncan\"})-[e]->(t)\nWHERE NOT (v)-[e]->(t:team)\nRETURN (v)-->()"
    },
    {
        "用户": "请帮我计算一下0.5的正切值。",
        "查询": "RETURN tan(0.5)"
    },
    {
        "用户": "找出 'Tim Duncan' 所 '喜欢' 的所有实体，并返回这些实体的源节点ID、球员年龄、名字和喜欢程度的拼接结果。",
        "查询": "GO FROM \"Tim Duncan\" over like YIELD concat(like._src, $^.player.age, $$.player.name, like.likeness) AS A"
    },
    {
        "用户": "Please help me find out which teams a player named 'Tim Duncan' has played for and tell me the names of these teams.",
        "查询": "MATCH (v:player{name:\"Tim Duncan\"})-[e]->(t)\nWHERE (v)-[e]->(t:team)\nRETURN (v)-->()"
    },
    {
        "用户": "Find all entities of interest to 'player100' and return the target entities of their edges.",
        "查询": "$var = GO FROM \"player100\" OVER follow\nYIELD dst(edge) AS dst"
    },
    {
        "用户": "请帮我删除所有与'Tim Duncan'有关的团队标签。",
        "查询": "GO FROM \"Tim Duncan\" OVER serve YIELD serve._dst as id | DELETE TAG team FROM $-.id"
    },
    {
        "用户": "返回所有为'Pistons'队效力的球员的姓名。",
        "查询": "MATCH (v)-[:serve]->(t)\nWHERE id(t) == 'Pistons'\nRETURN v.player.name AS Name"
    },
    {
        "用户": "找出 'Boris Diaw' 所服务的所有球队并返回四个值，起始节点的姓名，服务关系的起始时间，终点队名以及队伍。",
        "查询": "$var = GO FROM \"Boris Diaw\" OVER serve YIELD $^.player.name as name, serve.start_year as start, $$.team.name as team;YIELD $var.team"
    },
    {
        "用户": "If a player node with the name 'Joe' exists, update its age to 31 and return the updated name and age.",
        "查询": "UPSERT VERTEX ON player \"player666\"\nSET age = 31\nWHEN name == \"Joe\"\nYIELD name AS Name, age AS Age"
    },
    {
        "用户": "找出 'Tony Parker' 喜欢的实体，再找出这些实体中喜爱程度不为95、56、21的实体，返回这些实体的名字和喜欢者的名字以及喜爱程度。",
        "查询": "$A = GO FROM 'Tony Parker' OVER like YIELD like._dst AS ID;\nGO FROM $A.ID OVER like WHERE like.likeness NOT IN [95,56,21]\nYIELD $^.player.name, $$.player.name, like.likeness"
    },
    {
        "用户": "找出与 'Dejounte Murray' 有 '喜欢' 关系的实体，返回这些实体的姓名和年龄，并按年龄降序、姓名升序排序，最多返回3个结果。",
        "查询": "MATCH (v1) -[:like]-> (v)\nWHERE id(v1) == 'Dejounte Murray'\nRETURN v.player.name AS Name, v.player.age AS Age\nORDER BY Age DESC, Name ASC\nLIMIT 3"
    },
    {
        "用户": "在tag_1标签的col5属性上创建单属性索引。",
        "查询": "CREATE TAG INDEX single_person_index2 ON tag_1(col5)"
    },
    {
        "用户": "Identify all entities over the age of 30 that have any relationship with player 'Tim Duncan' and return the relationship paths of these entities, up to a maximum of 100.",
        "查询": "MATCH p=(v:player)-[]->(n)\nWHERE id(v)==\"Tim Duncan\" and n.player.age>30\nRETURN p LIMIT 100"
    },
    {
        "用户": "高血压需要进行哪些检查？",
        "查询": "GO FROM \"高血压\" OVER need_check YIELD dst(edge);"
    },
    {
        "用户": "描述篮球运动员空间。",
        "查询": "DESCRIBE SPACE basketballplayer"
    },
    {
        "用户": "Starting from 'Tim Duncan', follow the 'like' relationship to find all paths of 'Tony Parker' or 'LaMarcus Aldridge', up to a maximum of 3 steps, and return these paths.",
        "查询": "FIND ALL PATH FROM \"Tim Duncan\" TO \"Tony Parker\", \"LaMarcus Aldridge\" OVER like UPTO 3 STEPS YIELD path as p"
    },
    {
        "用户": "Find the relationship of player Manu Ginobili, return his age, degree of relationship, end entity name of relationship, gender, start year of relationship, and age of end entity, sort by name and limit the return of the first three results.",
        "查询": "match (src_v:player{name:\"Manu Ginobili\"})-[e]-(dst_v)\n  return properties(src_v).age,properties(e).degree,properties(dst_v).name AS name,src_v.player.sex,e.start_year,dst_v.player.age\n  order by name limit 3;"
    },
    {
        "用户": "Starting from 'Tim Duncan', extend the 'like' relationship outward by 3 steps, and the returned results are limited to page 1, with 2 results per page.",
        "查询": "GO 3 STEPS FROM \"Tim Duncan\" OVER like LIMIT [1, 2, 2];"
    },
    {
        "用户": "Find the entity that Danny Green likes and return the name of the starting entity and the name of a friend.",
        "查询": "MATCH (v1) -[:like]-> (v2)\nWHERE id(v1) == \"Danny Green\"\nRETURN v1.player.name AS Name, v2.player.name AS Friend"
    },
    {
        "用户": "Find all 1-3 degree friends of a player named 'Tim Duncan' and return these friends and their numbers.",
        "查询": "MATCH p=(v:player{name:\"Tim Duncan\"})-[e:follow*1..3]->(v2:player)\nRETURN DISTINCT v2 AS Friends, count(v2)"
    },
    {
        "用户": "找出名为'Manu Ginobili'的球员，与其有两跳关系的实体，返回这些实体的性别、关系强度、姓名、年龄、关系开始年份，并按照关系强度、姓名、年龄排序，最多返回5条记录。",
        "查询": "match (src_v:player{name:\"Manu Ginobili\"})-[e*2]-(dst_v)\n  return properties(src_v).sex,properties(e[0]).degree as degree,properties(dst_v).name as name,src_v.player.age AS age, e[1].start_year,dst_v.player.age\n  order by degree, name, age limit 5;"
    },
    {
        "用户": "Find all entities that 'player100' is interested in and return the entities that these entities are interested in.",
        "查询": "GO FROM \"player100\" OVER follow\nYIELD dst(edge) AS dstid, properties($$).name AS Name |\nGO FROM $-.dstid OVER follow YIELD dst(edge)"
    },
    {
        "用户": "创建一条从 'Tom' 到 'Conan' 的 '喜欢' 边，边权为 100。",
        "查询": "INSERT EDGE like(likeness) VALUES \"Tom\"->\"Conan\":(100)"
    },
    {
        "用户": "找到名字为'LaMarcus Aldridge'的球员，返回该球员的性别和年龄属性。",
        "查询": "match (v:player) where properties(v).name==\"LaMarcus Aldridge\" return v.player.sex,properties(v).age;"
    },
    {
        "用户": "请帮我计算1984年10月11日的下一天。",
        "查询": "WITH date({year: 1984, month: 10, day: 11}) AS x RETURN x + 1"
    },
    {
        "用户": "请帮我创建一个id为'dut'的学校节点，名称为'dut'，成立时间为当前时间。",
        "查询": "INSERT VERTEX school(name, found_time) VALUES \"dut\":(\"dut\", timestamp())"
    },
    {
        "用户": "If there is no player named_ Index_ 1 label index, then create an index for a label named player with the attribute name and a length of 20.",
        "查询": "CREATE TAG INDEX IF NOT EXISTS player_index_1 ON player(name(20))"
    },
    {
        "用户": "Find the path from 'Tim Duncan' to 'Tony Parker' or 'Spurs' through a' like 'and' service 'relationship, consisting of up to 3 steps, and return the path information.",
        "查询": "FIND NOLOOP PATH FROM \"Tim Duncan\" TO \"Tony Parker\", \"Spurs\" OVER like,serve UPTO 3 STEPS YIELD path as p"
    },
    {
        "用户": "找出名为'Tim Duncan'的球员的所有二度关注的朋友，并返回这些朋友的名称。",
        "查询": "MATCH p=(v:player{name:\"Tim Duncan\"})-[e:follow*2]->(v2)\nWHERE ALL(e_ in e WHERE e_.degree > 0)\nRETURN DISTINCT v2 AS Friends"
    },
    {
        "用户": "您好，我想找到那些老师名字小于'a'的学生，并返回他们的ID，您能帮我吗？",
        "查询": "LOOKUP ON student WHERE student.teacher < \"a\" YIELD id(vertex) as id"
    },
    {
        "用户": "查找所有 'Boris Diaw' 喜欢的实体，并删除这些实体与 'Boris Diaw' 的关系。",
        "查询": "GO FROM \"Boris Diaw\" OVER like YIELD like._dst as id | DELETE VERTEX $-.id WITH EDGE"
    },
    {
        "用户": "找出 'Tim Duncan' 和 'Tony Parker' 喜欢的所有实体，并返回这些实体与他们之间的关系。",
        "查询": "YIELD {a:1, b:['Tim Duncan', 'Tony Parker'], c:'Tim Duncan'} AS a\n| YIELD $-.a.c AS b\n| UNWIND $-.b AS c\n| GO FROM $-.c OVER like YIELD edge AS e"
    },
    {
        "用户": "如果test标签不存在，则创建test标签，其中包含两个属性：p1（字符串类型）和p2（整数类型）。",
        "查询": "CREATE TAG IF NOT EXISTS test(p1 string, p2 int)"
    },
    {
        "用户": "Hello, could you please help me find a subgraph starting from 'Tim Duncan'? At most, only one result is needed.",
        "查询": "GET SUBGRAPH WITH PROP FROM 'Tim Duncan' | LIMIT 1"
    },
    {
        "用户": "Please help me display the label information of the query results.",
        "查询": "PROFILE format=\"row\" SHOW TAGS"
    },
    {
        "用户": "添加从'player101'到'player100'的关注边，并设置关注度为95。",
        "查询": "INSERT EDGE follow(degree) VALUES \"player101\" -> \"player100\":(95)"
    },
    {
        "用户": "从 'Tim Duncan' 开始，沿着 '喜欢' 的关系找到 'Tony Parker' 或 'LaMarcus Aldridge' 的所有路径，最多不超过3步，并返回这些路径。",
        "查询": "FIND ALL PATH FROM \"Tim Duncan\" TO \"Tony Parker\", \"LaMarcus Aldridge\" OVER like UPTO 3 STEPS YIELD path as p"
    },
    {
        "用户": "Please create a follow edge with a degree attribute.",
        "查询": "CREATE EDGE follow(degree int)"
    },
    {
        "用户": "如果边的起始年份为2016，且该边表示'player149'在2016年开始为'team219'服务，则更新边的结束年份加1，并返回起始年份和结束年份。",
        "查询": "UPSERT EDGE on serve\n\"player149\" -> \"team219\"\nSET end_year = end_year + 1\nWHEN start_year == 2016\nYIELD start_year, end_year"
    },
    {
        "用户": "If any_ The geo attribute on the shape does not have an index, so please help me create a file called any_ Shape_ Geo_ The index uses the s2 algorithm, with a maximum level of 30 and a maximum number of cells of 8.",
        "查询": "CREATE TAG INDEX IF NOT EXISTS any_shape_geo_index ON any_shape(geo) with (s2_max_level=30, s2_max_cells=8)"
    },
    {
        "用户": "Hello, please help me obtain the 'like' relationship edges between 'Tony Parker' and 'Tim Duncan', as well as the 'like' relationship edges between 'Grant Hill' and 'Tracy McGrady', and return the relationship attributes of all edges.",
        "查询": "FETCH PROP ON like \"Tony Parker\"->\"Tim Duncan\", \"Grant Hill\" -> \"Tracy McGrady\" YIELD properties(edge) as properties"
    },
    {
        "用户": "请帮我返回字符串'basketball_player'的前6个字符。",
        "查询": "RETURN left(\"basketball_player\",6)"
    },
    {
        "用户": "请帮我获取ID为'11'的t2实体的属性。",
        "查询": "FETCH PROP ON t2 \"11\" YIELD properties(vertex)"
    },
    {
        "用户": "Please display all the spaces in the database.",
        "查询": "SHOW SPACES"
    },
    {
        "用户": "请帮我计算一下'Tim'的哈希值除以100的余数。",
        "查询": "YIELD hash(\"Tim\") % 100"
    },
    {
        "用户": "Find the shortest path between players aged 30 and their team that does not exceed 5, and return to that path.",
        "查询": "MATCH p = shortestPath( (a:player{age:30})-[e*..5]->(b:team) )\n  WHERE length(p) == 1\n  RETURN p"
    },
    {
        "用户": "寻找名为'Tim Duncan'的球员的所有2度关注的朋友，并返回这些朋友的名称。",
        "查询": "MATCH p=(v:player{name:\"Tim Duncan\"})-[e:follow*2]->(v2)\nRETURN DISTINCT v2 AS Friends"
    },
    {
        "用户": "您好，请帮我查找一下名为'Grant Hill'的球员的姓名和年龄属性，可以吗？",
        "查询": "FETCH PROP ON player \"Grant Hill\" YIELD player.name, player.age"
    },
    {
        "用户": "If the person tag does not exist, can you help me create a person tag with attribute p1 and data type integer?",
        "查询": "CREATE TAG IF NOT EXISTS person(p1 int)"
    },
    {
        "用户": "请帮我计算反正切值为0.5。",
        "查询": "RETURN atan(0.5)"
    },
    {
        "用户": "请帮我获取'Kobe'球员的所有属性。",
        "查询": "FETCH PROP ON player \"Kobe\" YIELD properties(vertex)"
    },
    {
        "用户": "您好，请问您能帮我找到那些学生的ID吗，他们的老师名字要大于'a'。",
        "查询": "LOOKUP ON student WHERE student.teacher > \"a\" YIELD id(vertex) as id"
    },
    {
        "用户": "请帮我提交一个压缩任务。",
        "查询": "SUBMIT JOB COMPACT"
    },
    {
        "用户": "请找出'player100'关注的所有实体，并帮我返回这些实体的边的目标节点。",
        "查询": "$var = GO FROM \"player100\" OVER follow\nYIELD dst(edge) AS dst"
    },
    {
        "用户": "Create a woman tag that includes attributes such as name, email, age, gender, and timestamp. Set the expiration time to 0 and the expiration column as the timestamp.",
        "查询": "CREATE TAG woman(name string, email string, age int, gender string, row_timestamp timestamp) ttl_duration = 0, ttl_col = \"row_timestamp\";"
    },
    {
        "用户": "Find the shortest path starting from 'xxx' or 'zzz' and passing through no more than 4 'like' relationships to reach 'Manu Ginobili', 'Spurs', or' Layers', and return that path.",
        "查询": "MATCH p = shortestPath( (a)-[e:like*..4]->(b) )\n  WHERE id(b) IN ['Manu Ginobili', 'Spurs', 'Lakers'] and id(a) in ['xxx', 'zzz']\n  RETURN p"
    },
    {
        "用户": "您好，请帮我找一下以 'Tim Duncan' 为起点的子图，最多只需要一个结果。",
        "查询": "GET SUBGRAPH WITH PROP FROM 'Tim Duncan' | LIMIT 1"
    },
    {
        "用户": "Find all players with scores less than 20 and return their names.",
        "查询": "MATCH (v:player) WHERE v.player.score < 20 RETURN v.player.name AS name"
    },
    {
        "用户": "If the test tag does not exist, create a test tag that contains two attributes: p1 (string type) and p2 (integer type).",
        "查询": "CREATE TAG IF NOT EXISTS test(p1 string, p2 int)"
    },
    {
        "用户": "Please help me calculate the arctangent value to be 0.5.",
        "查询": "RETURN atan(0.5)"
    },
    {
        "用户": "创建一个名为man的标签，包含姓名、邮箱、年龄、性别和时间戳等属性，并设置过期时间为100秒，过期列为row_timestamp。",
        "查询": "CREATE TAG man(name string, email string,  age int, gender string, row_timestamp timestamp) ttl_duration = 100, ttl_col = \"row_timestamp\";"
    },
    {
        "用户": "查找名为'Tracy McGrady'的球员在2000年之后所效力过的球队，返回他们之间的关系及实体的相关信息。",
        "查询": "MATCH (:player{name:\"Tracy McGrady\"})-[e:serve*0..1{start_year: 2000}]-(v)\nRETURN e, v"
    },
    {
        "用户": "Find the entities that have a 'like' relationship with 'Dejounte Murray', sort them in descending age and ascending name order, skip the first 11 results, and return the names and ages of the next 3 entities.",
        "查询": "MATCH (v1) -[:like]-> (v)\nWHERE id(v1) == 'Dejounte Murray'\nRETURN v.player.name AS Name, v.player.age AS Age\nORDER BY Age DESC, Name ASC\nSKIP 11\nLIMIT 3"
    },
    {
        "用户": "Please identify all players associated with a player named 'Tim Duncan' and tell me their names.",
        "查询": "MATCH (v:player{name:\"Tim Duncan\"})-->(v2:player)\nRETURN v2.player.name AS Name"
    },
    {
        "用户": "Please help me find all the second followers of a player named 'Tim Duncan' and return their information to me.",
        "查询": "MATCH p=(v:player{name:\"Tim Duncan\"})-[e:follow*2]->(v2)\nRETURN DISTINCT v2 AS Friends"
    },
    {
        "用户": "请问您能帮我找一下，从 'Tim Duncan' 到 'Tony Parker' 之间通过喜欢关系相连的最短路径吗？",
        "查询": "FIND SHORTEST PATH FROM \"Tim Duncan\" TO \"Tony Parker\" OVER like YIELD path as p"
    },
    {
        "用户": "您好，请帮我查找与 'LeBron James' 相关的实体、关系类型和所属团队名称。",
        "查询": "MATCH (v1) -[r]-> (v2)\nWHERE id(v1) == \"LeBron James\"\nRETURN type(r) AS Type, v2.team.name AS Name"
    },
    {
        "用户": "Please show the designated homework<job_ Id>.",
        "查询": "SHOW JOB <job_id>"
    },
    {
        "用户": "请帮我将数组中的元素逐个展开，并将其转化为布尔类型，并返回转化后的结果。",
        "查询": "UNWIND [true, false,'true','false', NULL] AS b\nRETURN toBoolean(b) AS b"
    },
    {
        "用户": "将'player101'关注'player102'的关系插入，关注度为90。",
        "查询": "INSERT EDGE follow(degree) VALUES \"player101\" -> \"player102\":(90)"
    },
    {
        "用户": "Hello, please help me find out. Starting from 'Tim Duncan' and following the 'serve' relationship, after 10 steps, can we return the IDs of all entities?",
        "查询": "GO 10 STEPS FROM \"Tim Duncan\" OVER serve YIELD $$ as dst"
    },
    {
        "用户": "Please find all the relationships owned by a player named 'Tim Duncan' and return a list of their attributes.",
        "查询": "MATCH (v:player{name:\"Tim Duncan\"})-[e]->()\nRETURN keys(e)"
    },
    {
        "用户": "找出 'Tony Parker' 所 '喜欢' 的除 'Danny Green' 外的所有实体，并返回这些实体的名称。",
        "查询": "GO FROM 'Tony Parker' OVER like\nWHERE like._dst NOT IN {'Danny Green'}\nYIELD $$.player.name"
    },
    {
        "用户": "请帮我返回一个范围从1到5的列表中的倒数第二个元素。",
        "查询": "RETURN range(1,5)[-2]"
    },
    {
        "用户": "Please help me insert an edge indicating that 'player101' served 'team204' between 1999 and 2018, and another edge indicating that 'player102' served 'team203' between 2006 and 2015.",
        "查询": "INSERT EDGE serve(start_year, end_year) VALUES \"player101\" -> \"team204\":(1999, 2018),\"player102\" -> \"team203\":(2006, 2015)"
    },
    {
        "用户": "Please help me create an edge that represents the start and end years of the service.",
        "查询": "CREATE EDGE serve(start_year int, end_year int)"
    },
    {
        "用户": "获取'test'上所有实体的属性，并返回这些实体的顶点。",
        "查询": "FETCH PROP ON * \"test\" YIELD vertex AS v"
    },
    {
        "用户": "Could you please insert a geographic location with a polygonal shape on the vertex with ID 103?",
        "查询": "INSERT VERTEX any_shape(geo) VALUES \"103\":(ST_GeogFromText(\"POLYGON((0 1, 1 2, 2 3, 0 1))\"))"
    },
    {
        "用户": "您好，请帮我查找一下从 'Tim Duncan' 出发，沿着 'serve' 关系向外扩展两步的路径，然后返回经过的边信息好吗？",
        "查询": "GO 2 STEPS FROM \"Tim Duncan\" OVER serve YIELD edge as e"
    },
    {
        "用户": "请帮我返回列表中前三个元素。",
        "查询": "WITH list[1, 2, 3, 4, 5] AS a\nRETURN a[..3] AS r"
    },
    {
        "用户": "找出名为'Tim Duncan'的球员经过两跳'follow'关系的所有朋友，且每跳关系的degree要大于1，返回这些朋友的姓名。",
        "查询": "MATCH p=(v:player{name:\"Tim Duncan\"})-[e:follow*2]->(v2)\nWHERE e.degree > 1\nRETURN DISTINCT v2 AS Friends"
    },
    {
        "用户": "Find all entities connected by a player named 'Tim Duncan' and return these entities.",
        "查询": "MATCH (v:player{name:\"Tim Duncan\"}) -[*0]-> (v2)\nRETURN v2"
    },
    {
        "用户": "Find the age of the player named 'LaMarcus Aldridge' and return.",
        "查询": "match (v:player{name:\"LaMarcus Aldridge\"}) return v.player.age;"
    },
    {
        "用户": "Compress the image database to reduce storage space.",
        "查询": "SUBMIT JOB COMPACT;"
    },
    {
        "用户": "请问您能帮我查找一下'Tony Parker'和'Spurs'之间的'serve'关系的起始年份和结束年份吗？",
        "查询": "FETCH PROP ON serve \"Tony Parker\"->\"Spurs\" YIELD serve.start_year, serve.end_year"
    },
    {
        "用户": "Display statistical information of the current graph database.",
        "查询": "show stats;"
    },
    {
        "用户": "Hello, please help me find a subgraph starting from 'Tim Duncan' and return its attributes, but only one result is allowed.",
        "查询": "GET SUBGRAPH WITH PROP FROM 'Tim Duncan' | LIMIT 1"
    },
    {
        "用户": "Please help me identify the 2-step subgraph related to 'player101', with nodes and edges with a focus greater than 90 and a player age greater than 30.",
        "查询": "GET SUBGRAPH WITH PROP 2 STEPS FROM \"player101\"\nWHERE follow.degree > 90 AND $$.player.age > 30\nYIELD VERTICES AS nodes, EDGES AS relationships"
    },
    {
        "用户": "从 'Tony Parker' 出发，向 '队友' 和 '服务' 的实体方向，沿着 '喜欢' 的边，找出距离为 5 的子图，并返回子图中的节点和边。",
        "查询": "GET SUBGRAPH WITH PROP 5 steps from 'Tony Parker' IN teammate OUT serve BOTH like YIELD VERTICES as nodes, EDGES as relationships"
    },
    {
        "用户": "插入一条边，表示'player101'在 1999 年至 2018 年期间为'team204'服务，并插入另一条边，表示'player102'在 2006 年至 2015 年期间为'team203'服务。",
        "查询": "INSERT EDGE serve(start_year, end_year) VALUES \"player101\" -> \"team204\":(1999, 2018),\"player102\" -> \"team203\":(2006, 2015)"
    },
    {
        "用户": "请问您能帮我找一下前三个人的姓名吗？",
        "查询": "MATCH (v)\nRETURN v.person.name LIMIT 3"
    },
    {
        "用户": "Hey, can you help me? I want to traverse all edges in reverse, starting from 'Russell Westbrook', and find all source entity IDs with attributes' serve 'and' like '.",
        "查询": "GO FROM \"Russell Westbrook\" OVER * REVERSELY YIELD serve._src, like._src"
    },
    {
        "用户": "查找 'Tony Parker' 喜欢的 'Tim Duncan' 和 'Grant Hill' 喜欢的 'Tracy McGrady' 的关系及其终点节点信息。",
        "查询": "FETCH PROP ON like \"Tony Parker\"->\"Tim Duncan\", \"Grant Hill\" -> \"Tracy McGrady\" YIELD edge as relationship |\nYIELD endNode($-.relationship) AS node"
    },
    {
        "用户": "找出从Tim Duncan到Yao Ming的所有路径，路径上的关系属性需满足喜欢程度在80到90之间或者队友开始年份不为空且大于2001，最多3步，返回路径。",
        "查询": "FIND ALL PATH WITH PROP FROM \"Tim Duncan\" TO \"Yao Ming\" OVER * BIDIRECT\nWHERE (like.likeness >= 80 and like.likeness <= 90) OR (teammate.start_year is not EMPTY and teammate.start_year > 2001) UPTO 3 STEPS YIELD path as p"
    },
    {
        "用户": "您好，请帮我查找一下'Boris Diaw'这个人的所有属性中的player.name和player.age好吗？",
        "查询": "YIELD 'Boris Diaw' as id | FETCH PROP ON * $-.id yield player.name, player.age"
    },
    {
        "用户": "请找出所有不以'R'结尾的球员，并告诉我他们的姓名和年龄。",
        "查询": "MATCH (v:player)\nWHERE NOT v.player.name ENDS WITH \"R\"\nRETURN v.player.name, v.player.age"
    },
    {
        "用户": "Can you help me find information about all entities?",
        "查询": "MATCH (v) RETURN v"
    },
    {
        "用户": "请帮我将列表[1, 2, 3, 4, 5]中索引为0到10的元素作为a。",
        "查询": "RETURN list[1, 2, 3, 4, 5] [0..10] AS a"
    },
    {
        "用户": "找出 'Boris Diaw' 所在的所有球队，并返回起点姓名，起始服务时间、这些球队的名称以及球队信息。",
        "查询": "GO FROM \"Boris Diaw\" OVER serve YIELD $^.player.name as name, serve.start_year as start, $$.team.name as team | YIELD $-.team"
    },
    {
        "用户": "找出 'Tony Parker' 所 '喜欢' 的所有实体的 ID，并返回这些实体的 ID 和 'Tony Parker' 的年龄。",
        "查询": "$v1 = GO FROM \"Tony Parker\" OVER like YIELD id($$) AS dst, $^.player.age AS age"
    },
    {
        "用户": "Find all paths from Tim Duncan to Yao Ming, and the relationship attributes on the path must satisfy a liking level between 80 and 90, or the teammate's start year is not empty and greater than 2001, with a maximum of 3 steps, and return the path.",
        "查询": "FIND ALL PATH WITH PROP FROM \"Tim Duncan\" TO \"Yao Ming\" OVER * BIDIRECT\nWHERE (like.likeness >= 80 and like.likeness <= 90) OR (teammate.start_year is not EMPTY and teammate.start_year > 2001) UPTO 3 STEPS YIELD path as p"
    },
    {
        "用户": "Hello, please help me create a space called basketballplayer with 15 partitions, a replica factor of 1, and an entity ID type of a fixed length string of 30.",
        "查询": "CREATE SPACE basketballplayer(partition_num=15, replica_factor=1, vid_type=fixed_string(30))"
    },
    {
        "用户": "Find all the teams where Boris Diaw is located and return the starting name, starting service time, names of these teams, and team information.",
        "查询": "GO FROM \"Boris Diaw\" OVER serve YIELD $^.player.name as name, serve.start_year as start, $$.team.name as team | YIELD $-.team"
    },
    {
        "用户": "Identify entities related to player 'Shaquille O'Neal', return the names, ages, and names of these entities, and sort them by name, only returning the first result.",
        "查询": "match (v1)-->(v2:player)-->(v3) where v2.player.name==\"Shaquille O'Neal\"\n  return properties(v1).name,properties(v2).age as age,properties(v3).name AS name\n  order by name limit 1;"
    },
    {
        "用户": "获取 'Tony Parker' 球员的姓名和年龄属性。",
        "查询": "FETCH PROP ON player \"Tony Parker\" YIELD player.name, player.age"
    },
    {
        "用户": "请找出年龄小于21岁的球员的姓名和年龄，谢谢。",
        "查询": "MATCH (v:player)\nWHERE v[toLower(\"AGE\")] < 21\nRETURN v.player.name, v.player.age"
    },
    {
        "用户": "返回字符串'Boris'的哈希值。",
        "查询": "RETURN hash(\"Boris\")"
    },
    {
        "用户": "请帮我插入一条边，表示'player101'在 1999 年至 2018 年期间为'team204'服务，并且插入另一条边，表示'player102'在 2006 年至 2015 年期间为'team203'服务。",
        "查询": "INSERT EDGE serve(start_year, end_year) VALUES \"player101\" -> \"team204\":(1999, 2018),\"player102\" -> \"team203\":(2006, 2015)"
    },
    {
        "用户": "在student标签上新增一个索引，索引的属性为teacher，长度为10。",
        "查询": "CREATE TAG INDEX student_teacher ON student(teacher(10))"
    },
    {
        "用户": "您好，请帮我查找与 'Tim Duncan' 有 '服务' 关系的所有实体，并将它们的 ID 返回给我。",
        "查询": "YIELD \"Tim Duncan\" as vid | GO FROM $-.vid OVER serve YIELD serve._dst"
    },
    {
        "用户": "治疗心脏病需要哪些药物？",
        "查询": "GO FROM \"心脏病\" OVER recommend_drug YIELD dst(edge);"
    },
    {
        "用户": "得了胃炎的治疗方法有哪些？",
        "查询": "MATCH (n:disease{name:'胃炎'})-[e:cure_way]->(n1:cure) return n1.cure.name"
    },
    {
        "用户": "Returns the month with the date '2021 July 19'.",
        "查询": "RETURN date(\"2021-07-19\").month AS month"
    },
    {
        "用户": "找出 'Russell Westbrook' 所 '效力' 和 '喜欢' 的所有实体之间的关系，并返回这些关系边。",
        "查询": "GO FROM 'Russell Westbrook' OVER serve, like YIELD edge as e"
    },
    {
        "用户": "创建一条名为follow的边，该边具有一个名为degree的属性。",
        "查询": "CREATE EDGE follow(degree int)"
    },
    {
        "用户": "在ttl_tag06标签下插入一个包含a和b属性值为now()的顶点，顶点ID为10。",
        "查询": "INSERT VERTEX ttl_tag06(a,b) VALUES \"10\":(now(),now());"
    },
    {
        "用户": "Please show all the partitions.",
        "查询": "SHOW PARTS"
    },
    {
        "用户": "Find all entities that Tony Parker likes with a 'liking level' of not 95, 56, or 21, and return the names and 'liking level' of these entities.",
        "查询": "GO FROM 'Tony Parker' OVER like\nWHERE like.likeness NOT IN {95,56,21}\nYIELD $$.player.name, like.likeness"
    },
    {
        "用户": "您好，请帮我找一下t1类型中col1属性值为‘羊🐏’的实体，然后把它们的ID给我。谢谢！",
        "查询": "LOOKUP ON t1 WHERE t1.col1 == \"羊🐏\" YIELD id(vertex) as id"
    },
    {
        "用户": "Find the shortest path from 'player102' to 'team204' and return it.",
        "查询": "FIND SHORTEST PATH FROM \"player102\" TO \"team204\" OVER * YIELD path AS p"
    },
    {
        "用户": "找出与 'Tim Duncan' 有 '喜欢' 关系，且喜欢程度为90，相距2或3的所有实体及关系。",
        "查询": "MATCH (n)-[e:like*2..3{likeness: 90}]-(v)\nWHERE id(n) == \"Tim Duncan\"\nRETURN e, v"
    },
    {
        "用户": "请问您能帮我查找前三个人的姓名吗？",
        "查询": "MATCH (v)\nRETURN v.person.name LIMIT 3"
    },
    {
        "用户": "Create a label called player, containing two attributes: name and age.",
        "查询": "CREATE TAG player(name string, age int)"
    },
    {
        "用户": "If no edges of any shape exist, create an edge of any shape with geographical attributes.",
        "查询": "CREATE EDGE IF NOT EXISTS any_shape_edge(geo geography)"
    },
    {
        "用户": "从 'Tim Duncan' 出发，沿着 '喜欢' 关系，向两个方向遍历4步，返回遍历到的所有实体和边。",
        "查询": "GET SUBGRAPH 4 steps from 'Tim Duncan' BOTH like YIELD vertices as a, edges as b"
    },
    {
        "用户": "Could you please introduce the different roles of basketball players.",
        "查询": "SHOW ROLES in basketballplayer"
    },
    {
        "用户": "Identify all entities and relationships that have a 'like' relationship with 'Tim Duncan', with a liking level of 90 and a distance of 2 or 3.",
        "查询": "MATCH (n)-[e:like*2..3{likeness: 90}]-(v)\nWHERE id(n) == \"Tim Duncan\"\nRETURN e, v"
    },
    {
        "用户": "返回1加1的结果和一个介于1到5之间的随机数。",
        "查询": "RETURN 1+1, rand32(1, 5)"
    },
    {
        "用户": "Find all the entities that 'Russell Westbrook' likes and return their IDs.",
        "查询": "GO FROM \"Russell Westbrook\" OVER like YIELD like._dst"
    },
    {
        "用户": "Returns the edge attributes between 'Tim Duncan' liked by 'Tony Parker' and 'Tracy McGrady' liked by 'Grant Hill'.",
        "查询": "FETCH PROP ON like \"Tony Parker\"->\"Tim Duncan\", \"Grant Hill\" -> \"Tracy McGrady\" YIELD properties(edge) as properties"
    },
    {
        "用户": "您能帮我返回当前的日期和时间吗？",
        "查询": "RETURN datetime()"
    },
    {
        "用户": "删除顶点为'team1'的实体，并删除与之相关的边。",
        "查询": "DELETE VERTEX \"team1\" WITH EDGE"
    },
    {
        "用户": "请帮我返回所有球员的年龄和姓名，并按照年龄降序、姓名升序排序。",
        "查询": "MATCH (v:player) RETURN v.player.age AS Age, v.player.name AS Name\nORDER BY Age DESC, Name ASC"
    },
    {
        "用户": "帮我新建一个名为ttl_tag01的标签，里面有两个属性a和b。请将属性a的过期时间设置为5秒，并将过期列设为a。",
        "查询": "CREATE TAG ttl_tag01(a int, b int) ttl_duration=5, ttl_col=\"a\";"
    },
    {
        "用户": "Find all edges of type e1 with col1 being 1 and col3 being false, and return the source and target nodes of these edges.",
        "查询": "LOOKUP ON e1 WHERE e1.col1 == 1 AND e1.col3 == false YIELD src(edge) as src, dst(edge) as dst"
    },
    {
        "用户": "Hello, please help me create an index with a length of 10 on the student tab, with the attribute name teacher. “",
        "查询": "CREATE TAG INDEX student_teacher ON student(teacher(10))"
    },
    {
        "用户": "我想创建一个名为basketballplayer的空间，里面有10个分区，每个分区都有1个副本。实体ID的类型是30个固定长度的字符串。",
        "查询": "CREATE SPACE basketballplayer\n(partition_num = 10,\nreplica_factor = 1,\nvid_type = FIXED_STRING(30))"
    },
    {
        "用户": "Please help me identify all the entities that 'player100' is following and tell me the names and ages of these entities.",
        "查询": "GO FROM \"player100\" OVER follow\nYIELD properties($$).name AS Friend, properties($$).age AS Age"
    },
    {
        "用户": "Find the rank of source nodes, target nodes, and edges with an intimacy of less than 39 in all 'like' relationships.",
        "查询": "LOOKUP ON like where like.likeness < 39 YIELD src(edge) as src, dst(edge) as dst, rank(edge) as rank"
    },
    {
        "用户": "找出名为'Tim Duncan'的球员所关注的所有实体，并返回这些实体作为他的朋友。",
        "查询": "MATCH p=(v:player{name:\"Tim Duncan\"})-[e:follow*1..]->(v2)\nRETURN v2 AS Friends"
    },
    {
        "用户": "Find the shortest path from player 'Tim Duncan' to player 'Tony Parker' and return the relationship and node information on the path.",
        "查询": "MATCH p = shortestPath( (a:player{name:\"Tim Duncan\"})-[e*..5]-(b:player{name:\"Tony Parker\"}) )  RETURN e, p"
    },
    {
        "用户": "Obtain the attributes of all entities in the 'test' graph and return the vertices of these entities.",
        "查询": "FETCH PROP ON * \"test\" YIELD vertex AS v"
    },
    {
        "用户": "Can you help me update the 'teacher' attribute of a student named 'Alen' to 'Bob'?",
        "查询": "UPDATE VERTEX ON student \"Alen\" SET teacher = \"Bob\""
    },
    {
        "用户": "Calculate the hash value of the number 123.0 and return it.",
        "查询": "YIELD hash(123.0)"
    },
    {
        "用户": "更新球员实体'player100'的姓名为'Tim'。",
        "查询": "UPDATE VERTEX \"player100\" SET player.name = \"Tim\""
    },
    {
        "用户": "查找 'Russell Westbrook' 所 '喜欢' 的所有实体，并返回这些实体。",
        "查询": "GO FROM \"Russell Westbrook\" OVER like YIELD like._dst"
    },
    {
        "用户": "Find all entities that Tony Parker likes with a liking level of not 95, 56, or 21, and return the names and liking levels of these entities.",
        "查询": "GO FROM 'Tony Parker' OVER like\nWHERE like.likeness NOT IN [95,56,21]\nYIELD $$.player.name, like.likeness"
    },
    {
        "用户": "获取 'Tim Duncan' 球员的姓名和年龄。",
        "查询": "FETCH PROP ON player \"Tim Duncan\" YIELD player.name, player.age"
    },
    {
        "用户": "Obtain the name and age attributes of the 'Tony Parker' player.",
        "查询": "FETCH PROP ON player \"Tony Parker\" YIELD player.name, player.age"
    },
    {
        "用户": "获取 'Tony Parker' 球员的姓名和年龄属性。",
        "查询": "FETCH PROP ON player \"Tony Parker\" YIELD player.name, player.age"
    },
    {
        "用户": "Can you help me count the number of nodes with edges between two nodes?",
        "查询": "MATCH () --> (v) --> () RETURN count(*)"
    },
    {
        "用户": "您好，请帮我找出所有起始年份为2020且边重为1的关系，最多返回1000条。",
        "查询": "match ()-[e]->()\nwhere abs(rank(e)) == 1 and e.start_year == 2020\nRETURN e\nlimit 1000"
    },
    {
        "用户": "您好，请帮我返回两个ID，一个是1，另一个是2。",
        "查询": "YIELD 1 AS id, 2 AS id"
    },
    {
        "用户": "Find the shortest path from 'Tim Duncan' and 'Tiago Splitter' to 'Tony Parker' and 'Spurs', which is connected by a' like 'and' service 'relationship. Go through a maximum of 5 steps and return the found path information.",
        "查询": "FIND SHORTEST PATH FROM \"Tim Duncan\", \"Tiago Splitter\" TO \"Tony Parker\", \"Spurs\" OVER like,serve UPTO 5 STEPS YIELD path as p"
    },
    {
        "用户": "Please help me delete all team tags related to 'Tim Duncan'.",
        "查询": "$var = GO FROM \"Tim Duncan\" OVER serve YIELD serve._dst as id; DELETE TAG team FROM $var.id"
    },
    {
        "用户": "Hello, please help me find all the attributes of 'Boris Diaw', including ID, age attribute, and entity itself.",
        "查询": "FETCH PROP ON * 'Boris Diaw' YIELD id(vertex), player.age, vertex as node"
    },
    {
        "用户": "请找出球员名为'Tim Duncan'的实体，或者年龄小于30且名字为'Yao Ming'的实体，或者名字既不是'Yao Ming'也不是'Tim Duncan'的实体，并告诉我它们的名字和年龄。",
        "查询": "MATCH (v:player)\nWHERE v.player.name == \"Tim Duncan\"\nXOR (v.player.age < 30 AND v.player.name == \"Yao Ming\")\nOR NOT (v.player.name == \"Yao Ming\" OR v.player.name == \"Tim Duncan\")\nRETURN v.player.name, v.player.age"
    },
    {
        "用户": "Bidirectional search for all paths from Tim Duncan to Yao Ming, with a liking level between 80 and 90, or for teammates after 2001, up to 3 steps, and return these paths.",
        "查询": "FIND ALL PATH WITH PROP FROM \"Tim Duncan\" TO \"Yao Ming\" OVER * BIDIRECT\nWHERE (like.likeness >= 80 and like.likeness <= 90) OR (teammate.start_year is not EMPTY and teammate.start_year > 2001) UPTO 3 STEPS YIELD path as p"
    },
    {
        "用户": "您好，请帮我查找与 'LeBron James' 相关的实体、关系类型和所属团队名称。",
        "查询": "MATCH (v1) -[r]-> (v2)\nWHERE id(v1) == \"LeBron James\"\nRETURN type(r) AS Type, v2.team.name AS Name"
    },
    {
        "用户": "Find the entity that Danny Green likes and return the name of the starting entity and the name of a friend.",
        "查询": "MATCH (v1) -[:like]-> (v2)\nWHERE id(v1) == \"Danny Green\"\nRETURN v1.player.name AS Name, v2.player.name AS Friend"
    },
    {
        "用户": "Please help me create a space called basketballplayer with 15 partitions, a replica factor of 1, and an entity ID type of fixed length string (30).",
        "查询": "CREATE SPACE basketballplayer(partition_num=15, replica_factor=1, vid_type=fixed_string(30))"
    },
    {
        "用户": "If the name of the team tag does not exceed 20 characters in length, create an index for the team tag.",
        "查询": "CREATE TAG INDEX IF NOT EXISTS team_index ON team(name(20))"
    },
    {
        "用户": "Identify all attention relationships that are one step away from entity 'A' and return the starting and ending points of these relationships.",
        "查询": "GO 1 STEPS FROM \"A\" OVER follow YIELD src(edge),dst(edge)"
    },
    {
        "用户": "Please help me find out the names and ages of all players who started playing before 2000.",
        "查询": "MATCH (v:player)-[e]->()\nWHERE e.start_year < 2000\nRETURN DISTINCT v.player.name, v.player.age"
    },
    {
        "用户": "Please help me return a variable $var, which contains two attributes f and t, assigned values of 1 and 3, respectively.",
        "查询": "$var = YIELD 1 AS f, 3 AS t"
    },
    {
        "用户": "将标签t1的TTL持续时间设置为2，TTL列设置为'p2'。",
        "查询": "ALTER TAG t1 TTL_DURATION = 2, TTL_COL = \"p2\""
    },
    {
        "用户": "获取从'player100'到'team204'的 serve 关系上的属性中的 start_year 值。",
        "查询": "FETCH PROP ON serve \"player100\" -> \"team204\"\nYIELD properties(edge).start_year"
    },
    {
        "用户": "获取'Boris Diaw'的球员的姓名、年龄，并返回该球员年龄是否大于30的布尔值。",
        "查询": "FETCH PROP ON player 'Boris Diaw' YIELD player.name, player.age, player.age > 30"
    },
    {
        "用户": "查找所有评分为888的喜欢关系，返回这些关系的起点和终点实体。",
        "查询": "LOOKUP ON like WHERE like.likeness == 888 YIELD src(edge) as src, dst(edge) as dst"
    },
    {
        "用户": "创建一条边，如果不存在则创建，边的属性包括起始年份和结束年份，默认结束年份为2010。",
        "查询": "CREATE EDGE IF NOT EXISTS serve_with_default(start_year int, end_year int DEFAULT 2010)"
    },
    {
        "用户": "Find the 2-3 hop entity served by a player named 'Yao Ming' and return the name of the original entity.",
        "查询": "MATCH (v:player {name: \"Yao Ming\"})-[:serve*2..3]->() RETURN v.player.name"
    },
    {
        "用户": "压缩图数据库，减小存储空间。",
        "查询": "SUBMIT JOB COMPACT;"
    },
    {
        "用户": "Does the returned string '384748.39' match the regular expression '  d+( .   D {2})?'.",
        "查询": "RETURN \"384748.39\" =~ \"\\\\d+(\\\\.\\\\d{2})?\""
    },
    {
        "用户": "Please help me identify all the followers of 'player100', then obtain their age, and calculate the average age and number of followers.",
        "查询": "GO FROM \"player100\" OVER follow\nYIELD dst(edge) AS ID\n| FETCH PROP ON player $-.ID\nYIELD properties(vertex).age AS Age\n| YIELD AVG($-.Age) as Avg_age, count(*)as Num_friends"
    },
    {
        "用户": "找出名为'Tim Duncan'的球员所关注或效力的所有实体，并返回这些实体。",
        "查询": "MATCH p=(v:player{name:\"Tim Duncan\"})-[e:follow|serve*2]->(v2)\nRETURN DISTINCT v2"
    },
    {
        "用户": "找出 'Tim Duncan' 喜欢的第一个 'Tony Parker' 实体。",
        "查询": "GO FROM \"Tim Duncan\" OVER like WHERE [like._dst == \"Tony Parker\"]  LIMIT [1];"
    },
    {
        "用户": "Find all entities that the player named 'Tim Duncan' likes in the second or third jump, and return quantity statistics results.",
        "查询": "MATCH (:player{name: \"Tim Duncan\"})-[e:like*2..3]-(v)\nRETURN count(v)"
    },
    {
        "用户": "请问您能帮我找出'Tim Duncan'所'服务'的所有边并提供相关信息吗？",
        "查询": "GO 0 STEPS FROM 'Tim Duncan' OVER serve YIELD edge as e"
    },
    {
        "用户": "请帮我创建一条表示服务关系的边，包括开始年份和结束年份。",
        "查询": "CREATE EDGE serve(start_year int, end_year int)"
    },
    {
        "用户": "返回所有球员的队友信息。",
        "查询": "MATCH (v:player) UNWIND (v)-[:teammate]->() AS p RETURN p"
    },
    {
        "用户": "Find the start year of all games played by a player named 'Tim Duncan', calculate the average, and return it.",
        "查询": "match (v0:player)-[e0]->(v1) where id(v0) == \"Tim Duncan\" unwind e0.start_year as a return avg(a)"
    },
    {
        "用户": "Can you help me calculate the Label_ Number of entities of type 0?",
        "查询": "match p = (v:Label_0)\nreturn count(p)"
    },
    {
        "用户": "如果不存在，则创建一个没有属性的标签。",
        "查询": "CREATE TAG IF NOT EXISTS no_property()"
    },
    {
        "用户": "Can you help me delete the label ddl_ Tag and edge ddl_ Edge?",
        "查询": "DROP TAG ddl_tag;\nDROP EDGE ddl_edge;"
    },
    {
        "用户": "您好，请帮我创建一个名为basketballplayer的空间，分区数为15，副本因子为1，实体ID类型为固定长度为30的字符串。",
        "查询": "CREATE SPACE basketballplayer(partition_num=15, replica_factor=1, vid_type=fixed_string(30))"
    },
    {
        "用户": "请将实体类型为person的节点插入图数据库，并为该节点赋予ID为1的属性值为1，谢谢。",
        "查询": "INSERT VERTEX person(p1) VALUES \"1\":(1)"
    },
    {
        "用户": "您好，请帮我获取'Boris Diaw'这个实体的所有属性，包括它的ID、'player.age'属性和实体本身。",
        "查询": "FETCH PROP ON * 'Boris Diaw' YIELD id(vertex), player.age, vertex as node"
    },
    {
        "用户": "If the test space does not exist, can you help me create a space called test, where the ID type of the entity is a fixed length string of 30?",
        "查询": "CREATE SPACE IF NOT EXISTS test (vid_type=FIXED_STRING(30))"
    },
    {
        "用户": "Find the IDs and corresponding ages of entities that Tim Duncan likes, filter out entities older than 40 years old, and return the IDs and average age of these entities plus 1.",
        "查询": "GO FROM \"Tim Duncan\" OVER like YIELD like._dst AS dst, $$.player.age AS age\n| YIELD $-.dst AS dst, 1+avg(distinct $-.age) AS age where $-.age > 40"
    },
    {
        "用户": "返回年龄最小的球员的年龄。",
        "查询": "MATCH (v:player) RETURN min(v.player.age)"
    },
    {
        "用户": "找出从 'Tim Duncan' 到 'Tony Parker' 或 'Spurs' 的最短路径，路径上包含 '喜欢' 和 '服务' 关系，最多经过 3 个步骤，并返回路径信息。",
        "查询": "FIND SHORTEST PATH FROM \"Tim Duncan\" TO \"Tony Parker\", \"Spurs\" OVER like,serve UPTO 3 STEPS YIELD path as p"
    },
    {
        "用户": "从 'Tony Parker' 出发，向 '队友' 和 '服务' 的实体方向，沿着 '喜欢' 的边，找出距离为 5 的子图，并返回子图中的节点和边。",
        "查询": "GET SUBGRAPH WITH PROP 5 steps from 'Tony Parker' IN teammate OUT serve BOTH like YIELD VERTICES as nodes, EDGES as relationships"
    },
    {
        "用户": "Find all the entities that Boris Diaw likes and return their IDs.",
        "查询": "GO FROM \"Boris Diaw\" OVER like YIELD like._dst"
    },
    {
        "用户": "Obtain the attributes of 'player100' and 'player103' and return the vertices of these attributes.",
        "查询": "FETCH PROP ON player, t1 \"player100\", \"player103\" YIELD vertex AS v"
    },
    {
        "用户": "Find entities and their relationships with a likes rating of 90 that players known as' Tracy McGrady 'like.",
        "查询": "MATCH (:player{name:\"Tracy McGrady\"})-[e:like*1{likeness: 90}]->(v)\nRETURN e, v"
    },
    {
        "用户": "描述标签player。",
        "查询": "DESCRIBE TAG player"
    },
    {
        "用户": "将'player668'和'team200'之间的'serve_with_default'边的'end_year'属性增加1，并返回'start_year'和'end_year'的值。",
        "查询": "UPSERT EDGE on serve_with_default\n\"player668\" -> \"team200\"\nSET end_year = end_year + 1\nYIELD start_year, end_year"
    },
    {
        "用户": "Please determine if 'a' is in the {a: 1, b: 2} mapping and return result a.",
        "查询": "RETURN \"a\" IN MAP{a:1, b:2} AS a"
    },
    {
        "用户": "找出所有 'Boris Diaw' 喜欢的实体，然后删除这些实体与 'Boris Diaw' 的关系。",
        "查询": "GO FROM \"Boris Diaw\" OVER like YIELD like._dst as id | DELETE VERTEX $-.id WITH EDGE"
    },
    {
        "用户": "请问您能帮我查找一下'Boris Diaw'的姓名和年龄信息吗？",
        "查询": "FETCH PROP ON * 'Boris Diaw' yield player.name, player.age"
    },
    {
        "用户": "Find all entities that Tony Parker likes with a 'liking level' of not 95, 56, or 21, and return the names and 'liking level' of these entities.",
        "查询": "GO FROM 'Tony Parker' OVER like\nWHERE like.likeness NOT IN {95,56,21}\nYIELD $$.player.name, like.likeness"
    },
    {
        "用户": "Could you please help me find the shortest path from 'Tiago Splitter' to 'LaMarcus Aldridge'? The path length should be within 5.",
        "查询": "MATCH p = shortestPath( (a:player{name:\"Tiago Splitter\"})-[e*..5]->(b:player{name:\"LaMarcus Aldridge\"}) )\n  WHERE length(p) > 2\n  RETURN  p"
    },
    {
        "用户": "Submit job statistics and return.",
        "查询": "SUBMIT JOB STATS;"
    },
    {
        "用户": "Please help me find a player named 'Tim Duncan' and find other players related to them, and tell me their names.",
        "查询": "MATCH (v:player{name:\"Tim Duncan\"})-->(v2)<--(v3)\nRETURN v3.player.name AS Name"
    },
    {
        "用户": "糖尿病应该去哪个科室就诊？",
        "查询": "GO FROM \"糖尿病\" OVER cure_department YIELD dst(edge);"
    },
    {
        "用户": "请帮我插入一个名为t5的顶点，它的属性p1是'Abe'，p2是2，p3是3，顶点ID是'001'。",
        "查询": "INSERT VERTEX t5(p1, p2, p3) VALUES \"001\":(\"Abe\", 2, 3)"
    },
    {
        "用户": "Edge_ 1_ Set the expiration time of TTL to 100 and set the column name of the expiration time to 'degree'.",
        "查询": "ALTER edge edge_1_ttl ttl_duration = 100, ttl_col = \"degree\""
    },
    {
        "用户": "请问您能帮我查找一下'Boris Diaw'在效力于'Spurs'期间的起始年份和结束年份吗？",
        "查询": "FETCH PROP ON serve \"Boris Diaw\"->\"Spurs\" YIELD serve.start_year, serve.start_year"
    },
    {
        "用户": "Can you help me identify all entities related to 'Tim Duncan' and provide their edge endpoint information?",
        "查询": "GO FROM 'Tim Duncan' OVER * YIELD dst(edge) as dst"
    },
    {
        "用户": "Identify all entities that have a 'like' relationship with 'Boris Diaw' and return the IDs of these entities.",
        "查询": "GO FROM \"Boris Diaw\" OVER like YIELD like._dst"
    },
    {
        "用户": "Clear space_ Point and edge information of space2 (if present).",
        "查询": "CLEAR SPACE IF EXISTS clear_space2;"
    },
    {
        "用户": "获取球员 'Tim Duncan' 的姓名和年龄。",
        "查询": "FETCH PROP ON player \"Tim Duncan\" YIELD player.name, player.age"
    },
    {
        "用户": "Find all students whose teacher's name is less than 'a' and return their IDs.",
        "查询": "LOOKUP ON student WHERE student.teacher < \"a\" YIELD id(vertex) as id"
    },
    {
        "用户": "Establish a 'attention' edge between entity 'player101' and entity 'player102', with an attribute of 'degree' and a value of 90.",
        "查询": "INSERT EDGE follow(degree) VALUES \"player101\" -> \"player102\":(90)"
    },
    {
        "用户": "删除顶点'team1'并删除与之相关的边。",
        "查询": "DELETE VERTEX \"team1\" WITH EDGE"
    },
    {
        "用户": "找出名为'Yao Ming'的球员所服务的距离为1到3的实体，并返回起点实体的名称。",
        "查询": "MATCH (v:player {name: \"Yao Ming\"})-[:serve*1..3]->() RETURN v.player.name"
    },
    {
        "用户": "Update the age of player 'player667' to 31 and return the updated name and age.",
        "查询": "UPSERT VERTEX ON player \"player667\"\nSET age = 31\nYIELD name AS Name, age AS Age"
    },
    {
        "用户": "获取'Boris Diaw'的球员的姓名和年龄。",
        "查询": "FETCH PROP ON player 'Boris Diaw' YIELD player.name, player.age"
    },
    {
        "用户": "Please help me create a tag called player, which contains two attributes: name and age.",
        "查询": "CREATE TAG player(name string, age int)"
    },
    {
        "用户": "找出名为'Tim Duncan'的球员的所有朋友中，与他有两跳'follow'关系且第一跳关系度数大于98的球员，并返回这些球员作为朋友。",
        "查询": "MATCH p=(v:player{name:\"Tim Duncan\"})-[e:follow*2]->(v2)\nWHERE e[0].degree > 98\nRETURN DISTINCT v2 AS Friends"
    },
    {
        "用户": "Obtain the name and age attributes of the 'Tim Duncan' player.",
        "查询": "FETCH PROP ON player \"Tim Duncan\" YIELD player.name, player.age"
    },
    {
        "用户": "描述标签man的创建语句。",
        "查询": "SHOW CREATE TAG man;"
    },
    {
        "用户": "请帮我插入一个名为'Kobe'的球员实体，并将其ID设置为'Kobe'。",
        "查询": "INSERT VERTEX player(name) VALUES \"Kobe\":(\"Kobe\")"
    },
    {
        "用户": "如果标签team不存在，则创建一个名为'team'的标签，该标签带有'name'属性。",
        "查询": "CREATE TAG IF NOT EXISTS team(name string)"
    },
    {
        "用户": "Find entities in the player set, group them by age, and count the quantity of each age, then sort them in descending order of quantity and age.",
        "查询": "LOOKUP ON player\nYIELD player.age As playerage\n| GROUP BY $-.playerage\nYIELD $-.playerage as age, count(*) AS number\n| ORDER BY $-.number DESC, $-.age DESC"
    },
    {
        "用户": "Add 1 to the start year of the 'serve' side between 'player100' and 'team204', and return the start and end years when the end year is greater than 2010.",
        "查询": "UPDATE EDGE ON serve \"player100\" -> \"team204\"@0\nSET start_year = start_year + 1\nWHEN end_year > 2010\nYIELD start_year, end_year"
    },
    {
        "用户": "Add a double type attribute named p5 to tag t1, which cannot be empty and has a default value of 0.4, for testing with annotation 'test2'.",
        "查询": "ALTER TAG t1 ADD (p5 double NOT NULL DEFAULT 0.4 COMMENT'p5') COMMENT='test2'"
    },
    {
        "用户": "Update the weight on the 'serve' edge to 0 and the relationship between 'player666' and 'team200', when 'end'_ When the value of 'year' is equal to 2010, change 'end' to 'end'_ Set the value of year to 2021 and return 'start'_ Year 'and' end_ Year '.",
        "查询": "UPSERT EDGE on serve\n\"player666\" -> \"team200\"@0\nSET end_year = 2021\nWHEN end_year == 2010\nYIELD start_year, end_year"
    },
    {
        "用户": "查找名为'Tim Duncan'的球员实体，并返回该实体的ID。",
        "查询": "LOOKUP ON player WHERE player.name == \"Tim Duncan\" YIELD id(vertex) as id"
    },
    {
        "用户": "Find the shortest path starting from 'xxx' or 'zzz' and passing through no more than 4 'like' relationships to reach 'Manu Ginobili', 'Spurs', or' Layers', and return that path.",
        "查询": "MATCH p = shortestPath( (a)-[e:like*..4]->(b) )\n  WHERE id(b) IN ['Manu Ginobili', 'Spurs', 'Lakers'] and id(a) in ['xxx', 'zzz']\n  RETURN p"
    },
    {
        "用户": "查找球员Manu Ginobili的关系，返回他的年龄、关系的度数、关系的终点实体名字、性别、关系开始年份和终点实体的年龄，按名字排序并限制返回前三个结果。",
        "查询": "match (src_v:player{name:\"Manu Ginobili\"})-[e]-(dst_v)\n  return properties(src_v).age,properties(e).degree,properties(dst_v).name AS name,src_v.player.sex,e.start_year,dst_v.player.age\n  order by name limit 3;"
    },
    {
        "用户": "查找名为'Tracy McGrady'的球员所'喜欢'的，且喜欢程度为90的实体，并返回这些实体与该球员的关系和属性信息。",
        "查询": "MATCH (:player{name:\"Tracy McGrady\"})-[e:like*0{likeness: 90}]-(v)\nRETURN e, v"
    },
    {
        "用户": "请帮我找到所有与 'Tim Duncan' 有关的球队信息，并删除这些球队的标签。",
        "查询": "GO FROM \"Tim Duncan\" OVER serve YIELD serve._dst as id | DELETE TAG team FROM $-.id"
    },
    {
        "用户": "插入一个名为 'A Loner'，年龄为 0 的球员节点，并删除该节点及其所有边。",
        "查询": "INSERT VERTEX player(name, age) VALUES \"A Loner\": (\"A Loner\", 0);\nDELETE VERTEX \"A Loner\" WITH EDGE;"
    },
    {
        "用户": "将边edge_1_ttl的过期时间列ttl_col修改为空。",
        "查询": "ALTER EDGE edge_1_ttl  ttl_col = \"\""
    },
    {
        "用户": "From 'Yao Ming' to 'Danny Green', identify all paths within a maximum of three steps that do not have a 'like' attribute or have a 'like' attribute value greater than or equal to 80, and return the starting node of these paths.",
        "查询": "FIND ALL PATH WITH PROP FROM \"Yao Ming\" TO \"Danny Green\" OVER * BIDIRECT\nWHERE like.likeness is  EMPTY OR like.likeness >= 80 UPTO 3 STEPS YIELD path as p |\nYIELD startnode($-.p) as startnode"
    },
    {
        "用户": "Hello, please help me find those players who are 40 or 20 years old and have names. I need their ID and age information.",
        "查询": "LOOKUP ON player WHERE player.age IN [40, 20] AND player.name > \"\" YIELD id(vertex) as id, player.age"
    },
    {
        "用户": "请帮我返回修剪过的字符串'basketball player'。",
        "查询": "RETURN trim(\" basketball player \")"
    },
    {
        "用户": "Please help me create a school entity with ID 'dut' and name 'dut', and the creation time is the current time.",
        "查询": "INSERT VERTEX school(name, found_time) VALUES \"dut\":(\"dut\", now())"
    },
    {
        "用户": "Please identify entities with a focus of over 90 on 'player100' and tell me the target nodes for their edges.",
        "查询": "GO FROM \"player100\" OVER follow\nWHERE follow.degree > 90\nYIELD dst(edge)"
    },
    {
        "用户": "您好，请帮我查找与 'LeBron James' 相关的实体、关系类型和所属团队名称。",
        "查询": "MATCH (v1) -[r]-> (v2)\nWHERE id(v1) == \"LeBron James\"\nRETURN type(r) AS Type, v2.team.name AS Name"
    },
    {
        "用户": "Find all entities that 'player102' and 'player100' are 'interested in' and return the target entities of their edges.",
        "查询": "GO FROM \"player102\" OVER follow YIELD dst(edge)\nUNION ALL\nGO FROM \"player100\" OVER follow YIELD dst(edge)"
    },
    {
        "用户": "找出名为'Ben Simmons'的球员所'服务'的所有关系，并返回这些关系。",
        "查询": "MATCH (v:player{name:\"Ben Simmons\"})-[e:serve]-(v2)\nRETURN e"
    },
    {
        "用户": "找出从 'Tim Duncan' 开始，通过 '喜欢' 关系最多经过三个节点能到达的所有实体路径，并按路径长度排序，返回前五条路径。",
        "查询": "$a = GO FROM \"Tim Duncan\" over * YIELD like._dst AS src, serve._src AS dst;\nFIND NOLOOP PATH FROM $a.src TO $a.dst OVER like UPTO 3 STEPS YIELD path as p |\nORDER BY $-.p | LIMIT 5"
    },
    {
        "用户": "Hello, please help me find the starting and ending points of the edges connected to '100000000', '1000000001', and '1000000002' starting from 'Tim Duncan' and through up to two 'serve' relationships.",
        "查询": "GO 1000000000 TO 1000000002 STEPS FROM \"Tim Duncan\" OVER serve YIELD dst(edge) as dst, src(edge) as src"
    },
    {
        "用户": "Can you help me find the names of the first three people?",
        "查询": "MATCH (v)\nRETURN v.person.name LIMIT 3"
    },
    {
        "用户": "请问您能帮我找一下，所有学生中，他们的老师名字的字典序是不是小于'a'的实体，并且把这些实体的ID返回给我吗？",
        "查询": "LOOKUP ON student WHERE student.teacher < \"a\" YIELD id(vertex) as id"
    },
    {
        "用户": "请帮我插入一个名为'n2'年龄为13的t2类型实体。",
        "查询": "INSERT VERTEX t2 (name, age) VALUES \"11\":(\"n2\", 13)"
    },
    {
        "用户": "找出 'Carmelo Anthony' 和 'Dwyane Wade' 所 '喜欢' 的实体，按照实体名称分组并统计数量和总和，最后按照总和和名称降序排序并返回前两个结果。",
        "查询": "GO FROM 'Carmelo Anthony', 'Dwyane Wade' OVER like\n   YIELD $$.player.name AS name\n   | GROUP BY $-.name\n     YIELD $-.name AS name,\n           SUM(1.5) AS sum,\n           COUNT(*) AS count\n      | ORDER BY $-.sum, $-.name  DESC\n      | LIMIT 2"
    },
    {
        "用户": "Find the names of all players and sort them in descending order to return the names of the first three players.",
        "查询": "MATCH (v:player)\nWITH v.player.name AS Name\nORDER BY Name DESC\nLIMIT 3\nRETURN collect(Name)"
    },
    {
        "用户": "Starting from 'Tim Duncan' and through the 'like' relationship, reach entities with a distance of 1 or 2 steps, excluding 'YAO MING'. Count the number of edges for each entity and return the number of entities with the same number of edges.",
        "查询": "GO 1 TO 2 STEPS FROM \"Tim Duncan\" OVER like WHERE like._dst != \"YAO MING\" YIELD dst(edge) AS vid\n| GROUP BY $-.vid YIELD 1 AS id\n| GROUP BY $-.id YIELD COUNT($-.id);"
    },
    {
        "用户": "向标签 student 添加一个默认值为 'abc' 的别名属性。",
        "查询": "ALTER TAG student ADD (alias string default \"abc\")"
    },
    {
        "用户": "查找学号为1的学生，返回该学生的ID和年龄。",
        "查询": "LOOKUP ON student WHERE student.number == 1 YIELD id(vertex) as name, student.age"
    },
    {
        "用户": "描述名为multi_edge_1_index的边索引。",
        "查询": "DESCRIBE EDGE INDEX multi_edge_1_index"
    },
    {
        "用户": "查找名为'Tim Duncan'的球员实体，并返回其ID。",
        "查询": "LOOKUP ON player WHERE player.name == \"Tim Duncan\" YIELD id(vertex) as id"
    },
    {
        "用户": "Can you help me find the entity with ID 'Boris Diaw'?",
        "查询": "MATCH (v) WHERE id(v) == 'Boris Diaw' RETURN (v)"
    },
    {
        "用户": "查找年龄为40的球员的姓名，然后沿着反向的‘喜欢’关系，从这些球员出发，向外扩展1到2步，返回每个实体的ID、姓名、边和起点、终点节点信息。",
        "查询": "LOOKUP ON player WHERE player.age == 40 YIELD player.name AS name |\nGO 1 TO 2 STEPS FROM $-.name OVER like REVERSELY YIELD like._dst AS dst, $$.player.name AS name, edge as e, $$ as dstnode, $^ as srcnode"
    },
    {
        "用户": "查找所有 'Boris Diaw' 喜欢的实体，并删除这些实体与 'Boris Diaw' 的关系。",
        "查询": "GO FROM \"Boris Diaw\" OVER like YIELD like._dst as id | DELETE VERTEX $-.id WITH EDGE"
    },
    {
        "用户": "获取子图，从 'Tony Parker' 出发，经过 5 步 '队友' 关系和 '服务' 关系，找到所有 '喜欢' 关系的实体和边。",
        "查询": "GET SUBGRAPH WITH PROP 5 steps from 'Tony Parker' IN teammate OUT serve BOTH like YIELD VERTICES as nodes, EDGES as relationships"
    },
    {
        "用户": "请问您能帮我找一下前三个人的姓名吗？",
        "查询": "MATCH (v)\nRETURN v.person.name LIMIT 3"
    },
    {
        "用户": "Please help me turn 'Basketball'_ Rewrite Player to uppercase.",
        "查询": "RETURN upper(\"Basketball_Player\")"
    },
    {
        "用户": "Find all the entities that Tim Duncan likes and return the concatenation results of their source node ID, player age, name, and liking level.",
        "查询": "GO FROM \"Tim Duncan\" over like YIELD concat(like._src, $^.player.age, $$.player.name, like.likeness) AS A"
    },
    {
        "用户": "从 'Tim Duncan' 出发，沿着 '喜欢' 关系走三步，返回回结果限制为第一跳自动选择1条边，第二跳选择3条边，第三跳选择2条边",
        "查询": "GO 3 STEPS FROM \"Tim Duncan\" OVER like YIELD like._dst SAMPLE [1, 3, 2];"
    },
    {
        "用户": "Hello, please help me add a player node named 'A Loner' with an age of 0, and then delete this node and all its related connections.",
        "查询": "INSERT VERTEX player(name, age) VALUES \"A Loner\": (\"A Loner\", 0);\nDELETE VERTEX \"A Loner\" WITH EDGE;"
    },
    {
        "用户": "Hello, could you please help me find out, starting with 'Tim Duncan' and extending the 'like' relationship in two directions by four steps, and then returning all entities and relationships to me?",
        "查询": "GET SUBGRAPH 4 steps from 'Tim Duncan' BOTH like YIELD VERTICES as nodes, EDGES as relationships"
    },
    {
        "用户": "Can you help me find the shortest path from 'Tim Duncan' to 'Tony Parker' through a liking relationship?",
        "查询": "FIND SHORTEST PATH FROM \"Tim Duncan\" TO \"Tony Parker\" OVER like YIELD path as p"
    },
    {
        "用户": "请帮我创建一条名为follow的边，该边具有一个名为degree的属性。",
        "查询": "CREATE EDGE follow(degree int)"
    },
    {
        "用户": "找出所有 'Boris Diaw' 所 '喜欢' 的实体，并返回这些实体的 ID。",
        "查询": "GO FROM \"Boris Diaw\" OVER like YIELD like._dst"
    },
    {
        "用户": "返回 'Tony Parker' 喜欢的 'Tim Duncan' 和 'Grant Hill' 喜欢的 'Tracy McGrady' 之间的边属性。",
        "查询": "FETCH PROP ON like \"Tony Parker\"->\"Tim Duncan\", \"Grant Hill\" -> \"Tracy McGrady\" YIELD properties(edge) as properties"
    },
    {
        "用户": "Find all 1-3 degree friends of a player named 'Tim Duncan' who have a 'follow' relationship, and return these friends and their numbers.",
        "查询": "MATCH p=(v:player{name:\"Tim Duncan\"})-[e:follow*1..3]->(v2:player)\nRETURN DISTINCT v2 AS Friends, count(v2)"
    },
    {
        "用户": "Identify all entities that players over 45 years old have a service relationship with the Los Angeles Lakers, and return the names, 'hello', likes, and team names of these entities. Use '@' to combine the names and team names.",
        "查询": "MATCH (a:player)-[b:serve]-(c:team{name: \"Lakers\"})\nWHERE a.player.age > 45\nRETURN concat_ws(\"@\",a.player.name, NULL, \"hello\", b.likeness, c.team.name) as result"
    },
    {
        "用户": "Identify entities that have a 'liking' or 'service' relationship with 'Rajon Rondo', return the attribute information of these relationships and the name, gender, and other information of related entities, and limit the number of returned results to 5.",
        "查询": "match (src_v)-[e:like|serve]->(dst_v)-[e2]-(dst_v2) where  id(src_v)==\"Rajon Rondo\" return properties(e).degree1,properties(e).degree1,e2.a,dst_v.p.name,dst_v.player.sex1,properties(src_v).name2 limit 5;"
    },
    {
        "用户": "找出 'Tracy McGrady' 所 '喜欢' 的所有实体，并返回这些实体的 ID。",
        "查询": "GO FROM \"Tracy McGrady\" OVER like YIELD like._dst"
    },
    {
        "用户": "If there is no tag named player present, please help me create a tag named player, which includes name and age attributes. The default age is 18 years old.",
        "查询": "CREATE TAG IF NOT EXISTS player(name string, age int NOT NULL DEFAULT 18)"
    },
    {
        "用户": "请帮我计算正切值为0.5。",
        "查询": "RETURN tan(0.5)"
    },
    {
        "用户": "Insert a student node named Bob, containing age, alias, name, and teacher information.",
        "查询": "INSERT VERTEX\n  student(age, alias, name, teacher)\nVALUES\n  \"Bob\" : (28, \"abc\", \"Bob\", \"Candy\")"
    },
    {
        "用户": "Please add a player named LaMarcus Aldridge, aged 33, with an ID of player102.",
        "查询": "INSERT VERTEX player(name, age) VALUES \"player102\":(\"LaMarcus Aldridge\", 33)"
    },
    {
        "用户": "获取 'Spurs' 球队的名称。",
        "查询": "FETCH PROP ON team \"Spurs\" YIELD team.name"
    },
    {
        "用户": "Search for entities that have 2-3 preferred relationships with player 'Manu Ginobili', return their gender, relationship strength, name, age, and relationship start year, and sort them by relationship strength, name, and age, with a maximum of 5 results returned.",
        "查询": "match (src_v:player{name:\"Manu Ginobili\"})-[e:like*2..3]-(dst_v)\n  return distinct properties(src_v).sex,properties(e[0]).degree as degree,properties(dst_v).name as name,src_v.player.age AS age, e[1].start_year,dst_v.player.age\n  order by degree, name, age limit 5;"
    },
    {
        "用户": "Hello, please help me obtain all the attributes of the 'Boris Diaw' entity and return the nodes of that entity.",
        "查询": "FETCH PROP ON player 'Boris Diaw' YIELD vertex as node"
    },
    {
        "用户": "Find the relationship of player Manu Ginobili, return his age, relationship strength, name and gender of the associated player, start year of the relationship, and age of the associated player, and sort them by name, with a limit of 3 results.",
        "查询": "match (src_v:player{name:\"Manu Ginobili\"})-[e]-(dst_v)\n  return properties(src_v).age,properties(e).degree,properties(dst_v).name AS name,src_v.player.sex,e.start_year,dst_v.player.age\n  order by name limit 3;"
    },
    {
        "用户": "Please help me convert the elements in the list to Boolean type and return the converted result.",
        "查询": "UNWIND [true, false,'true','false', NULL] AS b\nRETURN toBoolean(b) AS b"
    },
    {
        "用户": "Find all entities that 'player100' who are 42 years old or older are interested in and return to the endpoint",
        "查询": "GO FROM \"player100\" OVER follow\nWHERE $^.player.age >= 42\nYIELD dst(edge)"
    },
    {
        "用户": "请帮我显示边的索引。",
        "查询": "SHOW EDGE INDEXES"
    },
    {
        "用户": "Find entities with a 'like' rating of 90 for players known as' Tracy McGrady 'and return their relationship information.",
        "查询": "MATCH (:player{name:\"Tracy McGrady\"})-[e:like*0..1{likeness: 90}]->(v)\nRETURN e, v"
    },
    {
        "用户": "Hello, could you please help me find the team name and relationship type related to 'LeBron James'?",
        "查询": "MATCH (v1) -[r:serve]-> (v2)\nWHERE id(v1) == \"LeBron James\"\nRETURN type(r) AS Type, v2.team.name AS Name"
    },
    {
        "用户": "找出与名为'Tim Duncan'的球员有两跳'follow'关系且第一跳关系度数大于98的球员，并返回这些球员作为朋友。",
        "查询": "MATCH p=(v:player{name:\"Tim Duncan\"})-[e:follow*2]->(v2)\nWHERE e[0].degree > 98\nRETURN DISTINCT v2 AS Friends"
    },
    {
        "用户": "计算列表中各元素的数量，包括总数、不重复元素的数量。",
        "查询": "WITH [NULL, 1, 1, 2, 2] As a\nUNWIND a AS b\nRETURN count(b), COUNT(*), couNT(DISTINCT b)"
    },
    {
        "用户": "Obtain the properties of entity 'player100' and return.",
        "查询": "FETCH PROP ON player \"player100\" YIELD properties(vertex)"
    },
    {
        "用户": "Find the shortest path from 'Tim Duncan' to 'Tony Parker' or 'LaMarcus Aldridge', which is a liking relationship and can take up to 3 steps, and return path information.",
        "查询": "FIND SHORTEST PATH FROM \"Tim Duncan\" TO \"Tony Parker\", \"LaMarcus Aldridge\" OVER like UPTO 3 STEPS YIELD path as p"
    },
    {
        "用户": "请帮我删除所有与'Tim Duncan'有关的团队标签。",
        "查询": "GO FROM \"Tim Duncan\" OVER serve YIELD serve._dst as id | DELETE TAG team FROM $-.id"
    },
    {
        "用户": "Search for entities with a 2-3 hop 'like' relationship with player 'Manu Ginobili', return their gender, relationship strength, name, age, and relationship start year, and sort them by relationship strength, name, and age, with a maximum of 5 records returned.",
        "查询": "match (src_v:player{name:\"Manu Ginobili\"})-[e:like*2..3]-(dst_v)\n  return distinct properties(src_v).sex,properties(e[0]).degree as degree,properties(dst_v).name as name,src_v.player.age AS age, e[1].start_year,dst_v.player.age\n  order by degree, name, age limit 5;"
    },
    {
        "用户": "Could you please help me find the relationship from 'Shaquille O'Neal' to 'Manu Ginobili', 'Spurs', and' Lakers'? I need to find the shortest path that does not exceed 5 steps.",
        "查询": "FIND SHORTEST PATH FROM \"Shaquille O\\'Neal\" TO \"Manu Ginobili\", \"Spurs\", \"Lakers\" OVER * UPTO 5 STEPS YIELD path as p"
    },
    {
        "用户": "Please help me return the penultimate element in a list from 1 to 5.",
        "查询": "RETURN range(1,5)[-2]"
    },
    {
        "用户": "获取所有别名小于'b'且老师名小于'abc'的学生，并返回这些学生的ID、老师名和别名，保证结果中ID不重复。",
        "查询": "LOOKUP ON student WHERE student.alias < \"b\" and student.teacher < \"abc\" YIELD DISTINCT id(vertex) as id, student.teacher, student.alias"
    },
    {
        "用户": "查找 'Paul George' 所 '喜欢' 的所有实体，并返回这些实体的 ID。",
        "查询": "GO FROM \"Paul George\" OVER like YIELD like._dst"
    },
    {
        "用户": "Identify entities that have a 'like' relationship with 'Dejounte Murray', return the names and ages of these entities, and sort them in descending age and ascending name order, returning the top 0 results.",
        "查询": "MATCH (v1) -[:like]-> (v)\nWHERE id(v1) == 'Dejounte Murray'\nRETURN v.player.name AS Name, v.player.age AS Age\nORDER BY Age DESC, Name ASC\nLIMIT 0"
    },
    {
        "用户": "霍奇金病的治愈概率是多少？",
        "查询": "FETCH PROP ON disease \"霍奇金病\" YIELD properties(vertex).cured_prob as prob"
    },
    {
        "用户": "Can you help me find the shortest path from 'Tim Duncan' to 'Tony Parker' through a liking relationship?",
        "查询": "FIND SHORTEST PATH FROM \"Tim Duncan\" TO \"Tony Parker\" OVER like YIELD path as p"
    },
    {
        "用户": "Update the edge 'serve' between 'player666' and 'team200' to the end year of 2022. When the end year is 2010, return the start and end years.",
        "查询": "UPSERT EDGE on serve\n\"player666\" -> \"team200\"@0\nSET end_year = 2022\nWHEN end_year == 2010\nYIELD start_year, end_year"
    },
    {
        "用户": "Find the names, incorrect tags, and attributes of all entities favored by players known as' Tim Duncan '.",
        "查询": "MATCH (v:player)-[:like]->(t) WHERE v.player.name==\"Tim Duncan\" RETURN v.player.name, t.errortag.name, properties(v), t"
    },
    {
        "用户": "Find all entities served by 'player100' and return the start and end years of these entities.",
        "查询": "GO FROM \"player100\"\nOVER serve\nYIELD properties(edge).start_year, properties(edge).end_year"
    },
    {
        "用户": "找出从 'Tim Duncan' 到 'Tony Parker' 或 'Manu Ginobili' 的不重复路径，路径上的关系为 '喜欢'，最多包含3个跳，并返回路径信息。",
        "查询": "FIND NOLOOP PATH FROM \"Tim Duncan\" TO \"Tony Parker\", \"Manu Ginobili\" OVER like UPTO 3 STEPS YIELD path as p"
    },
    {
        "用户": "Please help me display all labels.",
        "查询": "SHOW TAGS"
    },
    {
        "用户": "请在边e1上插入一条关系，起点为实体1，终点为实体2，权重为1，属性为p1，属性值为11。",
        "查询": "INSERT EDGE e1(p1) VALUES \"1\"->\"2\"@1:(11)"
    },
    {
        "用户": "请帮我去除末尾空格后的字符串 basketball player\"。",
        "查询": "RETURN rtrim(\" basketball player \")"
    },
    {
        "用户": "您好，请帮我查找与节点p通过'serve'关系的节点，最多三跳深度连接的节点p。",
        "查询": "MATCH (p)-[:serve*0..3]->(t) RETURN p"
    },
    {
        "用户": "插入一个名为'Tony Parker'年龄为 36 的选手实体。",
        "查询": "INSERT VERTEX player(name, age) VALUES \"player101\":(\"Tony Parker\", 36)"
    },
    {
        "用户": "您好，我想查找一下关于 'Tim Duncan' 的信息，具体是关于他 '喜欢' 和 '服务' 的事情。能帮我找出距离为2的所有相关实体和它们之间的关系吗？",
        "查询": "GET SUBGRAPH WITH PROP 2 STEPS FROM 'Tim Duncan' IN like, serve YIELD EDGES as relationships"
    },
    {
        "用户": "Can you help me download the files in HDFS locally?",
        "查询": "SUBMIT JOB DOWNLOAD HDFS \"hdfs://<hadoop_address>:<hadoop_port>/<sst_file_path>"
    },
    {
        "用户": "Insert two vertices, test1 and test2, with attributes p1 as' 123 ', p2 as 1, test2 as' 456', and p4 as 2.",
        "查询": "INSERT VERTEX test1(p1, p2),test2(p3, p4) VALUES \"test\":(\"123\", 1, \"456\", 2)"
    },
    {
        "用户": "Find all friends of a player named 'Tim Duncan' who have a two hop 'follow' relationship with a degree greater than 1, and return the names of these friends.",
        "查询": "MATCH p=(v:player{name:\"Tim Duncan\"})-[e:follow*2]->(v2)\nWHERE e.degree > 1\nRETURN DISTINCT v2 AS Friends"
    },
    {
        "用户": "Find player entities aged 40 or older and return their ID and age information.",
        "查询": "LOOKUP ON player WHERE player.age >= 40.0 YIELD id(vertex) as name, player.age AS Age"
    },
    {
        "用户": "Find all edges of entity e1 that meet the conditions e1. col1>=1 and e1. col3>false, and return the source and target nodes of these edges.",
        "查询": "LOOKUP ON e1 WHERE e1.col1 >= 1 AND e1.col3 > false YIELD src(edge) as src, dst(edge) as dst"
    },
    {
        "用户": "Set attribute a to 'Hello' and attribute b to 100, and insert a t1 type vertex named 'player100'.",
        "查询": "INSERT VERTEX t1(a, b) VALUES \"player100\":(\"Hello\", 100)"
    },
    {
        "用户": "Find entities e1 that meet the condition e1. col1>=1 and e1. col8>'apple', and return their source and target nodes.",
        "查询": "LOOKUP ON e1 WHERE e1.col1 >= 1 AND e1.col8 > \"apple\" YIELD src(edge) as src, dst(edge) as dst"
    },
    {
        "用户": "Show all labels.",
        "查询": "SHOW TAGS"
    },
    {
        "用户": "Find all the entities that McGrady likes and return their IDs.",
        "查询": "GO FROM \"Tracy McGrady\" OVER like YIELD like._dst"
    },
    {
        "用户": "Find all players under the age of 25 and sort them in descending order of age, returning the names and ages of these players.",
        "查询": "MATCH (v:player)-->(v2:player)\nWITH DISTINCT v2 AS v2, v2.player.age AS Age\nORDER BY Age\nWHERE Age<25\nRETURN v2.player.name AS Name, Age"
    },
    {
        "用户": "Could you please help me find the relationship from 'Shaquille O'Neal' to 'Manu Ginobili', 'Spurs', and' Lakers'? I need to find the shortest path that does not exceed 5 steps.",
        "查询": "FIND SHORTEST PATH FROM \"Shaquille O\\'Neal\" TO \"Manu Ginobili\", \"Spurs\", \"Lakers\" OVER * UPTO 5 STEPS YIELD path as p"
    },
    {
        "用户": "插入一个id为'player100'，名字是'Tim Duncan'且年龄为 42 的球员实体。",
        "查询": "INSERT VERTEX player(name, age) VALUES \"player100\":(\"Tim Duncan\", 42)"
    },
    {
        "用户": "Find all students with aliases less than 'b' and teacher names less than 'abc', and return their IDs, teacher names, and aliases without duplicates.",
        "查询": "LOOKUP ON student WHERE student.alias < \"b\" and student.teacher < \"abc\" YIELD DISTINCT id(vertex) as id, student.teacher, student.alias"
    },
    {
        "用户": "Focus entity 'player101' on entity 'player102' and set the attention level to 90.",
        "查询": "INSERT EDGE follow(degree) VALUES \"player101\" -> \"player102\":(90)"
    },
    {
        "用户": "删除边索引 edge_1_ttl_index_second_start_time。",
        "查询": "DROP EDGE INDEX edge_1_ttl_index_second_start_time"
    },
    {
        "用户": "获取名为'player100'的球员的属性，并返回该球员的姓名。",
        "查询": "FETCH PROP ON player \"player100\"\nYIELD properties(vertex).name AS name"
    },
    {
        "用户": "请帮我返回一个范围从1到5的数组中的第三个元素。",
        "查询": "RETURN range(1,5)[3]"
    },
    {
        "用户": "查找所有师傅为'a'的学生，并返回这些学生的ID。",
        "查询": "LOOKUP ON student WHERE student.teacher == \"a\" YIELD id(vertex) as id"
    },
    {
        "用户": "Find the teams served by 'Tim Duncan' and 'Tony Parker', merge the results, and return the starting name, service starting year, and finishing team name.",
        "查询": "GO FROM \"Tim Duncan\" OVER serve YIELD $^.player.name, serve.start_year, $$.team.name\nUNION ALL\nGO FROM \"Tony Parker\" OVER like YIELD like._dst AS id |\n   GO FROM $-.id OVER serve YIELD $^.player.name, serve.start_year, $$.team.name"
    },
    {
        "用户": "Find all teams to which a player named 'Tim Duncan' belongs and return all physical relationships related to that player.",
        "查询": "MATCH (v:player{name:\"Tim Duncan\"})-[e]->(t) WHERE (v)-[e]->(t:team) RETURN (v)-->()"
    },
    {
        "用户": "请帮我创建一条名为follow的边，该边具有一个名为degree的属性。",
        "查询": "CREATE EDGE follow(degree int)"
    },
    {
        "用户": "您好，我想查找一下关于 'Tim Duncan' 的信息，具体是关于他 '喜欢' 和 '服务' 的事情。能帮我找出距离为2的所有相关实体和它们之间的关系吗？",
        "查询": "GET SUBGRAPH WITH PROP 2 STEPS FROM 'Tim Duncan' IN like, serve YIELD EDGES as relationships"
    },
    {
        "用户": "请展示一下所有的主机。",
        "查询": "SHOW HOSTS"
    },
    {
        "用户": "Can you help me calculate the result of subtracting negative number 1 from number 1?",
        "查询": "YIELD 1- -1"
    },
    {
        "用户": "从 'Yao Ming' 开始，找到一条最短路径，路径上包含 '喜欢' 和 '服务' 关系，直到 'Tony Parker'，最多5步，返回路径信息。",
        "查询": "$a = GO FROM \"Yao Ming\" over like YIELD like._dst AS src;\nFIND SHORTEST PATH FROM $a.src TO \"Tony Parker\" OVER like, serve UPTO 5 STEPS YIELD path as p"
    },
    {
        "用户": "Find all entities that Boris Diaw likes and delete their relationships with Boris Diaw.",
        "查询": "GO FROM \"Boris Diaw\" OVER like YIELD like._dst as id | DELETE VERTEX $-.id WITH EDGE"
    },
    {
        "用户": "Identify all entities that have been reached through a maximum of 5 steps starting from 'Tim Duncan' through the 'like' and 'service' relationships, and return the paths of these entities.",
        "查询": "GO FROM \"Tim Duncan\" over * YIELD like._dst AS src, serve._src AS dst\n| FIND SHORTEST PATH FROM $-.src TO $-.dst OVER like UPTO 5 STEPS YIELD path as p"
    },
    {
        "用户": "请帮我找到名叫'Tim Duncan'的球员的所有朋友，他们之间的关系是两跳'follow'，并且关系的度大于1，然后返回这些朋友的姓名。",
        "查询": "MATCH p=(v:player{name:\"Tim Duncan\"})-[e:follow*2]->(v2)\nWHERE e.degree > 1\nRETURN DISTINCT v2 AS Friends"
    },
    {
        "用户": "找出'player101'所'关注'的所有实体，并返回这些实体的 ID。",
        "查询": "$var = GO FROM \"player101\" OVER follow YIELD dst(edge) AS id"
    },
    {
        "用户": "Find all entities that 'player100' is interested in and return the entities that these entities are interested in.",
        "查询": "GO FROM \"player100\" OVER follow\nYIELD dst(edge) AS dstid, properties($$).name AS Name |\nGO FROM $-.dstid OVER follow YIELD dst(edge)"
    },
    {
        "用户": "请帮我找到一个日期，那个日期是公元前123年12月3日。",
        "查询": "RETURN DATE({year:-123, month:12, day:3})"
    },
    {
        "用户": "Please help me find the date with the timestamp '23333'.",
        "查询": "RETURN DATE(\"23333\")"
    },
    {
        "用户": "找出所有球员的姓名，并按照姓名降序排序，返回前三个球员的姓名。",
        "查询": "MATCH (v:player)\nWITH v.player.name AS Name\nORDER BY Name DESC\nLIMIT 3\nRETURN collect(Name)"
    },
    {
        "用户": " 您好，请帮我找一下那些年龄为40或20且有名字的球员，我需要他们的ID和年龄信息。",
        "查询": "LOOKUP ON player WHERE player.age IN [40, 20] AND player.name > \"\" YIELD id(vertex) as id, player.age"
    },
    {
        "用户": "Identify non repeating paths from 'Tim Duncan' to 'Tony Parker' or 'Manu Ginobili', with a relationship of 'like' and a maximum of 3 hops, and return path information.",
        "查询": "FIND NOLOOP PATH FROM \"Tim Duncan\" TO \"Tony Parker\", \"Manu Ginobili\" OVER like UPTO 3 STEPS YIELD path as p"
    },
    {
        "用户": "将'player668'和'team200'之间的'serve_with_default'边的'end_year'属性增加1，并返回'start_year'和'end_year'的值。",
        "查询": "UPSERT EDGE on serve_with_default\n\"player668\" -> \"team200\"\nSET end_year = end_year + 1\nYIELD start_year, end_year"
    },
    {
        "用户": "Obtain the name and age of player 'Tim Duncan'.",
        "查询": "FETCH PROP ON player \"Tim Duncan\" YIELD player.name, player.age"
    },
    {
        "用户": "Hello, could you please help me search for the entities that Tim Duncan has served since 2000, including service relationships and the entity itself? Can you traverse steps 2 to 3?",
        "查询": "MATCH (:player{name:\"Tim Duncan\"})-[e:serve*2..3{start_year: 2000}]->(v)\nRETURN e, v"
    },
    {
        "用户": "计算1和-1之间的差值作为sub的值并返回。",
        "查询": "RETURN 1- -1 AS sub"
    },
    {
        "用户": "查找 'Tracy McGrady' 所 '喜欢' 的所有实体，返回这些实体的 ID。",
        "查询": "GO FROM \"Tracy McGrady\" OVER like YIELD like._dst"
    },
    {
        "用户": "您好，请问您能帮我查找一下从 'Tim Duncan' 开始，沿着 'serve' 关系，向外经过1到10步的所有实体的 ID吗？",
        "查询": "GO 1 TO 10 STEPS FROM \"Tim Duncan\" OVER serve YIELD $$ as dst"
    },
    {
        "用户": "Please help me remove the leading spaces of the string 'basketball player' and return the result.",
        "查询": "RETURN ltrim(\" basketball player \")"
    },
    {
        "用户": "找出 'Russell Westbrook' 所 '效力' 和 '喜欢' 的所有实体之间的关系，并返回这些关系边。",
        "查询": "GO FROM 'Russell Westbrook' OVER serve, like YIELD edge as e"
    },
    {
        "用户": "Find all entities served by a player named 'abc' at a distance of 1 to 3 and return all their attributes.",
        "查询": "MATCH (v:player{name: \"abc\"}) -[:serve*1..3]-> ()\nRETURN *"
    },
    {
        "用户": "嘿，你能帮我找一下名字比'a'小的学生吗？我需要他们的ID、姓名和年龄。",
        "查询": "LOOKUP ON student WHERE student.name < \"a\" YIELD id(vertex) as id, student.name as name, student.age as age"
    },
    {
        "用户": "Find the entities and their relationships that a player named 'Tracy McGrady' likes with a distance of 0 to 1.",
        "查询": "MATCH (:player{name:\"Tracy McGrady\"})-[e:like*0..1]-(v)\nRETURN e, v"
    },
    {
        "用户": "得了戊型病毒性肝炎应该去哪个科室就诊？",
        "查询": "GO FROM \"戊型病毒性肝炎\" OVER cure_department YIELD dst(edge);"
    },
    {
        "用户": "查找所有学生中，其老师的名字小于'a'的学生，并返回这些学生的ID。",
        "查询": "LOOKUP ON student WHERE student.teacher < \"a\" YIELD id(vertex) as id"
    },
    {
        "用户": "找出 'LeBron James' 喜欢的实体，并返回实体对的路径、起点实体的球员名和终点实体的球员名。",
        "查询": "MATCH p = (n)-[:like]->(m)\nWHERE id(n) == \"LeBron James\"\nRETURN p, n.player.name, m.player.name"
    },
    {
        "用户": "请帮我找出名为'Tim Duncan'的球员所'follow'或'serve'的所有实体，并告诉我他们之间的关系。",
        "查询": "MATCH (v:player{name:\"Tim Duncan\"})-[e:follow|:serve]->(v2)\nRETURN e"
    },
    {
        "用户": "查找 'Tracy McGrady' 所 '喜欢' 的所有实体，返回这些实体的 ID。",
        "查询": "GO FROM \"Tracy McGrady\" OVER like YIELD like._dst"
    },
    {
        "用户": "Could you please help me find the start and end years of Boris Diaw's employment with 'Spurs'?",
        "查询": "FETCH PROP ON serve \"Boris Diaw\"->\"Spurs\" YIELD serve.start_year, serve.start_year"
    },
    {
        "用户": "插入一个名为 'A Loner'，年龄为 0 的球员节点，并删除该节点及其所有边。",
        "查询": "INSERT VERTEX player(name, age) VALUES \"A Loner\": (\"A Loner\", 0);\nDELETE VERTEX \"A Loner\" WITH EDGE;"
    },
    {
        "用户": "Can you help me create a program called student_ Does alias have a label index? This index is based on the alias attribute of the student tag and has a maximum length of 10.",
        "查询": "CREATE TAG INDEX student_alias ON student(alias(10))"
    },
    {
        "用户": "Please help me return the string 'basketball'_ The first 6 characters of 'player'.",
        "查询": "RETURN left(\"basketball_player\",6)"
    },
    {
        "用户": "Please find a player named 'Tim Duncan' and help me find the names of other players related to him.",
        "查询": "MATCH (v:player{name:\"Tim Duncan\"})-->()<--(v3)\nRETURN v3.player.name AS Name"
    },
    {
        "用户": "Identify all entities that have been reached through the 'follow' relationship through 1 to 2 hops starting from 'player100' and return their destinations.",
        "查询": "GO 1 TO 2 STEPS FROM \"player100\" OVER follow\nYIELD dst(edge) AS destination"
    },
    {
        "用户": "返回 'Tony Parker' 喜欢的 'Tim Duncan' 和 'Grant Hill' 喜欢的 'Tracy McGrady' 之间的边属性。",
        "查询": "FETCH PROP ON like \"Tony Parker\"->\"Tim Duncan\", \"Grant Hill\" -> \"Tracy McGrady\" YIELD properties(edge) as properties"
    },
    {
        "用户": "Find the player 'Tim Duncan' who likes' Tony Parker 'and return the name of the' Tim Duncan 'player.",
        "查询": "MATCH (v:player{name:\"Tony Parker\"})\nWITH v AS a\nMATCH p=(o:player{name:\"Tim Duncan\"})-[]->(a)\nRETURN o.player.name"
    },
    {
        "用户": "找出从 'xxx' 或 'zzz' 出发，经过不超过4个 '喜欢' 关系，到达 'Manu Ginobili'、'Spurs' 或 'Lakers' 的最短路径，并返回该路径。",
        "查询": "MATCH p = shortestPath( (a)-[e:like*..4]->(b) )\n  WHERE id(b) IN ['Manu Ginobili', 'Spurs', 'Lakers'] and id(a) in ['xxx', 'zzz']\n  RETURN p"
    },
    {
        "用户": "获取'player100'与'team204'之间的'serve'关系属性。",
        "查询": "FETCH PROP ON serve \"player100\" -> \"team204\" YIELD properties(edge)"
    },
    {
        "用户": "请展示一下所有的主机。",
        "查询": "SHOW HOSTS"
    },
    {
        "用户": "Returns the first two elements of an array [1, 2, 3].",
        "查询": "YIELD [1, 2, 3][0..1]"
    },
    {
        "用户": "您好，我想请您帮忙找一下，从 'Tony Parker' 和 'Yao Ming' 到 'Manu Ginobili'、'Spurs'、'Lakers' 中的任意一个实体，最短路径最多包含5个步骤，能给我返回一下路径信息吗？",
        "查询": "FIND SHORTEST PATH FROM \"Tony Parker\", \"Yao Ming\" TO \"Manu Ginobili\", \"Spurs\", \"Lakers\" OVER * UPTO 5 STEPS YIELD path as p"
    },
    {
        "用户": "请帮我删除'LeBron James'、'Dwyane Wade'和'Carmelo Anthony'这些实体，还有与它们相关的所有边。",
        "查询": "DELETE VERTEX \"LeBron James\", \"Dwyane Wade\", \"Carmelo Anthony\" WITH EDGE;"
    },
    {
        "用户": "显示字符集信息。",
        "查询": "SHOW CHARSET"
    },
    {
        "用户": "Find all paths from 'Tim Duncan' to 'Tony Parker' or 'LaMarcus Aldridge', with the relationship 'like' on the path, go through a maximum of three steps, and return these paths.",
        "查询": "FIND ALL PATH FROM \"Tim Duncan\" TO \"Tony Parker\", \"LaMarcus Aldridge\" OVER like UPTO 3 STEPS YIELD path as p"
    },
    {
        "用户": "嘿，你能帮我加入一个叫 Bob 的学生吗？我需要他的年龄、别名、姓名和老师信息。",
        "查询": "INSERT VERTEX\n  student(age, alias, name, teacher)\nVALUES\n  \"Bob\" : (28, \"abc\", \"Bob\", \"Candy\")"
    },
    {
        "用户": "找出 'Tony Parker' 所喜欢的实体中，'喜欢程度' 不为 95、56、21 的所有实体，并返回这些实体的名称和 '喜欢程度' 。",
        "查询": "GO FROM 'Tony Parker' OVER like\nWHERE like.likeness NOT IN {95,56,21}\nYIELD $$.player.name, like.likeness"
    },
    {
        "用户": "Update the name of 'player100' to 'Tim'.",
        "查询": "UPDATE VERTEX \"player100\" SET player.name = \"Tim\""
    },
    {
        "用户": " 请问您能帮我找一下'Boris Diaw'曾经效力过的所有球队吗？我想知道这些球队的名字。",
        "查询": "GO FROM \"Boris Diaw\" OVER serve YIELD $^.player.name as name, serve.start_year as start, $$.team.name as team | YIELD $-.team"
    },
    {
        "用户": "Hello, please help me find the IDs of all entities served by 'Tim Duncan'.",
        "查询": "GO FROM \"Tim Duncan\" OVER serve YIELD serve._dst as id"
    },
    {
        "用户": "Find the entities that 'Tony Parker' likes, and then find the entities with a liking level of not 95, 56, or 21 among these entities. Return the names of these entities, the names of their followers, and their liking level.",
        "查询": "$A = GO FROM 'Tony Parker' OVER like YIELD like._dst AS ID;\nGO FROM $A.ID OVER like WHERE like.likeness NOT IN [95,56,21]\nYIELD $^.player.name, $$.player.name, like.likeness"
    },
    {
        "用户": "Please help me find all 1-3 degree friends of a player named 'Tim Duncan' and return these friends and their numbers.",
        "查询": "MATCH p=(v:player{name:\"Tim Duncan\"})-[e:follow*1..3]->(v2:player)\nRETURN DISTINCT v2 AS Friends, count(v2)"
    },
    {
        "用户": "找出与 'Tim Duncan' 相关的所有实体，这些实体与 'Tim Duncan' 之间存在 2 到 3 条 '喜欢' 的关系，返回这些关系和实体。",
        "查询": "MATCH (n)-[e:like*2..3]-(v)\nWHERE id(n) == \"Tim Duncan\"\nRETURN e, v"
    },
    {
        "用户": "找出与球员 'Shaquille O'Neal' 有关系的实体，返回这些实体的姓名、年龄和名称，并按名称排序，只返回第一个结果。",
        "查询": "match (v1)-->(v2:player)-->(v3) where v2.player.name==\"Shaquille O'Neal\"\n  return properties(v1).name,properties(v2).age as age,properties(v3).name AS name\n  order by name limit 1;"
    },
    {
        "用户": "如果player标签不存在，则创建一个包含姓名和年龄属性的player标签。",
        "查询": "CREATE TAG IF NOT EXISTS player(name string, age int)"
    },
    {
        "用户": "Count the number of elements in the list, the total number, and the number of elements after deduplication.",
        "查询": "WITH [NULL, 1, 1, 2, 2] As a UNWIND a AS b\nRETURN count(b), count(*), count(DISTINCT b)"
    },
    {
        "用户": "找出喜欢'Tony Parker'的球员'Tim Duncan'，并返回'Tim Duncan'球员的姓名。",
        "查询": "MATCH (v:player{name:\"Tony Parker\"})\nWITH v AS a\nMATCH p=(o:player{name:\"Tim Duncan\"})-[]->(a)\nRETURN o.player.name"
    },
    {
        "用户": "找出名为'Tim Duncan'的球员的所有朋友，并返回每个朋友的数量。",
        "查询": "MATCH p=(v:player{name:\"Tim Duncan\"})-[e:follow*0..3]->(v2:player)\nRETURN DISTINCT v2 AS Friends, count(v2)"
    },
    {
        "用户": "找出所有 '喜欢' 'Grant Hill' 的实体，并返回这些实体与 'Grant Hill' 的关系中的目标实体 ID。",
        "查询": "GO FROM \"Grant Hill\" OVER like REVERSELY YIELD like._dst"
    },
    {
        "用户": "Find all paths from 'player100' to 'team204' and return these paths.",
        "查询": "FIND NOLOOP PATH FROM \"player100\" TO \"team204\" OVER * YIELD path AS p"
    },
    {
        "用户": "Find all 2nd degree followers of a player named 'Tim Duncan' and return their names.",
        "查询": "MATCH p=(v:player{name:\"Tim Duncan\"})-[e:follow*2]->(v2)\nRETURN DISTINCT v2 AS Friends"
    },
    {
        "用户": "Focus entity 'player102' on entity 'player100' and set the attention level to 75.",
        "查询": "INSERT EDGE follow(degree) VALUES \"player102\" -> \"player100\":(75)"
    },
    {
        "用户": "得了白血病忌吃什么食物？",
        "查询": "GO FROM \"白血病\" OVER no_eat YIELD dst(edge);"
    },
    {
        "用户": "Find the player ID that players with ID player102 are following and exclude the player ID that players with ID player100 are following.",
        "查询": "MATCH (v:player)-[e:follow]->(v2)\nWHERE id(v) ==\"player102\"\nRETURN id(v2) AS id\nMINUS\nMATCH (v:player)-[e:follow]->(v2)\nWHERE id(v) ==\"player100\"\nRETURN id(v2) AS id"
    },
    {
        "用户": "您好，请问您能帮我找一下从 'Tiago Splitter' 到 'Tony Parker' 的最短路径吗？路径最多只能有一步哦，麻烦您帮我查一下并返回给我。",
        "查询": "FIND SHORTEST PATH FROM \"Tiago Splitter\" TO \"Tony Parker\" OVER * UPTO 1 STEPS YIELD path as p"
    },
    {
        "用户": "请您展示一下所有的标签。",
        "查询": "SHOW TAGS"
    },
    {
        "用户": "找出 'Tim Duncan' 所 '喜欢' 或 '被喜欢' 的所有实体，并返回这些实体与 'Tim Duncan' 之间的边信息。",
        "查询": "GO FROM 'Tim Duncan' OVER like bidirect YIELD edge as e"
    },
    {
        "用户": "找出名为'Tim Duncan'的球员的所有朋友的朋友，并返回朋友的朋友的数量和去重后的数量。",
        "查询": "MATCH (n:player {name : \"Tim Duncan\"})-[]->(friend:player)-[]->(fof:player)\nRETURN count(fof), count(DISTINCT fof)"
    },
    {
        "用户": "返回球员的姓名包括在 ['James Harden', 'Jonathon Simmons', 'Klay Thompson', 'Dejounte Murray', 'Paul Gasol'] 以及所有球员。",
        "查询": "MATCH (v)\nWHERE id(v) IN ['James Harden', 'Jonathon Simmons', 'Klay Thompson', 'Dejounte Murray', 'Paul Gasol']\n      OR true\nRETURN v.player.name AS Name"
    },
    {
        "用户": "获取'test'图中所有实体的属性，并返回这些实体的顶点。",
        "查询": "FETCH PROP ON * \"test\" YIELD vertex AS v"
    },
    {
        "用户": "Identify the co players that players with IDs player102 and player100 are interested in, and return the IDs, attention levels, and ages of these co players.",
        "查询": "MATCH (v:player)-[e:follow]->(v2)\nWHERE id(v) == \"player102\"\nRETURN id(v2) As id, e.degree As Degree, v2.player.age AS Age\nINTERSECT\nMATCH (v:player)-[e:follow]->(v2)\nWHERE id(v) == \"player100\"\nRETURN id(v2) As id, e.degree As Degree, v2.player.age AS Age"
    },
    {
        "用户": "Please help me identify the people 'player100' is following and tell me their age. Finally, calculate their average age and number of followers.",
        "查询": "GO FROM \"player100\" OVER follow\nYIELD dst(edge) AS ID\n| FETCH PROP ON player $-.ID\nYIELD properties(vertex).age AS Age\n| YIELD AVG($-.Age) as Avg_age, count(*)as Num_friends"
    },
    {
        "用户": "获取'test'上所有实体的属性，并返回这些实体的顶点。",
        "查询": "FETCH PROP ON * \"test\" YIELD vertex AS v"
    },
    {
        "用户": "Please help me turn 'Basketball'_ Player 'is converted to lowercase.",
        "查询": "RETURN lower(\"Basketball_Player\")"
    },
    {
        "用户": "Identify entities related to player 'Shaquille O'Neal', return the names, ages, genders, and ages of these entities, sorted by age and name, and return only one record.",
        "查询": "match (v1)-->(v2:player)-->(v3) where v2.player.name==\"Shaquille O'Neal\"\n  return properties(v1).name,properties(v2).age as age,properties(v3).name AS name,v2.player.sex,v1.player.age\n  order by age, name limit 1;"
    },
    {
        "用户": "返回日期 '2021-07-19' 的月份。",
        "查询": "RETURN date(\"2021-07-19\").month AS month"
    },
    {
        "用户": "Find all the entities that Tracy McGrady likes and return their IDs.",
        "查询": "GO FROM \"Tracy McGrady\" OVER like YIELD like._dst"
    },
    {
        "用户": "Please help me submit a compression task.",
        "查询": "SUBMIT JOB COMPACT"
    },
    {
        "用户": "您好，请帮我查找与 'Marco Belinelli' 有关系的所有实体，并返回这些实体的属性信息。",
        "查询": "MATCH (v:player)-[e]-(v2)\nWHERE id(v)=='Marco Belinelli'\nRETURN v2"
    },
    {
        "用户": "删除边索引edge_1_ttl_index_2_start_time。",
        "查询": "DROP EDGE INDEX edge_1_ttl_index_2_start_time"
    },
    {
        "用户": "Hello, please help me find an object that contains key value pairs {k1:1, k2: true}. I need to obtain the value corresponding to k1.",
        "查询": "RETURN {k1 : 1, k2: true}.k1 AS k"
    },
    {
        "用户": "Returns the age and gender attributes of player Carmelo Anthony.",
        "查询": "match (v:player) where id(v)==\"Carmelo Anthony\" return properties(v).age,v.player.sex;"
    },
    {
        "用户": "找出 'Chris Paul' 所 '喜欢' 的所有实体，并返回这些实体的 ID。",
        "查询": "GO FROM \"Chris Paul\" OVER like YIELD like._dst"
    },
    {
        "用户": "Hey, hello! I need to start with the entity of 'Tim Duncan', take 100000000000 steps along the 'serve' edge, and then tell me the IDs of all the endpoint entities of the 'serve' edge. Can you help me find it?",
        "查询": "GO 10000000000000 STEPS FROM \"Tim Duncan\" OVER serve YIELD serve._dst;"
    },
    {
        "用户": " 嘿，你能帮我双向找一下从Yao Ming到Danny Green的所有路径吗？路径上的边可以是任何类型的，只要'like'属性的likeness为空或大于等于80就行。最多经过3步，然后把路径信息给我。",
        "查询": "FIND ALL PATH WITH PROP FROM \"Yao Ming\" TO \"Danny Green\" OVER * BIDIRECT\nWHERE like.likeness is  EMPTY OR like.likeness >= 80 AND 1 > 2 UPTO 3 STEPS YIELD path as p"
    },
    {
        "用户": "请帮我查询终止会话ID为1625553545984255，计划ID为163的信息。",
        "查询": "KILL QUERY(SESSION=1625553545984255,PLAN=163)"
    },
    {
        "用户": " 您好，请帮我找一下t1类型中col4为‘banana’且col3大于true的所有实体的ID。",
        "查询": "LOOKUP ON t1 WHERE t1.col4 == \"banana\" AND t1.col3 > true YIELD id(vertex) as id"
    },
    {
        "用户": "Find a player entity named 'Tim Duncan' and return the ID of that entity.",
        "查询": "LOOKUP ON player WHERE player.name == \"Tim Duncan\" YIELD id(vertex) as id"
    },
    {
        "用户": "删除 'Russell Westbrook' 所喜欢的所有实体及其关联的边。",
        "查询": "$var = GO FROM \"Russell Westbrook\" OVER like YIELD like._dst as id; DELETE VERTEX $var.id WITH EDGE"
    },
    {
        "用户": "Find all entities with a distance of 1 to 3 served by a player named 'abc' and return all their attributes.",
        "查询": "MATCH (v:player{name: \"abc\"}) -[:serve*1..3]-> ()\nRETURN *"
    },
    {
        "用户": "Find entities that Tony Parker likes, but does not include entities with likes of 95, 56, or 21, and return the names and likes of these entities.",
        "查询": "GO FROM 'Tony Parker' OVER like\nWHERE like.likeness NOT IN [95,56,21]\nYIELD $$.player.name, like.likeness"
    },
    {
        "用户": "Please find all the friends of a player named 'Tim Duncan' who has a two jump 'follow' relationship with him and a first jump relationship degree greater than 98, and return these players as friends.",
        "查询": "MATCH p=(v:player{name:\"Tim Duncan\"})-[e:follow*2]->(v2)\nWHERE e[0].degree > 98\nRETURN DISTINCT v2 AS Friends"
    },
    {
        "用户": "返回名为'LaMarcus Aldridge'的球员的年龄和性别属性。",
        "查询": "match (v:player{name:\"LaMarcus Aldridge\"}) return properties(v).age,v.player.sex;"
    },
    {
        "用户": "Hello, please help me search. Starting from 'Tim Duncan' and following the 'serve' relationship, find all entities with a distance of 1 to 2 steps, and then return the starting and ending points of the edges between these entities.",
        "查询": "GO 1000000000 TO 1000000002 STEPS FROM \"Tim Duncan\" OVER serve YIELD dst(edge) as dst, src(edge) as src"
    },
    {
        "用户": "获取实体'player101'的所有属性。",
        "查询": "FETCH PROP ON player \"player101\" YIELD properties(vertex)"
    },
    {
        "用户": "Obtain all attributes of type player or t1 for 'player100' and 'player103', and return their vertices.",
        "查询": "FETCH PROP ON player, t1 \"player100\", \"player103\" YIELD vertex AS v"
    },
    {
        "用户": "Find all the entities that 'Russell Westbrook' likes' and return them.",
        "查询": "GO FROM \"Russell Westbrook\" OVER like YIELD like._dst"
    },
    {
        "用户": "得了肝炎推荐使用哪种药物？",
        "查询": "MATCH (n:disease{name:'肝炎'})-[e:recommend_drug]->(n1:drug) return n1.drug.name"
    },
    {
        "用户": "Create a statement describing the label man.",
        "查询": "SHOW CREATE TAG man;"
    },
    {
        "用户": "Can you help me identify all the entities associated with 'Tony Parker'? And can you return the IDs of these entities to me, remove duplicates, and output them.",
        "查询": "MATCH (a)--(b) WHERE id(b) == 'Tony Parker' RETURN DISTINCT id(a)\nUNION\nMATCH (a)--(b) WHERE id(b) == 'Tony Parker' RETURN DISTINCT id(a)"
    },
    {
        "用户": "插入一个名为LaMarcus Aldridge，年龄为33的球员实体，其ID为player102。",
        "查询": "INSERT VERTEX player(name, age) VALUES \"player102\":(\"LaMarcus Aldridge\", 33)"
    },
    {
        "用户": "找出以'player100'为起点，通过'follow'关系连接的实体，并返回起点实体的年龄（SrcAge）和连接实体的年龄（DestAge）。",
        "查询": "GO FROM \"player100\" OVER follow YIELD properties($^).age AS SrcAge, properties($$).age AS DestAge"
    },
    {
        "用户": "Focus entity 'player101' on entity 'player102' with a 90 degree of attention.",
        "查询": "INSERT EDGE follow(degree) VALUES \"player101\" -> \"player102\":(90)"
    },
    {
        "用户": "Please help me identify all players aged between 20 and 25, sort them by age, and tell me their names and ages.",
        "查询": "MATCH (v:player)\nWHERE v.player.age NOT IN range(20,25)\nRETURN v.player.name AS Name, v.player.age AS Age\nORDER BY Age"
    },
    {
        "用户": "获取\"player100\"、\"player101\"、\"player102\"、\"player103\"的属性中的年龄和姓名，并按照年龄升序、姓名降序排序。",
        "查询": "FETCH PROP ON player \"player100\", \"player101\", \"player102\", \"player103\"\nYIELD properties(vertex).age AS age, properties(vertex).name AS name\n| ORDER BY $-.age ASC, $-.name DESC"
    },
    {
        "用户": "Find edges with an intimacy greater than 89 in all 'like' relationships, and return the source nodes, target nodes, and weights of these edges.",
        "查询": "LOOKUP ON like where like.likeness > 89 YIELD src(edge) as src, dst(edge) as dst, rank(edge) as rank"
    },
    {
        "用户": "Find all players who are not within the age range of 20 to 25 and sort them by age, returning the names and ages of the players.",
        "查询": "MATCH (v:player)\nWHERE v.player.age NOT IN range(20,25)\nRETURN v.player.name AS Name, v.player.age AS Age\nORDER BY Age"
    },
    {
        "用户": "Please help me return all the elements in the list [1, 2, 3]",
        "查询": "YIELD list[1, 2, 3][0..-1] AS a"
    },
    {
        "用户": "Hello, could you please help me find the shortest path from 'Tony Parker' and 'Yao Ming' to 'Manu Ginobili', 'Spurs', and' Lakes'? The relationship attributes on the path need to meet the requirements of 'teammate. start'_ Year 'is not empty or' like. likeness' is greater than 90, which can take up to 3 steps and return all nodes on the path.",
        "查询": "FIND SHORTEST PATH WITH PROP FROM \"Tony Parker\", \"Yao Ming\" TO \"Manu Ginobili\", \"Spurs\", \"Lakers\" OVER * BIDIRECT WHERE teammate.start_year is not EMPTY OR like.likeness > 90 UPTO 3 STEPS YIELD path as p |\nYIELD distinct nodes($-.p) as nodes"
    },
    {
        "用户": "Please help me find all entities that players named 'Tim Duncan' follow or play for.",
        "查询": "MATCH p=(v:player{name:\"Tim Duncan\"})-[e:follow|serve*2]->(v2)\nRETURN DISTINCT v2"
    },
    {
        "用户": "请问您能帮我找到有关 test_comment_tag 标签的详细信息吗？",
        "查询": "DESC tag test_comment_tag;"
    },
    {
        "用户": "请问您能帮我找一下，有关球员 'Yao Ming' 和球队 'Rockets' 之间的服务关系的路径吗？\n帮我一下，找一下球员 'Yao Ming' 和球队 'Rockets' 之间的服务关系路径。\n您好，我想请您帮我找一下，球员 'Yao Ming' 和球队 'Rockets' 之间的服务关系路径，可以吗？",
        "查询": "MATCH (p:player {name: 'Yao Ming'} ), (t:team {name: 'Rockets'}), pth = (p)-[:serve*1..4]-(t)\nRETURN pth"
    },
    {
        "用户": "Find all entities served or liked by a player named 'Tim Duncan', including 2-3 degree relationships, and return the number of entities.",
        "查询": "MATCH (:player{name:\"Tim Duncan\"})-[e:serve|like*2..3]-(v)\nRETURN COUNT(1)"
    },
    {
        "用户": "Find all entities that 'player102' is interested in, return the IDs of these entities, the degrees of edges, and the age of 'player102', plus the IDs of all entities that 'player100' is interested in, the degrees of edges, and the age of 'player100'.",
        "查询": "GO FROM \"player102\" OVER follow\nYIELD dst(edge) AS id, properties(edge).degree AS Degree, properties($$).age AS Age\nUNION /* DISTINCT */\nGO FROM \"player100\" OVER follow\nYIELD dst(edge) AS id, properties(edge).degree AS Degree, properties($$).age AS Age"
    },
    {
        "用户": "查找player集合中的实体，按照年龄分组并统计每个年龄的数量，然后按数量和年龄降序排序。",
        "查询": "LOOKUP ON player\nYIELD player.age As playerage\n| GROUP BY $-.playerage\nYIELD $-.playerage as age, count(*) AS number\n| ORDER BY $-.number DESC, $-.age DESC"
    },
    {
        "用户": "Find the entities that Tim Duncan likes or serves, and if their 'service start year' is greater than 1970 or their 'age' is less than 50, return the ID and edge information of these entities.",
        "查询": "GO FROM \"Tim Duncan\" OVER like, serve\n  WHERE serve.start_year > 1970 OR properties($$).age < 50\n  YIELD $$ AS dst, edge AS e"
    },
    {
        "用户": "请问您能帮我查找一下'Boris Diaw'这个人的所有信息吗，包括他的姓名和年龄？",
        "查询": "FETCH PROP ON * 'Boris Diaw', 'Boris Diaw' yield player.name, player.age"
    },
    {
        "用户": "Returns the names and ages of all players, arranged in descending order of names.",
        "查询": "MATCH (v:player) RETURN v.player.name AS Name, v.player.age AS Age\nORDER BY Name DESC"
    },
    {
        "用户": "请帮我找出与名为'Tim Duncan'的球员有关系的所有球员，并告诉我这些球员的姓名。",
        "查询": "MATCH (v:player{name:\"Tim Duncan\"})--(v2:player)\nRETURN v2.player.name AS Name"
    },
    {
        "用户": "Find all relationships with attribute values of 90 and return these relationships.",
        "查询": "MATCH ()-[e]->()\nWITH e, properties(e) as props, keys(properties(e)) as kk\nLIMIT 10000 WHERE [i in kk where props[i] == 90]\nRETURN e"
    },
    {
        "用户": "Please help me return all elements starting from the third element in a list of integers ranging from 1 to 5.",
        "查询": "RETURN range(1,5)[3..] AS a"
    },
    {
        "用户": "找出以'player101'为起点，通过'follow'关系连接的实体，并返回这些实体的属性中的'Team'和'Player'。",
        "查询": "GO FROM \"player101\" OVER follow YIELD dst(edge) AS id |\nGO FROM $-.id OVER serve YIELD properties($$).name AS Team,\nproperties($^).name AS Player"
    },
    {
        "用户": "返回名为'Tim Duncan'的球员喜欢程度为95的所有实体，并返回原始节点名字。",
        "查询": "MATCH (v:player{name: 'Tim Duncan'})-[e:like{likeness: 95}]->() return v.player.name AS name"
    },
    {
        "用户": "Update the name of player entity 'player100' to 'Tim'.",
        "查询": "UPDATE VERTEX \"player100\" SET player.name = \"Tim\""
    },
    {
        "用户": "如果名字是'Joe'的球员存在，则将球员'player666'的年龄设置为31，并返回名字为'Joe'和年龄为31的球员信息。",
        "查询": "UPSERT VERTEX ON player \"player666\"\nSET age = 31\nWHEN name == \"Joe\"\nYIELD name AS Name, age AS Age"
    },
    {
        "用户": "糖尿病的注意事项有哪些？",
        "查询": "LOOKUP ON disease WHERE disease.name == \"糖尿病\" YIELD properties(vertex).prevent"
    },
    {
        "用户": "找出 'Tim Duncan' 所 '喜欢' 或 '被喜欢' 的所有实体，并返回这些实体与 'Tim Duncan' 之间的边信息。",
        "查询": "GO FROM 'Tim Duncan' OVER like bidirect YIELD edge as e"
    },
    {
        "用户": "Find the names and ages of players aged between 20 and 25.",
        "查询": "MATCH (v:player)\nWHERE v.player.age IN range(20,25)\nRETURN v.player.name, v.player.age"
    },
    {
        "用户": "修改标签t1，将属性p3的类型改为int64，将属性p4的类型改为string。",
        "查询": "ALTER TAG t1 CHANGE (p3 int64, p4 string)"
    },
    {
        "用户": "请帮我返回一个列表，列表中的元素是从1到5之间大于2的数加上10的结果。",
        "查询": "RETURN [n IN range(1,5) WHERE n > 2 | n + 10] AS a"
    },
    {
        "用户": "Identify entities that have a two to three jump 'like' relationship with 'Tim Duncan' and a liking level of 90, and return these relationships and entities.",
        "查询": "MATCH (n)-[e:like*2..3{likeness: 90}]->(v)\nWHERE id(n) == \"Tim Duncan\"\nRETURN e, v"
    },
    {
        "用户": "Update the player entity named 'player667' to age 31 and return the updated name and age.",
        "查询": "UPSERT VERTEX ON player \"player667\"\nSET age = 31\nYIELD name AS Name, age AS Age"
    },
    {
        "用户": "查找名为'Tony Parker'的球员所在的所有球队，并返回这些球队的去重结果和该球员的年龄。",
        "查询": "MATCH (v:player{name: \"Tony Parker\"})-[:serve]->(t:team)\nWITH DISTINCT v.player.age as age, t\nRETURN t"
    },
    {
        "用户": "找出 'Tony Parker' 喜欢的实体中，喜爱程度不为95、56、21的实体，返回这些实体与 'Tony Parker' 的姓名和喜爱程度。",
        "查询": "$A = GO FROM 'Tony Parker' OVER like YIELD like._dst AS ID;\nGO FROM $A.ID OVER like WHERE like.likeness NOT IN [95,56,21]\nYIELD $^.player.name, $$.player.name, like.likeness"
    },
    {
        "用户": "查找球员Carmelo Anthony的年龄并返回。",
        "查询": "match (v:player) where id(v)==\"Carmelo Anthony\" return v.player.age;"
    },
    {
        "用户": "Bi-directional search for all entities' served 'or' liked 'by' Tim Duncan 'and return the deduplicated IDs of these entities.",
        "查询": "GO FROM 'Tim Duncan' OVER serve, like bidirect YIELD distinct dst(edge) as dst"
    },
    {
        "用户": "找出 'Tony Parker' 所 '喜欢' 的实体，但不包括喜欢程度为95、56、21的实体，并返回这些实体的名称和喜欢程度。",
        "查询": "GO FROM 'Tony Parker' OVER like\nWHERE like.likeness NOT IN {95,56,21}\nYIELD $$.player.name, like.likeness"
    },
    {
        "用户": "If the player tag does not exist, can you help me create a player tag? It includes name and age attributes, with the default age attribute being 18 years old.",
        "查询": "CREATE TAG IF NOT EXISTS player(name string, age int NOT NULL DEFAULT 18)"
    },
    {
        "用户": "Hello, could you please help me find the shortest path from 'Tony Parker' and 'Yao Ming' to 'Manu Ginobili', 'Spurs', and' Lakes', and return the path information to me?",
        "查询": "FIND SHORTEST PATH FROM \"Tony Parker\", \"Yao Ming\" TO \"Manu Ginobili\", \"Spurs\", \"Lakers\" OVER * REVERSELY YIELD path as p"
    },
    {
        "用户": "将'player100'与'team204'建立起服务关系，起始年份为1990年，结束年份为2018年，且边的权重为@2。",
        "查询": "insert edge serve(start_year,end_year)\nvalues \"player100\"->\"team204\"@2:(1990, 2018)"
    },
    {
        "用户": "请问您能帮我删除标签索引 player_name_index 吗？",
        "查询": "DROP TAG INDEX player_name_index"
    },
    {
        "用户": "得了心脏病需要吃什么药？",
        "查询": "GO FROM \"心脏病\" OVER recommend_drug YIELD dst(edge);"
    },
    {
        "用户": "能否显示一下所有标签的配置信息呢？",
        "查询": "PROFILE format=\"row\" SHOW TAGS"
    },
    {
        "用户": "Create a file called student_ The label index for alias is based on the alias attribute of the student label, with a maximum length of 10.",
        "查询": "CREATE TAG INDEX student_alias ON student(alias(10))"
    },
    {
        "用户": "将球员player100从1998年到2017年期间加入到team204队伍中，并设置边权重为1。",
        "查询": "insert edge serve(start_year,end_year)\nvalues \"player100\"->\"team204\"@1:(1998, 2017)"
    },
    {
        "用户": "Find entities that a player named 'Tracy McGrady' likes' and have a 90 degree of liking, and return their relationship and attribute information with the player.",
        "查询": "MATCH (:player{name:\"Tracy McGrady\"})-[e:like*0{likeness: 90}]-(v)\nRETURN e, v"
    },
    {
        "用户": "您好，请问您能帮我查找一下从 'Tim Duncan' 开始，沿着 'serve' 关系，向外经过1到10步的所有实体的 ID吗？",
        "查询": "GO 1 TO 10 STEPS FROM \"Tim Duncan\" OVER serve YIELD $$ as dst"
    },
    {
        "用户": "得了糖尿病应该去哪个科室就诊？",
        "查询": "GO FROM \"糖尿病\" OVER cure_department YIELD dst(edge);"
    },
    {
        "用户": "Please help me return the sublist of the third to last element in the list [1,2,3,4,5].",
        "查询": "YIELD list[1, 2, 3, 4, 5][-3..-1] AS a"
    },
    {
        "用户": "找出年龄大于等于42岁的'player100'所关注的所有实体，并返回终点",
        "查询": "GO FROM \"player100\" OVER follow\nWHERE $^.player.age >= 42\nYIELD dst(edge)"
    },
    {
        "用户": "请帮我创建一个名为player的标签，其中包含姓名和年龄两个属性。",
        "查询": "CREATE TAG player(name string, age int)"
    },
    {
        "用户": "找出从 'Tim Duncan' 到 'Tony Parker' 或 'Manu Ginobili' 的不重复路径，路径上的关系为 '喜欢'，最多包含3个跳，并返回路径信息。",
        "查询": "FIND NOLOOP PATH FROM \"Tim Duncan\" TO \"Tony Parker\", \"Manu Ginobili\" OVER like UPTO 3 STEPS YIELD path as p"
    },
    {
        "用户": "嘿，你好！我需要找出年龄为40或20岁且姓名不为空的球员实体。能帮我返回这些实体的ID和年龄信息吗？",
        "查询": "LOOKUP ON player WHERE player.age IN [40, 20] AND player.name > \"\" YIELD id(vertex) as id, player.age"
    },
    {
        "用户": "Identify all entities that are favored by 'Tony Parker' and 'Tim Duncan', and return these entities and their relationships, but exclude the relationships between 'Tony Parker' and 'Tim Duncan' themselves.",
        "查询": "MATCH (v:player)-[e:like]->(v2) WHERE none_direct_src(e) IN [\"Tony Parker\", \"Tim Duncan\"] RETURN *\nMINUS\nMATCH (v:player)-[e:like]->(v2) WHERE id(v) IN [\"Tony Parker\", \"Tim Duncan\"] RETURN *"
    },
    {
        "用户": "找出'player100'所'服务'的所有实体，并返回这些实体的起始年份和结束年份。",
        "查询": "GO FROM \"player100\"\nOVER serve\nYIELD properties(edge).start_year, properties(edge).end_year"
    },
    {
        "用户": "将标签ttl_tag07的属性ttl_col设置为空。",
        "查询": "ALTER TAG ttl_tag07 ttl_col=\"\";"
    },
    {
        "用户": "请帮我查找时间戳为'23333'的日期。",
        "查询": "RETURN DATE(\"23333\")"
    },
    {
        "用户": "Starting from 'Tim Duncan' and traversing through any type of edge, return the target vertex of the 'like' edge in the traversal path as the starting point, and the starting vertex of the 'service' edge as the target. Find a path that does not contain a loop between the starting point and the target vertex up to 3 steps, and return these paths",
        "查询": "GO FROM \"Tim Duncan\" over * YIELD like._dst AS src, serve._src AS dst\n| FIND NOLOOP PATH FROM $-.src TO $-.dst OVER like UPTO 3 STEPS YIELD path as p"
    },
    {
        "用户": "找出从 'Tim Duncan' 和 'Tiago Splitter' 到 'Tony Parker' 和 'Spurs' 的最短路径，路径上通过 '喜欢' 和 '服务' 关系相连，最多经过 5 步，并返回找到的路径信息。",
        "查询": "FIND SHORTEST PATH FROM \"Tim Duncan\", \"Tiago Splitter\" TO \"Tony Parker\", \"Spurs\" OVER like,serve UPTO 5 STEPS YIELD path as p"
    },
    {
        "用户": "Please help me insert a player entity named LaMarcus Aldridge, aged 33, and set its ID to player102.",
        "查询": "INSERT VERTEX player(name, age) VALUES \"player102\":(\"LaMarcus Aldridge\", 33)"
    },
    {
        "用户": "Please identify all relationships with attribute values of 90 and return them to me.",
        "查询": "MATCH ()-[e]->()\nWITH e, properties(e) as props, keys(properties(e)) as kk\nLIMIT 10000 WHERE [i in kk where props[i] == 90]\nRETURN e"
    },
    {
        "用户": "Obtain the attributes of 'player100' and return the attribute information of the entity.",
        "查询": "FETCH PROP ON player \"player100\" YIELD properties(vertex)"
    },
    {
        "用户": "请帮我返回时间为12点31分14秒111毫秒222微秒的时间。",
        "查询": "WITH time({hour: 12, minute: 31, second: 14, millisecond:111, microsecond: 222}) AS d RETURN d"
    },
    {
        "用户": "Insert the relationship between entity 'player101' and entity 'player100' with a focus of 95.",
        "查询": "INSERT EDGE follow(degree) VALUES \"player101\" -> \"player100\":(95)"
    },
    {
        "用户": "将标签t1的注释修改为'test1'。",
        "查询": "ALTER TAG t1 COMMENT ='test1'"
    },
    {
        "用户": "请帮我添加一个数据接收器，地址为192.168.10.106:9889。",
        "查询": "ADD DRAINER 192.168.10.106:9889"
    },
    {
        "用户": "Obtain the name and age of the 'Tim Duncan' player.",
        "查询": "FETCH PROP ON player \"Tim Duncan\" YIELD player.name, player.age"
    },
    {
        "用户": "请帮我创建一个名为student_alias的标签索引，该索引是基于student标签的alias属性，并且长度为10。",
        "查询": "CREATE TAG INDEX student_alias ON student(alias(10))"
    },
    {
        "用户": "Find the path from 'Tony Parker' to 'Yao Ming', and the attributes on the path must meet the following requirements: the starting year of the teammate relationship is later than 2000, or the intimacy of the liking relationship is not empty and greater than or equal to 80. Return a maximum of 3 paths and path information.",
        "查询": "FIND ALL PATH WITH PROP FROM \"Tony Parker\" TO \"Yao Ming\" OVER * BIDIRECT\nWHERE  teammate.start_year > 2000 OR (like.likeness is not EMPTY AND like.likeness >= 80) UPTO 3 STEPS YIELD path as p"
    },
    {
        "用户": "如果test2标签不存在，则创建test2标签，包含属性p3（字符串类型）和p4（整数类型）。",
        "查询": "CREATE TAG IF NOT EXISTS test2(p3 string, p4 int)"
    },
    {
        "用户": "从 'Tim Duncan' 出发，沿着 '喜欢' 关系走三步，返回回结果限制为第一跳自动选择1条边，第二跳选择3条边，第三跳选择2条边",
        "查询": "GO 3 STEPS FROM \"Tim Duncan\" OVER like YIELD like._dst SAMPLE [1, 3, 2];"
    },
    {
        "用户": "Hello, please help me find the IDs of all entities starting from 'Tim Duncan' and extending outward along the 'serve' relationship by steps 1 to 10.",
        "查询": "GO 1 TO 10 STEPS FROM \"Tim Duncan\" OVER serve YIELD $$ as dst"
    },
    {
        "用户": "找出从 'Tim Duncan' 开始，通过 '喜欢' 关系最多经过 3 步能到达的所有实体，并返回这些实体的路径。",
        "查询": "$a = GO FROM \"Tim Duncan\" over * YIELD like._dst AS src, serve._src AS dst;\nFIND ALL PATH FROM $a.src TO $a.dst OVER like UPTO 3 STEPS YIELD path as p"
    },
    {
        "用户": "Hey, hello! I need to find player entities aged 40 or 20 with non blank names. Can you help me return the ID and age information of these entities?",
        "查询": "LOOKUP ON player WHERE player.age IN [40, 20] AND player.name > \"\" YIELD id(vertex) as id, player.age"
    },
    {
        "用户": "找到从'Tim Duncan'出发，通过任意类型的边进行遍历，返回遍历路径中'喜欢'边的目标顶点作为起点，'服务'边的起始顶点作为目标，找到从起点到目标顶点的最多3步之内不包含环路的路径，返回这些路径",
        "查询": "GO FROM \"Tim Duncan\" over * YIELD like._dst AS src, serve._src AS dst\n| FIND NOLOOP PATH FROM $-.src TO $-.dst OVER like UPTO 3 STEPS YIELD path as p"
    },
    {
        "用户": "请问您能帮我查找前三个人的姓名吗？",
        "查询": "MATCH (v)\nRETURN v.person.name LIMIT 3"
    },
    {
        "用户": "Find the age of player Carmelo Anthony and return.",
        "查询": "match (v:player) where id(v)==\"Carmelo Anthony\" return v.player.age;"
    },
    {
        "用户": "Identify all entities that players over 45 years old have a service relationship with the Los Angeles Lakers, and return the names, 'hello', likes, and team names of these entities. Use '@' to combine the names and team names.",
        "查询": "MATCH (a:player)-[b:serve]-(c:team{name: \"Lakers\"})\nWHERE a.player.age > 45\nRETURN concat_ws(\"@\",a.player.name, NULL, \"hello\", b.likeness, c.team.name) as result"
    },
    {
        "用户": "Create a label called TAG, which contains a name string attribute.",
        "查询": "CREATE TAG `TAG` (name string)"
    },
    {
        "用户": "If label t1 does not exist, create a label that contains string type field a and integer type field b.",
        "查询": "CREATE TAG IF NOT EXISTS t1(a string, b int)"
    },
    {
        "用户": "找出名为'Tim Duncan'的球员所属的所有球队，并返回与该球员有关系的所有实体关系。",
        "查询": "MATCH (v:player{name:\"Tim Duncan\"})-[e]->(t) WHERE (v)-[e]->(t:team) RETURN (v)-->()"
    },
    {
        "用户": "找出 'Tim Duncan' 所 '喜欢' 的所有实体，并返回这些实体的 ID。",
        "查询": "GO FROM \"Tim Duncan\" OVER like YIELD like._dst"
    },
    {
        "用户": " 您能帮我找一下，从 'Shaquille O'Neal' 到 'Manu Ginobili'、'Spurs'、'Lakers' 的关系吗？最好是通过不超过5个步骤，且经过任意边的最短路径。谢谢！",
        "查询": "FIND SHORTEST PATH FROM \"Shaquille O\\'Neal\" TO \"Manu Ginobili\", \"Spurs\", \"Lakers\" OVER * UPTO 5 STEPS YIELD path as p"
    },
    {
        "用户": "Obtain all attributes of 'player101', 'player102', and 'player103'.",
        "查询": "FETCH PROP ON player \"player101\", \"player102\", \"player103\" YIELD properties(vertex)"
    },
    {
        "用户": "找出所有得分小于20的球员，并返回他们的姓名。",
        "查询": "MATCH (v:player) WHERE v.player.score < 20 RETURN v.player.name AS name"
    },
    {
        "用户": "Could you please help me search for all entities and relationships that have a 2-3 hop service relationship with 'Tim Duncan' after 2000?",
        "查询": "MATCH (n)-[e:serve*2..3{start_year: 2000}]-(v)\nWHERE id(n) == \"Tim Duncan\"\nRETURN e, v"
    },
    {
        "用户": "双向查找 'Tim Duncan' 所 '服务' 或 '喜欢' 的所有实体，并返回这些实体的去重后的 ID。",
        "查询": "GO FROM 'Tim Duncan' OVER serve, like bidirect YIELD distinct dst(edge) as dst"
    },
    {
        "用户": "请帮我获取从实体201到实体302的任意形状边的几何信息。",
        "查询": "FETCH PROP ON any_shape_edge \"201\"->\"302\" YIELD ST_ASText(any_shape_edge.geo)"
    },
    {
        "用户": "Find all entities that a player named 'Tracy McGrady' likes, including direct and indirect relationships with a liking level of 90, and return these relationships and entities.",
        "查询": "MATCH (:player{name:\"Tracy McGrady\"})-[e:like*0..1{likeness: 90}]-(v)\nRETURN e, v"
    },
    {
        "用户": "Find the entities that a player named 'Tracy McGrady' serves or likes with a maximum distance of 1, and return these relationships and entities.",
        "查询": "MATCH (:player{name:\"Tracy McGrady\"})-[e:serve|like*0..1]-(v)\nRETURN e, v"
    },
    {
        "用户": "请帮我计算反余弦值为0.5。",
        "查询": "RETURN acos(0.5)"
    },
    {
        "用户": "Count the number of relationships between players named 'Tim Duncan' and other entities.",
        "查询": "MATCH (v:player{name:\"Tim Duncan\"}) -[e]- (v2)\nRETURN count(e)"
    },
    {
        "用户": "找出从 'Tim Duncan' 到 'Tony Parker' 或 'LaMarcus Aldridge' 的不重复路径，路径上的关系为 '喜欢'，最多经过三步，并返回路径信息。",
        "查询": "FIND NOLOOP PATH FROM \"Tim Duncan\" TO \"Tony Parker\", \"LaMarcus Aldridge\" OVER like UPTO 3 STEPS YIELD path as p"
    },
    {
        "用户": "如果存在名为'David West'且年龄大于20的球员，将其姓名改为'David'，年龄增加11岁，并返回姓名和年龄。",
        "查询": "UPSERT VERTEX \"player111\" SET player.name = \"David\", player.age = $^.player.age + 11\nWHEN $^.player.name == \"David West\" AND $^.player.age > 20\nYIELD $^.player.name AS Name, $^.player.age AS Age"
    },
    {
        "用户": "返回球员 Carmelo Anthony 的年龄和性别属性。",
        "查询": "match (v:player) where id(v)==\"Carmelo Anthony\" return properties(v).age,v.player.sex;"
    },
    {
        "用户": "找出年龄为30的球员和他们所在的球队之间距离不超过5的最短路径，并返回该路径。",
        "查询": "MATCH p = shortestPath( (a:player{age:30})-[e*..5]->(b:team) )\n  WHERE length(p) == 1\n  RETURN p"
    },
    {
        "用户": "Identify all entities and relationships with a 'like' relationship of 90 and a distance of 2 or 3 between them and entity 'Tim Duncan'.",
        "查询": "MATCH (n)<-[e:like*2..3{likeness: 90}]-(v)\nWHERE id(n) == \"Tim Duncan\"\nRETURN e, v"
    },
    {
        "用户": "如果不存在，则插入一条从 'Tom' 到 'Conan' 的 '喜欢' 边，边权值为 10。",
        "查询": "INSERT EDGE IF NOT EXISTS like(likeness) VALUES \"Tom\"->\"Conan\":(10)"
    },
    {
        "用户": "请问您能帮我找到从'Boris Diaw'到'Not Exist'的边上的源节点吗？并且给它取个名字叫做'a'。",
        "查询": "FETCH PROP ON serve \"Boris Diaw\"->\"Not Exist\" YIELD src(edge) as a"
    },
    {
        "用户": "如果不存在名为player_index_1的标签索引，则创建一个名为player的标签的索引，索引的属性为name，长度为20。",
        "查询": "CREATE TAG INDEX IF NOT EXISTS player_index_1 ON player(name(20))"
    },
    {
        "用户": "插入一个名为LaMarcus Aldridge，年龄为33的球员实体，并将其ID设为player102。",
        "查询": "INSERT VERTEX player(name, age) VALUES \"player102\":(\"LaMarcus Aldridge\", 33)"
    },
    {
        "用户": "创建一个名为TAG且包含姓名属性的标签",
        "查询": "CREATE TAG `TAG` (name string)"
    },
    {
        "用户": "找出 'Tim Duncan' 所喜欢的实体的 ID 和对应的年龄，筛选出年龄大于40岁的实体，并返回这些实体的 ID 和平均年龄加1。",
        "查询": "GO FROM \"Tim Duncan\" OVER like YIELD like._dst AS dst, $$.player.age AS age\n| YIELD $-.dst AS dst, 1+avg(distinct $-.age) AS age where $-.age > 40"
    },
    {
        "用户": "如果test标签不存在，则创建test标签，包含两个属性p1和p2。",
        "查询": "CREATE TAG IF NOT EXISTS test(p1 string, p2 int)"
    },
    {
        "用户": "如果不存在，则插入一条从 'Tom' 到 'Conan' 的 '喜欢' 边，边权值为 10。",
        "查询": "INSERT EDGE IF NOT EXISTS like(likeness) VALUES \"Tom\"->\"Conan\":(10)"
    },
    {
        "用户": "Hello, please help me identify entities that meet the following conditions: e1: e1. col1 is greater than or equal to 1, and e1. col5 is greater than time 11:11:11:11. And please return the source and target nodes of these entities.",
        "查询": "LOOKUP ON e1 WHERE e1.col1 >= 1 AND e1.col5 > time(\"11:11:11\") YIELD src(edge) as src, dst(edge) as dst"
    },
    {
        "用户": "提交作业并刷新图空间数据。",
        "查询": "SUBMIT JOB FLUSH;"
    },
    {
        "用户": "Obtain all relationship edges from 'player100' to 'team204' and from 'player133' to 'team202', and return these edges.",
        "查询": "FETCH PROP ON serve \"player100\" -> \"team204\", \"player133\" -> \"team202\" YIELD edge AS e"
    },
    {
        "用户": "Query all full-text indexes.",
        "查询": "SHOW FULLTEXT INDEXES;"
    },
    {
        "用户": "Hello, please help me find the node p that has a 'serve' relationship with node p, with a maximum of three deep connections.",
        "查询": "MATCH (p)-[:serve*0..3]->(t) RETURN p"
    },
    {
        "用户": "请帮我找出名为'Tim Duncan'的球员与其他实体之间的关系路径，并告诉我路径的长度。",
        "查询": "MATCH p=(v:player{name:\"Tim Duncan\"})-->(v2) return length(p)"
    },
    {
        "用户": "Hello, please help me find out. I need to find a player named 'Tony Parker' and tell me his name and age. Thank you!",
        "查询": "FETCH PROP ON player \"Tony Parker\" YIELD player.name, player.age"
    },
    {
        "用户": "您好，请帮我创建一个名为basketballplayer的空间，该空间有10个分区，每个分区有1个副本，并且实体的ID类型为固定长度为30的字符串。",
        "查询": "CREATE SPACE basketballplayer\n(partition_num = 10,\nreplica_factor = 1,\nvid_type = FIXED_STRING(30))"
    },
    {
        "用户": "返回空值的最小值、标准差、总和、按位与和按位或，并输出对应结果。",
        "查询": "RETURN min(NULL) AS value1, std(NULL) AS value2, sum(NULL) AS value3, bit_and(NULL) AS value4, bit_or(NULL,NULL) AS value5"
    },
    {
        "用户": "请找出从'team204'到'player100'的最短路径，并返回该路径信息。",
        "查询": "FIND SHORTEST PATH WITH PROP FROM \"team204\" TO \"player100\" OVER * REVERSELY YIELD path AS p"
    },
    {
        "用户": "展示所有的排序规则。",
        "查询": "SHOW COLLATION"
    },
    {
        "用户": "If the test1 tag does not exist, create a test1 tag that contains two attributes p1 and p2.",
        "查询": "CREATE TAG IF NOT EXISTS test1(p1 string, p2 int)"
    },
    {
        "用户": "Hello, please help me find the relationship attribute between 'Boris Diaw' and 'Spurs' and name it' e '.",
        "查询": "FETCH PROP ON serve \"Boris Diaw\"->\"Spurs\" YIELD edge as e"
    },
    {
        "用户": "Find all the entities that Tracy McGrady likes and return their IDs.",
        "查询": "GO FROM \"Tracy McGrady\" OVER like YIELD like._dst"
    },
    {
        "用户": "显示字符集。",
        "查询": "SHOW CHARSET"
    },
    {
        "用户": "请帮我找出名为'Tim Duncan'的球员的所有二度关注的朋友，并返回这些朋友的名称。",
        "查询": "MATCH p=(v:player{name:\"Tim Duncan\"})-[e:follow*2]->(v2)\nWHERE ALL(e_ in e WHERE e_.degree > 0)\nRETURN DISTINCT v2 AS Friends"
    },
    {
        "用户": "Find a player named 'Tony Parker' and return his name and age.",
        "查询": "LOOKUP ON player WHERE player.name == \"Tony Parker\"\nYIELD properties(vertex).name AS name, properties(vertex).age AS age"
    },
    {
        "用户": "Please identify all entities that 'player101' is interested in and return the degrees and IDs of these entities.",
        "查询": "$var1 = GO FROM \"player101\" OVER follow\nYIELD properties(edge).degree AS Degree, dst(edge) as ID"
    },
    {
        "用户": "查找所有e1中col1大于等于'🐏羊羊'的实体，并返回这些实体的源节点和目标节点。",
        "查询": "LOOKUP ON e1 WHERE e1.col1 >= \"🐏羊羊\" YIELD src(edge) as src, dst(edge) as dst"
    },
    {
        "用户": "Identify entities with a 1 to 2 hop 'follow' relationship with entity 'player100' and return the IDs of these entities.",
        "查询": "MATCH (v) -[e:follow*1..2]->(v2)\nWHERE id(v) == \"player100\"\nRETURN id(v2) AS destination"
    },
    {
        "用户": "Find the relationship of player Manu Ginobili, return his age, degree of relationship, end entity name of relationship, gender, start year of relationship, and age of end entity, sort by name and limit the return of the first three results.",
        "查询": "match (src_v:player{name:\"Manu Ginobili\"})-[e]-(dst_v)\n  return properties(src_v).age,properties(e).degree,properties(dst_v).name AS name,src_v.player.sex,e.start_year,dst_v.player.age\n  order by name limit 3;"
    },
    {
        "用户": "得了肾病的治疗时长是多久？",
        "查询": "LOOKUP ON disease WHERE disease.name == \"肾病\" YIELD properties(vertex).cure_lasttime"
    },
    {
        "用户": "Identify all entities that can be reached through the 'like' relationship in no more than 3 steps starting from 'Tim Duncan', and return the paths of these entities.",
        "查询": "$a = GO FROM \"Tim Duncan\" over * YIELD like._dst AS src, serve._src AS dst;\nFIND NOLOOP PATH FROM $a.src TO $a.dst OVER like UPTO 3 STEPS YIELD path as p"
    },
    {
        "用户": "统计名为'Tim Duncan'的球员与其他实体之间的关系数量。",
        "查询": "MATCH (v:player{name:\"Tim Duncan\"}) -[e]- (v2)\nRETURN count(e)"
    },
    {
        "用户": "删除从 'Boris Diaw' 出发的所有 '喜欢' 边",
        "查询": "GO FROM \"Boris Diaw\" OVER like\nYIELD like._src as src, like._dst as dst, like._rank as rank\n| DELETE EDGE like $-.src->$-.dst @ $-.rank"
    },
    {
        "用户": "找出'player100'所'服务'的所有实体，并返回这些实体的起始年份和结束年份。",
        "查询": "GO FROM \"player100\"\nOVER serve\nYIELD properties(edge).start_year, properties(edge).end_year"
    },
    {
        "用户": "If not, can you help me create a file called only_ What is the attribute of a polygon's label?",
        "查询": "CREATE TAG IF NOT EXISTS only_polygon(geo geography(polygon))"
    },
    {
        "用户": "请帮我找出名为'Tim Duncan'的球员节点和与之相连的所有节点，并返回这些节点。",
        "查询": "MATCH p=(v:player{name:\"Tim Duncan\"})-->(v2)\nRETURN nodes(p)"
    },
    {
        "用户": "Can you help me delete a non-existent tag index?",
        "查询": "DROP TAG INDEX IF EXISTS not_exists_tag_index"
    },
    {
        "用户": "您好，请帮我找出所有起始年份为2016且权重为1的关系，最多返回1000条。",
        "查询": "match ()-[e]->()\nwhere abs(rank(e)) == 1 and e.start_year == 2016\nRETURN e\nlimit 1000"
    },
    {
        "用户": "Please help me identify all entities that are not being watched by other entities and return all their attributes.",
        "查询": "MATCH (v)-[e:follow]->()\nWHERE rank(e)==0\nRETURN *"
    },
    {
        "用户": "请增加一个名为LaMarcus Aldridge，年龄为33的球员，其ID为player102。",
        "查询": "INSERT VERTEX player(name, age) VALUES \"player102\":(\"LaMarcus Aldridge\", 33)"
    },
    {
        "用户": "When a player named 'Tony Parker' is added to their age by 2 and their name and age are returned.",
        "查询": "UPDATE VERTEX ON player \"player101\"\nSET age = age + 2\nWHEN name == \"Tony Parker\"\nYIELD name AS Name, age AS Age"
    },
    {
        "用户": "Please display the information for Task 25.",
        "查询": "SHOW JOB 25"
    },
    {
        "用户": "请在'player101'和'player100'之间建立一条'follow'边，边的属性为95。",
        "查询": "INSERT EDGE follow(degree) VALUES \"player101\" -> \"player100\":(95)"
    },
    {
        "用户": "请找出名为'Tim Duncan'的球员，并帮我找出与他有关系的其他球员的姓名。",
        "查询": "MATCH (v:player{name:\"Tim Duncan\"})-->()<--(v3)\nRETURN v3.player.name AS Name"
    },
    {
        "用户": "统计null值的数量并返回，如果没有则返回0。",
        "查询": "YIELD COUNT(CASE WHEN null THEN null ELSE 1 END) AS nulls"
    },
    {
        "用户": "请问您能帮我查找一下'Boris Diaw'和'Spurs'之间的'serve'关系属性吗？我需要返回源节点、目标节点和关系权重。",
        "查询": "FETCH PROP ON serve 'Boris Diaw'->\"Spurs\" YIELD serve._src, serve._dst, serve._rank"
    },
    {
        "用户": "获取别名为'abc'的学生实体，并返回它们的ID。",
        "查询": "LOOKUP ON student WHERE student.alias == \"abc\" YIELD id(vertex) as id"
    },
    {
        "用户": "您好，请帮我找出所有起始年份为2020且边重为1的关系，最多返回1000条。",
        "查询": "match ()-[e]->()\nwhere abs(rank(e)) == 1 and e.start_year == 2020\nRETURN e\nlimit 1000"
    },
    {
        "用户": "Please help me find the date corresponding to the timestamp 1625469277.",
        "查询": "RETURN datetime(1625469277)"
    },
    {
        "用户": "请返回年龄为32，姓名为Marco Belinelli的实体。",
        "查询": "RETURN {age: 32, name: \"Marco Belinelli\"}"
    },
    {
        "用户": "查找年龄为40的球员，并返回这些球员的姓名。",
        "查询": "LOOKUP ON player WHERE player.age == 40 YIELD id(vertex) as id |\nFETCH PROP ON player $-.id YIELD player.name"
    },
    {
        "用户": "您好，请您帮忙一下，能否帮我找出从 'Tony Parker' 和 'Yao Ming' 到 'Manu Ginobili'、'Spurs' 和 'Lakers' 的最短路径，并将路径信息返回给我呢？",
        "查询": "FIND SHORTEST PATH FROM \"Tony Parker\", \"Yao Ming\" TO \"Manu Ginobili\", \"Spurs\", \"Lakers\" OVER * REVERSELY YIELD path as p"
    },
    {
        "用户": "If the edge does not exist, create an edge named follow with an integer type attribute degree.",
        "查询": "CREATE EDGE IF NOT EXISTS follow(degree int)"
    },
    {
        "用户": "请问您能帮我查找前三个人的姓名吗？",
        "查询": "MATCH (v)\nRETURN v.person.name LIMIT 3"
    },
    {
        "用户": "您好，请帮我获取'Boris Diaw'和'Tony Parker'的属性，并把它们的ID返回给我。",
        "查询": "FETCH PROP ON player 'Boris Diaw', 'Tony Parker' YIELD vertex as node | YIELD id($-.node) as id"
    },
    {
        "用户": "将列表 [1,1,2,2,3,3] 去重并按升序排序，然后返回排序后的结果。",
        "查询": "WITH [1,1,2,2,3,3] AS n\nUNWIND n AS r\nWITH DISTINCT r AS r\nORDER BY r\nRETURN collect(r)"
    },
    {
        "用户": "请帮我找出'player102'所'服务'的所有实体，并返回这些实体的边的目标节点",
        "查询": "GO FROM \"player102\" OVER serve YIELD dst(edge)"
    },
    {
        "用户": "获取名为'Tony Parker'的球员的姓名和年龄。",
        "查询": "FETCH PROP ON player \"Tony Parker\" YIELD player.name, player.age"
    },
    {
        "用户": "Hello, I would like to find those students with teacher names less than 'a' and return their IDs. Can you help me?",
        "查询": "LOOKUP ON student WHERE student.teacher < \"a\" YIELD id(vertex) as id"
    },
    {
        "用户": "请问您能帮我找出从 'Tim Duncan' 到 'LaMarcus Aldridge' 之间通过喜欢关系连接的最短路径吗？",
        "查询": "FIND SHORTEST PATH FROM \"Tim Duncan\" TO \"LaMarcus Aldridge\" OVER like YIELD path as p"
    },
    {
        "用户": "Find all players with scores less than 20 and return their names.",
        "查询": "MATCH (v:player) WHERE v.player.score < 20 RETURN v.player.name AS name"
    },
    {
        "用户": "Identify all entities that can be reached through the 'like' relationship in no more than 3 steps starting from 'Tim Duncan', and return the paths of these entities.",
        "查询": "$a = GO FROM \"Tim Duncan\" over * YIELD like._dst AS src, serve._src AS dst;\nFIND ALL PATH FROM $a.src TO $a.dst OVER like UPTO 3 STEPS YIELD path as p"
    },
    {
        "用户": "Find the ID of the entity 'Tim Duncan' likes' and the corresponding player age for that entity, count the number of entities with an age greater than 40 after deduplication, and return it.",
        "查询": "GO FROM \"Tim Duncan\" OVER like YIELD like._dst AS dst, $$.player.age AS age\n| YIELD DISTINCT count(*) AS count where $-.age > 40"
    },
    {
        "用户": "Hello, please help me find the attribute path from Yao Ming to Danny Green. It is required to be empty or with a similarity of 80 or greater, with a maximum of 3 steps, and then return it to me.",
        "查询": "FIND ALL PATH WITH PROP FROM \"Yao Ming\" TO \"Danny Green\" OVER * BIDIRECT\nWHERE like.likeness is  EMPTY OR like.likeness >= 80 UPTO 3 STEPS YIELD path as p"
    },
    {
        "用户": "找出 'Carmelo Anthony' 和 'Dwyane Wade' 所 '喜欢' 的实体，按照实体名称分组并统计数量和总和，最后按照总和和名称降序排序并返回前两个结果。",
        "查询": "GO FROM 'Carmelo Anthony', 'Dwyane Wade' OVER like\n   YIELD $$.player.name AS name\n   | GROUP BY $-.name\n     YIELD $-.name AS name,\n           SUM(1.5) AS sum,\n           COUNT(*) AS count\n      | ORDER BY $-.sum, $-.name  DESC\n      | LIMIT 2"
    },
    {
        "用户": "删除 'Russell Westbrook' 所 '喜欢' 的所有实体及其边。",
        "查询": "$var = GO FROM \"Russell Westbrook\" OVER like YIELD like._dst as id; DELETE VERTEX $var.id WITH EDGE"
    },
    {
        "用户": "请帮我移除同步监听器。",
        "查询": "REMOVE LISTENER SYNC"
    },
    {
        "用户": "查找名为'Tim Duncan'的球员实体，并返回该实体的ID。",
        "查询": "LOOKUP ON player WHERE player.name == \"Tim Duncan\" YIELD id(vertex) as id"
    },
    {
        "用户": "Hello, could you please help me find the name attribute of an entity with entity type player and name 'Boris Diaw', and return the name attribute to me twice?",
        "查询": "FETCH PROP ON player 'Boris Diaw' YIELD player.name, player.name"
    },
    {
        "用户": "Expand the array [1,2,3] and return each element.",
        "查询": "UNWIND [1,2,3] AS n RETURN n"
    },
    {
        "用户": "找出 'Tracy McGrady' 所 '喜欢' 的所有实体，并返回这些实体的 ID。",
        "查询": "GO FROM \"Tracy McGrady\" OVER like YIELD like._dst"
    },
    {
        "用户": "Returns the result of 1 plus 1 and a random number between 1 and 5.",
        "查询": "RETURN 1+1, rand32(1, 5)"
    },
    {
        "用户": "查询所有球员节点的ID、数量、年龄总和、最大年龄、最小年龄、平均年龄和标签，并按照ID、数量、最大年龄、最小年龄排序，跳过前10个结果，返回接下来的8个结果。",
        "查询": "MATCH(n:player)\n  RETURN id(n) AS id,\n         count(n) AS count,\n         sum(floor(n.player.age)) AS sum,\n         max(n.player.age) AS max,\n         min(n.player.age) AS min,\n         avg(distinct n.player.age)+1 AS age,\n         labels(n) AS lb\n    ORDER BY id, count, max, min\n    SKIP 10 LIMIT 8;"
    },
    {
        "用户": "Please help me rebuild the label index any_ Shape_ Geo_ Index.",
        "查询": "REBUILD TAG INDEX any_shape_geo_index"
    },
    {
        "用户": " 嘿，你能帮我双向找一下从Yao Ming到Danny Green的所有路径吗？路径上的边可以是任何类型的，只要'like'属性的likeness为空或大于等于80就行。最多经过3步，然后把路径信息给我。",
        "查询": "FIND ALL PATH WITH PROP FROM \"Yao Ming\" TO \"Danny Green\" OVER * BIDIRECT\nWHERE like.likeness is  EMPTY OR like.likeness >= 80 AND 1 > 2 UPTO 3 STEPS YIELD path as p"
    },
    {
        "用户": "Identify entities that have a 'liking' or 'service' relationship with 'Rajon Rondo', return the attributes of these relationships, as well as the names, genders, etc. of the associated entities, and return a maximum of 5 records.",
        "查询": "match (src_v)-[e:like|serve]->(dst_v)-[e2]-(dst_v2) where  id(src_v)==\"Rajon Rondo\" return properties(e).degree1,properties(e).degree1,e2.a,dst_v.p.name,dst_v.player.sex1,properties(src_v).name2 limit 5;"
    },
    {
        "用户": "您好，请帮我获取关于'Tim Duncan'的所有属性信息，包括ID、键、标签和属性值。",
        "查询": "FETCH PROP ON * 'Tim Duncan' YIELD  id(vertex), keys(vertex) as keys, tags(vertex) as tags_, properties(vertex) as props"
    },
    {
        "用户": "请帮我创建一个名为team的标签，该标签包含一个字符串类型的属性name。",
        "查询": "CREATE TAG team(name string)"
    },
    {
        "用户": "返回球员名为James Harden、Jonathon Simmons、Klay Thompson、Dejounte Murray、Paul Gasol的实体的姓名。",
        "查询": "MATCH (v)\nWHERE id(v) IN ['James Harden', 'Jonathon Simmons', 'Klay Thompson', 'Dejounte Murray', 'Paul Gasol']\n      AND true\nRETURN v.player.name AS Name"
    },
    {
        "用户": "Insert an edge, Tom likes Conan, with a liking level of 200.",
        "查询": "INSERT EDGE like VALUES \"Tom\"->\"Conan\":(200)"
    },
    {
        "用户": "Starting from 'Tim Duncan', extend the 'like' relationship outward by 3 steps, and the return result is limited to automatically selecting one edge in the first hop, selecting two edges in the second hop, and selecting two edges in the third hop.",
        "查询": "GO 3 STEPS FROM \"Tim Duncan\" OVER like LIMIT [1, 2, 2];"
    },
    {
        "用户": "请问您能帮我查找与 'Tim Duncan' 有 '服务' 关系的所有实体的 ID 吗？",
        "查询": "GO FROM 'Tim Duncan' OVER serve bidirect YIELD serve._dst"
    },
    {
        "用户": "找出与 'Dejounte Murray' 有 '喜欢' 关系的实体，返回这些实体的姓名和年龄，并按年龄降序、姓名升序排序，返回前0个结果。",
        "查询": "MATCH (v1) -[:like]-> (v)\nWHERE id(v1) == 'Dejounte Murray'\nRETURN v.player.name AS Name, v.player.age AS Age\nORDER BY Age DESC, Name ASC\nLIMIT 0"
    },
    {
        "用户": "I want to submit a task, please help me balance the data.",
        "查询": "SUBMIT JOB BALANCE DATA"
    },
    {
        "用户": "Please help me generate a 32-bit random number between 1 and 6.",
        "查询": "YIELD rand32(1, 6)"
    },
    {
        "用户": "Starting from entity 'player101', extend outward by one step through the 'serve' relationship, and return the extended entity and relationship.",
        "查询": "GET SUBGRAPH WITH PROP 1 STEPS FROM \"player101\" OUT serve YIELD VERTICES AS nodes, EDGES AS relationships"
    },
    {
        "用户": "Please help me rebuild any_ Shape_ Geo_ Index index.",
        "查询": "REBUILD TAG INDEX any_shape_geo_index"
    },
    {
        "用户": "If the label does not exist, create a label without attributes.",
        "查询": "CREATE TAG IF NOT EXISTS no_property()"
    },
    {
        "用户": "找出所有被 'Tony Parker' 和 'Tim Duncan' 喜欢的实体，并返回这些实体及其关系，但排除 'Tony Parker' 和 'Tim Duncan' 自身的关系。",
        "查询": "MATCH (v:player)-[e:like]->(v2) WHERE none_direct_src(e) IN [\"Tony Parker\", \"Tim Duncan\"] RETURN *\nMINUS\nMATCH (v:player)-[e:like]->(v2) WHERE id(v) IN [\"Tony Parker\", \"Tim Duncan\"] RETURN *"
    },
    {
        "用户": "Identify non repeating paths from 'Tim Duncan' to 'Tony Parker' or 'LaMarcus Aldridge', with a relationship of 'like' on the path, consisting of up to 3 steps, and return these paths.",
        "查询": "FIND NOLOOP PATH FROM \"Tim Duncan\" TO \"Tony Parker\", \"LaMarcus Aldridge\" OVER like UPTO 3 STEPS YIELD path as p"
    },
    {
        "用户": "Please help me return floating-point values for 1, 1.3, 1000, and NaN.",
        "查询": "RETURN toFloat(1), toFloat('1.3'), toFloat('1e3'), toFloat('not a number')"
    },
    {
        "用户": "将'player100'与'team204'之间的边上的'start_year'属性增加1，当'end_year'大于2010时，返回更新后的'start_year'和'end_year'。",
        "查询": "UPDATE EDGE ON serve \"player100\" -> \"team204\"@0\nSET start_year = start_year + 1\nWHEN end_year > 2010\nYIELD start_year, end_year"
    },
    {
        "用户": "请找出以'player100'为起点，通过'follow'关系所连接的实体，并告诉我起点实体的姓名和终点实体的年龄。",
        "查询": "GO FROM \"player100\" OVER follow YIELD $^.player.name AS startName, $$.player.age AS endAge"
    },
    {
        "用户": "请找出名为'Tim Duncan'的球员经过两跳'follow'关系的所有朋友，且每跳关系的度数要大于1，并返回这些朋友的姓名。",
        "查询": "MATCH p=(v:player{name:\"Tim Duncan\"})-[e:follow*2]->(v2)\nWHERE e.degree > 1\nRETURN DISTINCT v2 AS Friends"
    },
    {
        "用户": "分别从 'Tim Duncan' 和 'Tony Parker' 出发，找出他们'效力'的所有实体，返回球员的名字，开始服务的年份，和所服务的队伍名字，最后返回所有结果",
        "查询": "$var = GO FROM \"Tim Duncan\" OVER serve YIELD $^.player.name, serve.start_year, $$.team.name\nUNION ALL\nGO FROM \"Tony Parker\" OVER serve YIELD $^.player.name, serve.start_year, $$.team.name;\nYIELD $var.*"
    },
    {
        "用户": "Update the name of the player with ID 'player668' to 'Amber', increase the age by 1 year, and return the updated name and age.",
        "查询": "UPSERT VERTEX ON player \"player668\"\nSET name = \"Amber\", age = age + 1\nYIELD name AS Name, age AS Age"
    },
    {
        "用户": "找出名为'Tim Duncan'的球员的所有二度关注者，并返回这些关注者的信息。",
        "查询": "MATCH p=(v:player{name:\"Tim Duncan\"})-[e:follow*2]->(v2)\nRETURN DISTINCT v2 AS Friends"
    },
    {
        "用户": "请帮我返回一个变量 $var，其中包含了两个属性 f 和 t，分别赋值为 1 和 3。",
        "查询": "$var = YIELD 1 AS f, 3 AS t"
    },
    {
        "用户": "Please help me insert an entity named 'n3' and aged 14 into type t2.",
        "查询": "INSERT VERTEX t2 (name, age) VALUES \"11\":(\"n3\", 14)"
    },
    {
        "用户": "Find all edges that do not have related weights and return their top three weighted values.",
        "查询": "match ()-[e]->()\nwhere rank(e) == 0\nRETURN rank(e)\nlimit 3"
    },
    {
        "用户": "Can you help me identify all the aspects of 'Tim Duncan's' services' and provide relevant information?",
        "查询": "GO 0 STEPS FROM 'Tim Duncan' OVER serve YIELD edge as e"
    },
    {
        "用户": "Can you help me obtain the attributes of all entities of 'Boris Diaw' and return their IDs?",
        "查询": "FETCH PROP ON * 'Boris Diaw' YIELD id(vertex)"
    },
    {
        "用户": "Hello, please help me identify all entities that have a 'service' relationship with 'Tim Duncan' and return their IDs to me.",
        "查询": "GO FROM \"Tim Duncan\" OVER serve YIELD serve._dst as id"
    },
    {
        "用户": "Please identify all entities that 'player102' is interested in and return the connection nodes of these entities.",
        "查询": "GO FROM \"player102\" OVER serve YIELD dst(edge)"
    },
    {
        "用户": "请帮我计算反余弦值为0.5。",
        "查询": "RETURN acos(0.5)"
    },
    {
        "用户": "Obtain the name and age attributes of the 'Tim Duncan' player.",
        "查询": "FETCH PROP ON player \"Tim Duncan\" YIELD player.name, player.age"
    },
    {
        "用户": "Hello, please help me check all the attributes related to 'Tim Duncan', including ID, key, label, and attributes.",
        "查询": "FETCH PROP ON * 'Tim Duncan' YIELD id(vertex), keys(vertex) as keys, tags(vertex) as tags_, properties(vertex) as props"
    },
    {
        "用户": "您好，请帮我获取关于'Tim Duncan'的所有属性信息，包括ID、键、标签和属性值。",
        "查询": "FETCH PROP ON * 'Tim Duncan' YIELD  id(vertex), keys(vertex) as keys, tags(vertex) as tags_, properties(vertex) as props"
    },
    {
        "用户": "Edge_ 1_ Expiration time column of ttl_ Change col to empty.",
        "查询": "ALTER EDGE edge_1_ttl  ttl_col = \"\""
    },
    {
        "用户": "Remove the 'test1' label from 'test'.",
        "查询": "DELETE TAG test1 FROM \"test\""
    },
    {
        "用户": "Can you help me find the name and age of a player named 'Tony Parker'?",
        "查询": "FETCH PROP ON player \"Tony Parker\" YIELD player.name, player.age"
    },
    {
        "用户": "Obtain the attributes of 'player101', 'player102', and 'player103', and return the attributes of these vertices.",
        "查询": "FETCH PROP ON player \"player101\", \"player102\", \"player103\" YIELD properties(vertex)"
    },
    {
        "用户": "找出所有年龄小于25岁的球员，并按年龄从小到大排序，返回这些球员的姓名和年龄。",
        "查询": "MATCH (v:player)-->(v2:player)\nWITH DISTINCT v2 AS v2, v2.player.age AS Age\nORDER BY Age\nWHERE Age<25\nRETURN v2.player.name AS Name, Age"
    },
    {
        "用户": "能否帮我生成一个1到100之间的随机数呢？",
        "查询": "RETURN rand32(1,100)"
    },
    {
        "用户": "Find all paths from 'Tim Duncan' to 'Tony Parker' or 'LaMarcus Aldridge', with the relationship 'like' on the path, go through a maximum of three steps, and return these paths.",
        "查询": "FIND ALL PATH FROM \"Tim Duncan\" TO \"Tony Parker\", \"LaMarcus Aldridge\" OVER like UPTO 3 STEPS YIELD path as p"
    },
    {
        "用户": "找出 'Boris Diaw' 所效力的所有球队，且起始球员年龄大于18岁，返回其对这些球队的服务起始年份。",
        "查询": "GO 1 STEPS FROM \"Boris Diaw\" OVER serve\nWHERE $^.player.age > 18\nYIELD serve.start_year as start_year"
    },
    {
        "用户": "创建一个名为team的标签，其中包含一个名为name的字符串属性。",
        "查询": "CREATE TAG team(name string)"
    },
    {
        "用户": "Please help me return the first element in the list [1, 2, 3, 4, 5].",
        "查询": "RETURN list[1, 2, 3, 4, 5] [0..0] AS a"
    },
    {
        "用户": "If the test2 tag does not exist, create a test2 tag that contains attributes p3 (string type) and p4 (integer type).",
        "查询": "CREATE TAG IF NOT EXISTS test2(p3 string, p4 int)"
    },
    {
        "用户": "Find all friends in a 1 to 3 degree relationship with a player named 'Tim Duncan' and return their information.",
        "查询": "MATCH p=(v:player{name:\"Tim Duncan\"})-[e:follow*1..3]->(v2)\nRETURN v2 AS Friends"
    },
    {
        "用户": "插入一个名为 'A Loner'，年龄为 0 的球员节点，并删除该节点及其所有边。",
        "查询": "INSERT VERTEX player(name, age) VALUES \"A Loner\": (\"A Loner\", 0);\nDELETE VERTEX \"A Loner\" WITH EDGE;"
    },
    {
        "用户": "什么病会伴随着心脏病？",
        "查询": "MATCH (n:disease)-[e:accompany_with]->(n1:disease{name:'心脏病'}) return n.disease.name"
    },
    {
        "用户": "Can you help me obtain the edge attributes between 'Boris Diaw' and 'Spurs'? I need to know the relationship of edges, source nodes, target nodes, types, and weights.",
        "查询": "FETCH PROP ON serve \"Boris Diaw\"->\"Spurs\" YIELD edge as relationship, src(edge) as src_edge, dst(edge) as dst_edge, type(edge) as type, rank(edge) as rank"
    },
    {
        "用户": "Please help me use space2 space.",
        "查询": "USE space2"
    },
    {
        "用户": "查找名为'LaMarcus Aldridge'的球员的年龄并返回。",
        "查询": "match (v:player{name:\"LaMarcus Aldridge\"}) return v.player.age;"
    },
    {
        "用户": "Please help me return the trimmed string 'basketball player'.",
        "查询": "RETURN trim(\" basketball player \")"
    },
    {
        "用户": "请帮我找出名为'Tim Duncan'的球员，并找出与其有关系的其他球员，并告诉我他们的姓名。",
        "查询": "MATCH (v:player{name:\"Tim Duncan\"})-->(v2)<--(v3)\nRETURN v3.player.name AS Name"
    },
    {
        "用户": "返回所有为'Pistons'队效力的球员的姓名。",
        "查询": "MATCH (v)-[:serve]->(t)\nWHERE id(t) == 'Pistons'\nRETURN v.player.name AS Name"
    },
    {
        "用户": "您好，请帮我查找一下'Boris Diaw'的所有属性，包括ID、年龄属性和实体本身。",
        "查询": "FETCH PROP ON * 'Boris Diaw' YIELD id(vertex), player.age, vertex as node"
    },
    {
        "用户": "Hello, could you please help me identify all edges with relationship weights of 0 and tell me the weight values of the top three?",
        "查询": "match ()-[e]->()\nwhere rank(e) == 0\nRETURN rank(e)\nlimit 3"
    },
    {
        "用户": "Obtain all tasks.",
        "查询": "SHOW JOBS;"
    },
    {
        "用户": "得了甲状腺炎的治疗时长是多少？",
        "查询": "LOOKUP ON disease WHERE disease.name == \"甲状腺炎\" YIELD properties(vertex).cure_lasttime"
    },
    {
        "用户": "查找名为'Tracy McGrady'的球员距离为0到1的所喜欢的所有实体及其关系。",
        "查询": "MATCH (:player{name:\"Tracy McGrady\"})-[e:like*0..1]-(v)\nRETURN e, v"
    },
    {
        "用户": "请帮我查找名字为'Tony Parker'的球员，然后告诉我他们的姓名和年龄。",
        "查询": "LOOKUP ON player WHERE player.name == \"Tony Parker\"\nYIELD properties(vertex).name, properties(vertex).age"
    },
    {
        "用户": "请帮我创建一个成立时间为1988年3月1日08:00:00的学校实体，ID为'DUT'，名字为'DUT'。",
        "查询": "INSERT VERTEX school(name, found_time) VALUES \"DUT\":(\"DUT\", timestamp(\"1988-03-01T08:00:00\"))"
    },
    {
        "用户": "找出对'Duncan'球员有两到三跳喜欢或服务关系所有实体，且与该球员的关系程度为2到3跳，且若为喜欢关系则喜欢程度为为90，返回这些实体及它们与该球员的关系。",
        "查询": "MATCH (:player{name:\"Tim Duncan\"})<-[e:serve|like*2..3{likeness: 90}]-(v)\nRETURN e, v"
    },
    {
        "用户": "Please help me find the team name or associated player name of a player named 'Tim Duncan' and return that name.",
        "查询": "MATCH (v:player{name:\"Tim Duncan\"})--(v2)\nRETURN\nCASE WHEN v2.team.name IS NOT NULL\nTHEN v2.team.name\nWHEN v2.player.name IS NOT NULL\nTHEN v2.player.name END AS Name"
    },
    {
        "用户": "Please help me obtain the attributes of the t2 entity with ID '11'.",
        "查询": "FETCH PROP ON t2 \"11\" YIELD properties(vertex)"
    },
    {
        "用户": "请帮我找出所有存在'follow'关系的实体，并返回这些关系的属性信息，最多返回3个结果。",
        "查询": "MATCH ()-[e:follow]->()\nRETURN e\nlimit 3"
    },
    {
        "用户": "Obtain the name and age attributes of a player named 'Tony Parker'.",
        "查询": "FETCH PROP ON player \"Tony Parker\" YIELD player.name, player.age"
    },
    {
        "用户": "请帮我向t2中插入一个名为'n3'，年龄为14的顶点。",
        "查询": "INSERT VERTEX t2 (name, age) VALUES \"11\":(\"n3\", 14)"
    },
    {
        "用户": "从 'Tony Parker' 出发，沿着 '喜欢' 关系，找出距离不超过2步的所有实体，返回这些实体的ID、边信息、球员姓名、球员年龄和喜欢程度。",
        "查询": "GO 0 TO 2 STEPS FROM 'Tony Parker' OVER like YIELD DISTINCT dst(edge) as dst, edge as e, $$.player.name, $^.player.age, like.likeness"
    },
    {
        "用户": "请将名为'Tim Duncan'且年龄为42的球员插入到player顶点，并为其分配'player100'作为唯一标识。",
        "查询": "INSERT VERTEX player(name, age) VALUES \"player100\":(\"Tim Duncan\", 42)"
    },
    {
        "用户": "Find all entities served by 'player100' and return the start and end years of these entities.",
        "查询": "GO FROM \"player100\"\nOVER serve\nYIELD properties(edge).start_year, properties(edge).end_year"
    },
    {
        "用户": "If the player tag does not exist, create a player tag that includes name and age attributes.",
        "查询": "CREATE TAG IF NOT EXISTS player(name string, age int)"
    },
    {
        "用户": "从 'Tim Duncan' 出发，经过 '喜欢' 和 '效力' 关系，获取两步内的所有实体和关系。",
        "查询": "GET SUBGRAPH WITH PROP 2 STEPS FROM 'Tim Duncan' IN like OUT serve YIELD vertices as nodes, edges as relationships"
    },
    {
        "用户": "Hello, please help me search for the relationship properties between 'Boris Diaw' and 'Spurs', including the properties of the edges, the properties of the start and end points, the types of edges, and the weights of the edges.",
        "查询": "FETCH PROP ON serve \"Boris Diaw\"->\"Spurs\" YIELD edge as relationship, src(edge) as src_edge, dst(edge) as dst_edge, type(edge) as type, rank(edge) as rank"
    },
    {
        "用户": "请问您能帮我查找一下ID为'Boris Diaw'的实体吗？",
        "查询": "MATCH (v) WHERE id(v) == 'Boris Diaw' RETURN (v)"
    },
    {
        "用户": "Identify the teams served by Tim Duncan and their starting years, as well as the teams served by Tony Parker and their starting years, and merge the two results again.",
        "查询": "(GO FROM \"Tim Duncan\" OVER like YIELD like._dst as id |\n   GO FROM $-.id OVER serve YIELD $^.player.name, serve.start_year, $$.team.name)\nUNION DISTINCT\nGO FROM \"Tony Parker\" OVER serve YIELD $^.player.name, serve.start_year, $$.team.name"
    },
    {
        "用户": "Obtain the start year attribute on the 'serve' relationship from 'player100' to 'team204'.",
        "查询": "FETCH PROP ON serve \"player100\" -> \"team204\"\nYIELD properties(edge).start_year"
    },
    {
        "用户": "Find all friends of a player named 'Tim Duncan' and return the number of friends and the number of friends after deduplication.",
        "查询": "MATCH (n:player {name : \"Tim Duncan\"})-[]->(friend:player)-[]->(fof:player)\nRETURN count(fof), count(DISTINCT fof)"
    },
    {
        "用户": "Please help me find the label of the entity with ID player100.",
        "查询": "MATCH (v)-[e:serve]->()\nWHERE id(v)==\"player100\"\nRETURN labels(v)"
    },
    {
        "用户": "Find all the entities that 'Russell Westbrook' likes' and return them.",
        "查询": "GO FROM \"Russell Westbrook\" OVER like YIELD like._dst"
    },
    {
        "用户": "Identify three entities that have a 'like' relationship with 'LeBron James' and return the names and relationship paths of these three entities.",
        "查询": "MATCH p = (n)-[:like]->(m)-[:like]->(k)\nWHERE id(n) == \"LeBron James\"\nRETURN p, n.player.name, m.player.name, k.player.name"
    },
    {
        "用户": "获取 'Tony Parker' 球员的姓名和年龄。",
        "查询": "FETCH PROP ON player \"Tony Parker\" YIELD player.name, player.age"
    },
    {
        "用户": "Identify all entities and their relationships that have a 'like' relationship with entity 'Tim Duncan'.",
        "查询": "MATCH (n)-[e:like*2..3]-(v)\nWHERE id(n) == \"Tim Duncan\"\nRETURN e, v"
    },
    {
        "用户": "If the end year of the edge is 2010, update the end year of the edge to 2022 and return the start and end years.",
        "查询": "UPSERT EDGE on serve\n\"player666\" -> \"team200\"@0\nSET end_year = 2022\nWHEN end_year == 2010\nYIELD start_year, end_year"
    },
    {
        "用户": "Hello, please help me find the entities, relationship types, and team names related to 'LeBron James'.",
        "查询": "MATCH (v1) -[r]-> (v2)\nWHERE id(v1) == \"LeBron James\"\nRETURN type(r) AS Type, v2.team.name AS Name"
    },
    {
        "用户": "糖尿病的注意事项有哪些？",
        "查询": "LOOKUP ON disease WHERE disease.name == \"糖尿病\" YIELD properties(vertex).prevent"
    },
    {
        "用户": " 您能帮我统计一下存在两个节点之间的边的节点数量吗？",
        "查询": "MATCH () --> (v) --> () RETURN count(*)"
    },
    {
        "用户": "请帮我返回列表[1, 2, 3, 4, 5]中从第3个到第1个元素的子列表作为a。",
        "查询": "RETURN list[1, 2, 3, 4, 5] [3..1] AS a"
    },
    {
        "用户": "找出'player666','player667','player668'所有的服务记录，并返回这些记录的起始年份和结束年份。",
        "查询": "GO FROM \"player666\", \"player667\", \"player668\"\nOVER serve\nYIELD properties(edge).start_year, properties(edge).end_year"
    },
    {
        "用户": "Find a player named 'LaMarcus Aldridge' and return their gender and age attributes.",
        "查询": "match (v:player) where properties(v).name==\"LaMarcus Aldridge\" return v.player.sex,properties(v).age;"
    },
    {
        "用户": "请问您能帮我找一下从 'Shaquille ' 到 Manu Ginobili 的最短路径吗？路径上最多经过5个实体，并且能返回路径信息吗？",
        "查询": "YIELD \"Shaquille O\\'Neal\" AS src\n| FIND SHORTEST PATH FROM $-.src TO \"Manu Ginobili\" OVER * UPTO 5 STEPS YIELD path as p"
    },
    {
        "用户": "将边edge_1_ttl的过期时间字段ttl_col设置为空。",
        "查询": "ALTER EDGE edge_1_ttl  ttl_col = \"\""
    },
    {
        "用户": "Please help me calculate the remainder of dividing the hash value of 'Tim' by 100.",
        "查询": "YIELD hash(\"Tim\") % 100"
    },
    {
        "用户": "找出名字中包含'Tim'的球员，然后找出他们所喜欢的人，并返回这些人的年龄、是否喜欢'Tony Parker'、源节点和目标节点的ID。",
        "查询": "$var = LOOKUP ON player\nWHERE player.name CONTAINS 'Tim'\nYIELD player.age AS age, id(vertex) AS vid;\nGO FROM $var.vid\nOVER like REVERSELY\nYIELD\n  $var.age AS age,\n  ('Tony Parker' == like._dst) AS liked,\n  like._src AS src,\n  like._dst AS dst"
    },
    {
        "用户": "如果player_with_default标签不存在，则创建一个带有默认年龄为20的球员实体标签。",
        "查询": "CREATE TAG IF NOT EXISTS player_with_default(name string, age int DEFAULT 20)"
    },
    {
        "用户": "Please focus entity 'player102' on entity 'player100' and set the attention level to 75.",
        "查询": "INSERT EDGE follow(degree) VALUES \"player102\" -> \"player100\":(75)"
    },
    {
        "用户": "请帮我找出年龄在20到25岁之间的球员的姓名和年龄。",
        "查询": "MATCH (v:player)\nWHERE v.player.age IN range(20,25)\nRETURN v.player.name, v.player.age"
    },
    {
        "用户": "请帮我计算一下字符串'basketball'的长度。",
        "查询": "RETURN length(\"basketball\")"
    },
    {
        "用户": "如果没有名为player的标签存在，请帮我创建一个名为player的标签，其中包含姓名和年龄属性，默认年龄为18岁。",
        "查询": "CREATE TAG IF NOT EXISTS player(name string, age int NOT NULL DEFAULT 18)"
    },
    {
        "用户": "Identify entity pairs that have a 'like' relationship with 'LeBron James' and return the paths of these entity pairs, the player names of the starting entity, and the player names of the ending entity.",
        "查询": "MATCH p = (n)-[:like]->(m)\nWHERE id(n) == \"LeBron James\"\nRETURN p, n.player.name, m.player.name"
    },
    {
        "用户": "Obtain all entities that can be reached through the 'like' relationship starting from 'Tim Duncan' and return information about these entities.",
        "查询": "GET SUBGRAPH FROM 'Tim Duncan' OUT like  YIELD vertices as v"
    },
    {
        "用户": " 您好，请帮我找一下那些年龄为40或20且有名字的球员，我需要他们的ID和年龄信息。",
        "查询": "LOOKUP ON player WHERE player.age IN [40, 20] AND player.name > \"\" YIELD id(vertex) as id, player.age"
    },
    {
        "用户": "Obtain the name and age attributes of the 'Tony Parker' player.",
        "查询": "FETCH PROP ON player \"Tony Parker\" YIELD player.name, player.age"
    },
    {
        "用户": "请帮我生成一个包含数字1到5的列表，并将该列表的索引范围从0到10赋值给变量a。",
        "查询": "RETURN list[1, 2, 3, 4, 5] [0..10] AS a"
    },
    {
        "用户": "Find all teams to which a player named 'Tim Duncan' belongs and return all physical relationships related to that player.",
        "查询": "MATCH (v:player{name:\"Tim Duncan\"})-[e]->(t) WHERE (v)-[e]->(t:team) RETURN (v)-->()"
    },
    {
        "用户": "请帮我使用space2空间。",
        "查询": "USE space2"
    },
    {
        "用户": "找出与 'Tim Duncan' 有两到三跳 '喜欢' 关系且喜好程度为90的实体，并返回这些关系和实体。",
        "查询": "MATCH (n)-[e:like*2..3{likeness: 90}]->(v)\nWHERE id(n) == \"Tim Duncan\"\nRETURN e, v"
    },
    {
        "用户": "Identify non repeating paths from 'Tim Duncan' to 'Tony Parker' or 'Manu Ginobili', with a relationship of 'like' and a maximum of 3 hops, and return path information.",
        "查询": "FIND NOLOOP PATH FROM \"Tim Duncan\" TO \"Tony Parker\", \"Manu Ginobili\" OVER like UPTO 3 STEPS YIELD path as p"
    },
    {
        "用户": "Starting from 'player100', go through steps 1 to 3 to identify all entities and return their names and ages. Each step can sample two edges.",
        "查询": "GO 1 TO 3 STEPS FROM \"player100\"\nOVER *\nYIELD properties($$).name AS NAME, properties($$).age AS Age\nSAMPLE [2,2,2]"
    },
    {
        "用户": "如果关系边follow不存在，则创建一个名为follow的边，边上包含一个整型属性degree。",
        "查询": "CREATE EDGE IF NOT EXISTS follow(degree int)"
    },
    {
        "用户": "找出 'Chris Paul' 所 '喜欢' 的所有实体，并返回这些实体的 ID。",
        "查询": "GO FROM \"Chris Paul\" OVER like YIELD like._dst"
    },
    {
        "用户": "Hi, can you help me with ttl_ Expire_ Insert a new node under the tag02 tag? The node is named 't-e-t-02' and has two attributes a and b. The a attribute should be set to the current timestamp, and the b attribute should be set to 10.",
        "查询": "INSERT VERTEX ttl_expire_tag02(a,b) VALUES \"t-e-t-02\":(timestamp(),10);"
    },
    {
        "用户": "您好，请帮我查找一下从'Thunders'顶点出发，沿着边serve遍历的关系，我需要知道它们的源节点、边的属性、边的ID、目标节点以及目标节点的ID。",
        "查询": "GO FROM 'Thunders' OVER serve REVERSELY YIELD $^ as src,tags($^), id($^), id($$), $$ as dst"
    },
    {
        "用户": "请帮我找出年龄在20到25岁之间的球员的姓名和年龄。",
        "查询": "MATCH (v:player)\nWHERE v.player.age IN range(20,25)\nRETURN v.player.name, v.player.age"
    },
    {
        "用户": "Create a label called man, containing attributes such as name, email, age, gender, and timestamp, and set the expiration time to 100 seconds, with the expiration column being row_ Timestamp.",
        "查询": "CREATE TAG man(name string, email string,  age int, gender string, row_timestamp timestamp) ttl_duration = 100, ttl_col = \"row_timestamp\";"
    },
    {
        "用户": "找出与 'LeBron James' 有 '喜欢' 关系的实体对，并返回这些实体对的路径、起点实体的球员名和终点实体的球员名。",
        "查询": "MATCH p = (n)-[:like]->(m)\nWHERE id(n) == \"LeBron James\"\nRETURN p, n.player.name, m.player.name"
    },
    {
        "用户": "获取球员 'Tim Duncan' 的姓名和年龄。",
        "查询": "FETCH PROP ON player \"Tim Duncan\" YIELD player.name, player.age"
    },
    {
        "用户": "Insert an edge, Tom likes Conan, with a liking level of 200.",
        "查询": "INSERT EDGE like VALUES \"Tom\"->\"Conan\":(200)"
    },
    {
        "用户": "查找球员Carmelo Anthony的年龄并返回。",
        "查询": "match (v:player) where id(v)==\"Carmelo Anthony\" return v.player.age;"
    },
    {
        "用户": "插入一个名为'Tim Duncan'，年龄为 42 的球员实体，并赋予其唯一标识'player100'。",
        "查询": "INSERT VERTEX player(name, age) VALUES \"player100\":(\"Tim Duncan\", 42)"
    },
    {
        "用户": "从 'Tony Parker' 出发，沿着 '喜欢' 关系，找出距离不超过2步的所有实体，返回这些实体的ID、边信息、球员姓名、球员年龄和喜欢程度。",
        "查询": "GO 0 TO 2 STEPS FROM 'Tony Parker' OVER like YIELD DISTINCT dst(edge) as dst, edge as e, $$.player.name, $^.player.age, like.likeness"
    },
    {
        "用户": "Hello, please help me find the entities associated with 'Tony Parker', with a distance of 2 hops, and return their IDs.",
        "查询": "GO 1 STEPS FROM 'Tony Parker' OVER like YIELD like._dst AS id\n| GO 2 STEPS FROM $-.id OVER like YIELD like._dst"
    },
    {
        "用户": "Please display the host information and version information of Graph, Storage, and Meta services.",
        "查询": "SHOW HOSTS"
    },
    {
        "用户": "查找名为'Tracy McGrady'的球员与喜欢程度为90的球员或球队之间的服务或喜欢关系，并返回这些关系及对应的实体。",
        "查询": "MATCH (:player{name:\"Tracy McGrady\"})-[e:serve|like*0..1{likeness: 90}]->(v)\nRETURN e, v"
    },
    {
        "用户": "Returns the names of entities with player names James Harden, Jonathan Simmons, Klay Thompson, Dejounte Murray, and Paul Gasol.",
        "查询": "MATCH (v)\nWHERE id(v) IN ['James Harden', 'Jonathon Simmons', 'Klay Thompson', 'Dejounte Murray', 'Paul Gasol']\n      AND true\nRETURN v.player.name AS Name"
    },
    {
        "用户": "Hello, please help me find the IDs of all entities in type t1 where col4 is' banana 'and col3 is greater than true.",
        "查询": "LOOKUP ON t1 WHERE t1.col4 == \"banana\" AND t1.col3 > true YIELD id(vertex) as id"
    },
    {
        "用户": "请创建一个ID为'dut'，名为'dut'，成立时间为当前时间戳的学校实体。",
        "查询": "INSERT VERTEX school(name, found_time) VALUES \"dut\":(\"dut\", timestamp())"
    },
    {
        "用户": "找出与 'Tim Duncan' 有 '喜欢' 或 '服务' 关系的实体之间的路径，最多3步，按路径长度排序，返回前5条路径。",
        "查询": "$a = GO FROM \"Tim Duncan\" over * YIELD like._dst AS src, serve._src AS dst;\nFIND ALL PATH FROM $a.src TO $a.dst OVER like UPTO 3 STEPS YIELD path as p |\nORDER BY $-.p | LIMIT 5"
    },
    {
        "用户": "Could you please help me find the students whose names start before 'a' and tell me their ID, name, and age?",
        "查询": "LOOKUP ON student WHERE student.name < \"a\" YIELD id(vertex) as id, student.name as name, student.age as age"
    },
    {
        "用户": "统计列表中的元素数量、总数量以及去重后的元素数量。",
        "查询": "WITH [NULL, 1, 1, 2, 2] As a UNWIND a AS b\nRETURN count(b), count(*), count(DISTINCT b)"
    },
    {
        "用户": "请帮我重建标签索引any_shape_geo_index。",
        "查询": "REBUILD TAG INDEX any_shape_geo_index"
    },
    {
        "用户": "Please help me identify all players with age information and tell me their names and ages.",
        "查询": "MATCH (v:player)\nWHERE exists(v.player.age)\nRETURN v.player.name, v.player.age"
    },
    {
        "用户": "将列表 [1,2,3,3] 展开并去重，然后求和并返回结果。",
        "查询": "UNWIND [1,2,3,3] AS d RETURN sum(distinct d) AS sum"
    },
    {
        "用户": "找出与 'Nobody' 有 '喜欢' 关系的实体，并返回数字 1。",
        "查询": "GO FROM \"Nobody\" OVER like YIELD like._dst | YIELD 1"
    },
    {
        "用户": "将实体'player101'关注实体'player102'，并设置关注度为90。",
        "查询": "INSERT EDGE follow(degree) VALUES \"player101\" -> \"player102\":(90)"
    },
    {
        "用户": "Find all entities that 'player100' follows and return the names of these entities and the team they belong to.",
        "查询": "GO FROM \"player100\" OVER follow\nYIELD dst(edge) AS id |\nGO FROM $-.id OVER serve\nYIELD properties($^).name AS Player, properties($$).name AS Team"
    },
    {
        "用户": "获取名为'Amber'的学生的grade和number属性。",
        "查询": "FETCH PROP ON student \"Amber\" YIELD student.grade, student.number"
    },
    {
        "用户": "当名字为'Tony Parker'的球员年龄加2岁时，返回该球员的名字和年龄。",
        "查询": "UPDATE VERTEX ON player \"player101\"\nSET age = age + 2\nWHEN name == \"Tony Parker\"\nYIELD name AS Name, age AS Age"
    },
    {
        "用户": "Hello, could you please help me find all entities with a distance of 2 starting from 'Tim Duncan' and through the 'serve' relationship, and return the edge information between these entities?",
        "查询": "GO 2 STEPS FROM \"Tim Duncan\" OVER serve YIELD edge as e"
    },
    {
        "用户": "如果不存在的话，能否帮我创建一个具有地理信息的任意形状的any_shape_edge边呢？",
        "查询": "CREATE EDGE IF NOT EXISTS any_shape_edge(geo geography)"
    },
    {
        "用户": "高血压需要做哪些检查？",
        "查询": "GO FROM \"高血压\" OVER need_check YIELD dst(edge);"
    },
    {
        "用户": "查找名为'Tim Duncan'的球员所二跳喜欢或三跳喜欢的所有实体，返回数量统计结果。",
        "查询": "MATCH (:player{name: \"Tim Duncan\"})-[e:like*2..3]-(v)\nRETURN count(v)"
    },
    {
        "用户": "将球员'player667'的年龄更新为31，并返回更新后的姓名和年龄。",
        "查询": "UPSERT VERTEX ON player \"player667\"\nSET age = 31\nYIELD name AS Name, age AS Age"
    },
    {
        "用户": "请找出与实体'A'有一步关联的所有关注关系，并返回这些关系的起点和终点。",
        "查询": "GO 1 STEPS FROM \"A\" OVER follow YIELD src(edge),dst(edge)"
    },
    {
        "用户": "Find player entities aged 40 or older and return their ID and age information.",
        "查询": "LOOKUP ON player WHERE player.age >= 40.0 YIELD id(vertex) as name, player.age AS Age"
    },
    {
        "用户": "找出名为'Tony Parker'的球员所关联的所有球员，并返回去重后的球员的姓名和年龄。",
        "查询": "MATCH (v:player{name:\"Tony Parker\"})--(v2:player)\nRETURN DISTINCT v2.player.name, v2.player.age"
    },
    {
        "用户": "Please help me find the relationship path between a player named 'Tim Duncan' and other entities, and tell me the length of the path.",
        "查询": "MATCH p=(v:player{name:\"Tim Duncan\"})-->(v2) return length(p)"
    },
    {
        "用户": "将'player100'从 1998 年到 2017 年期间加入到'team204'的服务队伍中，并设置权重为1。",
        "查询": "insert edge serve(start_year,end_year)\nvalues \"player100\"->\"team204\"@1:(1998, 2017)"
    },
    {
        "用户": "When 'end'_ When the value of year 'is equal to 2010, update the weight on the edge of' serve 'to 0 and the relationship between' player666 'and' team200 'to' end '_ Set the value of year to 2021 and return 'start'_ Year 'and' end_ Year '.",
        "查询": "UPSERT EDGE on serve\n\"player666\" -> \"team200\"@0\nSET end_year = 2021\nWHEN end_year == 2010\nYIELD start_year, end_year"
    },
    {
        "用户": "Starting from 'Tim Duncan', extend the 'like' relationship outward by 3 steps, and the return result is limited to automatically selecting one edge in the first hop, selecting two edges in the second hop, and selecting two edges in the third hop.",
        "查询": "GO 3 STEPS FROM \"Tim Duncan\" OVER like LIMIT [1, 2, 2];"
    },
    {
        "用户": "Hello, I would like to inquire about all entities and relationships that have had a 2-3 level 'serve' relationship with 'Tim Duncan' since 2000. Can you help me find them?",
        "查询": "MATCH (n)-[e:serve*2..3{start_year: 2000}]-(v)\nWHERE id(n) == \"Tim Duncan\"\nRETURN e, v"
    },
    {
        "用户": "将实体'player101'关注实体'player102'，关注度为90。",
        "查询": "INSERT EDGE follow(degree) VALUES \"player101\" -> \"player102\":(90)"
    },
    {
        "用户": "找出年龄大于等于42岁的'player100'所关注的所有实体，并返回这些实体信息。",
        "查询": "GO FROM \"player100\" OVER follow\nWHERE $^.player.age >= 42\nYIELD dst(edge)"
    },
    {
        "用户": "Find all players aged 25 or 28 and return their names and ages.",
        "查询": "LOOKUP ON player\nWHERE player.age IN [25,28]\nYIELD properties(vertex).name, properties(vertex).age"
    },
    {
        "用户": "删除 'Russell Westbrook' 所 '喜欢' 的所有实体及其边。",
        "查询": "$var = GO FROM \"Russell Westbrook\" OVER like YIELD like._dst as id; DELETE VERTEX $var.id WITH EDGE"
    },
    {
        "用户": "Please help me find a player named 'Tim Duncan' and return all the entities associated with him and the length of their relationships.",
        "查询": "MATCH p=(v:player{name:\"Tim Duncan\"})-->(v2) return length(p)"
    },
    {
        "用户": "找出所有属性值为90的关系，并返回这些关系。",
        "查询": "MATCH ()-[e]->()\nWITH e, properties(e) as props, keys(properties(e)) as kk\nLIMIT 10000 WHERE [i in kk where props[i] == 90]\nRETURN e"
    },
    {
        "用户": "Focus entity 'player102' on entity 'player100' and set the attention level to 75.",
        "查询": "INSERT EDGE follow(degree) VALUES \"player102\" -> \"player100\":(75)"
    },
    {
        "用户": "Find all the entities that Tracy McGrady likes and return their IDs.",
        "查询": "GO FROM \"Tracy McGrady\" OVER like YIELD like._dst"
    },
    {
        "用户": "If there is no player named_ Index_ Create an index based on the label index of 1, with the field of the index being the name attribute of the player and a length limit of 20.",
        "查询": "CREATE TAG INDEX IF NOT EXISTS player_index_1 ON player(name(20))"
    },
    {
        "用户": "Find the entities that have a 'like' relationship with 'Dejounte Murray', sort them in descending age and ascending name order, skip the first 11 results, and return the names and ages of the next 3 entities.",
        "查询": "MATCH (v1) -[:like]-> (v)\nWHERE id(v1) == 'Dejounte Murray'\nRETURN v.player.name AS Name, v.player.age AS Age\nORDER BY Age DESC, Name ASC\nSKIP 11\nLIMIT 3"
    },
    {
        "用户": "当'end_year'的值等于2010时，更新'serve'边上权重为0，且为'player666'到'team200'的关系，将'end_year'的值设为2021，返回'start_year'和'end_year'。",
        "查询": "UPSERT EDGE on serve\n\"player666\" -> \"team200\"@0\nSET end_year = 2021\nWHEN end_year == 2010\nYIELD start_year, end_year"
    },
    {
        "用户": "找出所有年龄小于25岁的球员，并按照年龄从小到大排序，返回这些球员的姓名和年龄。",
        "查询": "MATCH (v:player)-->(v2:player)\nWITH DISTINCT v2 AS v2, v2.player.age AS Age\nORDER BY Age\nWHERE Age<25\nRETURN v2.player.name AS Name, Age"
    },
    {
        "用户": "Create a file called student_ The tag index of TA, which contains the first 10 characters of the alias and teacher attributes in the student tag.",
        "查询": "CREATE TAG INDEX student_ta ON student(alias(10), teacher(10))"
    },
    {
        "用户": "Find entities that have a two to three hop service or favorite relationship with a player named 'Tim Duncan', and record the number of paths.",
        "查询": "MATCH (:player{name:\"Tim Duncan\"})-[e:serve|like*2..3]-(v)\nRETURN COUNT(e)"
    },
    {
        "用户": "Delete all entities and their associated edges that 'Russell Westbrook' likes.",
        "查询": "$var = GO FROM \"Russell Westbrook\" OVER like YIELD like._dst as id; DELETE VERTEX $var.id WITH EDGE"
    },
    {
        "用户": "Delete label test.",
        "查询": "DROP TAG test"
    },
    {
        "用户": "Identify the intersection of the ID, degree, and age of entities related to 'player102' and those related to 'player100'.",
        "查询": "MATCH (v:player)-[e:follow]->(v2)\nWHERE id(v) == \"player102\"\nRETURN id(v2) As id, e.degree As Degree, v2.player.age AS Age\nINTERSECT\nMATCH (v:player)-[e:follow]->(v2)\nWHERE id(v) == \"player100\"\nRETURN id(v2) As id, e.degree As Degree, v2.player.age AS Age"
    },
    {
        "用户": "Find all the teams served by 'Boris Diaw' and return four values, including the name of the starting node, the starting time of the service relationship, the name of the ending team, and the team.",
        "查询": "$var = GO FROM \"Boris Diaw\" OVER serve YIELD $^.player.name as name, serve.start_year as start, $$.team.name as team;YIELD $var.team"
    },
    {
        "用户": "找出所有曾经为'Thunders'提供服务的实体，然后返回它们的源节点、边上的标签、边的ID、目标节点以及目标节点的ID",
        "查询": "GO FROM 'Thunders' OVER serve REVERSELY YIELD $^ as src,tags($^), id($^), id($$), $$ as dst"
    },
    {
        "用户": "请帮我查询一下player图中所有实体的数量。",
        "查询": "LOOKUP ON player YIELD id(vertex)|\nYIELD COUNT(*) AS Player_Number"
    },
    {
        "用户": "获取 'Tony Parker' 球员的姓名和年龄。",
        "查询": "FETCH PROP ON player \"Tony Parker\" YIELD player.name, player.age"
    },
    {
        "用户": "您好，请问您能帮我找一下从 'Tony Parker' 或 'Yao Ming' 到 'Manu Ginobili'、'Spurs' 和 'Lakers' 的最短路径吗？路径最多只能有5个步骤，路径上要包含的所有实体和关系，然后把路径信息返回给我好吗？",
        "查询": "FIND SHORTEST PATH FROM \"Tony Parker\", \"Yao Ming\" TO \"Manu Ginobili\", \"Spurs\", \"Lakers\" OVER * UPTO 5 STEPS YIELD path as p"
    },
    {
        "用户": "May I ask if the string 'apple' starts with 'b' and if 'apple' starts with 'app'.",
        "查询": "RETURN'apple'STARTS WITH'b','apple'NOT STARTS WITH'app'"
    },
    {
        "用户": "Identify all entities with 'follow' relationships and return the first three relationships",
        "查询": "MATCH ()-[e:follow]->()\nRETURN e\nlimit 3"
    },
    {
        "用户": "请帮我找出所有没有被其他实体关注的实体，并返回它们的所有属性。",
        "查询": "MATCH (v)-[e:follow]->()\nWHERE rank(e)==0\nRETURN *"
    },
    {
        "用户": "获取所有学生中，其老师的名字字典序小于'a'的学生，并返回这些学生的ID。",
        "查询": "LOOKUP ON student WHERE student.teacher < \"a\" YIELD id(vertex) as id"
    },
    {
        "用户": "请问您能帮我删除标签索引 person_ttl_2_index_number 吗？",
        "查询": "DROP TAG INDEX person_ttl_2_index_number"
    },
    {
        "用户": "Find all entities that 'player100' is interested in and return the target entities of their edges",
        "查询": "GO FROM \"player100\" OVER follow WHERE properties($$).name IS NOT EMPTY YIELD dst(edge)"
    },
    {
        "用户": "Obtain the attributes of the attention relationship from 'player101' to 'player100'.",
        "查询": "FETCH PROP ON follow \"player101\" -> \"player100\" YIELD properties(edge)"
    },
    {
        "用户": "Please help me generate a random number between 1 and 6.",
        "查询": "YIELD rand32(1, 6)"
    },
    {
        "用户": "Please help me find all the relationships and return to the first three.",
        "查询": "MATCH ()<-[e]-()\nRETURN e\nLIMIT 3"
    },
    {
        "用户": "Hello, could you help me find the shortest path from 'Tiago Splitter' to 'Tony Parker'? The path can only have one step at most. Could you please help me check and return it to me.",
        "查询": "FIND SHORTEST PATH FROM \"Tiago Splitter\" TO \"Tony Parker\" OVER * UPTO 1 STEPS YIELD path as p"
    },
    {
        "用户": "Tim Duncan likes Tim Parker with a liking level of 99; Tim Parker likes Tony Parker to a degree of 90.",
        "查询": "INSERT EDGE like(likeness) VALUES \"Tim Duncan\"->\"Tim Parker\":(99);\nINSERT EDGE like(likeness) VALUES \"Tim Parker\"->\"Tony Parker\":(90);"
    },
    {
        "用户": "Hello, please help me find entities that meet the following conditions: e1: col1 is less than or equal to 2, and e1: col5 is less than '22:22:22'. Then please return the source and target nodes of these entities.",
        "查询": "LOOKUP ON e1 WHERE e1.col1 <= 2 AND e1.col5 < time(\"22:22:22\") YIELD src(edge) as src, dst(edge) as dst"
    },
    {
        "用户": "Please help me obtain the attributes on edge '201' ->'302' and return the text representation of the geometric attributes of that edge.",
        "查询": "FETCH PROP ON any_shape_edge \"201\"->\"302\" YIELD ST_ASText(any_shape_edge.geo)"
    },
    {
        "用户": "获取'player100'与'team204'之间权重为1的边，并返回边的别名为 e。",
        "查询": "FETCH PROP ON serve \"player100\" -> \"team204\"@1 YIELD edge AS e"
    },
    {
        "用户": "我希望使用Drainer服务（192.168.10.106:9889）进行登录，您能帮我实现吗？",
        "查询": "SIGN IN DRAINER SERVICE(192.168.10.106:9889)"
    },
    {
        "用户": "Starting from entity 'player101', extend one step outward through edge 'serve' to return all vertices and edges.",
        "查询": "GET SUBGRAPH WITH PROP 1 STEPS FROM \"player101\" OUT serve YIELD VERTICES AS nodes, EDGES AS relationships"
    },
    {
        "用户": "获取'Boris Diaw'的球员的姓名、年龄，并返回该球员年龄是否大于30的结果。",
        "查询": "FETCH PROP ON player 'Boris Diaw' YIELD player.name, player.age, player.age > 30"
    },
    {
        "用户": "Find the entity of player 'Tony Parker' and return its ID.",
        "查询": "LOOKUP ON player WHERE player.name == \"Tony Parker\" YIELD id(vertex) as id"
    },
    {
        "用户": "如果没有player标签的话，能否帮我创建一个player标签？该标签需要包含非空的姓名和年龄两个属性。",
        "查询": "CREATE TAG IF NOT EXISTS player(name string NOT NULL, age int)"
    },
    {
        "用户": "Find all the entities that Paul George likes and return them.",
        "查询": "GO FROM \"Paul George\" OVER like YIELD like._dst"
    },
    {
        "用户": "找出 'Tim Duncan' 所 '喜欢' 的实体及其一度和二度关系，返回这些实体和关系的源节点、目标节点和边信息。",
        "查询": "GO FROM 'Tim Duncan' OVER like YIELD like._src as src, like._dst as dst |\nGO 1 TO 2 STEPS FROM $-.src OVER like YIELD $-.src as src, $-.dst, like._dst as dst, edge as e"
    },
    {
        "用户": "查找球员Carmelo Anthony的年龄并返回。",
        "查询": "match (v:player) where id(v)==\"Carmelo Anthony\" return v.player.age;"
    },
    {
        "用户": "查找年龄大于等于40岁的球员实体，并返回这些实体的ID和年龄信息。",
        "查询": "LOOKUP ON player WHERE player.age >= 40.0 YIELD id(vertex) as name, player.age AS Age"
    },
    {
        "用户": "Insert two vertices, one for the team named 'Trail Blazers' and the other for the team named' Spurs'.",
        "查询": "INSERT VERTEX team(name) VALUES \"team203\":(\"Trail Blazers\"), \"team204\":(\"Spurs\")"
    },
    {
        "用户": "找出 'Tim Duncan' 所 '喜欢' 或 '服务' 的实体，且这些实体的 '服务开始年份' 大于 1970 或 '年龄' 小于 50，返回这些实体的 ID 和边信息。",
        "查询": "GO FROM \"Tim Duncan\" OVER like, serve\n  WHERE serve.start_year > 1970 OR properties($$).age < 50\n  YIELD $$ AS dst, edge AS e"
    },
    {
        "用户": "Returns whether 'apple' ends with 'app', whether it ends with 'e', whether it ends with 'E', and whether it ends with 'b'.",
        "查询": "RETURN'apple'ENDS WITH'app','apple'ENDS WITH'e','apple'ENDS WITH'E','apple'ENDS WITH'b'"
    },
    {
        "用户": "Starting from 'Tim Duncan', go through the 'like' and 'effectiveness' relationships to obtain all entities and relationships within the two steps.",
        "查询": "GET SUBGRAPH WITH PROP 2 STEPS FROM 'Tim Duncan' IN like OUT serve YIELD vertices as nodes, edges as relationships"
    },
    {
        "用户": "获取 'Tony Parker' 喜欢的 'Tim Duncan' 和 'Grant Hill' 喜欢的 'Tracy McGrady' 之间的边属性，并返回这些属性。",
        "查询": "FETCH PROP ON like \"Tony Parker\"->\"Tim Duncan\", \"Grant Hill\" -> \"Tracy McGrady\" YIELD properties(edge) as properties"
    },
    {
        "用户": "找出 'Tony Parker' 所 '喜欢' 的所有实体的 ID，并返回这些实体的 ID 和 'Tony Parker' 的年龄。",
        "查询": "$v1 = GO FROM \"Tony Parker\" OVER like YIELD id($$) AS dst, $^.player.age AS age"
    },
    {
        "用户": "如果any_shape上的geo属性不存在索引，那么请帮我创建一个名为any_shape_geo_index的索引，该索引使用s2算法，最大层级为30，最大单元格数为8。",
        "查询": "CREATE TAG INDEX IF NOT EXISTS any_shape_geo_index ON any_shape(geo) with (s2_max_level=30, s2_max_cells=8)"
    },
    {
        "用户": "能否帮我将HDFS中的文件下载到本地呢？",
        "查询": "SUBMIT JOB DOWNLOAD HDFS \"hdfs://<hadoop_address>:<hadoop_port>/<sst_file_path>"
    },
    {
        "用户": "Could you please help me find the start of the service relationship between 'Zion Williamson' and 'Spurs'_ Year 'attribute value, as well as' serve. start' between 'Boris Diaw' and 'Hawks'_ Is the 'year' attribute value?",
        "查询": "FETCH PROP ON serve \"Zion Williamson\"->\"Spurs\", \"Boris Diaw\"->\"Hawks\" YIELD serve.start_year"
    },
    {
        "用户": "Starting from 'Tim Duncan', reverse the 'like' relationship to 'Nobody' or 'Spur', passing through all paths of up to 3 nodes, and returning these paths.",
        "查询": "FIND ALL PATH FROM \"Tim Duncan\" TO \"Nobody\", \"Spur\" OVER like REVERSELY UPTO 3 STEPS YIELD path as p"
    },
    {
        "用户": "Using MY_ SPACE space.",
        "查询": "use MY_SPACE"
    },
    {
        "用户": "双向查找从Tim Duncan到Yao Ming之间，满足喜欢程度在80到90之间或是2001年后的队友的所有路径，最多3步，并返回这些路径。",
        "查询": "FIND ALL PATH WITH PROP FROM \"Tim Duncan\" TO \"Yao Ming\" OVER * BIDIRECT\nWHERE (like.likeness >= 80 and like.likeness <= 90) OR (teammate.start_year is not EMPTY and teammate.start_year > 2001) UPTO 3 STEPS YIELD path as p"
    },
    {
        "用户": "返回所有球员的姓名和年龄，并按照球员姓名降序排序。",
        "查询": "MATCH (v:player) RETURN v.player.name AS Name, v.player.age AS Age\nORDER BY Name DESC"
    },
    {
        "用户": "得了哮喘会伴随哪些症状？",
        "查询": "MATCH (n:disease{name:'哮喘'})-[e:accompany_with]->(n1:symptom) return n1.symptom.name"
    },
    {
        "用户": "Find all friends of a player named 'Tim Duncan' and return the number of each friend.",
        "查询": "MATCH p=(v:player{name:\"Tim Duncan\"})-[e:follow*0..3]->(v2:player)\nRETURN DISTINCT v2 AS Friends, count(v2)"
    },
    {
        "用户": "您好，请问您能帮我查找一下从 'Tim Duncan' 开始，沿着 'serve' 关系，向外经过1到10步的所有实体的 ID吗？",
        "查询": "GO 1 TO 10 STEPS FROM \"Tim Duncan\" OVER serve YIELD $$ as dst"
    },
    {
        "用户": "找出 'Duncan' 所 '喜欢' 的所有实体，并返回这些实体的源节点ID、球员年龄、名字和喜欢程度的拼接结果。",
        "查询": "GO FROM \"Tim Duncan\" over like YIELD concat(like._src, $^.player.age, $$.player.name, like.likeness) AS A"
    },
    {
        "用户": "Find the teams served by 'Tim Duncan' and 'Tony Parker', merge the results, and return the starting name, service starting year, and finishing team name.",
        "查询": "GO FROM \"Tim Duncan\" OVER serve YIELD $^.player.name, serve.start_year, $$.team.name\nUNION ALL\nGO FROM \"Tony Parker\" OVER like YIELD like._dst AS id |\n   GO FROM $-.id OVER serve YIELD $^.player.name, serve.start_year, $$.team.name"
    },
    {
        "用户": "Returns the IDs of all teams.",
        "查询": "MATCH (v:team)\nRETURN id(v)"
    },
    {
        "用户": "If there is a player named 'David West' and older than 20, change their name to 'David', increase their age by 11 years, and return their name and age.",
        "查询": "UPSERT VERTEX \"player111\" SET player.name = \"David\", player.age = $^.player.age + 11\nWHEN $^.player.name == \"David West\" AND $^.player.age > 20\nYIELD $^.player.name AS Name, $^.player.age AS Age"
    },
    {
        "用户": "找出与实体 'Tim Duncan' 有两到三跳 '喜欢' 关系，且喜欢程度为90的实体，返回关系和实体。",
        "查询": "MATCH (n)-[e:like*2..3{likeness: 90}]->(v)\nWHERE id(n) == \"Tim Duncan\"\nRETURN e, v"
    },
    {
        "用户": "展示所有标签。",
        "查询": "SHOW TAGS"
    },
    {
        "用户": "找出ID为player101的球员所关注的球员，并按照关注数量降序排序，返回球员的姓名和关注数量。",
        "查询": "MATCH (v1:player)-[:follow]-(v2:player)\nWHERE id(v1)== \"player101\"\nRETURN v2.player.name AS Name, count(*) as cnt ORDER BY cnt DESC"
    },
    {
        "用户": "得了甲状腺炎的症状有哪些？",
        "查询": "LOOKUP ON disease WHERE disease.name == \"甲状腺炎\" YIELD properties(vertex).symptom"
    },
    {
        "用户": "Identify all entities and relationships with a focus greater than 90 and an age greater than 30, starting from 'player101' and following a two-step relationship.",
        "查询": "GET SUBGRAPH WITH PROP 2 STEPS FROM \"player101\"\nWHERE follow.degree > 90 AND $$.player.age > 30\nYIELD VERTICES AS nodes, EDGES AS relationships"
    },
    {
        "用户": "请问您能帮我删除边索引的状态吗？",
        "查询": "DROP EDGE INDEX edge_index_status"
    },
    {
        "用户": "Identify entities that have a 'like' relationship with 'Dejounte Murray', return the names and ages of these entities, and sort them in descending age and ascending name order, skipping the first three results.",
        "查询": "MATCH (v1) -[:like]-> (v)\nWHERE id(v1) == 'Dejounte Murray'\nRETURN v.player.name AS Name, v.player.age AS Age\nORDER BY Age DESCENDING, Name ASC\nSKIP 3"
    },
    {
        "用户": "Find all paths from 'player100' to 'team204' and return these paths.",
        "查询": "FIND NOLOOP PATH FROM \"player100\" TO \"team204\" OVER * YIELD path AS p"
    },
    {
        "用户": "从 'Tim Duncan' 出发，沿着 '喜欢' 关系向外扩展3步，返回结果限制为第1页，每页2个结果。",
        "查询": "GO 3 STEPS FROM \"Tim Duncan\" OVER like LIMIT [1, 2, 2];"
    },
    {
        "用户": "查找与 'Dwyane Wade' 通过两个 '喜欢' 关系相连的实体，返回这些实体的名称。",
        "查询": "MATCH (v1) -[:like]-> () -[:like]-> (v3)\nWHERE id(v1) == 'Dwyane Wade'\nRETURN v3.player.name AS Name"
    },
    {
        "用户": "查找所有 'Boris Diaw' 所 '喜欢' 的实体，并且返回这些实体的 ID。",
        "查询": "GO FROM \"Boris Diaw\" OVER like YIELD like._dst"
    },
    {
        "用户": "插入一个名为'A Loner'，年龄为0的球员节点，删除该节点及其所有边。",
        "查询": "INSERT VERTEX player(name, age) VALUES \"A Loner\": (\"A Loner\", 0);\nDELETE VERTEX \"A Loner\" WITH EDGE;"
    },
    {
        "用户": "Find the teams that a player named 'Tracy McGrady' has played for since 2000, and return information about their relationships and entities.",
        "查询": "MATCH (:player{name:\"Tracy McGrady\"})-[e:serve*0..1{start_year: 2000}]-(v)\nRETURN e, v"
    },
    {
        "用户": "返回数组 [1, 2, 3] 的第三个元素。",
        "查询": "YIELD [1, 2, 3][2]"
    },
    {
        "用户": "Hello, please help me identify all students with aliases less than 'b' and teacher names less than 'abc', and provide me with their IDs, teacher names, and aliases, ensuring that the IDs cannot be duplicate.",
        "查询": "LOOKUP ON student WHERE student.alias < \"b\" and student.teacher < \"abc\" YIELD DISTINCT id(vertex) as id, student.teacher, student.alias"
    },
    {
        "用户": "找出'player100'关注的所有实体，并返回这些实体的源节点和目标节点。",
        "查询": "$a = GO FROM \"player100\" OVER follow YIELD src(edge) AS src, dst(edge) AS dst"
    },
    {
        "用户": "您好，请帮我查找一下'Boris Diaw'和'Spurs'之间的关系属性，并将其命名为'e'。",
        "查询": "FETCH PROP ON serve \"Boris Diaw\"->\"Spurs\" YIELD edge as e"
    },
    {
        "用户": "删减不存在的边索引。",
        "查询": "DROP EDGE INDEX IF EXISTS not_exists_edge_index"
    },
    {
        "用户": "获取'Boris Diaw'的球员的姓名和年龄。",
        "查询": "FETCH PROP ON player 'Boris Diaw' YIELD player.name, player.age"
    },
    {
        "用户": "Hello, could you help me find the shortest path from 'Tiago Splitter' to 'Tony Parker'? The path can only have one step at most. Could you please help me check and return it to me.",
        "查询": "FIND SHORTEST PATH FROM \"Tiago Splitter\" TO \"Tony Parker\" OVER * UPTO 1 STEPS YIELD path as p"
    },
    {
        "用户": "Could you please help me find the shortest path connecting 'Tim Duncan' to 'LaMarcus Aldridge' through a liking relationship?",
        "查询": "FIND SHORTEST PATH FROM \"Tim Duncan\" TO \"LaMarcus Aldridge\" OVER like YIELD path as p"
    },
    {
        "用户": "请找出ID为'player100'的实体，并返回该实体的标签。",
        "查询": "MATCH (v)-[e:serve]->()\nWHERE id(v)==\"player100\"\nRETURN labels(v)"
    },
    {
        "用户": "找出 'Paul George' 所 '喜欢' 的所有实体，并返回这些实体。",
        "查询": "GO FROM \"Paul George\" OVER like YIELD like._dst"
    },
    {
        "用户": "找出 'Tony Parker' 所 '喜欢' 的实体，但不包括喜欢程度为95、56、21的实体，并返回这些实体的名称和喜欢程度。",
        "查询": "GO FROM 'Tony Parker' OVER like\nWHERE like.likeness NOT IN {95,56,21}\nYIELD $$.player.name, like.likeness"
    },
    {
        "用户": "请问您能帮我查找一下'Boris Diaw'在效力于'Spurs'期间的起始年份和结束年份吗？",
        "查询": "FETCH PROP ON serve \"Boris Diaw\"->\"Spurs\" YIELD serve.start_year, serve.start_year"
    },
    {
        "用户": "找出年龄大于20的'Tim Duncan'和'Chris Paul'所 '喜欢' 的实体，并返回这些实体的ID，然后从这些实体出发找出'喜欢程度'大于80的所有关系。返回这些关系的目标实体。",
        "查询": "$var = GO FROM \"Tim Duncan\", \"Chris Paul\" OVER like WHERE properties($$).age > 20 YIELD id($$) as id;\nGO FROM $var.id OVER * WHERE properties(edge).likeness > 80 YIELD $$ as dst"
    },
    {
        "用户": "找出年龄超过30岁的，且与球员'Tim Duncan'有任何关系相连的所有实体，并返回这些实体的关系路径，最多返回100条。",
        "查询": "MATCH p=(v:player)-[]->(n)\nWHERE id(v)==\"Tim Duncan\" and n.player.age>30\nRETURN p LIMIT 100"
    },
    {
        "用户": "找出从 'Tim Duncan' 开始，通过 '喜欢' 关系最多不超过3步能到达的所有实体路径，并按路径长度排序，返回前5条路径。",
        "查询": "$a = GO FROM \"Tim Duncan\" over * YIELD like._dst AS src, serve._src AS dst;\nFIND NOLOOP PATH FROM $a.src TO $a.dst OVER like UPTO 3 STEPS YIELD path as p |\nORDER BY $-.p | LIMIT 5"
    },
    {
        "用户": "Follow 'player102' to 'player100' and set the attention level to 75.",
        "查询": "INSERT EDGE follow(degree) VALUES \"player102\" -> \"player100\":(75)"
    },
    {
        "用户": "If the start year of the service relationship with 'player149' being 'team219' is not equal to 2016, the end year will be added by 1 and the start and end years will be returned.",
        "查询": "UPSERT EDGE on serve\n\"player149\" -> \"team219\"\nSET end_year = end_year + 1\nWHEN start_year != 2016\nYIELD start_year, end_year"
    },
    {
        "用户": "将列表 [1,2,3,3] 展开为单个数字，去重后求和并返回结果。",
        "查询": "UNWIND [1,2,3,3] AS d RETURN sum(distinct d) AS sum"
    },
    {
        "用户": "戊型病毒性肝炎的易感人群有哪些？",
        "查询": "LOOKUP ON disease WHERE disease.name == \"戊型病毒性肝炎\" YIELD properties(vertex).easy_get"
    },
    {
        "用户": "Can you help me find the relationship from 'Shaquille O'Neal' to 'Manu Ginobili', 'Spurs', and' Lakers'? It is best to go through the shortest path that does not exceed 5 steps and passes through any edge. Thank you!",
        "查询": "FIND SHORTEST PATH FROM \"Shaquille O\\'Neal\" TO \"Manu Ginobili\", \"Spurs\", \"Lakers\" OVER * UPTO 5 STEPS YIELD path as p"
    },
    {
        "用户": "查找与球员 'Manu Ginobili' 有2到3跳 '喜欢' 关系的实体，返回这些实体的性别、关系强度、姓名、年龄和关系开始年份，并按照关系强度、姓名、年龄排序，最多返回5条记录。",
        "查询": "match (src_v:player{name:\"Manu Ginobili\"})-[e:like*2..3]-(dst_v)\n  return distinct properties(src_v).sex,properties(e[0]).degree as degree,properties(dst_v).name as name,src_v.player.age AS age, e[1].start_year,dst_v.player.age\n  order by degree, name, age limit 5;"
    },
    {
        "用户": "找出名为'Tim Duncan'的球员所关联的所有实体，并按照这些实体的年龄进行排序，返回这些实体的姓名和年龄。",
        "查询": "MATCH (v:player{name:\"Tim Duncan\"}) --> (v2)\nRETURN v2.player.name AS Name, v2.player.age AS Age\nORDER BY Age"
    },
    {
        "用户": "Find entities that have a two to three hop service or favorite relationship with a player named 'Tim Duncan', and record the number of paths.",
        "查询": "MATCH (:player{name:\"Tim Duncan\"})-[e:serve|like*2..3]-(v)\nRETURN COUNT(e)"
    },
    {
        "用户": "Find the names and ages of all players who started participating in the team before 2000.",
        "查询": "MATCH (v:player)-[e]->()\nWHERE e.start_year < 2000\nRETURN DISTINCT v.player.name, v.player.age"
    },
    {
        "用户": "Please help me obtain all the attributes of the 'Kobe' player.",
        "查询": "FETCH PROP ON player \"Kobe\" YIELD properties(vertex)"
    },
    {
        "用户": "Obtain subgraphs, starting from 'Tony Parker', go through 5 steps of 'teammate' and 'service' relationships, and find all entities and edges of 'like' relationships.",
        "查询": "GET SUBGRAPH WITH PROP 5 steps from 'Tony Parker' IN teammate OUT serve BOTH like YIELD VERTICES as nodes, EDGES as relationships"
    },
    {
        "用户": "统计所有为 'Spurs' 服务的球员中，被其他球员 '喜欢' 的数量。",
        "查询": "MATCH (v1)-[:like]->(v2:player)-[:serve]->(v3)\nWHERE id(v3) == 'Spurs'\nRETURN COUNT(*)"
    },
    {
        "用户": "请帮我找到所有的关系，并返回前三个。",
        "查询": "MATCH ()<-[e]-()\nRETURN e\nLIMIT 3"
    },
    {
        "用户": "返回所有球员的队友信息。",
        "查询": "MATCH (v:player) UNWIND (v)-[:teammate]->() AS p RETURN p"
    },
    {
        "用户": "您好，请帮我找出与'Tim Duncan'有关的实体和该实体的子图，以这些实体的ID为起点。谢谢！",
        "查询": "GO from 'Tim Duncan' OVER serve YIELD serve._src AS id |\nGET SUBGRAPH WITH PROP FROM $-.id\nYIELD vertices as nodes, edges as relationships"
    },
    {
        "用户": "创建一个woman标签，包含姓名、年龄、婚姻状况、工资和创建时间等属性，并设置创建时间为100秒后过期。",
        "查询": "CREATE TAG IF NOT EXISTS woman(name string, age int,\nmarried bool, salary double, create_time timestamp)\nTTL_DURATION = 100, TTL_COL = \"create_time\""
    },
    {
        "用户": "Identify entities that have a two to three jump 'like' relationship with entity 'Tim Duncan' and a 90 degree of liking, and return the relationship and entity.",
        "查询": "MATCH (n)-[e:like*2..3{likeness: 90}]->(v)\nWHERE id(n) == \"Tim Duncan\"\nRETURN e, v"
    },
    {
        "用户": "Find the entities connected through the 'follow' relationship starting from 'player101', and return the 'Team' and 'Player' attributes of these entities.",
        "查询": "GO FROM \"player101\" OVER follow YIELD dst(edge) AS id |\nGO FROM $-.id OVER serve YIELD properties($$).name AS Team,\nproperties($^).name AS Player"
    },
    {
        "用户": "您好，请帮我找到满足以下条件的实体 e1：e1.col1 小于等于 2，且 e1.col5 小于 '22:22:22'。然后请返回这些实体的源节点和目标节点。",
        "查询": "LOOKUP ON e1 WHERE e1.col1 <= 2 AND e1.col5 < time(\"22:22:22\") YIELD src(edge) as src, dst(edge) as dst"
    },
    {
        "用户": "Please help me calculate the next day of October 11, 1984.",
        "查询": "WITH date({year: 1984, month: 10, day: 11}) AS x RETURN x + 1"
    },
    {
        "用户": "Find all the entities that 'Tim Duncan' and 'Tony Parker' like and return their relationships with them.",
        "查询": "YIELD {a:1, b:['Tim Duncan', 'Tony Parker'], c:'Tim Duncan'} AS a\n| YIELD $-.a.c AS b\n| UNWIND $-.b AS c\n| GO FROM $-.c OVER like YIELD edge AS e"
    },
    {
        "用户": "您好，请问您能帮我找出从 'Tiago Splitter' 到 'Tony Parker' 的最短路径吗？路径最多只能有一步，并且能告诉我该路径是什么吗？",
        "查询": "FIND SHORTEST PATH FROM \"Tiago Splitter\" TO \"Tony Parker\" OVER * UPTO 1 STEPS YIELD path as p"
    },
    {
        "用户": "返回所有球员的年龄和姓名，按照年龄降序和姓名升序排序。",
        "查询": "MATCH (v:player) RETURN v.player.age AS Age, v.player.name AS Name\nORDER BY Age DESC, Name ASC"
    },
    {
        "用户": "查找名为'Tony Parker'的球员所在的所有球队，并返回这些球队的去重结果和该球员的年龄。",
        "查询": "MATCH (v:player{name: \"Tony Parker\"})-[:serve]->(t:team)\nWITH DISTINCT v.player.age as age, t\nRETURN t"
    },
    {
        "用户": "请帮我找到名为'Tim Duncan'的球员所连接的实体，并按照年龄降序排列，跳过第一个结果，返回第二个结果的姓名和年龄。",
        "查询": "MATCH (v:player{name:\"Tim Duncan\"}) --> (v2)\nRETURN v2.player.name AS Name, v2.player.age AS Age\nORDER BY Age DESC SKIP 1 LIMIT 1"
    },
    {
        "用户": "Find the team names with a player ID of 'Paul Gasol' and a playing relationship with 'Grizzlies' or' Lakers', and return the names of the players and their playing teams under these vertices.",
        "查询": "MATCH (v)-[:serve]->(t)\nWHERE (NOT NOT id(v) == 'Paul Gasol') AND id(v) == 'Paul Gasol' AND id(t) IN ['Grizzlies', 'Lakers']\nRETURN v.player.name AS Name, t.team.name AS Team"
    },
    {
        "用户": "找出所有得分小于20的球员，并返回他们的姓名。",
        "查询": "MATCH (v:player) WHERE v.player.score < 20 RETURN v.player.name AS name"
    },
    {
        "用户": "Starting from 'Tim Duncan', search for a path that does not exceed 3 steps through a reverse 'like' relationship until it reaches' Nobody 'or' Spur 'and returns the path.",
        "查询": "FIND NOLOOP PATH FROM \"Tim Duncan\" TO \"Nobody\", \"Spur\" OVER like REVERSELY UPTO 3 STEPS YIELD path as p"
    },
    {
        "用户": "Please help me identify the player node with ID 'A' and all nodes connected to it, and return the relationships between these nodes.",
        "查询": "MATCH p= (v:player) -- (v2) WHERE id(v)==\"A\" RETURN p"
    },
    {
        "用户": "找出名为'Yao Ming'的球员所服务的2-3跳实体，并返回原始实体的名称。",
        "查询": "MATCH (v:player {name: \"Yao Ming\"})-[:serve*2..3]->() RETURN v.player.name"
    },
    {
        "用户": "找出名为'Tim Duncan'的球员的所有关注关系，返回他的所有朋友。",
        "查询": "MATCH p=(v:player{name:\"Tim Duncan\"})-[e:follow*1..]->(v2)\nRETURN v2 AS Friends"
    },
    {
        "用户": "Obtain the name and age of the player named 'Boris Diaw' and return a Boolean value indicating whether the player's age is greater than 30.",
        "查询": "FETCH PROP ON player 'Boris Diaw' YIELD player.name, player.age, player.age > 30"
    },
    {
        "用户": "请找出关注度大于90的'player100'所关注的所有实体，并返回这些实体的边信息。",
        "查询": "GO FROM \"player100\" OVER follow\nWHERE follow.degree > 90\nYIELD dst(edge)"
    },
    {
        "用户": "Please help me find all entities associated with a player named 'Tim Duncan', sort them by their age, and then return the names and ages of the entities.",
        "查询": "MATCH (v:player{name:\"Tim Duncan\"}) --> (v2)\nRETURN v2.player.name AS Name, v2.player.age AS Age\nORDER BY Age"
    },
    {
        "用户": "Add player player 100 to the team204 team from 1998 to 2017 and set the edge weight to 1.",
        "查询": "insert edge serve(start_year,end_year)\nvalues \"player100\"->\"team204\"@1:(1998, 2017)"
    },
    {
        "用户": "您好，请帮我查找一下，从 'Tim Duncan' 出发，经过 'serve' 关系，找出距离为2的所有实体，并返回这些实体之间的边信息好吗？",
        "查询": "GO 2 STEPS FROM \"Tim Duncan\" OVER serve YIELD edge as e"
    },
    {
        "用户": "您好，请帮我查找一下'Boris Diaw'所服务过的所有实体以及他在这些实体中的服务关系的起止年份，谢谢。",
        "查询": "$var = GO FROM 'Boris Diaw','Boris Diaw' OVER serve YIELD serve._src AS src, serve._dst AS dst;\nFETCH PROP ON serve $var.src->$var.dst YIELD DISTINCT serve.start_year, serve.end_year, edge as relationship"
    },
    {
        "用户": "请您显示一下数据库中的所有空间。",
        "查询": "SHOW SPACES"
    },
    {
        "用户": "Create index idx on the nickName attribute of label B_ B_ 8.",
        "查询": "CREATE TAG INDEX idx_B_8 on B(nickName);"
    },
    {
        "用户": "您好，请帮我找一下从Yao Ming到Danny Green之间的属性路径，要求是空或相似度大于等于80的，最多3步，然后返回给我。",
        "查询": "FIND ALL PATH WITH PROP FROM \"Yao Ming\" TO \"Danny Green\" OVER * BIDIRECT\nWHERE like.likeness is  EMPTY OR like.likeness >= 80 UPTO 3 STEPS YIELD path as p"
    },
    {
        "用户": "找出名为 'Tracy McGrady' 的球员所 '喜欢' 点赞程度为90的实体，并返回这些实体与关系信息。",
        "查询": "MATCH (:player{name:\"Tracy McGrady\"})-[e:like*0..1{likeness: 90}]->(v)\nRETURN e, v"
    },
    {
        "用户": "找出 'Tim Duncan' 所 '喜欢' 或 '被喜欢' 的所有实体，并返回这些实体与 'Tim Duncan' 之间的边信息。",
        "查询": "GO FROM 'Tim Duncan' OVER like bidirect YIELD edge as e"
    },
    {
        "用户": "找出 'Russell Westbrook' 所 '服务' 或 '喜欢' 的所有实体，并返回这些边的类型和属性。",
        "查询": "GO FROM \"Russell Westbrook\" OVER serve, like  YIELD properties(edge) as props, type(edge) as type"
    },
    {
        "用户": "Please find all edges with entity '1' as the starting point and edges ranking greater than 2, and return the starting point, ending point, ranking, and attribute p1 of these edges, sorted in descending order of ranking.",
        "查询": "GO FROM \"1\"\nOVER e1\nWHERE rank(edge) > 2\nYIELD src(edge), dst(edge), rank(edge) AS Rank, properties(edge).p1 |\nORDER BY $-.Rank DESC"
    },
    {
        "用户": "找出 'Boris Diaw' 所服务的所有球队并返回四个值，起始节点的姓名，服务关系的起始时间，终点队名以及队伍。",
        "查询": "$var = GO FROM \"Boris Diaw\" OVER serve YIELD $^.player.name as name, serve.start_year as start, $$.team.name as team;YIELD $var.team"
    },
    {
        "用户": "Returns the result of determining whether the 'list' [1, 2, 3] contains the number 3.",
        "查询": "WITH [1, 2, 3] AS `list` RETURN 3 IN `list` AS r"
    },
    {
        "用户": "请帮我插入两个顶点，一个是名称为'Trail Blazers'的团队，另一个是名称为'Spurs'的团队。",
        "查询": "INSERT VERTEX team(name) VALUES \"team203\":(\"Trail Blazers\"), \"team204\":(\"Spurs\")"
    },
    {
        "用户": "Please help me find all the entities connected to a player named 'Tim Duncan' and return them.",
        "查询": "MATCH (v:player{name:\"Tim Duncan\"}) -[*0]-> (v2)\nRETURN v2"
    },
    {
        "用户": "Add an index on the student tab with the attribute 'teacher' and a length of 10.",
        "查询": "CREATE TAG INDEX student_teacher ON student(teacher(10))"
    },
    {
        "用户": "If the t1 tag does not exist, create a tag with p1 string and p2 integer attributes.",
        "查询": "CREATE TAG IF NOT EXISTS t1 (p1 string, p2 int)"
    },
    {
        "用户": "Insert a player entity named 'Tony Parker', aged 36, with an ID of 'player101'.",
        "查询": "INSERT VERTEX player(name, age) VALUES \"player101\":(\"Tony Parker\", 36)"
    },
    {
        "用户": "Find all entities that like 'Grant Hill' and return the target entity ID in their relationship with 'Grant Hill'.",
        "查询": "GO FROM \"Grant Hill\" OVER like REVERSELY YIELD like._dst"
    },
    {
        "用户": "Hello, could you please help me find the subgraph starting from 'Tim Duncan' and return the first result to me?",
        "查询": "$a = GET SUBGRAPH WITH PROP FROM 'Tim Duncan' | LIMIT 1"
    },
    {
        "用户": "查找所有 'Boris Diaw' 喜欢的实体，并删除这些实体与 'Boris Diaw' 的关系。",
        "查询": "GO FROM \"Boris Diaw\" OVER like YIELD like._dst as id | DELETE VERTEX $-.id WITH EDGE"
    },
    {
        "用户": "Add a name called index_ Ttl_ Tag03_ The label index of c has an attribute of c and a length of 10.",
        "查询": "CREATE TAG INDEX index_ttl_tag03_c on ttl_tag03(c(10));"
    },
    {
        "用户": "The names of the returned players include ['James Harden ',' Jonathan Simmons', 'Klay Thompson', 'Dejounte Murray', 'Paul Gasol'] and all players.",
        "查询": "MATCH (v)\nWHERE id(v) IN ['James Harden', 'Jonathon Simmons', 'Klay Thompson', 'Dejounte Murray', 'Paul Gasol']\n      OR true\nRETURN v.player.name AS Name"
    },
    {
        "用户": "Insert a player entity named 'Tim Duncan', aged 42, and assign it the unique identifier 'player100'.",
        "查询": "INSERT VERTEX player(name, age) VALUES \"player100\":(\"Tim Duncan\", 42)"
    },
    {
        "用户": "请帮我创建一个名为player的标签，其中包含姓名和年龄两个属性。",
        "查询": "CREATE TAG player(name string, age int)"
    },
    {
        "用户": "返回一个包含三个值的列表，分别为当前查询结果数量加一、数字三、以及数字二的绝对值。",
        "查询": "YIELD COUNT(*)+1 ,1+2 ,(INT)abs(count(2))"
    },
    {
        "用户": "Hello, could you please help me find all entities in type t1 where col3 is false and col1 is greater than or equal to 1, and return their IDs to me?",
        "查询": "LOOKUP ON t1 WHERE t1.col3 == false AND t1.col1 >= 1 YIELD id(vertex) as id"
    },
    {
        "用户": " 您能帮我找一下，从 'Shaquille O'Neal' 到 'Manu Ginobili'、'Spurs'、'Lakers' 的关系吗？最好是通过不超过5个步骤，且经过任意边的最短路径。谢谢！",
        "查询": "FIND SHORTEST PATH FROM \"Shaquille O\\'Neal\" TO \"Manu Ginobili\", \"Spurs\", \"Lakers\" OVER * UPTO 5 STEPS YIELD path as p"
    },
    {
        "用户": "Find all entities that have a favorite relationship with 'Boris Diaw' and return their IDs.",
        "查询": "GO FROM \"Boris Diaw\" OVER like YIELD like._dst"
    },
    {
        "用户": "查找所有评分为666的'喜欢'关系，返回这些关系的起始点和终止点。",
        "查询": "LOOKUP ON like WHERE like.likeness == 666 YIELD src(edge) as src, dst(edge) as dst"
    },
    {
        "用户": "返回所有球员中年龄最大的球员的年龄。",
        "查询": "MATCH (v:player) RETURN max(v.player.age)"
    },
    {
        "用户": "Hello, please help me find the student whose teacher's name is' a 'and give me their ID.",
        "查询": "LOOKUP ON student WHERE student.teacher == \"a\" YIELD id(vertex) as id"
    },
    {
        "用户": "Please help me obtain all entities and relationships within step 1 starting from 'player101'.",
        "查询": "GET SUBGRAPH 1 STEPS FROM \"player101\" YIELD VERTICES AS nodes, EDGES AS relationships"
    },
    {
        "用户": "返回数组[1,2,3]中的所有元素，除了数字4。",
        "查询": "UNWIND [1,2,3] AS a RETURN a\nMINUS\nWITH 4 AS a\nRETURN a"
    },
    {
        "用户": "找出 'Tim Duncan' 所 '喜欢' 的实体及其一度和二度关系，返回这些实体和关系的源节点、目标节点和边信息。",
        "查询": "GO FROM 'Tim Duncan' OVER like YIELD like._src as src, like._dst as dst |\nGO 1 TO 2 STEPS FROM $-.src OVER like YIELD $-.src as src, $-.dst, like._dst as dst, edge as e"
    },
    {
        "用户": "找出名为 'Tracy McGrady' 的球员所 '喜欢' 的所有实体，且喜欢程度为90，并返回这些关系和实体。",
        "查询": "MATCH (:player{name:\"Tracy McGrady\"})-[e:like*0..1{likeness: 90}]->(v)\nRETURN e, v"
    },
    {
        "用户": "Hello, please help me find entities that meet the following conditions: e1: e1. col1 is greater than or equal to 1, and e1. col5 is greater than the time point '11:11:11:11'. And can you also return the source and target nodes of the edges of these entities to me?",
        "查询": "LOOKUP ON e1 WHERE e1.col1 >= 1 AND e1.col5 > time(\"11:11:11\") YIELD src(edge) as src, dst(edge) as dst"
    },
    {
        "用户": "您好，请帮我查找一下，从 'Tim Duncan' 开始，沿着 'serve' 关系，向外走了10000000000000步，能否返回经过的所有边的终点实体呢？",
        "查询": "GO 10000000000000 STEPS FROM \"Tim Duncan\" OVER serve YIELD dst(edge) as dst"
    },
    {
        "用户": "Query the ID, quantity, total age, maximum age, minimum age, average age, and labels of all player nodes, and sort them by ID, quantity, maximum age, and minimum age. Skip the first 10 results and return the next 8 results.",
        "查询": "MATCH(n:player)\n  RETURN id(n) AS id,\n         count(n) AS count,\n         sum(floor(n.player.age)) AS sum,\n         max(n.player.age) AS max,\n         min(n.player.age) AS min,\n         avg(distinct n.player.age)+1 AS age,\n         labels(n) AS lb\n    ORDER BY id, count, max, min\n    SKIP 10 LIMIT 8;"
    },
    {
        "用户": "Hello, could you please help me check the source nodes, target nodes, and weight values in all the relationships in serve?",
        "查询": "LOOKUP ON serve YIELD src(edge) as src, dst(edge) as dst, rank(edge) as rank"
    },
    {
        "用户": "Serve 'player100' on 'team204' from 1990 to 2018, with an edge weight of 2.",
        "查询": "insert edge serve(start_year,end_year)\nvalues \"player100\"->\"team204\"@2:(1990, 2018)"
    },
    {
        "用户": "Starting from 'Yao Ming', find the shortest path that includes' like 'and' service 'relationships, and continue until' Tony Parker ', with a maximum of 5 steps to return path information.",
        "查询": "$a = GO FROM \"Yao Ming\" over like YIELD like._dst AS src;\nFIND SHORTEST PATH FROM $a.src TO \"Tony Parker\" OVER like, serve UPTO 5 STEPS YIELD path as p"
    },
    {
        "用户": "If there is no label only_ Linestring, you can create a label with geographic line string attributes.",
        "查询": "CREATE TAG IF NOT EXISTS only_linestring(geo geography(linestring))"
    },
    {
        "用户": "从 'Tim Duncan' 出发，沿着 '喜欢' 关系，向两个方向遍历4步，返回遍历到的所有实体和边。",
        "查询": "GET SUBGRAPH 4 steps from 'Tim Duncan' BOTH like YIELD vertices as a, edges as b"
    },
    {
        "用户": "Starting from 'Tim Duncan', take three steps along the 'like' relationship, and return to the result limit where the first hop automatically selects 1 edge, the second hop selects 3 edges, and the third hop selects 2 edges",
        "查询": "GO 3 STEPS FROM \"Tim Duncan\" OVER like YIELD like._dst SAMPLE [1, 3, 2];"
    },
    {
        "用户": "得了肺炎需要做哪些检查？",
        "查询": "GO FROM \"肺炎\" OVER need_check YIELD dst(edge);"
    },
    {
        "用户": "找出所有 '喜欢' 'Grant Hill' 的实体，并返回这些实体与 'Grant Hill' 的关系中的目标实体 ID。",
        "查询": "GO FROM \"Grant Hill\" OVER like REVERSELY YIELD like._dst"
    },
    {
        "用户": "Please help me delete entities such as' LeBron James', 'Dwyane Wade', and 'Carmelo Anthony', as well as all edges related to them.",
        "查询": "DELETE VERTEX \"LeBron James\", \"Dwyane Wade\", \"Carmelo Anthony\" WITH EDGE;"
    },
    {
        "用户": "嘿，我想从 'Russell Westbrook' 开始，经过 1-2 步关系，找到所有 'serve' 和 'like' 关系的终点实体的 ID。你能帮我查找一下吗？",
        "查询": "GO 1 TO 2 STEPS FROM 'Russell Westbrook' OVER * YIELD serve._dst, like._dst"
    },
    {
        "用户": "从'player100'开始，沿着任意关系最多经过3步，返回终点实体的姓名和年龄，要求在第一跳时只能选择1条边，第二跳时可以选择2条边，第三跳时可以选择3条边。",
        "查询": "GO 3 STEPS FROM \"player100\"\nOVER *\nYIELD properties($$).name AS NAME, properties($$).age AS Age\nSAMPLE [1,2,3]"
    },
    {
        "用户": "Search for entities with a 2-3 hop 'like' relationship with player 'Manu Ginobili', return their gender, relationship strength, name, age, and relationship start year, and sort them by relationship strength, name, and age, with a maximum of 5 records returned.",
        "查询": "match (src_v:player{name:\"Manu Ginobili\"})-[e:like*2..3]-(dst_v)\n  return distinct properties(src_v).sex,properties(e[0]).degree as degree,properties(dst_v).name as name,src_v.player.age AS age, e[1].start_year,dst_v.player.age\n  order by degree, name, age limit 5;"
    },
    {
        "用户": "找出与实体 'Tim Duncan' 有 '服务' 或 '喜欢' 关系的实体及其关系，并返回这些实体。",
        "查询": "MATCH (n)-[e:serve|like*2..3]->(v)\nWHERE id(n) == \"Tim Duncan\"\nRETURN e, v"
    },
    {
        "用户": "Please help me create a school node with ID 'dut', name 'dut', and its establishment time is the current time.",
        "查询": "INSERT VERTEX school(name, found_time) VALUES \"dut\":(\"dut\", timestamp())"
    },
    {
        "用户": "Find the entity of player 'Tony Parker' and return its ID.",
        "查询": "LOOKUP ON player WHERE player.name == \"Tony Parker\" YIELD id(vertex) as id"
    },
    {
        "用户": "Find all entities that 'player101' is interested in and return their IDs.",
        "查询": "GO FROM \"player101\" OVER follow YIELD id($$)"
    },
    {
        "用户": "计算所有球员的年龄总和。",
        "查询": "MATCH (v:player) RETURN sum(v.player.age)"
    },
    {
        "用户": "Find the path from 'Tim Duncan' to 'Tony Parker' or 'Spurs' through a' like 'and' service 'relationship, consisting of up to 3 steps, and return the path information.",
        "查询": "FIND NOLOOP PATH FROM \"Tim Duncan\" TO \"Tony Parker\", \"Spurs\" OVER like,serve UPTO 3 STEPS YIELD path as p"
    },
    {
        "用户": "插入两条边，表示'player101'在 1999 年至 2018 年期间为'team204'服务，以及'player102'在 2006 年至 2015 年期间为'team203'服务。",
        "查询": "INSERT EDGE serve(start_year, end_year) VALUES \"player101\" -> \"team204\":(1999, 2018),\"player102\" -> \"team203\":(2006, 2015)"
    },
    {
        "用户": "Find all secondary followers of a player named 'Tim Duncan' and return their information.",
        "查询": "MATCH p=(v:player{name:\"Tim Duncan\"})-[e:follow*2]->(v2)\nRETURN DISTINCT v2 AS Friends"
    },
    {
        "用户": "找出从'player102'到'team204'的最短路径，并返回路径信息。",
        "查询": "FIND SHORTEST PATH FROM \"player102\" TO \"team204\" OVER * YIELD path AS p"
    },
    {
        "用户": "找出所有 '喜欢' 'Grant Hill' 的实体，返回这些实体与 'Grant Hill' 的关系中的终点实体 ID。",
        "查询": "GO FROM \"Grant Hill\" OVER like REVERSELY YIELD like._dst"
    },
    {
        "用户": "请问您能帮我查找一下ID为'Boris Diaw'的实体吗？",
        "查询": "MATCH (v) WHERE id(v) == 'Boris Diaw' RETURN (v)"
    },
    {
        "用户": "请问您能帮我找到以 'Tim Duncan' 为起点的子图中的第一个结果吗？",
        "查询": "$a = GET SUBGRAPH WITH PROP FROM 'Tim Duncan' | LIMIT 1"
    },
    {
        "用户": "Hello, could you help me find the shortest path from 'Tim Duncan' to 'Tony Parker'? Please also return all nodes on the path together.",
        "查询": "FIND SHORTEST PATH FROM \"Tim Duncan\" TO \"Tony Parker\" OVER like YIELD path as p\n| YIELD nodes($-.p) AS nodes | UNWIND $-.nodes AS a | YIELD $-.a AS a"
    },
    {
        "用户": "您好，请帮我查找一下，从'Tim Duncan'这个人开始，沿着'喜欢'这个关系，向两个方向扩展4步，然后把所有的实体和关系都返回给我好吗？",
        "查询": "GET SUBGRAPH 4 steps from 'Tim Duncan' BOTH like YIELD VERTICES as nodes, EDGES as relationships"
    },
    {
        "用户": "找出名为'Tim Duncan'的球员的所有关注关系路径，并返回路径上的朋友节点。",
        "查询": "MATCH p=(v:player{name:\"Tim Duncan\"})-[e:follow*]->(v2)\nRETURN v2 AS Friends"
    },
    {
        "用户": "Find the player node with ID 'A' and all nodes connected to it, and return the relationships between these nodes.",
        "查询": "MATCH p= (v:player) -- (v2) WHERE id(v)==\"A\" RETURN p"
    },
    {
        "用户": "返回除 'Paul Gasol' 外的所有实体的球员姓名。",
        "查询": "MATCH (v)\nWHERE id(v) != 'Paul Gasol'\nRETURN v.player.name AS Name"
    },
    {
        "用户": "请问您能帮我找一下，那些老师名字的字典序比'a'小的学生吗？我需要他们的ID。",
        "查询": "LOOKUP ON student WHERE student.teacher < \"a\" YIELD id(vertex) as id"
    },
    {
        "用户": " 您好，请帮我查找一下名为Tim Duncan的球员在2000年之后所服务过的实体，包括服务关系和实体本身，可以遍历2到3步吗？",
        "查询": "MATCH (:player{name:\"Tim Duncan\"})-[e:serve*2..3{start_year: 2000}]->(v)\nRETURN e, v"
    },
    {
        "用户": "Find the names and ages of players aged between 20 and 25.",
        "查询": "MATCH (v:player)\nWHERE v.player.age IN range(20,25)\nRETURN v.player.name, v.player.age"
    },
    {
        "用户": "找出所有 '喜欢' 'Tony Parker' 的实体，返回这些实体与 'Tony Parker' 的关系中 '喜欢' 的实体 ID。",
        "查询": "GO FROM \"Tony Parker\" OVER like REVERSELY YIELD like._dst"
    },
    {
        "用户": "肾炎的得病概率是多少？",
        "查询": "LOOKUP ON disease WHERE disease.name == \"肾炎\" YIELD properties(vertex).get_prob"
    },
    {
        "用户": " 您好，请帮我找一下满足条件 e1.col1 小于等于2 且 e1.col5 小于 '22:22:22' 的实体 e1，并返回它们的源节点和目标节点。",
        "查询": "LOOKUP ON e1 WHERE e1.col1 <= 2 AND e1.col5 < time(\"22:22:22\") YIELD src(edge) as src, dst(edge) as dst"
    },
    {
        "用户": "查找player表中的年龄，并按照出现次数和年龄降序排序。",
        "查询": "LOOKUP ON player\nYIELD player.age As playerage\n| GROUP BY $-.playerage\nYIELD $-.playerage as age, count(*) AS number\n| ORDER BY $-.number DESC, $-.age DESC"
    },
    {
        "用户": "Hello, could you please help me find the shortest path from 'Tony Parker' or 'Yao Ming' to 'Manu Ginobili', 'Spurs', and' Lakes'? The path can only have a maximum of 5 steps, all entities and relationships that need to be included in the path, and then return the path information to me, okay?",
        "查询": "FIND SHORTEST PATH FROM \"Tony Parker\", \"Yao Ming\" TO \"Manu Ginobili\", \"Spurs\", \"Lakers\" OVER * UPTO 5 STEPS YIELD path as p"
    },
    {
        "用户": "Add a label index with a length of 5 on the col1 attribute of the t1 label.",
        "查询": "CREATE TAG INDEX ti1 ON t1(col1(5));"
    },
    {
        "用户": "请找出以实体'1'为起点，边的排名大于2的所有边，并返回这些边的起点、终点、排名和属性p1，按照排名降序排序。",
        "查询": "GO FROM \"1\"\nOVER e1\nWHERE rank(edge) > 2\nYIELD src(edge), dst(edge), rank(edge) AS Rank, properties(edge).p1 |\nORDER BY $-.Rank DESC"
    },
    {
        "用户": "Identify the entities that Tim Duncan likes and their first and second degree relationships, and return the source, target, and edge information of these entities and relationships.",
        "查询": "GO FROM 'Tim Duncan' OVER like YIELD like._src as src, like._dst as dst |\nGO 1 TO 2 STEPS FROM $-.src OVER like YIELD $-.src as src, $-.dst, like._dst as dst, edge as e"
    },
    {
        "用户": "找出'player100'关注的所有实体，并返回这些实体所关注的实体。",
        "查询": "GO FROM \"player100\" OVER follow\nYIELD dst(edge) AS dstid, properties($$).name AS Name |\nGO FROM $-.dstid OVER follow YIELD dst(edge)"
    },
    {
        "用户": "您好，请帮我获取'Boris Diaw'这个实体的所有属性，并将其作为节点返回。",
        "查询": "FETCH PROP ON * 'Boris Diaw' YIELD vertex as node"
    },
    {
        "用户": "Find all entities that a player named 'Tracy McGrady' likes, with a level of 90, and return these relationships and entities.",
        "查询": "MATCH (:player{name:\"Tracy McGrady\"})-[e:like*0..1{likeness: 90}]->(v)\nRETURN e, v"
    },
    {
        "用户": "找出 'Paul George' 所喜欢的所有实体，并返回这些实体。",
        "查询": "GO FROM \"Paul George\" OVER like YIELD like._dst"
    },
    {
        "用户": "If a player with the name 'Joe' exists, set their age to 30 and return information about the player with the name 'Joe' and the age of 30.",
        "查询": "UPSERT VERTEX ON player \"player666\"\nSET age = 30\nWHEN name == \"Joe\"\nYIELD name AS Name, age AS Age"
    },
    {
        "用户": "Find all entities that 'Tim Duncan' likes' or 'is liked' by, and return edge information between these entities and 'Tim Duncan'.",
        "查询": "GO FROM 'Tim Duncan' OVER like bidirect YIELD edge as e"
    },
    {
        "用户": "请帮我插入一个名为'Kobe'，年龄为空的选手实体。",
        "查询": "INSERT VERTEX player(name, age) VALUES \"Kobe\":(\"Kobe\",null)"
    },
    {
        "用户": "Find all entities that like 'Dejounte Murray', sort them in descending age and ascending name order, skip the first three results, and return the names and ages of the last three entities.",
        "查询": "MATCH (v1) -[:like]-> (v)\nWHERE id(v1) == 'Dejounte Murray'\nRETURN v.player.name AS Name, v.player.age AS Age\nORDER BY Age DESC, Name ASC\nSKIP 3\nLIMIT 3"
    },
    {
        "用户": "找出名为'Tim Duncan'的球员所关联的所有实体，并按照年龄降序排序，跳过前两个实体，返回剩余实体的姓名和年龄。",
        "查询": "MATCH (v:player{name:\"Tim Duncan\"}) --> (v2)\nRETURN v2.player.name AS Name, v2.player.age AS Age\nORDER BY Age DESC SKIP 1+1"
    },
    {
        "用户": "Find a player entity named 'Tim Duncan' and return the ID of that entity.",
        "查询": "LOOKUP ON player WHERE player.name == \"Tim Duncan\" YIELD id(vertex) as id"
    },
    {
        "用户": "请帮我找出所有以字母'r'结尾的球员的姓名和年龄。",
        "查询": "MATCH (v:player)\nWHERE v.player.name ENDS WITH \"r\"\nRETURN v.player.name, v.player.age"
    },
    {
        "用户": "您好，请帮我获取'Boris Diaw'这个实体的所有属性，并将其作为节点返回。",
        "查询": "FETCH PROP ON * 'Boris Diaw' YIELD vertex as node"
    },
    {
        "用户": "请问您能帮我找到从 'Tiago Splitter' 到 'LaMarcus Aldridge' 的最短路径吗？",
        "查询": "FIND SHORTEST PATH FROM \"Tiago Splitter\" TO \"LaMarcus Aldridge\" OVER * YIELD path as p"
    },
    {
        "用户": "Hello, please help me find the node p that is connected to node t through a 'serve' relationship, with a maximum of 3 nodes.",
        "查询": "MATCH (p)-[:serve*0..3]->(t) RETURN p"
    },
    {
        "用户": "请帮我找出名为'Tim Duncan'的球员与其他实体之间的关系，并返回这些关系。",
        "查询": "MATCH p=(v:player{name:\"Tim Duncan\"})-->(v2)\nRETURN p"
    },
    {
        "用户": "得了心脏病需要去哪个科室看病？",
        "查询": "MATCH (n:disease{name:'心脏病'})-[e:cure_department]->(n1:department) return n1.department.name"
    },
    {
        "用户": "请帮我找出名为'Tim Duncan'的球员所关联的所有球员，并返回这些球员的姓名。",
        "查询": "MATCH (v:player{name:\"Tim Duncan\"})--(v2:player)\nRETURN v2.player.name AS Name"
    },
    {
        "用户": "什么病会伴随着头痛？",
        "查询": "MATCH (n:disease)-[e:accompany_with]->(n1:disease{name:'头痛'}) return n.disease.name"
    },
    {
        "用户": "您好，请帮我查询一下关于'Tim Duncan'的所有属性，包括ID、键、标签和属性。",
        "查询": "FETCH PROP ON * 'Tim Duncan' YIELD id(vertex), keys(vertex) as keys, tags(vertex) as tags_, properties(vertex) as props"
    },
    {
        "用户": "请帮我创建一个名为basketballplayer的空间，分区数为15，副本因子为1，实体ID类型为固定长度字符串(30)。",
        "查询": "CREATE SPACE basketballplayer(partition_num=15, replica_factor=1, vid_type=fixed_string(30))"
    },
    {
        "用户": "得了气虚血瘀证忌吃什么食物？",
        "查询": "GO FROM \"气虚血瘀证\" OVER no_eat YIELD dst(edge);"
    },
    {
        "用户": " 您好，请帮我查找一下那些名字中含有'Tim'的球员，然后告诉我他们喜欢的人的年龄，还有他们是否喜欢'Tony Parker'，并且告诉我他们与'Tony Parker'之间的关系。",
        "查询": "LOOKUP ON player\nWHERE player.name CONTAINS 'Tim'\nYIELD player.age AS age, id(vertex) AS vid |\nGO FROM $-.vid\nOVER like REVERSELY\nYIELD\n  $-.age AS age,\n  ('Tony Parker' == like._dst) AS liked,\n  like._src AS src,\n  like._dst AS dst"
    },
    {
        "用户": "Obtain the age and names of entities such as' player100 ',' player101 ',' player102 ', and' player103 ', and sort them in ascending age and descending name order.",
        "查询": "FETCH PROP ON player \"player100\", \"player101\", \"player102\", \"player103\"\nYIELD properties(vertex).age AS age, properties(vertex).name AS name\n| ORDER BY $-.age ASC, $-.name DESC"
    },
    {
        "用户": "Please help me start with entity 'player101' and extend one step outward through edge 'serve', returning all vertices and edges.",
        "查询": "GET SUBGRAPH WITH PROP 1 STEPS FROM \"player101\" OUT serve YIELD VERTICES AS nodes, EDGES AS relationships"
    },
    {
        "用户": "找出与 'Rajon Rondo' 有 '喜欢' 或 '服务' 关系的实体，返回这些关系的度数，并按度数排序，最多返回5条记录。",
        "查询": "match (src_v)-[e:like|serve]->(dst_v)-[e2]-(dst_v2) where  id(src_v)==\"Rajon Rondo\"\n  return properties(e).degree as degree,properties(e2).degree AS degree1\n  order by degree, degree1 limit 5;"
    },
    {
        "用户": "请帮我插入两条边，表示'player101'在 1999 年至 2018 年期间为'team204'服务，以及'player102'在 2006 年至 2015 年期间为'team203'服务。",
        "查询": "INSERT EDGE serve(start_year, end_year) VALUES \"player101\" -> \"team204\":(1999, 2018),\"player102\" -> \"team203\":(2006, 2015)"
    },
    {
        "用户": "找出名为'Ben Simmons'的球员所'服务'的所有关系，并返回这些关系。",
        "查询": "MATCH (v:player{name:\"Ben Simmons\"})-[e:serve]-(v2)\nRETURN e"
    },
    {
        "用户": "请帮我查看当前的时间戳。",
        "查询": "RETURN timestamp()"
    },
    {
        "用户": "您能帮我找到所有相关实体及其属性吗？",
        "查询": "MATCH () -[]-> (v) RETURN *"
    },
    {
        "用户": "Edge_ 1_ Change the expiration time of TTL to 100 and set the expiration policy to degree.",
        "查询": "ALTER edge edge_1_ttl ttl_duration = 100, ttl_col = \"degree\""
    },
    {
        "用户": "Update the teacher of student 'Alen' to 'Bob'.",
        "查询": "UPDATE VERTEX ON student \"Alen\" SET teacher = \"Bob\""
    },
    {
        "用户": "Please follow entity 'player101' to entity 'player102' with a 90 degree of attention. Thank you.",
        "查询": "INSERT EDGE follow(degree) VALUES \"player101\" -> \"player102\":(90)"
    },
    {
        "用户": "请问您能帮我找出从 'Tim Duncan' 到 'LaMarcus Aldridge' 之间通过喜欢关系连接的最短路径吗？",
        "查询": "FIND SHORTEST PATH FROM \"Tim Duncan\" TO \"LaMarcus Aldridge\" OVER like YIELD path as p"
    },
    {
        "用户": "Identify all entities related to 'Tim Duncan' that have 2 to 3 'like' relationships with 'Tim Duncan', and return these relationships and entities.",
        "查询": "MATCH (n)-[e:like*2..3]-(v)\nWHERE id(n) == \"Tim Duncan\"\nRETURN e, v"
    },
    {
        "用户": "Hello, please help me find out the relationship starting from the 'Thunders' vertex and traversing along the edge serve. I need to know their source node, edge attributes, edge ID, target node, and target node ID.",
        "查询": "GO FROM 'Thunders' OVER serve REVERSELY YIELD $^ as src,tags($^), id($^), id($$), $$ as dst"
    },
    {
        "用户": "请帮我返回范围1到5中的第3个数。",
        "查询": "RETURN range(1,5)[3]"
    },
    {
        "用户": "您能帮我找到所有存在关系的实体以及它们的属性吗？",
        "查询": "MATCH () -[]-> (v) RETURN *"
    },
    {
        "用户": "Obtain the attributes of all entities on 'test' and return the vertices of these entities.",
        "查询": "FETCH PROP ON * \"test\" YIELD vertex AS v"
    },
    {
        "用户": "如果test2标签不存在，则创建test2标签，包含p3字符串属性和p4整数属性。",
        "查询": "CREATE TAG IF NOT EXISTS test2(p3 string, p4 int)"
    },
    {
        "用户": "获取所有学生中，其老师的名字字典序小于'a'的实体，并返回这些实体的ID。",
        "查询": "LOOKUP ON student WHERE student.teacher < \"a\" YIELD id(vertex) as id"
    },
    {
        "用户": "Obtain the name and age of the 'Tim Duncan' player.",
        "查询": "FETCH PROP ON player \"Tim Duncan\" YIELD player.name, player.age"
    },
    {
        "用户": "找出 'Boris Diaw' 所效力的所有球队，且起始球员年龄大于18岁，返回其对这些球队的服务起始年份。",
        "查询": "GO 1 STEPS FROM \"Boris Diaw\" OVER serve\nWHERE $^.player.age > 18\nYIELD serve.start_year as start_year"
    },
    {
        "用户": "找出与实体 'Tim Duncan' 之间 '喜欢' 关系为 90，距离为 2 或 3 的所有实体及关系。",
        "查询": "MATCH (n)<-[e:like*2..3{likeness: 90}]-(v)\nWHERE id(n) == \"Tim Duncan\"\nRETURN e, v"
    },
    {
        "用户": "请将一个年龄为13的实体，名为'n2'，插入到t2中。",
        "查询": "INSERT VERTEX t2 (name, age) VALUES \"11\":(\"n2\", 13)"
    },
    {
        "用户": "Search for entities with a 2-3 hop 'like' relationship with player 'Manu Ginobili', return their gender, relationship strength, name, age, and relationship start year, and sort them by relationship strength, name, and age, with a maximum of 5 records returned.",
        "查询": "match (src_v:player{name:\"Manu Ginobili\"})-[e:like*2..3]-(dst_v)\n  return distinct properties(src_v).sex,properties(e[0]).degree as degree,properties(dst_v).name as name,src_v.player.age AS age, e[1].start_year,dst_v.player.age\n  order by degree, name, age limit 5;"
    },
    {
        "用户": "寻找从 'Tim Duncan' 到 'Tony Parker' 或 'LaMarcus Aldridge' 的最短路径，路径上的关系为 '喜欢'，最多经过三步，并返回路径信息。",
        "查询": "FIND SHORTEST PATH FROM \"Tim Duncan\" TO \"Tony Parker\", \"LaMarcus Aldridge\" OVER like UPTO 3 STEPS YIELD path as p"
    },
    {
        "用户": "Please help me delete all team tags related to 'Tim Duncan'.",
        "查询": "GO FROM \"Tim Duncan\" OVER serve YIELD serve._dst as id | DELETE TAG team FROM $-.id"
    },
    {
        "用户": "从'player100'出发，经过1到3步的关系，找出所有实体，并返回它们的姓名和年龄，每步都可以采样两条边。",
        "查询": "GO 1 TO 3 STEPS FROM \"player100\"\nOVER *\nYIELD properties($$).name AS NAME, properties($$).age AS Age\nSAMPLE [2,2,2]"
    },
    {
        "用户": "如果test空间不存在，能否帮我创建一个名为test的空间，其中实体的ID类型为固定长度为30的字符串呢？",
        "查询": "CREATE SPACE IF NOT EXISTS test (vid_type=FIXED_STRING(30))"
    },
    {
        "用户": "请将实体player100关注实体player101，并将关注度设置为95。",
        "查询": "INSERT EDGE follow(degree)\nVALUES \"player100\"->\"player101\":(95)"
    },
    {
        "用户": "Hello, please help me find all relationships with a starting year of 2020 and edge weight of 1, and return a maximum of 1000 relationships.",
        "查询": "match ()-[e]->()\nwhere abs(rank(e)) == 1 and e.start_year == 2020\nRETURN e\nlimit 1000"
    },
    {
        "用户": "If a player with the name 'Joe' exists, set the age of player 'player666' to 31 and return player information with the name 'Joe' and age of 31.",
        "查询": "UPSERT VERTEX ON player \"player666\"\nSET age = 31\nWHEN name == \"Joe\"\nYIELD name AS Name, age AS Age"
    },
    {
        "用户": "您能帮我找到所有实体的信息吗？",
        "查询": "MATCH (v) RETURN v"
    },
    {
        "用户": "Hello, could you please help me find all the entities served by 'Boris Diaw' and tell me their names, start years, and team names?",
        "查询": "GO FROM \"Boris Diaw\" OVER serve YIELD $^.player.name as name, serve.start_year as start, $$.team.name as team | YIELD $-.*"
    },
    {
        "用户": "May I ask if you could help me find the start year, end year, and relationship type of 'Boris Diaw' during his tenure with 'Hawks'?",
        "查询": "FETCH PROP ON serve 'Boris Diaw' -> 'Hawks' YIELD serve.start_year, serve.end_year, edge as relationship"
    },
    {
        "用户": "Insert two vertices, test1 and test2. The attributes of test1 are (p1:'123 ', p2: 1), and the attributes of test2 are (p3:'456', p4: 2)",
        "查询": "INSERT VERTEX test1(p1, p2),test2(p3, p4) VALUES \"test\":(\"123\", 1, \"456\", 2)"
    },
    {
        "用户": "找出‘player100’所关注的所有实体，其中关注度大于90，并返回这些实体的边信息。",
        "查询": "GO FROM \"player100\" OVER follow\nWHERE follow.degree > 90\nYIELD dst(edge)"
    },
    {
        "用户": "查找 'Tim Duncan' 所 '喜欢' 的所有实体，并返回这些实体。",
        "查询": "GO FROM \"Tim Duncan\" OVER like YIELD like._dst"
    },
    {
        "用户": "请帮我找出名为'Tim Duncan'的球员的所有朋友，并告诉我每个朋友的数量。",
        "查询": "MATCH p=(v:player{name:\"Tim Duncan\"})-[e:follow*0..3]->(v2:player)\nRETURN DISTINCT v2 AS Friends, count(v2)"
    },
    {
        "用户": "Hello, please help me create a space called basketball player, which has 10 partitions, each with 1 copy, and the entity ID type is a fixed length string of 30.",
        "查询": "CREATE SPACE basketballplayer\n(partition_num = 10,\nreplica_factor = 1,\nvid_type = FIXED_STRING(30))"
    },
    {
        "用户": "请找出年龄小于25岁的球员的姓名和年龄，可以吗？",
        "查询": "MATCH (v:player)-[e]->(v2)\nWHERE v2.player.age < 25\nRETURN v2.player.name, v2.player.age"
    },
    {
        "用户": "Hey, I want to start with 'Russell Westbrook' and go through 1-2 steps to find the IDs of all endpoint entities in 'serve' and 'like' relationships. Can you help me search for it?",
        "查询": "GO 1 TO 2 STEPS FROM 'Russell Westbrook' OVER * YIELD serve._dst, like._dst"
    },
    {
        "用户": "Please help me identify all entities served by 'player102' and return the target nodes of their edges",
        "查询": "GO FROM \"player102\" OVER serve YIELD dst(edge)"
    },
    {
        "用户": "Find all the labels of the entity with ID 'player100' and return them.",
        "查询": "MATCH (v)\nWHERE id(v)==\"player100\"\nWITH labels(v) AS tags_unf\nUNWIND tags_unf AS tags_f\nRETURN tags_f"
    },
    {
        "用户": "Please help me find the relationship between a player named 'Tim Duncan' and their team, and return all connections between the player and the team to me.",
        "查询": "MATCH (v:player{name:\"Tim Duncan\"})-[e]->(t)\nWHERE (v)-[e]->(t:team)\nRETURN (v)-->()"
    },
    {
        "用户": "Identify all entities related to 'Tim Duncan' that have 2 to 3 'like' relationships with 'Tim Duncan', and return these relationships and entities.",
        "查询": "MATCH (n)-[e:like*2..3]-(v)\nWHERE id(n) == \"Tim Duncan\"\nRETURN e, v"
    },
    {
        "用户": "Change the comment for label t1 to 'test1'.",
        "查询": "ALTER TAG t1 COMMENT ='test1'"
    },
    {
        "用户": "您好，请帮我查找一下'Boris Diaw'在效力于'Spurs'期间的起始年份和结束年份，可以吗？",
        "查询": "FETCH PROP ON serve \"Boris Diaw\"->\"Spurs\" YIELD serve.start_year, serve.start_year"
    },
    {
        "用户": "Find all entities that 'player101' is interested in and return their IDs.",
        "查询": "$var = GO FROM \"player101\" OVER follow YIELD dst(edge) AS id"
    },
    {
        "用户": "Please help me identify the names and ages of players whose names include Pa.",
        "查询": "MATCH (v:player)\nWHERE v.player.name CONTAINS \"Pa\"\nRETURN v.player.name, v.player.age"
    },
    {
        "用户": "获取'player100'的所有属性。",
        "查询": "FETCH PROP ON player \"player100\" YIELD properties(vertex)"
    },
    {
        "用户": "Expand the list [1,2,3] and return each element.",
        "查询": "UNWIND [1,2,3] AS n RETURN n"
    },
    {
        "用户": "Obtain all attributes of entity 'player100'.",
        "查询": "FETCH PROP ON player \"player100\" YIELD properties(vertex)"
    },
    {
        "用户": "您好，请您帮忙一下，能否帮我找出从 'Tony Parker' 和 'Yao Ming' 到 'Manu Ginobili'、'Spurs' 和 'Lakers' 的最短路径，并将路径信息返回给我呢？",
        "查询": "FIND SHORTEST PATH FROM \"Tony Parker\", \"Yao Ming\" TO \"Manu Ginobili\", \"Spurs\", \"Lakers\" OVER * REVERSELY YIELD path as p"
    },
    {
        "用户": "请找出'player102'所关注的所有实体，并返回这些实体的连接节点。",
        "查询": "GO FROM \"player102\" OVER serve YIELD dst(edge)"
    },
    {
        "用户": "Please identify all relationships with attribute values of 90 and help me return these relationships.",
        "查询": "MATCH ()-[e]->()\nWITH e, properties(e) as props, keys(properties(e)) as kk\nLIMIT 10000 WHERE [i in kk where props[i] == 90]\nRETURN e"
    },
    {
        "用户": "找出'player100'关注的实体中，不包括'player102'关注的实体。",
        "查询": "GO FROM \"player100\" OVER follow YIELD dst(edge)\nMINUS\nGO FROM \"player102\" OVER follow YIELD dst(edge)"
    },
    {
        "用户": "找出'player102'和'player100'之间共同关注的实体，并返回这些实体的ID、边的度和'player102'的年龄。",
        "查询": "GO FROM \"player102\" OVER follow\nYIELD dst(edge) AS id, properties(edge).degree AS Degree, properties($$).age AS Age\nINTERSECT\nGO FROM \"player100\" OVER follow\nYIELD dst(edge) AS id, properties(edge).degree AS Degree, properties($$).age AS Age"
    },
    {
        "用户": "If the team tag does not exist, create a 'team' tag with the 'name' attribute.",
        "查询": "CREATE TAG IF NOT EXISTS team(name string)"
    },
    {
        "用户": "获取从'player101'到'player100'的关注关系的属性。",
        "查询": "FETCH PROP ON follow \"player101\" -> \"player100\" YIELD properties(edge)"
    },
    {
        "用户": "嘿，你好！我需要从'Tim Duncan'的实体开始，沿着'serve'边走10000000000000步，然后告诉我所有'serve'边的终点实体的ID。你能帮我找一下吗？",
        "查询": "GO 10000000000000 STEPS FROM \"Tim Duncan\" OVER serve YIELD serve._dst;"
    },
    {
        "用户": "请帮我找出名为'Tim Duncan'的球员的所有关注关系，并返回他的所有朋友。",
        "查询": "MATCH p=(v:player{name:\"Tim Duncan\"})-[e:follow*1..]->(v2)\nRETURN v2 AS Friends"
    },
    {
        "用户": "Hello, please help me identify the nodes labeled 'helper' and return the 'team' attribute values of the endpoint nodes in their 'serve' relationship.",
        "查询": "MATCH (p:bachelor)-[:serve]->(t)\nRETURN t.team.name AS team"
    },
    {
        "用户": "找出年龄超过30岁的，且与球员'Tim Duncan'有任何关系相连的所有实体，并返回这些实体的关系路径，最多返回100条。",
        "查询": "MATCH p=(v:player)-[]->(n)\nWHERE id(v)==\"Tim Duncan\" and n.player.age>30\nRETURN p LIMIT 100"
    },
    {
        "用户": "Hello, please help me return the names and ages of all players, and arrange them in descending order of names.",
        "查询": "MATCH (v:player) RETURN v.player.name AS Name, v.player.age AS Age\nORDER BY Name DESC"
    },
    {
        "用户": "Starting from 'player101', extend outward along the 'follow' relationship by one step, returning all the extended nodes and edges.",
        "查询": "GET SUBGRAPH 1 STEPS FROM \"player101\" IN follow YIELD VERTICES AS nodes, EDGES AS relationships"
    },
    {
        "用户": "获取所有的任务。",
        "查询": "SHOW JOBS;"
    },
    {
        "用户": "请在边类型e1上插入一条从'1'指向'2'的边，属性p1为10，权重为@0。",
        "查询": "INSERT EDGE e1(p1) VALUES \"1\"->\"2\"@0:(10)"
    },
    {
        "用户": "找出'player101'所'关注'的所有实体，并返回这些实体的 ID。",
        "查询": "GO FROM \"player101\" OVER follow YIELD id($$)"
    },
    {
        "用户": "Please help me follow 'player100' and set the attention level to 95.",
        "查询": "INSERT EDGE follow(degree) VALUES \"player101\" -> \"player100\":(95)"
    },
    {
        "用户": "Can you help me find the shortest path from 'Tim Duncan' to 'Tony Parker' through a liking relationship?",
        "查询": "FIND SHORTEST PATH FROM \"Tim Duncan\" TO \"Tony Parker\" OVER like YIELD path as p"
    },
    {
        "用户": "插入两个顶点，一个顶点的ID为team203,姓名为Trail Blazers，另一个顶点的ID为team204，姓名为Spurs。",
        "查询": "INSERT VERTEX team(name) VALUES \"team203\":(\"Trail Blazers\"), \"team204\":(\"Spurs\")"
    },
    {
        "用户": "请帮我创建一个名为team的标签，其中包含一个名为name的属性。",
        "查询": "CREATE TAG team(name string)"
    },
    {
        "用户": "请帮我找出从'player100'到'team204'的所有路径，并返回这些路径。",
        "查询": "FIND ALL PATH FROM \"player100\" TO \"team204\" OVER * WHERE follow.degree is EMPTY or follow.degree >=0 YIELD path AS p"
    },
    {
        "用户": "返回球员的姓名包括在 ['James Harden', 'Jonathon Simmons', 'Klay Thompson', 'Dejounte Murray', 'Paul Gasol'] 以及所有球员。",
        "查询": "MATCH (v)\nWHERE id(v) IN ['James Harden', 'Jonathon Simmons', 'Klay Thompson', 'Dejounte Murray', 'Paul Gasol']\n      OR true\nRETURN v.player.name AS Name"
    },
    {
        "用户": "查找年龄大于等于40岁的球员实体，并返回这些实体的ID和年龄信息。",
        "查询": "LOOKUP ON player WHERE player.age >= 40.0 YIELD id(vertex) as name, player.age AS Age"
    },
    {
        "用户": "Find entities with a likes level of 90 that are liked by players known as Tim Duncan, with a distance of 2 to 3 relationships, and return these relationships and entities.",
        "查询": "MATCH (:player{name:\"Tim Duncan\"})-[e:like*2..3{likeness: 90}]->(v)\nRETURN e, v"
    },
    {
        "用户": "Find a player named 'Tim Duncan' and all non team entities associated with them, and return these path information.",
        "查询": "MATCH (v:player{name:\"Tim Duncan\"})-[e]->(t)\nWHERE NOT (v)-[e]->(t:team)\nRETURN (v)-->()"
    },
    {
        "用户": "Count the number of teams that have a 'like' relationship with 'Tim Duncan'.",
        "查询": "MATCH (v1)-[:like]->(v2:player)-[:serve]->(v3)\nWHERE id(v2) == 'Tim Duncan'\nRETURN COUNT(*)"
    },
    {
        "用户": "获取 'Tim Duncan' 球员的姓名和年龄属性。",
        "查询": "FETCH PROP ON player \"Tim Duncan\" YIELD player.name, player.age"
    },
    {
        "用户": "返回 'Tony Parker' 喜欢的 'Tim Duncan' 和 'Grant Hill' 喜欢的 'Tracy McGrady' 之间的边属性。",
        "查询": "FETCH PROP ON like \"Tony Parker\"->\"Tim Duncan\", \"Grant Hill\" -> \"Tracy McGrady\" YIELD properties(edge) as properties"
    },
    {
        "用户": "查找名为'Tracy McGrady'的球员与其服务或喜欢程度为90的实体之间的关系，并返回这些关系及实体。",
        "查询": "MATCH (:player{name:\"Tracy McGrady\"})-[e:serve|like*0..1{likeness: 90}]->(v)\nRETURN e, v"
    },
    {
        "用户": "将一个空列表的最后一个元素作为a的值并返回，将一个空列表的第一个元素作为b的值并返回。",
        "查询": "RETURN last(LIST[]) AS a, head(LIST[]) AS b"
    },
    {
        "用户": "从 'Russell Westbrook' 开始，经过1到2步关系，找到所有 'serve' 和 'like' 边的终点实体的 ID",
        "查询": "GO 1 TO 2 STEPS FROM 'Russell Westbrook' OVER * YIELD serve._dst, like._dst"
    },
    {
        "用户": "找出 'Russell Westbrook' 所喜欢的所有实体，并返回这些实体的 ID。",
        "查询": "GO FROM \"Russell Westbrook\" OVER like YIELD like._dst"
    },
    {
        "用户": " 嘿，你能帮我查一下2000年以后，'Tim Duncan'喜欢或者服务过的实体吗？距离要在2到3之间哦。",
        "查询": "MATCH (:player{name:\"Tim Duncan\"})-[e:serve|like*2..3{start_year: 2000}]-(v)\nRETURN e, v"
    },
    {
        "用户": "Please help me exit the Drainer service.",
        "查询": "SIGN OUT DRAINER SERVICE"
    },
    {
        "用户": "Create a serve edge with start and end year attributes.",
        "查询": "CREATE EDGE serve(start_year int, end_year int)"
    },
    {
        "用户": "查找所有别名小于'b'且老师名小于'abc'的学生，并返回这些学生的ID、老师名和别名，且ID不重复。",
        "查询": "LOOKUP ON student WHERE student.alias < \"b\" and student.teacher < \"abc\" YIELD DISTINCT id(vertex) as id, student.teacher, student.alias"
    },
    {
        "用户": " 您好，请帮我查找一下那些名字中含有'Tim'的球员，然后告诉我他们喜欢的人的年龄，还有他们是否喜欢'Tony Parker'，并且告诉我他们与'Tony Parker'之间的关系。",
        "查询": "LOOKUP ON player\nWHERE player.name CONTAINS 'Tim'\nYIELD player.age AS age, id(vertex) AS vid |\nGO FROM $-.vid\nOVER like REVERSELY\nYIELD\n  $-.age AS age,\n  ('Tony Parker' == like._dst) AS liked,\n  like._src AS src,\n  like._dst AS dst"
    },
    {
        "用户": "Hello, please help me find the entities and their relationship types related to 'LeBron James' and return the entity name or' abc '.",
        "查询": "MATCH (v1:player{name: \"LeBron James\"}) -[r]-> (v2)\nRETURN type(r) AS Type, CASE WHEN v2.tea.name IS NOT NULL THEN v2.tea.name WHEN v2.playe.name IS NOT NULL THEN v2.playe.name ELSE \"abc\" END AS Name"
    },
    {
        "用户": "Please help me generate a random number.",
        "查询": "RETURN rand()"
    },
    {
        "用户": "Please help me turn 'Basketball'_ Player 'is converted to uppercase.",
        "查询": "RETURN upper(\"Basketball_Player\")"
    },
    {
        "用户": "Please help me create a label called team, which contains a string attribute called name.",
        "查询": "CREATE TAG team(name string)"
    },
    {
        "用户": "Obtain the name and age of player 'Tim Duncan'.",
        "查询": "FETCH PROP ON player \"Tim Duncan\" YIELD player.name, player.age"
    },
    {
        "用户": "请将一个名为'Tony Parker'，年龄为36的球员插入到player类型集合中，其ID为'player101'，好吗？",
        "查询": "INSERT VERTEX player(name, age) VALUES \"player101\":(\"Tony Parker\", 36)"
    },
    {
        "用户": "Find the shortest path from 'team204' to 'player100' and return path information.",
        "查询": "FIND SHORTEST PATH WITH PROP FROM \"team204\" TO \"player100\" OVER * REVERSELY YIELD path AS p"
    },
    {
        "用户": "找出与 'Dejounte Murray' 有 '喜欢' 关系的实体，返回这些实体的姓名和年龄，并按年龄降序、姓名升序排序，跳过前三个结果。",
        "查询": "MATCH (v1) -[:like]-> (v)\nWHERE id(v1) == 'Dejounte Murray'\nRETURN v.player.name AS Name, v.player.age AS Age\nORDER BY Age DESCENDING, Name ASC\nSKIP 3"
    },
    {
        "用户": "获取 'Tony Parker' 喜欢的 'Tim Duncan' 和 'Grant Hill' 喜欢的 'Tracy McGrady' 的边和起始节点。",
        "查询": "FETCH PROP ON like \"Tony Parker\"->\"Tim Duncan\", \"Grant Hill\" -> \"Tracy McGrady\" YIELD edge as relationship |\nYIELD startNode($-.relationship) AS node"
    },
    {
        "用户": "您好，请帮我新增一个学生节点，名字叫Bob，需要包含年龄、别名、姓名和老师信息。",
        "查询": "INSERT VERTEX\n  student(age, alias, name, teacher)\nVALUES\n  \"Bob\" : (28, \"abc\", \"Bob\", \"Candy\")"
    },
    {
        "用户": "找出名为'Tim Duncan'的球员所'follow'或'serve'的所有实体，并返回他们之间的关系。",
        "查询": "MATCH (v:player{name:\"Tim Duncan\"})-[e:follow|:serve]->(v2)\nRETURN e"
    },
    {
        "用户": "找出与 'LeBron James' 有 '喜欢' 关系的三个实体，并返回这三个实体的名称和关系路径。",
        "查询": "MATCH p = (n)-[:like]->(m)-[:like]->(k)\nWHERE id(n) == \"LeBron James\"\nRETURN p, n.player.name, m.player.name, k.player.name"
    },
    {
        "用户": "Hello, could you please help me find the shortest path from 'Tony Parker' and 'Yao Ming' to 'Manu Ginobili', 'Spurs', and' Lakes'? The relationship attribute on the path requires' teammate. start '_ Year 'is not empty or' like. likeness' is greater than 90, which takes up to 3 steps and returns all nodes on the path.",
        "查询": "FIND SHORTEST PATH WITH PROP FROM \"Tony Parker\", \"Yao Ming\" TO \"Manu Ginobili\", \"Spurs\", \"Lakers\" OVER * BIDIRECT WHERE teammate.start_year is not EMPTY OR like.likeness > 90 UPTO 3 STEPS YIELD path as p |\nYIELD nodes($-.p) as nodes"
    },
    {
        "用户": "Find the names of the first three players and return the names of 'Tony Parker' and 'Ben Simmons'.",
        "查询": "MATCH (v:player)\nWITH v.player.name AS n\nRETURN n ORDER BY n LIMIT 3\nUNION ALL\nUNWIND [\"Tony Parker\", \"Ben Simmons\"] AS n\nRETURN n"
    },
    {
        "用户": "您好，请问您能帮我找一下从 'Tony Parker' 或 'Yao Ming' 到 'Manu Ginobili'、'Spurs' 和 'Lakers' 的最短路径吗？路径最多只能有5个步骤，路径上要包含的所有实体和关系，然后把路径信息返回给我好吗？",
        "查询": "FIND SHORTEST PATH FROM \"Tony Parker\", \"Yao Ming\" TO \"Manu Ginobili\", \"Spurs\", \"Lakers\" OVER * UPTO 5 STEPS YIELD path as p"
    },
    {
        "用户": "查找所有学生中，其老师的名字字典序小于'a'的学生，并返回这些学生的ID。",
        "查询": "LOOKUP ON student WHERE student.teacher < \"a\" YIELD id(vertex) as id"
    },
    {
        "用户": "Find the shortest path from 'Tim Duncan' to 'Tony Parker' or 'LaMarcus Aldridge', with a relationship of 'like' on the path, go through a maximum of three steps, and return path information.",
        "查询": "FIND SHORTEST PATH FROM \"Tim Duncan\" TO \"Tony Parker\", \"LaMarcus Aldridge\" OVER like UPTO 3 STEPS YIELD path as p"
    },
    {
        "用户": "请帮我找出所有存在'follow'关系的实体，并返回前三条关系",
        "查询": "MATCH ()-[e:follow]->()\nRETURN e\nlimit 3"
    },
    {
        "用户": "Returns the age and gender attributes of a player named 'LaMarcus Aldridge'.",
        "查询": "match (v:player{name:\"LaMarcus Aldridge\"}) return properties(v).age,v.player.sex;"
    },
    {
        "用户": "获取 'Tim Duncan' 球员的姓名和年龄属性。",
        "查询": "FETCH PROP ON player \"Tim Duncan\" YIELD player.name, player.age"
    },
    {
        "用户": "Find all the teams' Boris Diaw 'plays for, and if the starting player is over 18 years old, return the starting year of their service to these teams.",
        "查询": "GO 1 STEPS FROM \"Boris Diaw\" OVER serve\nWHERE $^.player.age > 18\nYIELD serve.start_year as start_year"
    },
    {
        "用户": "删除ttl_tag06标签中所有实体的'b'属性。",
        "查询": "ALTER TAG ttl_tag06 drop (b);"
    },
    {
        "用户": "肝炎有哪些症状？",
        "查询": "GO FROM \"肝炎\" OVER has_symptom YIELD dst(edge);"
    },
    {
        "用户": "从实体'player101'出发，沿着'follow'关系，获取100步内的子图，返回节点和边。",
        "查询": "GET SUBGRAPH 100 STEPS FROM \"player101\" OUT follow YIELD VERTICES AS nodes, EDGES AS relationships"
    },
    {
        "用户": "Hello, please help me find those players whose names contain 'Tim', and tell me the age of the people they like, whether they like 'Tony Parker', and tell me their relationship with 'Tony Parker'.",
        "查询": "LOOKUP ON player\nWHERE player.name CONTAINS 'Tim'\nYIELD player.age AS age, id(vertex) AS vid |\nGO FROM $-.vid\nOVER like REVERSELY\nYIELD\n  $-.age AS age,\n  ('Tony Parker' == like._dst) AS liked,\n  like._src AS src,\n  like._dst AS dst"
    },
    {
        "用户": "获取 'Tony Parker' 球员的姓名和年龄属性。",
        "查询": "FETCH PROP ON player \"Tony Parker\" YIELD player.name, player.age"
    },
    {
        "用户": "您好，请帮我查找一下，从'Tim Duncan'这个人开始，沿着'喜欢'这个关系，向两个方向扩展4步，然后把所有的实体和关系都返回给我好吗？",
        "查询": "GET SUBGRAPH 4 steps from 'Tim Duncan' BOTH like YIELD VERTICES as nodes, EDGES as relationships"
    },
    {
        "用户": "得了戊型病毒性肝炎推荐吃什么食物？",
        "查询": "MATCH (n:disease)-[e:recommend_eat]->(n1:food) WHERE n.disease.name=='戊型病毒性肝炎' return n1.food.name"
    },
    {
        "用户": "请添加一个数据接收器，地址为192.168.10.106:9889。",
        "查询": "ADD DRAINER 192.168.10.106:9889"
    },
    {
        "用户": "Find all players under the age of 25 and sort them in descending order of age, returning the names and ages of these players.",
        "查询": "MATCH (v:player)-->(v2:player)\nWITH DISTINCT v2 AS v2, v2.player.age AS Age\nORDER BY Age\nWHERE Age<25\nRETURN v2.player.name AS Name, Age"
    },
    {
        "用户": "找出 'Tim Duncan' 和 'Tony Parker' 喜欢的所有实体，并返回这些实体与他们之间的关系。",
        "查询": "YIELD {a:1, b:['Tim Duncan', 'Tony Parker'], c:'Tim Duncan'} AS a\n| YIELD $-.a.c AS b\n| UNWIND $-.b AS c\n| GO FROM $-.c OVER like YIELD edge AS e"
    },
    {
        "用户": "Please identify the entities that start with 'player100' and connect through the 'follow' relationship, and return the names of the starting entities and the ages of these endpoint entities.",
        "查询": "GO FROM \"player100\" OVER follow YIELD $^.player.name AS startName, $$.player.age AS endAge"
    },
    {
        "用户": "如果边不存在，则创建一条带有默认开始年份为2010的serve_with_default边。",
        "查询": "CREATE EDGE IF NOT EXISTS serve_with_default(start_year int, end_year int DEFAULT 2010)"
    },
    {
        "用户": "找出与实体 'Tim Duncan' 有 '喜欢' 关系的所有实体及它们之间的关系。",
        "查询": "MATCH (n)-[e:like*2..3]-(v)\nWHERE id(n) == \"Tim Duncan\"\nRETURN e, v"
    },
    {
        "用户": "查找球员'Tony Parker'的实体，并返回其ID。",
        "查询": "LOOKUP ON player WHERE player.name == \"Tony Parker\" YIELD id(vertex) as id"
    },
    {
        "用户": "请帮我找出ID为'A'的球员节点和与其相连的所有节点，并返回这些节点之间的关系。",
        "查询": "MATCH p= (v:player) -- (v2) WHERE id(v)==\"A\" RETURN p"
    },
    {
        "用户": "Find all the entities that Chris Paul likes and return their IDs.",
        "查询": "GO FROM \"Chris Paul\" OVER like YIELD like._dst"
    },
    {
        "用户": "Identify the service relationships of players over 45 years old in the Lakers team, and return the player's name followed by a string of hello.",
        "查询": "MATCH (a:player)-[b:serve]-(c:team{name: \"Lakers\"})\nWHERE a.player.age > 45\nRETURN  concat(a.player.name, \"hello\")"
    },
    {
        "用户": "Obtain the name and age attributes of the 'Tony Parker' player.",
        "查询": "FETCH PROP ON player \"Tony Parker\" YIELD player.name, player.age"
    },
    {
        "用户": "Please help me identify all entities with 'follow' relationships and return attribute information for these relationships, with a maximum of 3 results returned.",
        "查询": "MATCH ()-[e:follow]->()\nRETURN e\nlimit 3"
    },
    {
        "用户": "从顶点 't-e-t-04' 中删除 'ttl_expire_tag03' 标签。",
        "查询": "DELETE TAG ttl_expire_tag03 FROM \"t-e-t-04\";"
    },
    {
        "用户": " 您好，请帮我添加一个球员节点，名字叫做 'A Loner'，年龄为 0，然后再删除这个节点以及与它相关的所有连接。",
        "查询": "INSERT VERTEX player(name, age) VALUES \"A Loner\": (\"A Loner\", 0);\nDELETE VERTEX \"A Loner\" WITH EDGE;"
    },
    {
        "用户": "Using MY_ SPACE space.",
        "查询": "use MY_SPACE"
    },
    {
        "用户": "Obtain the name and age attributes of the 'Tony Parker' player.",
        "查询": "FETCH PROP ON player \"Tony Parker\" YIELD player.name, player.age"
    },
    {
        "用户": "获取'player100'、'player106'和'team200'的所有属性，并返回这些属性的顶点。",
        "查询": "FETCH PROP ON * \"player100\", \"player106\", \"team200\" YIELD vertex AS v"
    },
    {
        "用户": "Can you help me find the names of the first three people?",
        "查询": "MATCH (v)\nRETURN v.person.name LIMIT 3"
    },
    {
        "用户": "插入4条边，分别是Tim->May、Tim->Tony、Tony->May、May->Tim，每条边都有4个属性值，包括字符串、整数、浮点数和时间戳。",
        "查询": "INSERT EDGE\n  edge_1(col1, col2, col3, col4)\nVALUES\n  \"Tim\"  -> \"May\":  (\"Good\", 18, 11.11, `timestamp`(\"2000-10-10T10:00:00\")),\n  \"Tim\"  -> \"Tony\": (\"Good\", 18, 11.11, `timestamp`(\"2000-10-10T10:00:00\")),\n  \"Tony\" -> \"May\":  (\"Like\", 18, 11.11, `timestamp`(\"2000-10-10T10:00:00\")),\n  \"May\"  -> \"Tim\":  (\"Like\", 18, 11.11, `timestamp`(\"2000-10-10T10:00:00\"))"
    },
    {
        "用户": "您好，请帮我查询一下关于'Tim Duncan'的所有属性，包括ID、键、标签和属性。",
        "查询": "FETCH PROP ON * 'Tim Duncan' YIELD id(vertex), keys(vertex) as keys, tags(vertex) as tags_, properties(vertex) as props"
    },
    {
        "用户": "从 'Tim Duncan' 出发，经过 '喜欢' 关系，到达距离为 1 或 2 步的实体，且不包括 'YAO MING'，统计每个实体的出边数，返回出边数相同的实体数量。",
        "查询": "GO 1 TO 2 STEPS FROM \"Tim Duncan\" OVER like WHERE like._dst != \"YAO MING\" YIELD dst(edge) AS vid\n| GROUP BY $-.vid YIELD 1 AS id\n| GROUP BY $-.id YIELD COUNT($-.id);"
    },
    {
        "用户": "Please help me find all the paths from 'player100' to 'team204' and return them.",
        "查询": "FIND ALL PATH FROM \"player100\" TO \"team204\" OVER * WHERE follow.degree is EMPTY or follow.degree >=0 YIELD path AS p"
    },
    {
        "用户": "找出从 'Tim Duncan' 到 'Tony Parker'，经过 '喜欢' 和 '服务' 路径，最多包含3跳距离，并返回路径信息。",
        "查询": "FIND NOLOOP PATH FROM \"Tim Duncan\" TO \"Tony Parker\", \"Spurs\" OVER like,serve UPTO 3 STEPS YIELD path as p"
    },
    {
        "用户": "请帮我找出名为'Tim Duncan'的球员关注或服务的所有实体，并返回这些关系。",
        "查询": "MATCH (v:player{name:\"Tim Duncan\"})-[e:follow|:serve]->(v2)\nRETURN e"
    },
    {
        "用户": "请展示Graph、Storage、Meta服务的主机信息和版本信息。",
        "查询": "SHOW HOSTS"
    },
    {
        "用户": "Find the label of the entity with ID player100.",
        "查询": "MATCH (v)\nWHERE id(v)==\"player100\"\nWITH labels(v) AS tags_unf\nUNWIND tags_unf AS tags_f\nRETURN tags_f"
    },
    {
        "用户": "找出 'Tony Parker' 所 '喜欢' 的实体，但不包括喜欢程度为95、56、21的实体，并返回这些实体的名称和喜欢程度。",
        "查询": "GO FROM 'Tony Parker' OVER like\nWHERE like.likeness NOT IN {95,56,21}\nYIELD $$.player.name, like.likeness"
    },
    {
        "用户": "请问您能帮我在student标签上新增一个长度为10的索引，属性为teacher吗？",
        "查询": "CREATE TAG INDEX student_teacher ON student(teacher(10))"
    },
    {
        "用户": "查找 'Tracy McGrady' 所 '喜欢' 的所有实体，返回这些实体的 ID。",
        "查询": "GO FROM \"Tracy McGrady\" OVER like YIELD like._dst"
    },
    {
        "用户": "删减边索引 edge_1_ttl_index_second_degree。",
        "查询": "DROP EDGE INDEX edge_1_ttl_index_second_degree"
    },
    {
        "用户": "请从实体'player101'出发，通过'serve'关系向外扩展1步，然后返回扩展得到的实体和关系。",
        "查询": "GET SUBGRAPH WITH PROP 1 STEPS FROM \"player101\" OUT serve YIELD VERTICES AS nodes, EDGES AS relationships"
    },
    {
        "用户": "展示所有查询语句。",
        "查询": "SHOW QUERIES"
    },
    {
        "用户": "找出与 'Tim Duncan' 通过 '服务' 或 '喜欢' 关系相连，且喜欢程度为90的实体，并返回这些关系和实体。",
        "查询": "MATCH (n)-[e:serve|like*2..3{likeness: 90}]->(v)\nWHERE id(n) == \"Tim Duncan\"\nRETURN e, v"
    },
    {
        "用户": "请找出名为'Tim Duncan'的球员所关联的所有实体，并按照年龄降序排序。可以跳过前两个实体吗？然后返回剩余实体的姓名和年龄。",
        "查询": "MATCH (v:player{name:\"Tim Duncan\"}) --> (v2)\nRETURN v2.player.name AS Name, v2.player.age AS Age\nORDER BY Age DESC SKIP 1+1"
    },
    {
        "用户": "Obtain all students with master 'a' and return their IDs.",
        "查询": "LOOKUP ON student WHERE student.teacher == \"a\" YIELD id(vertex) as id"
    },
    {
        "用户": "请帮我删除 'Tim Duncan' 和 'Tony Parker' 的 'player' 标签。",
        "查询": "DELETE TAG player FROM \"Tim Duncan\", \"Tony Parker\";"
    },
    {
        "用户": "Returns all elements in the array [1,2,3], except for the number 4.",
        "查询": "UNWIND [1,2,3] AS a RETURN a\nMINUS\nWITH 4 AS a\nRETURN a"
    },
    {
        "用户": "Obtain the name of the 'Spurs' team.",
        "查询": "FETCH PROP ON team \"Spurs\" YIELD team.name"
    },
    {
        "用户": "Could you please help me find the path for the service relationship between player 'Yao Ming' and team 'Rockets'?",
        "查询": "MATCH (p:player {name: 'Yao Ming'} ), (t:team {name: 'Rockets'}), pth = (p)-[:serve*1..4]-(t)\nRETURN pth"
    },
    {
        "用户": "您好，请帮我查询一下 serve 所有关系中的源节点、目标节点和权重值好吗？",
        "查询": "LOOKUP ON serve YIELD src(edge) as src, dst(edge) as dst, rank(edge) as rank"
    },
    {
        "用户": "如果没有player标签的话，能否帮我创建一个player标签？该标签应包含name（字符串类型，不能为空）和age（整数类型）属性。",
        "查询": "CREATE TAG IF NOT EXISTS player(name string NOT NULL, age int)"
    },
    {
        "用户": "查找名为'Tracy McGrady'的球员所服务或喜欢最多距离为1的实体，并返回这些关系和实体。",
        "查询": "MATCH (:player{name:\"Tracy McGrady\"})-[e:serve|like*0..1]-(v)\nRETURN e, v"
    },
    {
        "用户": "Find a player entity named 'Tim Duncan' and return its ID.",
        "查询": "LOOKUP ON player WHERE player.name == \"Tim Duncan\" YIELD id(vertex) as id"
    },
    {
        "用户": "Please help me identify all entities that follow 'player100' and make them the destination.",
        "查询": "GO FROM \"player100\" OVER follow REVERSELY\nYIELD src(edge) AS destination"
    },
    {
        "用户": "找出'player100'关注的所有实体，并返回这些实体关注的实体。",
        "查询": "GO FROM \"player100\" OVER follow\nYIELD dst(edge) AS dstid, properties($$).name AS Name |\nGO FROM $-.dstid OVER follow YIELD dst(edge)"
    },
    {
        "用户": "Find the shortest path from 'Tim Duncan' and 'Tiago Splitter' to 'Tony Parker' and 'Spurs', which includes the relationship between' likes' and 'services'. Go through a maximum of 5 steps and return path information.",
        "查询": "FIND SHORTEST PATH FROM \"Tim Duncan\", \"Tiago Splitter\" TO \"Tony Parker\", \"Spurs\" OVER like,serve UPTO 5 STEPS YIELD path as p"
    },
    {
        "用户": "找出 'Boris Diaw' 所在的所有球队，并返回起点姓名，起始服务时间、这些球队的名称以及球队信息。",
        "查询": "GO FROM \"Boris Diaw\" OVER serve YIELD $^.player.name as name, serve.start_year as start, $$.team.name as team | YIELD $-.team"
    },
    {
        "用户": "Please help me find all entities that players named 'Tim Duncan' are following or playing for.",
        "查询": "MATCH p=(v:player{name:\"Tim Duncan\"})-[e:follow|serve*2]->(v2)\nRETURN DISTINCT v2"
    },
    {
        "用户": "Find all the entities that Tim Duncan likes and return their IDs.",
        "查询": "GO FROM \"Tim Duncan\" OVER like YIELD like._dst"
    },
    {
        "用户": "Please help me form a list of numbers 1, 2, and 3.",
        "查询": "RETURN list[1, 2, 3] AS a"
    },
    {
        "用户": "找出与 'Dejounte Murray' 有 '喜欢' 关系的实体，按照年龄降序、姓名升序排序，跳过前11个结果，返回接下来的3个实体的姓名和年龄。",
        "查询": "MATCH (v1) -[:like]-> (v)\nWHERE id(v1) == 'Dejounte Murray'\nRETURN v.player.name AS Name, v.player.age AS Age\nORDER BY Age DESC, Name ASC\nSKIP 11\nLIMIT 3"
    },
    {
        "用户": "请找出名为'Tim Duncan'的球员所关联的所有实体，并按照这些实体的年龄进行排序，然后给我返回这些实体的姓名和年龄。",
        "查询": "MATCH (v:player{name:\"Tim Duncan\"}) --> (v2)\nRETURN v2.player.name AS Name, v2.player.age AS Age\nORDER BY Age"
    },
    {
        "用户": "新增一个名为student_ta的标签索引，该索引包含了student标签中alias和teacher属性的前10个字符。",
        "查询": "CREATE TAG INDEX student_ta ON student(alias(10), teacher(10))"
    },
    {
        "用户": "从 'Russell Westbrook' 开始，经过1到2步关系，找到所有 'serve' 和 'like' 边的终点实体的 ID",
        "查询": "GO 1 TO 2 STEPS FROM 'Russell Westbrook' OVER * YIELD serve._dst, like._dst"
    },
    {
        "用户": "请帮我找一下名字开头在'a'之前的学生，然后把他们的ID、姓名和年龄告诉我好吗？",
        "查询": "LOOKUP ON student WHERE student.name < \"a\" YIELD id(vertex) as id, student.name as name, student.age as age"
    },
    {
        "用户": "找出与 'Boris Diaw' 有 '喜欢' 关系的所有实体，并返回这些实体的 ID。",
        "查询": "GO FROM \"Boris Diaw\" OVER like YIELD like._dst"
    },
    {
        "用户": "查找名为'Tim Duncan'的球员所二跳喜欢或三跳喜欢的所有实体，返回数量统计结果。",
        "查询": "MATCH (:player{name: \"Tim Duncan\"})-[e:like*2..3]-(v)\nRETURN count(v)"
    },
    {
        "用户": "如果标签t1不存在，则创建一个包含字符串类型字段a和整数类型字段b的标签。",
        "查询": "CREATE TAG IF NOT EXISTS t1(a string, b int)"
    },
    {
        "用户": "嘿，我想从 'Russell Westbrook' 开始，经过 1-2 步关系，找到所有 'serve' 和 'like' 关系的终点实体的 ID。你能帮我查找一下吗？",
        "查询": "GO 1 TO 2 STEPS FROM 'Russell Westbrook' OVER * YIELD serve._dst, like._dst"
    },
    {
        "用户": "请帮我找出所有在2000年之前开始参加比赛的球员的姓名和年龄。",
        "查询": "MATCH (v:player)-[e]->()\nWHERE e.start_year < 2000\nRETURN DISTINCT v.player.name, v.player.age"
    },
    {
        "用户": "Can you help me find the first result in the subgraph starting from 'Tim Duncan'?",
        "查询": "$a = GET SUBGRAPH WITH PROP FROM 'Tim Duncan' | LIMIT 1"
    },
    {
        "用户": "In the follow relationship, set the degree of interest of entity 'player102' to entity 'player100' to 75.",
        "查询": "INSERT EDGE follow(degree) VALUES \"player102\" -> \"player100\":(75)"
    },
    {
        "用户": "Please help me identify all entities that 'player100' who are 42 years old or older are following and return to the endpoint",
        "查询": "GO FROM \"player100\" OVER follow\nWHERE $^.player.age >= 42\nYIELD dst(edge)"
    },
    {
        "用户": "找出满足条件 e1.col1 >= 1 和 e1.col3 >= false 的实体 e1 的所有边，返回这些边的源节点和目标节点。",
        "查询": "LOOKUP ON e1 WHERE e1.col1 >= 1 AND e1.col3 >= false YIELD src(edge) as src, dst(edge) as dst"
    },
    {
        "用户": "Return all entities with a player named 'Tim Duncan' liking level of 95, and return the original node name.",
        "查询": "MATCH (v:player{name: 'Tim Duncan'})-[e:like{likeness: 95}]->() return v.player.name AS name"
    },
    {
        "用户": "找出从 'Tim Duncan' 到 'Tony Parker'或'Spurs'，经过 '喜欢' 和 '服务' 关系的路径，最多包含3个步骤，并返回路径信息。",
        "查询": "FIND NOLOOP PATH FROM \"Tim Duncan\" TO \"Tony Parker\", \"Spurs\" OVER like,serve UPTO 3 STEPS YIELD path as p"
    },
    {
        "用户": "找出从 'Tim Duncan' 到 'Tony Parker' 的所有路径，路径上包含 '喜欢' 属性的关系，最多包含三个步骤，并返回这些路径上的所有关系。",
        "查询": "FIND ALL PATH WITH PROP FROM \"Tim Duncan\" TO \"Tony Parker\" OVER like UPTO 3 STEPS YIELD path as p |\nYIELD relationships($-.p) as relationships"
    },
    {
        "用户": " 您好，请帮我找出与'Tim Duncan'有 'serve' 或 'like' 关系的实体，距离为2到3的，并将它们返回给我。",
        "查询": "MATCH (n)-[e:serve|like*2..3]->(v)\nWHERE id(n) == \"Tim Duncan\"\nRETURN e, v"
    },
    {
        "用户": "肝炎的易感人群有哪些？",
        "查询": "LOOKUP ON disease WHERE disease.name == \"肝炎\" YIELD properties(vertex).easy_get"
    },
    {
        "用户": "获取球员 'Tim Duncan' 的姓名和年龄。",
        "查询": "FETCH PROP ON player \"Tim Duncan\" YIELD player.name, player.age"
    },
    {
        "用户": "Find a player entity named 'Tim Duncan' and return its ID.",
        "查询": "LOOKUP ON player WHERE player.name == \"Tim Duncan\" YIELD id(vertex) as id"
    },
    {
        "用户": "查找所有 '喜欢' 关系中，亲密度大于89的边，并返回这些边的源节点、目标节点和权重。",
        "查询": "LOOKUP ON like where like.likeness > 89 YIELD src(edge) as src, dst(edge) as dst, rank(edge) as rank"
    },
    {
        "用户": "哪些病要去耳鼻喉科就诊？",
        "查询": "MATCH (n:disease)-[e:cure_department]->(n1) return n.disease.name"
    },
    {
        "用户": "Find all entities that 'player102' and 'player100' are 'interested in' and return the target entities of their edges.",
        "查询": "GO FROM \"player102\" OVER follow YIELD dst(edge)\nUNION\nGO FROM \"player100\" OVER follow YIELD dst(edge)"
    },
    {
        "用户": "Hello, can you help identify all entities labeled as player and helper?",
        "查询": "MATCH (v:player:bachelor) RETURN v"
    },
    {
        "用户": "Please insert an entity named 'person' into the graph database, with attribute p1 and value 2.",
        "查询": "INSERT VERTEX person(p1) VALUES \"2\":(2)"
    },
    {
        "用户": "查找名为 'Tony Parker' 的球员实体，并返回其 ID。",
        "查询": "LOOKUP ON player WHERE player.name == \"Tony Parker\" YIELD id(vertex) as id"
    },
    {
        "用户": "找出与 'Tim Duncan' 有 '服务' 或 '喜欢' 关系，且关系强度为90的实体，并返回这些实体的关系和ID。",
        "查询": "MATCH (n)-[e:serve|like*2..3{likeness: 90}]->(v)\nWHERE id(n) == \"Tim Duncan\"\nRETURN e, v"
    },
    {
        "用户": "返回1和-1之间的差值作为sub。",
        "查询": "RETURN 1- -1 AS sub"
    },
    {
        "用户": "返回真或假，且假或假的异或结果。",
        "查询": "RETURN NOT FALSE OR FALSE AND FALSE XOR FALSE"
    },
    {
        "用户": "Hello, please help me find the entities, relationship types, and team names related to 'LeBron James'.",
        "查询": "MATCH (v1) -[r]-> (v2)\nWHERE id(v1) == \"LeBron James\"\nRETURN type(r) AS Type, v2.team.name AS Name"
    },
    {
        "用户": "找出 'Russell Westbrook' 的实体所 '喜欢' 的所有实体，并返回这些实体的 ID。",
        "查询": "GO FROM \"Russell Westbrook\" OVER like YIELD like._dst"
    },
    {
        "用户": "如果player_with_default标签不存在，则创建一个名为player_with_default的标签，该标签包含名字和年龄属性，年龄属性的默认值为20。",
        "查询": "CREATE TAG IF NOT EXISTS player_with_default(name string, age int DEFAULT 20)"
    },
    {
        "用户": "返回10个标签为ttl_expire_tag03的实体及其属性。",
        "查询": "MATCH (v:ttl_expire_tag03) RETURN v LIMIT 10;"
    },
    {
        "用户": "请帮我找到所有与 'Tim Duncan' 有关的球队信息，并删除这些球队的标签。",
        "查询": "GO FROM \"Tim Duncan\" OVER serve YIELD serve._dst as id | DELETE TAG team FROM $-.id"
    },
    {
        "用户": "Identify entities related to 'player100' and return their friends and the team to which they belong.",
        "查询": "MATCH (v)<-[e:follow]- (v2)-[e2:serve]->(v3)\nWHERE id(v) =='player100'\nRETURN v2.player.name AS FriendOf, v3.team.name AS Team"
    },
    {
        "用户": "您好，我想请您帮忙找一下，从 'Tony Parker' 或 'Yao Ming' 到 'Manu Ginobili'、'Spurs'、'Lakers' 中的任意一个实体，最短路径最多包含5个步骤，能给我返回一下路径信息吗？",
        "查询": "FIND SHORTEST PATH FROM \"Tony Parker\", \"Yao Ming\" TO \"Manu Ginobili\", \"Spurs\", \"Lakers\" OVER * UPTO 5 STEPS YIELD path as p"
    },
    {
        "用户": "Find all players associated with players named 'Tony Parker' and return the names and ages of these players after deduplication.",
        "查询": "MATCH (v:player{name:\"Tony Parker\"})--(v2:player)\nRETURN DISTINCT v2.player.name, v2.player.age"
    },
    {
        "用户": "Hello, please help me find entities e1 that meet the conditions e1. col1 is less than or equal to 2 and e1. col5 is less than '22:22:22', and return their source and target nodes.",
        "查询": "LOOKUP ON e1 WHERE e1.col1 <= 2 AND e1.col5 < time(\"22:22:22\") YIELD src(edge) as src, dst(edge) as dst"
    },
    {
        "用户": "查找 'Paul George' 所喜欢的所有实体，并返回这些实体的 ID。",
        "查询": "GO FROM \"Paul George\" OVER like YIELD like._dst"
    },
    {
        "用户": "找出'player101'关注的所有实体，并返回这些实体的 ID。",
        "查询": "$var = GO FROM \"player101\" OVER follow YIELD dst(edge) AS id"
    },
    {
        "用户": "查找年龄为25或28的所有球员，并返回他们的姓名和年龄。",
        "查询": "LOOKUP ON player\nWHERE player.age IN [25,28]\nYIELD properties(vertex).name, properties(vertex).age"
    },
    {
        "用户": "Submit the assignment and refresh the graph space data.",
        "查询": "SUBMIT JOB FLUSH;"
    },
    {
        "用户": "查找满足条件 e1.col1 <= 2 和 e1.col3 <= true 的实体 e1，返回这些实体的边的源节点和目标节点。",
        "查询": "LOOKUP ON e1 WHERE e1.col1 <= 2 AND e1.col3 <= true YIELD src(edge) as src, dst(edge) as dst"
    },
    {
        "用户": "找出与 'Tim Duncan' 有两到三跳 '喜欢' 关系，且喜欢程度为90的实体，返回这些关系和实体。",
        "查询": "MATCH (n)-[e:like*2..3{likeness: 90}]->(v)\nWHERE id(n) == \"Tim Duncan\"\nRETURN e, v"
    },
    {
        "用户": "查找名为'Tim Duncan'的球员实体，并返回其ID。",
        "查询": "LOOKUP ON player WHERE player.name == \"Tim Duncan\" YIELD id(vertex) as id"
    },
    {
        "用户": "您好，请帮我查找一下，从 'Tim Duncan' 出发，经过 'serve' 关系，找到距离为 1 至 2 步的所有实体，然后返回这些实体之间的边的起点和终点。",
        "查询": "GO 1000000000 TO 1000000002 STEPS FROM \"Tim Duncan\" OVER serve YIELD dst(edge) as dst, src(edge) as src"
    },
    {
        "用户": "Find all paths from 'Tim Duncan' to 'Tony Parker', which must go through a 'like' relationship, up to 3 steps, and return the path and the relationships on the path.",
        "查询": "FIND ALL PATH WITH PROP FROM \"Tim Duncan\" TO \"Tony Parker\" OVER like UPTO 3 STEPS YIELD path as p |\nYIELD relationships($-.p) as relationships"
    },
    {
        "用户": "Hello, could you help me find the shortest path from 'Tiago Splitter' to 'Tony Parker'? The path can only have one step at most. Could you please help me check and return it to me.",
        "查询": "FIND SHORTEST PATH FROM \"Tiago Splitter\" TO \"Tony Parker\" OVER * UPTO 1 STEPS YIELD path as p"
    },
    {
        "用户": "您好，请帮我查找一下'Boris Diaw'在'Spurs'的服务关系的源节点、目标节点和权重好吗？",
        "查询": "FETCH PROP ON serve 'Boris Diaw'->\"Spurs\" YIELD serve._src, serve._dst, serve._rank"
    },
    {
        "用户": "Please help me find all the friends of a player named 'Tim Duncan' and tell me the number of each friend.",
        "查询": "MATCH p=(v:player{name:\"Tim Duncan\"})-[e:follow*0..3]->(v2:player)\nRETURN DISTINCT v2 AS Friends, count(v2)"
    },
    {
        "用户": "Identify all entities of interest to 'player102' and 'player100', and return the target nodes of their edges",
        "查询": "GO FROM \"player102\" OVER follow YIELD dst(edge)\nUNION ALL\nGO FROM \"player100\" OVER follow YIELD dst(edge)"
    },
    {
        "用户": "找出 'Boris Diaw' 所在的所有球队，并返回起点姓名，起始服务时间、这些球队的名称以及球队信息。",
        "查询": "GO FROM \"Boris Diaw\" OVER serve YIELD $^.player.name as name, serve.start_year as start, $$.team.name as team | YIELD $-.team"
    },
    {
        "用户": "请帮我将'Basketball_Player'转换为大写。",
        "查询": "RETURN upper(\"Basketball_Player\")"
    },
    {
        "用户": "Please find all entities associated with a player named 'Tim Duncan' and sort them in descending order of age. Can I skip the first two entities? Then return the names and ages of the remaining entities.",
        "查询": "MATCH (v:player{name:\"Tim Duncan\"}) --> (v2)\nRETURN v2.player.name AS Name, v2.player.age AS Age\nORDER BY Age DESC SKIP 1+1"
    },
    {
        "用户": "Identify all entities and relationships that have a 'like' relationship with 'Tim Duncan', with a relationship strength of 90 and a distance of 2 or 3.",
        "查询": "MATCH (n)-[e:like*2..3{likeness: 90}]-(v)\nWHERE id(n) == \"Tim Duncan\"\nRETURN e, v"
    },
    {
        "用户": "Please display the information of the first partition.",
        "查询": "SHOW PARTS 1"
    },
    {
        "用户": "Returns the age and number of players, arranged in descending order of quantity and age.",
        "查询": "MATCH (n:player)\nRETURN n.player.age as age, count(*) as number\nORDER BY number DESC, age DESC"
    },
    {
        "用户": "请找出与ID为'A'球员相关联的所有实体，并返回到这些实体的路径。",
        "查询": "MATCH p= (v:player) -- (v2) WHERE id(v)==\"A\" RETURN p"
    },
    {
        "用户": "Please help me remove the 'player' tags for 'Tim Duncan' and 'Tony Parker'.",
        "查询": "DELETE TAG player FROM \"Tim Duncan\", \"Tony Parker\";"
    },
    {
        "用户": "Find a player entity named 'Tim Duncan' and return its ID.",
        "查询": "LOOKUP ON player WHERE player.name == \"Tim Duncan\" YIELD id(vertex) as id"
    },
    {
        "用户": "Find all entities that 'player100' is' following 'and return the names and ages of these entities.",
        "查询": "GO FROM \"player100\" OVER follow\nYIELD properties($$).name AS Friend, properties($$).age AS Age"
    },
    {
        "用户": "从'player101'开始，获取1步内的所有节点和边。",
        "查询": "GET SUBGRAPH 1 STEPS FROM \"player101\" YIELD VERTICES AS nodes, EDGES AS relationships"
    },
    {
        "用户": "您好，请帮我找出与 'Tim Duncan' 有 '服务' 关系的所有实体，并将它们的 ID 返回给我。",
        "查询": "GO FROM \"Tim Duncan\" OVER serve YIELD serve._dst as id"
    },
    {
        "用户": "Find all relationships with attribute values of 90 and return these relationships.",
        "查询": "MATCH ()-[e]->()\nWITH e, properties(e) as props, keys(properties(e)) as kk\nLIMIT 10000 WHERE [i in kk where props[i] == 90]\nRETURN e"
    },
    {
        "用户": "您好，请帮我返回所有球员的姓名和年龄，并按照姓名降序排列。",
        "查询": "MATCH (v:player) RETURN v.player.name AS Name, v.player.age AS Age\nORDER BY Name DESC"
    },
    {
        "用户": "Insert a player entity named 'player100' with the name 'Tim Duncan' and the age of 42.",
        "查询": "INSERT VERTEX player(name, age) VALUES \"player100\":(\"Tim Duncan\", 42)"
    },
    {
        "用户": " 您好，请帮我查找一下名为'Tim Duncan'的球员所喜好程度为90的实体，距离在2到3之间的所有节点和边。",
        "查询": "MATCH (:player{name:\"Tim Duncan\"})-[e:like*2..3{likeness: 90}]-(v)\nRETURN e, v"
    },
    {
        "用户": "找出 'Tim Duncan' 所 '喜欢' 或 '服务' 的实体，且这些实体的 '服务开始年份' 大于 1970 或 '年龄' 小于 50，返回这些实体的 ID 和边信息。",
        "查询": "GO FROM \"Tim Duncan\" OVER like, serve\n  WHERE serve.start_year > 1970 OR properties($$).age < 50\n  YIELD $$ AS dst, edge AS e"
    },
    {
        "用户": "将从'player101'到'player100'的关注边的关注度设置为96。",
        "查询": "UPDATE EDGE ON follow \"player101\" -> \"player100\" SET degree = 96"
    },
    {
        "用户": "删除 'Russell Westbrook' 所 '喜欢' 的所有实体及其边。",
        "查询": "$var = GO FROM \"Russell Westbrook\" OVER like YIELD like._dst as id; DELETE VERTEX $var.id WITH EDGE"
    },
    {
        "用户": "如果my_space不存在，则创建一个名为my_space的空间，其中实体ID的类型为固定长度为30的字符串。",
        "查询": "CREATE SPACE IF NOT EXISTS my_space (vid_type=FIXED_STRING(30))"
    },
    {
        "用户": "Remove duplicates from the list [1,1,2,2,3,3] and sort it in ascending order, then return the sorted result.",
        "查询": "WITH [1,1,2,2,3,3] AS n\nUNWIND n AS r\nWITH DISTINCT r AS r\nORDER BY r\nRETURN collect(r)"
    },
    {
        "用户": "Please insert a relationship on edge e1, starting with entity 1 and ending with entity 2, with a weight of 1, attribute p1, and attribute value of 11.",
        "查询": "INSERT EDGE e1(p1) VALUES \"1\"->\"2\"@1:(11)"
    },
    {
        "用户": "找出'player100'所'关注'的所有实体，并返回这些实体的源节点和目标节点。",
        "查询": "$a = GO FROM \"player100\" OVER follow YIELD src(edge) AS src, dst(edge) AS dst"
    },
    {
        "用户": "得了白血病的治愈概率是多少？",
        "查询": "LOOKUP ON disease WHERE disease.name == \"白血病\" YIELD properties(vertex).cured_prob"
    },
    {
        "用户": "查找名为'Tracy McGrady'的球员所服务或喜欢，最多距离为1的实体，并返回这些关系和实体。",
        "查询": "MATCH (:player{name:\"Tracy McGrady\"})-[e:serve|like*0..1]-(v)\nRETURN e, v"
    },
    {
        "用户": "获取 'Tony Parker' 球员的姓名和年龄属性。",
        "查询": "FETCH PROP ON player \"Tony Parker\" YIELD player.name, player.age"
    },
    {
        "用户": "治疗肝炎的方法有哪些？",
        "查询": "GO FROM \"肝炎\" OVER cure_way YIELD dst(edge);"
    },
    {
        "用户": "If the test2 tag does not exist, create a test2 tag that contains the p3 string attribute and the p4 integer attribute.",
        "查询": "CREATE TAG IF NOT EXISTS test2(p3 string, p4 int)"
    },
    {
        "用户": "Please help me identify the entities connected through the 'follow' relationship starting from 'player100' and return the 'Team' and 'Player' attributes of these entities.",
        "查询": "GO FROM \"player100\" OVER follow YIELD dst(edge) AS id |\nGO FROM $-.id OVER serve YIELD properties($$).name AS Team,\nproperties($^).name AS Player"
    },
    {
        "用户": "找出与 'Tim Duncan' 相关的所有实体，这些实体与 'Tim Duncan' 之间存在 2 到 3 条 '喜欢' 的关系，返回这些关系和实体。",
        "查询": "MATCH (n)-[e:like*2..3]-(v)\nWHERE id(n) == \"Tim Duncan\"\nRETURN e, v"
    },
    {
        "用户": "Find all entities that like 'Grant Hill' and return the target entity ID in their relationship with 'Grant Hill'.",
        "查询": "GO FROM \"Grant Hill\" OVER like REVERSELY YIELD like._dst"
    },
    {
        "用户": "Insert a vertex belonging to the personWithDefault tag, with vertex attributes of 'Tom' for the name attribute and 20 for the age attribute.",
        "查询": "INSERT VERTEX personWithDefault(name, age) VALUES \"Tom\":(\"Tom\", 20)"
    },
    {
        "用户": "Find the shortest path from 'player102' to 'team204' and return path information.",
        "查询": "FIND SHORTEST PATH FROM \"player102\" TO \"team204\" OVER * YIELD path AS p"
    },
    {
        "用户": "查找名为'Tim Duncan'的球员实体，并返回其ID。",
        "查询": "LOOKUP ON player WHERE player.name == \"Tim Duncan\" YIELD id(vertex) as id"
    },
    {
        "用户": "请帮我找出名为'Tim Duncan'的球员的所有关注关系路径，并返回路径上的朋友节点。",
        "查询": "MATCH p=(v:player{name:\"Tim Duncan\"})-[e:follow*]->(v2)\nRETURN v2 AS Friends"
    },
    {
        "用户": "Returns the names of entities with player names James Harden, Jonathan Simmons, Klay Thompson, Dejounte Murray, and Paul Gasol.",
        "查询": "MATCH (v)\nWHERE id(v) IN ['James Harden', 'Jonathon Simmons', 'Klay Thompson', 'Dejounte Murray', 'Paul Gasol']\n      AND true\nRETURN v.player.name AS Name"
    },
    {
        "用户": "Find the IDs and corresponding ages of entities that Tim Duncan likes, filter out entities older than 40 years old, and return the IDs and average age of these entities plus 1.",
        "查询": "GO FROM \"Tim Duncan\" OVER like YIELD like._dst AS dst, $$.player.age AS age\n| YIELD $-.dst AS dst, 1+avg(distinct $-.age) AS age where $-.age > 40"
    },
    {
        "用户": "Identify entities of common interest between 'player102' and 'player100', and return their IDs, degree of edges, and age of 'player102'.",
        "查询": "GO FROM \"player102\" OVER follow\nYIELD dst(edge) AS id, properties(edge).degree AS Degree, properties($$).age AS Age\nINTERSECT\nGO FROM \"player100\" OVER follow\nYIELD dst(edge) AS id, properties(edge).degree AS Degree, properties($$).age AS Age"
    },
    {
        "用户": "找出与球员 'Shaquille O'Neal' 有关系的所有实体，返回这些实体的姓名、年龄、性别和年龄，并按照年龄和姓名排序，只返回一条记录。",
        "查询": "match (v1)-->(v2:player)-->(v3) where v2.player.name==\"Shaquille O'Neal\"\n  return properties(v1).name,properties(v2).age as age,properties(v3).name AS name,v2.player.sex,v1.player.age\n  order by age, name limit 1;"
    },
    {
        "用户": "Can you help me update the teacher for student 'Alen' to 'Bob'?",
        "查询": "UPDATE VERTEX ON student \"Alen\" SET teacher = \"Bob\""
    },
    {
        "用户": "请帮我生成一个介于1到100之间的随机数。",
        "查询": "RETURN rand32(1,100)"
    },
    {
        "用户": "Could you please help me find the names of the first three people?",
        "查询": "MATCH (v)\nRETURN v.person.name LIMIT 3"
    },
    {
        "用户": "查找球员'Tony Parker'的实体，并返回其ID。",
        "查询": "LOOKUP ON player WHERE player.name == \"Tony Parker\" YIELD id(vertex) as id"
    },
    {
        "用户": "Please identify the entities connected through the 'follow' relationship starting from 'player100' and return the 'Team' and 'Player' attributes of these entities.",
        "查询": "GO FROM \"player100\" OVER follow YIELD dst(edge) AS id |\nGO FROM $-.id OVER serve YIELD properties($$).name AS Team,\nproperties($^).name AS Player"
    },
    {
        "用户": "Find all players associated with a player named 'Tony Parker' and obtain their names and ages.",
        "查询": "MATCH (v:player{name:\"Tony Parker\"})--(v2:player)\nRETURN v2.player.name, v2.player.age"
    },
    {
        "用户": "找出从'player100'到'team204'的所有路径，并返回这些路径。",
        "查询": "FIND ALL PATH FROM \"player100\" TO \"team204\" OVER * WHERE follow.degree is EMPTY or follow.degree >=0 YIELD path AS p"
    },
    {
        "用户": "获取名字小于'a'的学生，并返回他们的ID、姓名和年龄。",
        "查询": "LOOKUP ON student WHERE student.name < \"a\" YIELD id(vertex) as id, student.name as name, student.age as age"
    },
    {
        "用户": "Please show me the index below.",
        "查询": "SHOW EDGE INDEXES"
    },
    {
        "用户": "将边edge_1_ttl的过期时间修改为100，并将过期策略设置为degree。",
        "查询": "ALTER edge edge_1_ttl ttl_duration = 100, ttl_col = \"degree\""
    },
    {
        "用户": "找出名字中包含'Tim'的球员，然后找出他们所喜欢的人，并返回这些人的年龄、是否喜欢'Tony Parker'、源节点和目标节点的ID。",
        "查询": "$var = LOOKUP ON player\nWHERE player.name CONTAINS 'Tim'\nYIELD player.age AS age, id(vertex) AS vid;\nGO FROM $var.vid\nOVER like REVERSELY\nYIELD\n  $var.age AS age,\n  ('Tony Parker' == like._dst) AS liked,\n  like._src AS src,\n  like._dst AS dst"
    },
    {
        "用户": "Add attention edges from 'player101' to 'player100' and set the attention level to 95.",
        "查询": "INSERT EDGE follow(degree) VALUES \"player101\" -> \"player100\":(95)"
    },
    {
        "用户": "Find all entities that 'player100' is interested in, with a degree of interest greater than 90, and return the edge information of these entities.",
        "查询": "GO FROM \"player100\" OVER follow\nWHERE follow.degree > 90\nYIELD dst(edge)"
    },
    {
        "用户": "找出年龄大于20的'Tim Duncan'和'Chris Paul'所 '喜欢' 的实体，并返回这些实体的ID，然后从这些实体出发找出'喜欢程度'大于80的所有关系。返回这些关系的目标实体。",
        "查询": "$var = GO FROM \"Tim Duncan\", \"Chris Paul\" OVER like WHERE properties($$).age > 20 YIELD id($$) as id;\nGO FROM $var.id OVER * WHERE properties(edge).likeness > 80 YIELD $$ as dst"
    },
    {
        "用户": "如果没有标签only_linestring，您可以创建一个具有地理线串属性的标签。",
        "查询": "CREATE TAG IF NOT EXISTS only_linestring(geo geography(linestring))"
    },
    {
        "用户": "修改 person_ttl 标签的 ttl_duration 为 100，ttl_col 设置为 'gender'。",
        "查询": "ALTER TAG person_ttl ttl_duration = 100, ttl_col = \"gender\""
    },
    {
        "用户": "Create a woman tag with attributes such as name, age, marital status, salary, and creation time, and set the creation time to expire in 100 seconds.",
        "查询": "CREATE TAG IF NOT EXISTS woman(name string, age int,\nmarried bool, salary double, create_time timestamp)\nTTL_DURATION = 100, TTL_COL = \"create_time\""
    },
    {
        "用户": "嘿，你好！我需要找出所有曾经为'Thunders'提供服务的实体，然后返回它们的源节点、边上的标签、边的ID、目标节点以及目标节点的ID。你能帮我完成这个任务吗？",
        "查询": "GO FROM 'Thunders' OVER serve REVERSELY YIELD $^ as src,tags($^), id($^), id($$), $$ as dst"
    },
    {
        "用户": "Please help me identify all the entities that 'player100' is following and tell me their names and ages.",
        "查询": "GO FROM \"player100\" OVER follow\nYIELD properties($$).name AS Friend, properties($$).age AS Age"
    },
    {
        "用户": "Hey, can you help me find all the paths from Yao Ming to Danny Green in both directions? The edges on the path can be of any type, as long as the likeness of the 'like' attribute is empty or greater than or equal to 80. Go through a maximum of 3 steps and then provide me with the path information.",
        "查询": "FIND ALL PATH WITH PROP FROM \"Yao Ming\" TO \"Danny Green\" OVER * BIDIRECT\nWHERE like.likeness is  EMPTY OR like.likeness >= 80 AND 1 > 2 UPTO 3 STEPS YIELD path as p"
    },
    {
        "用户": "找出与 'Danny Green' 喜欢的实体，返回起点实体的名称和朋友的名称。",
        "查询": "MATCH (v1) -[:like]-> (v2)\nWHERE id(v1) == \"Danny Green\"\nRETURN v1.player.name AS Name, v2.player.name AS Friend"
    },
    {
        "用户": "Hey, can you help me find the player with 'Tim' in their name? Then let's see if there's any 'Tony Parker' among the people they like, and finally tell me the age of these players, okay?",
        "查询": "LOOKUP ON player\nWHERE player.name CONTAINS 'Tim'\nYIELD player.age as age, id(vertex) as vid |\nGO FROM $-.vid OVER like REVERSELY YIELD $-.age AS age, like._dst AS dst |\nYIELD\n  any(d IN COLLECT(DISTINCT $-.dst) WHERE d=='Tony Parker') AS d,\n  $-.age as age"
    },
    {
        "用户": "请帮我找出名为'Tim Duncan'的球员所关联的所有实体，并按照年龄降序返回这些实体的姓名和年龄。",
        "查询": "MATCH (v:player{name:\"Tim Duncan\"}) --> (v2)\nRETURN v2.player.name AS Name, v2.player.age AS Age\nORDER BY Age DESC"
    },
    {
        "用户": "您好，请问您能帮我找一下从 'Tiago Splitter' 到 'Tony Parker' 的最短路径吗？路径最多只能有一步哦，麻烦您帮我查一下并返回给我。",
        "查询": "FIND SHORTEST PATH FROM \"Tiago Splitter\" TO \"Tony Parker\" OVER * UPTO 1 STEPS YIELD path as p"
    },
    {
        "用户": "您好，请帮我找出与'Tim Duncan'有关的实体和它们之间的关系的子图，以这些实体的ID为起点。谢谢！",
        "查询": "GO from 'Tim Duncan' OVER serve YIELD serve._src AS id |\nGET SUBGRAPH WITH PROP FROM $-.id\nYIELD vertices as nodes, edges as relationships"
    },
    {
        "用户": "Returns the names of all players playing for the 'Pistons' team.",
        "查询": "MATCH (v)-[:serve]->(t)\nWHERE id(t) == 'Pistons'\nRETURN v.player.name AS Name"
    },
    {
        "用户": "查找所有 '喜欢' 关系中，亲密度小于39的源节点、目标节点和边的rank。",
        "查询": "LOOKUP ON like where like.likeness < 39 YIELD src(edge) as src, dst(edge) as dst, rank(edge) as rank"
    },
    {
        "用户": "请问您能帮我找到名为'Tony Parker'的球员的姓名和年龄吗？",
        "查询": "FETCH PROP ON player \"Tony Parker\" YIELD player.name, player.age"
    },
    {
        "用户": "Starting from 'Russell Westbrook', after 1 to 2 steps of relationship, find the IDs of the endpoint entities of all 'serve' and 'like' edges",
        "查询": "GO 1 TO 2 STEPS FROM 'Russell Westbrook' OVER * YIELD serve._dst, like._dst"
    },
    {
        "用户": "Add a new one named student_ The label index of alias, which is based on the alias attribute of the student label and has a length of 10.",
        "查询": "CREATE TAG INDEX student_alias ON student(alias(10))"
    },
    {
        "用户": "Calculate the result of 2+3. If the result is 4, it returns 0. If the result is 5, it returns 1. Otherwise, it returns -1.",
        "查询": "YIELD\nCASE 2+3\nWHEN 4 THEN 0\nWHEN 5 THEN 1\nELSE -1\nEND\nAS result"
    },
    {
        "用户": "获取实体'player100'的属性，并返回这些属性。",
        "查询": "FETCH PROP ON player \"player100\" YIELD properties(vertex)"
    },
    {
        "用户": "插入一条边，Tom 喜欢 Conan，喜欢程度为 200。",
        "查询": "INSERT EDGE like VALUES \"Tom\"->\"Conan\":(200)"
    },
    {
        "用户": "显示当前图数据库的统计信息。",
        "查询": "show stats;"
    },
    {
        "用户": "您好，请帮我在student标签上创建一个长度为10的索引，属性名为teacher。\"",
        "查询": "CREATE TAG INDEX student_teacher ON student(teacher(10))"
    },
    {
        "用户": "如果'player149'为'team219'的服务关系的开始年份不等于2016，则将结束年份加1，并返回开始年份和结束年份。",
        "查询": "UPSERT EDGE on serve\n\"player149\" -> \"team219\"\nSET end_year = end_year + 1\nWHEN start_year != 2016\nYIELD start_year, end_year"
    },
    {
        "用户": "获取'Boris Diaw'的球员的姓名、年龄，并返回该球员年龄是否大于30的结果。",
        "查询": "FETCH PROP ON player 'Boris Diaw' YIELD player.name, player.age, player.age > 30"
    },
    {
        "用户": "请从实体'player101'出发，沿着'follow'关系，帮我获取100步内的子图，并返回节点和边。",
        "查询": "GET SUBGRAPH 100 STEPS FROM \"player101\" OUT follow YIELD VERTICES AS nodes, EDGES AS relationships"
    },
    {
        "用户": "Identify entities that have a two to three jump 'like' relationship with 'Tim Duncan' and a liking level of 90, and return these relationships and entities.",
        "查询": "MATCH (n)-[e:like*2..3{likeness: 90}]->(v)\nWHERE id(n) == \"Tim Duncan\"\nRETURN e, v"
    },
    {
        "用户": "找出所有 'Boris Diaw' 喜欢的实体，然后删除这些实体与 'Boris Diaw' 的关系。",
        "查询": "GO FROM \"Boris Diaw\" OVER like YIELD like._dst as id | DELETE VERTEX $-.id WITH EDGE"
    },
    {
        "用户": "Add a double type attribute named p5 to label t1, with a default value of 0.4 and not allowed to be empty, and a comment of 'test2'.",
        "查询": "ALTER TAG t1 ADD (p5 double NOT NULL DEFAULT 0.4 COMMENT'p5') COMMENT='test2'"
    },
    {
        "用户": "Identify all entities that are favored by 'Tony Parker' and 'Tim Duncan', and return these entities and their relationships, but exclude the relationships between 'Tony Parker' and 'Tim Duncan' themselves.",
        "查询": "MATCH (v:player)-[e:like]->(v2) WHERE none_direct_src(e) IN [\"Tony Parker\", \"Tim Duncan\"] RETURN *\nMINUS\nMATCH (v:player)-[e:like]->(v2) WHERE id(v) IN [\"Tony Parker\", \"Tim Duncan\"] RETURN *"
    },
    {
        "用户": "Returns all elements in the array [1,2,3], except for the number 4.",
        "查询": "UNWIND [1,2,3] AS a RETURN a\nMINUS\nWITH 4 AS a\nRETURN a"
    },
    {
        "用户": "Starting from 'Tim Duncan', follow the 'like' relationship to find all paths of 'Tony Parker' or 'LaMarcus Aldridge', up to a maximum of 3 steps, and return these paths.",
        "查询": "FIND ALL PATH FROM \"Tim Duncan\" TO \"Tony Parker\", \"LaMarcus Aldridge\" OVER like UPTO 3 STEPS YIELD path as p"
    },
    {
        "用户": "请帮我创建一个名为player的标签，里面包含姓名和年龄两个属性。",
        "查询": "CREATE TAG player(name string, age int)"
    },
    {
        "用户": "Find all entity paths that can be reached through the 'like' relationship in no more than 3 steps starting from 'Tim Duncan', and sort them by path length to return to the top 5 paths.",
        "查询": "$a = GO FROM \"Tim Duncan\" over * YIELD like._dst AS src, serve._src AS dst;\nFIND NOLOOP PATH FROM $a.src TO $a.dst OVER like UPTO 3 STEPS YIELD path as p |\nORDER BY $-.p | LIMIT 5"
    },
    {
        "用户": "Please help me find all the entities that a player named 'Tim Duncan' follows and return them to me as his friends.",
        "查询": "MATCH p=(v:player{name:\"Tim Duncan\"})-[e:follow*]->(v2)\nRETURN v2 AS Friends"
    },
    {
        "用户": "Please help me find all the entities' follow 'or' serve 'by a player named' Tim Duncan 'and tell me their relationship.",
        "查询": "MATCH (v:player{name:\"Tim Duncan\"})-[e:follow|:serve]->(v2)\nRETURN e"
    },
    {
        "用户": "Find the players that players with ID player101 are following, and sort them in descending order of number of followers, returning the names and number of followers of the players.",
        "查询": "MATCH (v1:player)-[:follow]-(v2:player)\nWHERE id(v1)== \"player101\"\nRETURN v2.player.name AS Name, count(*) as cnt ORDER BY cnt DESC"
    },
    {
        "用户": "Find the names of players aged 40, and then follow the reverse 'like' relationship, starting from these players and extending 1 to 2 steps outward, returning the ID, name, edges, starting and ending node information of each entity.",
        "查询": "LOOKUP ON player WHERE player.age == 40 YIELD player.name AS name |\nGO 1 TO 2 STEPS FROM $-.name OVER like REVERSELY YIELD like._dst AS dst, $$.player.name AS name, edge as e, $$ as dstnode, $^ as srcnode"
    },
    {
        "用户": "将'player100'的姓名更新为'Tim'。",
        "查询": "UPDATE VERTEX \"player100\" SET player.name = \"Tim\""
    },
    {
        "用户": "返回名为'Tim Duncan'的球员喜欢程度为95的所有实体，并返回原始节点名字。",
        "查询": "MATCH (v:player{name: 'Tim Duncan'})-[e:like{likeness: 95}]->() return v.player.name AS name"
    },
    {
        "用户": "请问您能帮我找一下从 'Shaquille O'Neal' 到 'Manu Ginobili' 的最短路径吗？路径上最多经过5个实体，并且能返回路径信息吗？",
        "查询": "YIELD \"Shaquille O\\'Neal\" AS src\n| FIND SHORTEST PATH FROM $-.src TO \"Manu Ginobili\" OVER * UPTO 5 STEPS YIELD path as p"
    },
    {
        "用户": "您好，请帮我查找一下，从 'Tim Duncan' 出发，经过最多两个 'serve' 关系，找出与 '1000000000'、'1000000001'、'1000000002' 相连的边的起点和终点。",
        "查询": "GO 1000000000 TO 1000000002 STEPS FROM \"Tim Duncan\" OVER serve YIELD dst(edge) as dst, src(edge) as src"
    },
    {
        "用户": "List the expiration time of all edges with edge type work2 as ttl_ Clear col.",
        "查询": "ALTER EDGE work2 ttl_col = \"\";"
    },
    {
        "用户": "找出从 'Tim Duncan' 到 'Tony Parker'或'Spurs'，经过 '喜欢' 和 '服务' 关系的路径，最多包含3个步骤，并返回路径信息。",
        "查询": "FIND NOLOOP PATH FROM \"Tim Duncan\" TO \"Tony Parker\", \"Spurs\" OVER like,serve UPTO 3 STEPS YIELD path as p"
    },
    {
        "用户": "Please help me find the names and ages of players aged between 20 and 25.",
        "查询": "MATCH (v:player)\nWHERE v.player.age IN range(20,25)\nRETURN v.player.name, v.player.age"
    },
    {
        "用户": "请展示一下所有的分区。",
        "查询": "SHOW PARTS"
    },
    {
        "用户": "请帮我插入一个名为'Tim Duncan'，年龄为42岁的球员实体，其ID为'player100'。",
        "查询": "INSERT VERTEX player(name, age) VALUES \"player100\":(\"Tim Duncan\", 42)"
    },
    {
        "用户": "如果my_space不存在，则创建一个名为my_space的空间，其中实体ID的类型为固定长度字符串，长度为30。",
        "查询": "CREATE SPACE IF NOT EXISTS my_space (vid_type=FIXED_STRING(30))"
    },
    {
        "用户": "Find all entities that like 'Grant Hill' and return the target entity ID in their relationship with 'Grant Hill'.",
        "查询": "GO FROM \"Grant Hill\" OVER like REVERSELY YIELD like._dst"
    },
    {
        "用户": "请您帮我平衡数据。",
        "查询": "BALANCE DATA"
    },
    {
        "用户": "找出从 'Tim Duncan' 开始，通过 '喜欢' 关系，且 '喜欢程度' 大于90的路径，最多3步，返回前5条路径。",
        "查询": "$a = GO FROM \"Tim Duncan\" over * YIELD like._dst AS src, serve._src AS dst;\nFIND NOLOOP PATH WITH PROP FROM $a.src TO $a.dst OVER like WHERE like.likeness > 90 UPTO 3 STEPS YIELD path as p |\nORDER BY $-.p | LIMIT 5"
    },
    {
        "用户": "Please help me check the time corresponding to the timestamp 1625469277.",
        "查询": "RETURN datetime(timestamp(1625469277))"
    },
    {
        "用户": "Bidirectional search for all paths from Tim Duncan to Yao Ming, with a liking level between 80 and 90, or for teammates after 2001, up to 3 steps, and return these paths.",
        "查询": "FIND ALL PATH WITH PROP FROM \"Tim Duncan\" TO \"Yao Ming\" OVER * BIDIRECT\nWHERE (like.likeness >= 80 and like.likeness <= 90) OR (teammate.start_year is not EMPTY and teammate.start_year > 2001) UPTO 3 STEPS YIELD path as p"
    },
    {
        "用户": " 您好，请帮我查找一下名为'Tim Duncan'的球员所喜好程度为90的实体，距离在2到3之间的所有节点和边。",
        "查询": "MATCH (:player{name:\"Tim Duncan\"})-[e:like*2..3{likeness: 90}]-(v)\nRETURN e, v"
    },
    {
        "用户": "提交作业统计信息并返回。",
        "查询": "SUBMIT JOB STATS;"
    },
    {
        "用户": "Find a player entity named 'Tim Duncan' and return the ID of that entity.",
        "查询": "LOOKUP ON player WHERE player.name == \"Tim Duncan\" YIELD id(vertex) as id"
    },
    {
        "用户": "Identify entities and relationships that have a 'service' or 'liking' relationship with 'Tim Duncan', with a liking level of 90 and a distance of 2 to 3",
        "查询": "MATCH (n)-[e:serve|like*2..3{likeness: 90}]-(v)\nWHERE id(n) == \"Tim Duncan\"\nRETURN e, v"
    },
    {
        "用户": "请帮我从'player100'出发，经过1到3步的关系，找出所有实体，并返回它们的姓名和年龄，每步都可以采样两条边。",
        "查询": "GO 1 TO 3 STEPS FROM \"player100\"\nOVER *\nYIELD properties($$).name AS NAME, properties($$).age AS Age\nSAMPLE [2,2,2]"
    },
    {
        "用户": "您好，请帮我查找一下e1类型中col1等于1且col5等于'11:11:11'的记录，并将这些记录的源节点和目标节点返回给我好吗？",
        "查询": "LOOKUP ON e1 WHERE e1.col1 == 1 AND e1.col5 == time(\"11:11:11\") YIELD src(edge) as src, dst(edge) as dst"
    },
    {
        "用户": "找出名为'Tim Duncan'的球员所喜欢的所有实体，距离2-3跳关系，返回数量统计结果。",
        "查询": "MATCH (:player{name: \"Tim Duncan\"})-[e:like*2..3]-(v)\nRETURN count(v)"
    },
    {
        "用户": "请问您能帮我计算一下数字1减去负数1的结果吗？",
        "查询": "YIELD 1- -1"
    },
    {
        "用户": "Identify the teams served by Tim Duncan and their starting years, as well as the teams served by Tony Parker and their starting years, and merge the two results again.",
        "查询": "(GO FROM \"Tim Duncan\" OVER like YIELD like._dst as id |\n   GO FROM $-.id OVER serve YIELD $^.player.name, serve.start_year, $$.team.name)\nUNION DISTINCT\nGO FROM \"Tony Parker\" OVER serve YIELD $^.player.name, serve.start_year, $$.team.name"
    },
    {
        "用户": "请帮我插入两个顶点，一个顶点表示球队，名称为'Trail Blazers'，另一个顶点表示球队，名称为'Spurs'。",
        "查询": "INSERT VERTEX team(name) VALUES \"team203\":(\"Trail Blazers\"), \"team204\":(\"Spurs\")"
    },
    {
        "用户": "Find the target nodes of the edges of all entities that are of interest to 'player102' and 'player100', and return these target nodes.",
        "查询": "GO FROM \"player102\" OVER follow YIELD dst(edge)\nUNION\nGO FROM \"player100\" OVER follow YIELD dst(edge)"
    },
    {
        "用户": "Count the number of occurrences of each element in the list, and return the total number of elements and the number of non repeating elements.",
        "查询": "WITH [NULL, 1, 1, 2, 2] As a\nUNWIND a AS b\nRETURN count(b), COUNT(*), couNT(DISTINCT b)"
    },
    {
        "用户": "找出与 'Tim Duncan' 有 '服务' 或 '喜欢' 关系，且喜欢程度度为90，距离为2到3的实体及关系",
        "查询": "MATCH (n)-[e:serve|like*2..3{likeness: 90}]-(v)\nWHERE id(n) == \"Tim Duncan\"\nRETURN e, v"
    },
    {
        "用户": "找出与 'Rajon Rondo' 有 '喜欢' 或 '服务' 关系的实体，返回这些关系的度数，并按度数排序，最多返回前5个结果。",
        "查询": "match (src_v)-[e:like|serve]->(dst_v)-[e2]-(dst_v2) where  id(src_v)==\"Rajon Rondo\"\n  return properties(e).degree as degree,properties(e2).degree AS degree1\n  order by degree, degree1 limit 5;"
    },
    {
        "用户": "Please help me find all the relationships between a player named 'Tim Duncan' and other entities.",
        "查询": "MATCH p=(v:player{name:\"Tim Duncan\"})-->(v2)\nRETURN relationships(p)"
    },
    {
        "用户": "请帮我将数字1、2、3组成一个列表a。",
        "查询": "RETURN list[1, 2, 3] AS a"
    },
    {
        "用户": "在t1类型中查找col1小于等于2且col2小于等于2.0的所有实体，并返回这些实体的ID。",
        "查询": "LOOKUP ON t1 WHERE t1.col1 <= 2 AND t1.col2 <= 2.0 YIELD id(vertex) as id"
    },
    {
        "用户": "肝炎的易得人群是哪些？",
        "查询": "LOOKUP ON disease WHERE disease.name == \"肝炎\" YIELD properties(vertex).easy_get"
    },
    {
        "用户": "Please show all the partitions.",
        "查询": "SHOW PARTS"
    },
    {
        "用户": "查找名为'LaMarcus Aldridge'的球员的年龄并返回。",
        "查询": "match (v:player{name:\"LaMarcus Aldridge\"}) return v.player.age;"
    },
    {
        "用户": "Set the 'serve' between 'player668' and 'team200'_ With_ The 'end' of the default 'edge_ Increase the 'year' attribute by 1 and return 'start'_ Year 'and' end_ The value of 'year'.",
        "查询": "UPSERT EDGE on serve_with_default\n\"player668\" -> \"team200\"\nSET end_year = end_year + 1\nYIELD start_year, end_year"
    },
    {
        "用户": "找出名为'Yao Ming'的球员所服务的距离为1到3的实体，并返回起点实体的名称。",
        "查询": "MATCH (v:player {name: \"Yao Ming\"})-[:serve*1..3]->() RETURN v.player.name"
    },
    {
        "用户": "请帮我找出名为'Tim Duncan'的球员与其关注的球员之间的关系，然后返回这些关系。",
        "查询": "MATCH (v:player{name:\"Tim Duncan\"})-[e:follow{degree:95}]->(v2)\nRETURN e"
    },
    {
        "用户": "戊型病毒性肝炎的症状有哪些？",
        "查询": "MATCH (n:disease)-[e:has_symptom]->(n1:symptom) WHERE n.disease.name=='戊型病毒性肝炎' return n1.symptom.name"
    },
    {
        "用户": "请帮我找出名为'Tim Duncan'的球员，并返回该球员的信息。",
        "查询": "MATCH (v:player{name:\"Tim Duncan\"}) RETURN v"
    },
    {
        "用户": "查找名字为'Tim Duncan'的球员实体，并返回该实体的ID。",
        "查询": "LOOKUP ON player WHERE player.name == \"Tim Duncan\" YIELD id(vertex) as id"
    },
    {
        "用户": "Can you help me find the 'serve' relationship attribute between 'Boris Diaw' and 'Spurs'? I need to return the source node, target node, and relationship weights.",
        "查询": "FETCH PROP ON serve 'Boris Diaw'->\"Spurs\" YIELD serve._src, serve._dst, serve._rank"
    },
    {
        "用户": "Could you please help me delete the tag index person_ Ttl_ 2_ Index_ Number?",
        "查询": "DROP TAG INDEX person_ttl_2_index_number"
    },
    {
        "用户": "Please help me find all the entities that a player named 'Tim Duncan' follows and return them as his friends.",
        "查询": "MATCH p=(v:player{name:\"Tim Duncan\"})-[e:follow*1..]->(v2)\nRETURN v2 AS Friends"
    },
    {
        "用户": "您好，请帮我找出所有别名小于'b'且老师名小于'abc'的学生，然后给我他们的ID、老师名和别名，要求ID不能重复。",
        "查询": "LOOKUP ON student WHERE student.alias < \"b\" and student.teacher < \"abc\" YIELD DISTINCT id(vertex) as id, student.teacher, student.alias"
    },
    {
        "用户": "得了风湿病不能吃什么？",
        "查询": "GO FROM \"风湿病\" OVER no_eat YIELD dst(edge);"
    },
    {
        "用户": "Find all the following relationships for a player named 'Tim Duncan' and return to all his friends.",
        "查询": "MATCH p=(v:player{name:\"Tim Duncan\"})-[e:follow*1..]->(v2)\nRETURN v2 AS Friends"
    },
    {
        "用户": "Please find the names and ages of players starting with't '.",
        "查询": "MATCH (v:player)\nWHERE v.player.name STARTS WITH \"t\"\nRETURN v.player.name, v.player.age"
    },
    {
        "用户": "请帮我平衡数据。",
        "查询": "BALANCE DATA"
    },
    {
        "用户": "查看和胃痛相关的所有信息？",
        "查询": "GET SUBGRAPH 1 STEPS FROM \"胃痛\" YIELD VERTICES AS nodes, EDGES AS all_edges"
    },
    {
        "用户": "找出从 'Tim Duncan' 到 'Tony Parker' 的所有双向 '喜欢' 关系路径，最多包含3跳距离，并返回这些路径。",
        "查询": "FIND NOLOOP PATH FROM \"Tim Duncan\" TO \"Tony Parker\" OVER like BIDIRECT UPTO 3 STEPS YIELD path as p"
    },
    {
        "用户": "请帮我找出'player100'所'关注'的所有实体，并返回这些实体的 ID。",
        "查询": "$var = GO FROM \"player100\" OVER follow YIELD dst(edge) AS id"
    },
    {
        "用户": "Please help me balance the data.",
        "查询": "BALANCE DATA"
    },
    {
        "用户": "Could you please help me find the names of the first three people?",
        "查询": "MATCH (v)\nRETURN v.person.name LIMIT 3"
    },
    {
        "用户": "Hello, please help me identify all entities directly connected to the entity with ID 'Tom' and return the relationship paths between them to me.",
        "查询": "MATCH p=(v)-[e*1]->(v2) WHERE id(v) IN [\"Tom\"] RETURN p"
    },
    {
        "用户": "Find all entities that 'player101', who are 35 years old or older, are interested in and return the names and ages of these entities.",
        "查询": "GO FROM \"player101\" OVER follow WHERE properties($$).age >= 35\nYIELD properties($$).name AS Teammate, properties($$).age AS Age"
    },
    {
        "用户": "获取 'Tony Parker' 球员的姓名和年龄属性。",
        "查询": "FETCH PROP ON player \"Tony Parker\" YIELD player.name, player.age"
    },
    {
        "用户": "找出从 'Tim Duncan' 到 'Tony Parker' 或 'LaMarcus Aldridge' 的所有路径，路径上的关系为 '喜欢'，最多经过三步，并返回这些路径。",
        "查询": "FIND ALL PATH FROM \"Tim Duncan\" TO \"Tony Parker\", \"LaMarcus Aldridge\" OVER like UPTO 3 STEPS YIELD path as p"
    },
    {
        "用户": "请找出所有球员姓名不以'R'结尾的，并告诉我他们的年龄。",
        "查询": "MATCH (v:player)\nWHERE NOT v.player.name ENDS WITH \"R\"\nRETURN v.player.name, v.player.age"
    },
    {
        "用户": "Obtain the name and age attributes of the 'Tim Duncan' player.",
        "查询": "FETCH PROP ON player \"Tim Duncan\" YIELD player.name, player.age"
    },
    {
        "用户": "Hello, please help me obtain all attribute information about 'Tim Duncan', including ID, key, label, and attribute values.",
        "查询": "FETCH PROP ON * 'Tim Duncan' YIELD  id(vertex), keys(vertex) as keys, tags(vertex) as tags_, properties(vertex) as props"
    },
    {
        "用户": "请将一个名为'person'的实体插入到图数据库中，该实体的属性为p1，值为2。",
        "查询": "INSERT VERTEX person(p1) VALUES \"2\":(2)"
    },
    {
        "用户": "Find a player entity named 'Tim Duncan' and return the ID of that entity.",
        "查询": "LOOKUP ON player WHERE player.name == \"Tim Duncan\" YIELD id(vertex) as id"
    },
    {
        "用户": "Please help me explain and display the labels in dot format.",
        "查询": "EXPLAIN format=\"dot\" SHOW TAGS"
    },
    {
        "用户": "Can you help me find the shortest path from 'Tiago Splitter' to 'LaMarcus Aldridge'?",
        "查询": "FIND SHORTEST PATH FROM \"Tiago Splitter\" TO \"LaMarcus Aldridge\" OVER * YIELD path as p"
    },
    {
        "用户": "从 'Tim Duncan' 出发，经过 '喜欢' 和 '效力' 关系，获取两步内的所有实体和关系。",
        "查询": "GET SUBGRAPH WITH PROP 2 STEPS FROM 'Tim Duncan' IN like OUT serve YIELD vertices as nodes, edges as relationships"
    },
    {
        "用户": "Please display all the labels.",
        "查询": "SHOW TAGS"
    },
    {
        "用户": "Obtain the attributes of a player named 'player100' and return the name of that player.",
        "查询": "FETCH PROP ON player \"player100\"\nYIELD properties(vertex).name AS name"
    },
    {
        "用户": "找出前三个球员的姓名，并将'Tony Parker'和'Ben Simmons'的姓名返回。",
        "查询": "MATCH (v:player)\nWITH v.player.name AS n\nRETURN n ORDER BY n LIMIT 3\nUNION ALL\nUNWIND [\"Tony Parker\", \"Ben Simmons\"] AS n\nRETURN n"
    },
    {
        "用户": "Find the relationship and endpoint node information between 'Tim Duncan' liked by 'Tony Parker' and 'Tracy McGrady' liked by 'Grant Hill'.",
        "查询": "FETCH PROP ON like \"Tony Parker\"->\"Tim Duncan\", \"Grant Hill\" -> \"Tracy McGrady\" YIELD edge as relationship |\nYIELD endNode($-.relationship) AS node"
    },
    {
        "用户": "获取标签为'test'的日期属性，并返回日期、时间和日期时间。",
        "查询": "FETCH PROP ON tag_date \"test\" YIELD tag_date.f_date, tag_date.f_time, tag_date.f_datetime;"
    },
    {
        "用户": "Find the names of the first three players and expand and return the names of 'Tony Parker' and 'Ben Simmons'.",
        "查询": "MATCH (v:player)\nWITH v.player.name AS n\nRETURN n ORDER BY n LIMIT 3\nUNION ALL\nUNWIND [\"Tony Parker\", \"Ben Simmons\"] AS n\nRETURN n"
    },
    {
        "用户": "如果团队标签的名称长度不超过20个字符，则创建一个名为team_index的标签索引。",
        "查询": "CREATE TAG INDEX IF NOT EXISTS team_index ON team(name(20))"
    },
    {
        "用户": "找出ID为player102的球员所关注的球员ID，排除ID为player100的球员所关注的球员ID。",
        "查询": "MATCH (v:player)-[e:follow]->(v2)\nWHERE id(v) ==\"player102\"\nRETURN id(v2) AS id\nMINUS\nMATCH (v:player)-[e:follow]->(v2)\nWHERE id(v) ==\"player100\"\nRETURN id(v2) AS id"
    },
    {
        "用户": "Find the shortest path from player 'Tim Duncan' to player 'Tony Parker' and return the relationship and node information on the path.",
        "查询": "MATCH p = shortestPath( (a:player{name:\"Tim Duncan\"})-[e*..5]-(b:player{name:\"Tony Parker\"}) )  RETURN e, p"
    },
    {
        "用户": "Create a test named_ If the user with permission does not exist, set the password to test and grant the user the USER role permission on the nba diagram.",
        "查询": "CREATE USER IF NOT EXISTS test_permission WITH PASSWORD 'test';\nGRANT ROLE USER ON nba TO test_permission;"
    },
    {
        "用户": "Please identify all players with Pa in their names and tell me their names and ages.",
        "查询": "MATCH (v:player)\nWHERE v.player.name CONTAINS \"Pa\"\nRETURN v.player.name, v.player.age"
    },
    {
        "用户": "如果团队标签不存在，则创建一个带有'name'属性的‘team’标签。",
        "查询": "CREATE TAG IF NOT EXISTS team(name string)"
    },
    {
        "用户": "返回名为'Tim Duncan'的球员喜欢程度为95的所有实体，并返回原始节点名字。",
        "查询": "MATCH (v:player{name: 'Tim Duncan'})-[e:like{likeness: 95}]->() return v.player.name AS name"
    },
    {
        "用户": "创建一个名为woman的标签，包含姓名、年龄、婚姻状态、薪水和创建时间等属性，创建时间属性具有100秒的生存期，生存期字段为create_time。",
        "查询": "CREATE TAG IF NOT EXISTS woman(name string, age int,\nmarried bool, salary double, create_time timestamp)\nTTL_DURATION = 100, TTL_COL = \"create_time\""
    },
    {
        "用户": "请帮我找到所有与 'Tim Duncan' 有关的球队信息，并删除这些球队的标签。",
        "查询": "GO FROM \"Tim Duncan\" OVER serve YIELD serve._dst as id | DELETE TAG team FROM $-.id"
    },
    {
        "用户": "Return all entities with a player named 'Tim Duncan' liking level of 95, and return the original node name.",
        "查询": "MATCH (v:player{name: 'Tim Duncan'})-[e:like{likeness: 95}]->() return v.player.name AS name"
    },
    {
        "用户": "Returns the minimum value, standard deviation, sum, bitwise AND, and bitwise OR of null values, and outputs the corresponding results.",
        "查询": "RETURN min(NULL) AS value1, std(NULL) AS value2, sum(NULL) AS value3, bit_and(NULL) AS value4, bit_or(NULL,NULL) AS value5"
    },
    {
        "用户": "展示所有边索引的状态。",
        "查询": "SHOW EDGE INDEX STATUS;"
    },
    {
        "用户": "从 'Tim Duncan' 出发，沿着 '喜欢' 关系，找到距离为3的实体，返回结果限制为第一跳自动选择1条边，第二跳选择2条边，第三跳选择2条边。",
        "查询": "GO 3 STEPS FROM \"Tim Duncan\" OVER like LIMIT [1, 2, 2];"
    },
    {
        "用户": "Hello, could you please help me find the IDs of all entities starting from 'Tim Duncan' and following the 'serve' relationship outward through steps 1 to 10?",
        "查询": "GO 1 TO 10 STEPS FROM \"Tim Duncan\" OVER serve YIELD $$ as dst"
    },
    {
        "用户": "Obtain all students whose teacher's name is greater than 'a' and return their IDs.",
        "查询": "LOOKUP ON student WHERE student.teacher > \"a\" YIELD id(vertex) as id"
    },
    {
        "用户": "Delete edge index edge_ 1_ Ttl_ Index_ Second_ Start_ Time.",
        "查询": "DROP EDGE INDEX edge_1_ttl_index_second_start_time"
    },
    {
        "用户": "找出从 'Tim Duncan' 到 'Tony Parker' 或 'Manu Ginobili' 的不重复路径，路径上的关系为 '喜欢'，最多包含3个步骤，并返回这些路径。",
        "查询": "FIND NOLOOP PATH FROM \"Tim Duncan\" TO \"Tony Parker\", \"Manu Ginobili\" OVER like UPTO 3 STEPS YIELD path as p"
    },
    {
        "用户": "找出所有得分小于20的球员，并返回他们的姓名。",
        "查询": "MATCH (v:player) WHERE v.player.score < 20 RETURN v.player.name AS name"
    },
    {
        "用户": "找出从 'Yao Ming' 到 'Tony Parker' 或 'Tracy McGrady' 的最短路径，路径上通过 '喜欢' 和 '服务' 关系相连，最多经过5个步骤，并返回路径信息。",
        "查询": "FIND SHORTEST PATH FROM \"Yao Ming\"  TO \"Tony Parker\", \"Tracy McGrady\" OVER like,serve UPTO 5 STEPS YIELD path as p"
    },
    {
        "用户": "Hello, could you please help me find the shortest path from 'Tony Parker' and 'Yao Ming' to 'Manu Ginobili', 'Spurs', and' Lakes'? The relationship attribute on the path requires' teammate. start '_ Year 'is not empty or' like. likeness' is greater than 90, which takes up to 3 steps and returns all nodes on the path.",
        "查询": "FIND SHORTEST PATH WITH PROP FROM \"Tony Parker\", \"Yao Ming\" TO \"Manu Ginobili\", \"Spurs\", \"Lakers\" OVER * BIDIRECT WHERE teammate.start_year is not EMPTY OR like.likeness > 90 UPTO 3 STEPS YIELD path as p |\nYIELD nodes($-.p) as nodes"
    },
    {
        "用户": " 您好，请帮我找一下那些年龄为40或20且有名字的球员，我需要他们的ID和年龄信息。",
        "查询": "LOOKUP ON player WHERE player.age IN [40, 20] AND player.name > \"\" YIELD id(vertex) as id, player.age"
    },
    {
        "用户": "Find the entities that 'Carmelo Anthony' and 'Dwyane Wade' like ', group them by entity name, count the quantity and total, and finally sort them in descending order by total and name, returning the first two results.",
        "查询": "GO FROM 'Carmelo Anthony', 'Dwyane Wade' OVER like\n   YIELD $$.player.name AS name\n   | GROUP BY $-.name\n     YIELD $-.name AS name,\n           SUM(1.5) AS sum,\n           COUNT(*) AS count\n      | ORDER BY $-.sum, $-.name  DESC\n      | LIMIT 2"
    },
    {
        "用户": "如果可能的话，能否在any_shape标签上创建一个名为any_shape_geo_index的索引，该索引是基于geo属性的呢？",
        "查询": "CREATE TAG INDEX IF NOT EXISTS any_shape_geo_index ON any_shape(geo)"
    },
    {
        "用户": "Identify entities that have a 'like' or 'service' relationship with 'Rajon Rondo', return the degree of these relationships, and sort them by degree, returning a maximum of 5 records.",
        "查询": "match (src_v)-[e:like|serve]->(dst_v)-[e2]-(dst_v2) where  id(src_v)==\"Rajon Rondo\"\n  return properties(e).degree as degree,properties(e2).degree AS degree1\n  order by degree, degree1 limit 5;"
    },
    {
        "用户": "Obtain all attributes of 'player100', 'player106', and 'team200', and return the vertices of these attributes.",
        "查询": "FETCH PROP ON * \"player100\", \"player106\", \"team200\" YIELD vertex AS v"
    },
    {
        "用户": "返回除 'Paul Gasol' 外的所有实体的球员姓名。",
        "查询": "MATCH (v)\nWHERE id(v) != 'Paul Gasol'\nRETURN v.player.name AS Name"
    },
    {
        "用户": "Returns the number of minutes from 2021-07-19T02:59:40.",
        "查询": "RETURN datetime(\"2021-07-19T02:59:40\").mInutE AS minute"
    },
    {
        "用户": "找出所有没有关系权重的边，返回它们的权重排名前三的值。",
        "查询": "match ()-[e]->()\nwhere rank(e) == 0\nRETURN rank(e)\nlimit 3"
    },
    {
        "用户": "找出从 'Tim Duncan' 开始，通过 '喜欢' 关系最多不超过3步能到达的所有实体，并返回这些实体的路径。",
        "查询": "$a = GO FROM \"Tim Duncan\" over * YIELD like._dst AS src, serve._src AS dst;\nFIND NOLOOP PATH FROM $a.src TO $a.dst OVER like UPTO 3 STEPS YIELD path as p"
    },
    {
        "用户": "请问您能帮我找出从 'Tim Duncan' 到 'LaMarcus Aldridge' 之间通过喜欢关系连接的最短路径吗？",
        "查询": "FIND SHORTEST PATH FROM \"Tim Duncan\" TO \"LaMarcus Aldridge\" OVER like YIELD path as p"
    },
    {
        "用户": "您好，请帮我查找一下老师名字为'a'的学生，然后给我他们的ID。",
        "查询": "LOOKUP ON student WHERE student.teacher == \"a\" YIELD id(vertex) as id"
    },
    {
        "用户": "找出 'Tony Parker' 所喜欢的实体中，'喜欢程度' 不为 95、56、21 的所有实体，并返回这些实体的名称和 '喜欢程度' 。",
        "查询": "GO FROM 'Tony Parker' OVER like\nWHERE like.likeness NOT IN {95,56,21}\nYIELD $$.player.name, like.likeness"
    },
    {
        "用户": "If edge e1 does not exist, please help me create an edge e1 with the attribute p1, whose type is an integer.",
        "查询": "CREATE EDGE IF NOT EXISTS e1(p1 int)"
    },
    {
        "用户": "Returns whether 1 plus 1 equals 2.",
        "查询": "RETURN 1 + 1 == 2"
    },
    {
        "用户": "Find the relationship between a player named 'Tim Duncan' and their team, and return all connections between the player and the team.",
        "查询": "MATCH (v:player{name:\"Tim Duncan\"})-[e]->(t)\nWHERE (v)-[e]->(t:team)\nRETURN (v)-->()"
    },
    {
        "用户": "返回 'Tony Parker' 喜欢的 'Tim Duncan' 和 'Grant Hill' 喜欢的 'Tracy McGrady' 之间的边属性。",
        "查询": "FETCH PROP ON like \"Tony Parker\"->\"Tim Duncan\", \"Grant Hill\" -> \"Tracy McGrady\" YIELD properties(edge) as properties"
    },
    {
        "用户": "Please help me identify players under the age of 21 and tell me their names and ages.",
        "查询": "MATCH (v:player)\nWHERE v[toLower(\"AGE\")] < 21\nRETURN v.player.name, v.player.age"
    },
    {
        "用户": "Find all entities that Boris Diaw likes and return their IDs.",
        "查询": "GO FROM \"Boris Diaw\" OVER like YIELD like._dst"
    },
    {
        "用户": "分别从 'Tim Duncan' 和 'Tony Parker' 出发，找出他们'效力'的所有实体，返回球员的名字，开始服务的年份，和所服务的队伍名字，最后返回所有结果",
        "查询": "$var = GO FROM \"Tim Duncan\" OVER serve YIELD $^.player.name, serve.start_year, $$.team.name\nUNION ALL\nGO FROM \"Tony Parker\" OVER serve YIELD $^.player.name, serve.start_year, $$.team.name;\nYIELD $var.*"
    },
    {
        "用户": "查找与名为'Tim Duncan'的球员有两到三跳服务或喜欢关系的实体，记录路径数量。",
        "查询": "MATCH (:player{name:\"Tim Duncan\"})-[e:serve|like*2..3]-(v)\nRETURN COUNT(e)"
    },
    {
        "用户": "Add a new one named student_ The tag index of TA, which contains the first 10 characters of the alias and teacher attributes in the student tag.",
        "查询": "CREATE TAG INDEX student_ta ON student(alias(10), teacher(10))"
    },
    {
        "用户": "如果player标签不存在，则创建一个包含姓名和年龄属性的player标签。",
        "查询": "CREATE TAG IF NOT EXISTS player(name string, age int)"
    },
    {
        "用户": "从 'Tim Duncan' 出发，沿着 '喜欢' 关系向外扩展3步，返回结果限制为第一跳自动选择一条边，第二跳选择两条边，第三跳选择两条边。",
        "查询": "GO 3 STEPS FROM \"Tim Duncan\" OVER like LIMIT [1, 2, 2];"
    },
    {
        "用户": "Returns a Boolean value indicating whether 'Tony No.1' matches the regular expression '  w+No  \\ \\D+'.",
        "查询": "YIELD \"Tony No.1\" =~ \"\\\\w+No\\\\.\\\\d+\" AS r"
    },
    {
        "用户": "Find the age of the player named 'LaMarcus Aldridge' and return.",
        "查询": "match (v:player{name:\"LaMarcus Aldridge\"}) return v.player.age;"
    },
    {
        "用户": "Query the ID, quantity, total age, maximum age, minimum age, average age, and labels of all player nodes, and sort them by ID, quantity, maximum age, and minimum age. Skip the first 10 results and return the next 8 results.",
        "查询": "MATCH(n:player)\n  RETURN id(n) AS id,\n         count(n) AS count,\n         sum(floor(n.player.age)) AS sum,\n         max(n.player.age) AS max,\n         min(n.player.age) AS min,\n         avg(distinct n.player.age)+1 AS age,\n         labels(n) AS lb\n    ORDER BY id, count, max, min\n    SKIP 10 LIMIT 8;"
    },
    {
        "用户": "找出距离实体'A'一步的所有关注关系，并返回这些关系的起点和终点。",
        "查询": "GO 1 STEPS FROM \"A\" OVER follow YIELD src(edge),dst(edge)"
    },
    {
        "用户": "Returns the names of all players playing for the 'Pistons' team.",
        "查询": "MATCH (v)-[:serve]->(t)\nWHERE id(t) == 'Pistons'\nRETURN v.player.name AS Name"
    },
    {
        "用户": "查找与球员 'Manu Ginobili' 有2到3跳 '喜欢' 关系的实体，返回这些实体的性别、关系强度、姓名、年龄和关系开始年份，并按照关系强度、姓名、年龄排序，最多返回5条记录。",
        "查询": "match (src_v:player{name:\"Manu Ginobili\"})-[e:like*2..3]-(dst_v)\n  return distinct properties(src_v).sex,properties(e[0]).degree as degree,properties(dst_v).name as name,src_v.player.age AS age, e[1].start_year,dst_v.player.age\n  order by degree, name, age limit 5;"
    },
    {
        "用户": "Please help me return the first element in the list [1, 2, 3, 4, 5].",
        "查询": "RETURN list[1, 2, 3, 4, 5] [0..0] AS a"
    },
    {
        "用户": "If the player tag does not exist, create a player tag that includes name and age attributes.",
        "查询": "CREATE TAG IF NOT EXISTS player(name string, age int)"
    },
    {
        "用户": "找出名为'Tracy McGrady'的球员所'喜欢'的点赞度为90的实体及其关系。",
        "查询": "MATCH (:player{name:\"Tracy McGrady\"})-[e:like*1{likeness: 90}]->(v)\nRETURN e, v"
    },
    {
        "用户": "If the edge does not exist, create a serve with a default start year of 2010_ With_ Default edge.",
        "查询": "CREATE EDGE IF NOT EXISTS serve_with_default(start_year int, end_year int DEFAULT 2010)"
    },
    {
        "用户": "Find all teams and related information that a player named 'Tracy McGrady' has played for since 2000.",
        "查询": "MATCH (:player{name:\"Tracy McGrady\"})-[e:serve*0..1{start_year: 2000}]-(v)\nRETURN e, v"
    },
    {
        "用户": "请帮我返回时间戳为2022年1月5日06:18:43。",
        "查询": "RETURN timestamp(\"2022-01-05T06:18:43\")"
    },
    {
        "用户": "查找与 'Boris Diaw' 喜欢关系的所有实体，并返回这些实体的 ID。",
        "查询": "GO FROM \"Boris Diaw\" OVER like YIELD like._dst"
    },
    {
        "用户": "Please help me submit a compact assignment.",
        "查询": "SUBMIT JOB COMPACT"
    },
    {
        "用户": "霍奇金病的得病概率是多少？",
        "查询": "LOOKUP ON disease WHERE disease.name == \"霍奇金病\" YIELD properties(vertex).get_prob"
    },
    {
        "用户": "请找出名为'Tim Duncan'的球员所单向关联的所有球员，并告诉我这些球员的姓名。",
        "查询": "MATCH (v:player{name:\"Tim Duncan\"})-->(v2:player)\nRETURN v2.player.name AS Name"
    },
    {
        "用户": "Find all favorite relationships rated 888 and return the starting and ending entities of these relationships.",
        "查询": "LOOKUP ON like WHERE like.likeness == 888 YIELD src(edge) as src, dst(edge) as dst"
    },
    {
        "用户": "Hello, please help me find out the relationship starting from the 'Thunders' vertex and traversing along the edge serve. I need to know their source node, edge attributes, edge ID, target node, and target node ID.",
        "查询": "GO FROM 'Thunders' OVER serve REVERSELY YIELD $^ as src,tags($^), id($^), id($$), $$ as dst"
    },
    {
        "用户": "找出'player101'所'关注'的所有实体，并返回这些实体的源节点和目标节点。",
        "查询": "$var = GO FROM \"player101\" OVER follow\nYIELD src(edge) AS s, dst(edge) AS d"
    },
    {
        "用户": "Find all the entities that Boris Diaw likes and delete their relationships with Boris Diaw.",
        "查询": "GO FROM \"Boris Diaw\" OVER like YIELD like._dst as id | DELETE VERTEX $-.id WITH EDGE"
    },
    {
        "用户": "Obtain the relationships between 'Tim Duncan' liked by 'Tony Parker' and 'Tracy McGrady' liked by 'Grant Hill', and return the starting nodes of these relationships.",
        "查询": "FETCH PROP ON like \"Tony Parker\"->\"Tim Duncan\", \"Grant Hill\" -> \"Tracy McGrady\" YIELD edge as e |\nYIELD startNode($-.e) AS nodes"
    },
    {
        "用户": "Please help me calculate the length of the string 'basketball'.",
        "查询": "RETURN length(\"basketball\")"
    },
    {
        "用户": "您好，请帮我找一下以 'Tim Duncan' 为起点的子图，最多只需要一个结果。",
        "查询": "GET SUBGRAPH WITH PROP FROM 'Tim Duncan' | LIMIT 1"
    },
    {
        "用户": "找出 ID 为'player100'的实体的所有标签，并返回这些标签。",
        "查询": "MATCH (v)\nWHERE id(v)==\"player100\"\nWITH labels(v) AS tags_unf\nUNWIND tags_unf AS tags_f\nRETURN tags_f"
    },
    {
        "用户": "Could you please help me delete the edge index edge_ 1_ Ttl_ Index_ 2_ Degree?",
        "查询": "DROP EDGE INDEX edge_1_ttl_index_2_degree"
    },
    {
        "用户": "找出'player102'和'player100'之间共同关注的实体，并返回这些实体的 ID、边的度和'player102'的年龄。",
        "查询": "GO FROM \"player102\" OVER follow\nYIELD dst(edge) AS id, properties(edge).degree AS Degree, properties($$).age AS Age\nINTERSECT\nGO FROM \"player100\" OVER follow\nYIELD dst(edge) AS id, properties(edge).degree AS Degree, properties($$).age AS Age"
    },
    {
        "用户": "Hello, please help me identify all entities that start from 'Russell Westbrook' and reach them in reverse through any edge, and return the source entity IDs of these entities in the serve and like attributes.",
        "查询": "GO FROM \"Russell Westbrook\" OVER * REVERSELY YIELD serve._dst, like._dst"
    },
    {
        "用户": "获取 'Tony Parker' 喜欢的 'Tim Duncan' 和 'Grant Hill' 喜欢的 'Tracy McGrady' 的关系，返回这些关系的起始节点。",
        "查询": "FETCH PROP ON like \"Tony Parker\"->\"Tim Duncan\", \"Grant Hill\" -> \"Tracy McGrady\" YIELD edge as e |\nYIELD startNode($-.e) AS nodes"
    },
    {
        "用户": "Find the service or liking relationships between a player named 'Tracy McGrady' and a player or team with a liking level of 90, and return these relationships and corresponding entities.",
        "查询": "MATCH (:player{name:\"Tracy McGrady\"})-[e:serve|like*0..1{likeness: 90}]->(v)\nRETURN e, v"
    },
    {
        "用户": "返回名为'Tim Duncan'的球员喜欢程度为95的所有实体，并返回原始节点名字。",
        "查询": "MATCH (v:player{name: 'Tim Duncan'})-[e:like{likeness: 95}]->() return v.player.name AS name"
    },
    {
        "用户": "您好，请帮我查找与 'LeBron James' 相关的实体、关系类型和所属团队名称。",
        "查询": "MATCH (v1) -[r]-> (v2)\nWHERE id(v1) == \"LeBron James\"\nRETURN type(r) AS Type, v2.team.name AS Name"
    },
    {
        "用户": "Hey, hello! I need to find all the entities that have previously provided services to 'Thunders', and then return their source nodes, labels on edges, edge IDs, target nodes, and target node IDs. Can you help me complete this task?",
        "查询": "GO FROM 'Thunders' OVER serve REVERSELY YIELD $^ as src,tags($^), id($^), id($$), $$ as dst"
    },
    {
        "用户": "您好，请帮我找一下以 'Tim Duncan' 为起点的子图，最多只需要一个结果。",
        "查询": "GET SUBGRAPH WITH PROP FROM 'Tim Duncan' | LIMIT 1"
    },
    {
        "用户": "请帮我找出'player100'关注的人，然后告诉我他们的年龄。最后，计算一下他们的平均年龄和关注人数。",
        "查询": "GO FROM \"player100\" OVER follow\nYIELD dst(edge) AS ID\n| FETCH PROP ON player $-.ID\nYIELD properties(vertex).age AS Age\n| YIELD AVG($-.Age) as Avg_age, count(*)as Num_friends"
    },
    {
        "用户": " 您好，请帮我添加一个球员节点，名字叫做 'A Loner'，年龄为 0，然后再删除这个节点以及与它相关的所有连接。",
        "查询": "INSERT VERTEX player(name, age) VALUES \"A Loner\": (\"A Loner\", 0);\nDELETE VERTEX \"A Loner\" WITH EDGE;"
    },
    {
        "用户": "请帮我插入一个名为LaMarcus Aldridge，年龄为33的球员实体，其ID为player102。",
        "查询": "INSERT VERTEX player(name, age) VALUES \"player102\":(\"LaMarcus Aldridge\", 33)"
    },
    {
        "用户": "找出名为'Tim Duncan'的球员的所有1到3度好友，并返回这些好友及其数量。",
        "查询": "MATCH p=(v:player{name:\"Tim Duncan\"})-[e:follow*1..3]->(v2:player)\nRETURN DISTINCT v2 AS Friends, count(v2)"
    },
    {
        "用户": "找出 'Tim Duncan' 所喜欢的实体的 ID 和对应的年龄，筛选出年龄大于40岁的实体，并返回这些实体的 ID 和平均年龄加1。",
        "查询": "GO FROM \"Tim Duncan\" OVER like YIELD like._dst AS dst, $$.player.age AS age\n| YIELD $-.dst AS dst, 1+avg(distinct $-.age) AS age where $-.age > 40"
    },
    {
        "用户": "找出id为'player100'的实体所有姓名不为空的关联实体，并返回这些通往这些实体的边。",
        "查询": "GO FROM \"player100\" OVER * WHERE properties($$).name IS NOT EMPTY YIELD dst(edge)"
    },
    {
        "用户": "找出与名为'Tim Duncan'的球员，并找出与其对某个实体有关系的另一球员，并返回这些球员的姓名。",
        "查询": "MATCH (v:player{name:\"Tim Duncan\"})-->(v2)<--(v3)\nRETURN v3.player.name AS Name"
    },
    {
        "用户": "Find the entities that like 'LeBron James' and return their relationship paths, player.name for node n, and player.name for node m.",
        "查询": "MATCH p = (n)<-[:like]-(m)\nWHERE id(n) == \"LeBron James\"\nRETURN p, n.player.name, m.player.name"
    },
    {
        "用户": "Hey, hello! I need to find all the entities that have previously provided services to 'Thunders', and then return their source nodes, labels on edges, edge IDs, target nodes, and target node IDs. Can you help me complete this task?",
        "查询": "GO FROM 'Thunders' OVER serve REVERSELY YIELD $^ as src,tags($^), id($^), id($$), $$ as dst"
    },
    {
        "用户": "Find the IDs of all entities that 'Tony Parker' likes' and return the IDs of these entities and the age of 'Tony Parker'.",
        "查询": "$v1 = GO FROM \"Tony Parker\" OVER like YIELD id($$) AS dst, $^.player.age AS age"
    },
    {
        "用户": "Please help me remove the string 'basketball player' after the trailing space.",
        "查询": "RETURN rtrim(\" basketball player \")"
    },
    {
        "用户": "嘿，你好！我需要从'Tim Duncan'的实体开始，沿着'serve'边走10000000000000步，然后告诉我所有'serve'边的终点实体的ID。你能帮我找一下吗？",
        "查询": "GO 10000000000000 STEPS FROM \"Tim Duncan\" OVER serve YIELD serve._dst;"
    },
    {
        "用户": "Can you display the configuration information of all labels?",
        "查询": "PROFILE format=\"row\" SHOW TAGS"
    },
    {
        "用户": "Returns the player names of all entities except 'Paul Gasol'.",
        "查询": "MATCH (v)\nWHERE id(v) != 'Paul Gasol'\nRETURN v.player.name AS Name"
    },
    {
        "用户": "Hello, please help me find the entities related to 'Tim Duncan' and their subgraphs, starting from the IDs of these entities, and return the attribute information of nodes and edges.",
        "查询": "GO from 'Tim Duncan' OVER serve YIELD serve._src AS id |\nGET SUBGRAPH WITH PROP FROM $-.id\nYIELD vertices as nodes, edges as relationships"
    },
    {
        "用户": "请问您能帮我找一下，有关球员 'Yao Ming' 和球队 'Rockets' 之间的服务关系的路径吗？\n帮我一下，找一下球员 'Yao Ming' 和球队 'Rockets' 之间的服务关系路径。\n您好，我想请您帮我找一下，球员 'Yao Ming' 和球队 'Rockets' 之间的服务关系路径，可以吗？",
        "查询": "MATCH (p:player {name: 'Yao Ming'} ), (t:team {name: 'Rockets'}), pth = (p)-[:serve*1..4]-(t)\nRETURN pth"
    },
    {
        "用户": "请帮我在标签B上创建一个名为idx_B_9的索引，该索引包含id、nickName、namex(1)和createDate这些属性。",
        "查询": "CREATE TAG INDEX idx_B_9 on B(id, nickName, namex(1), createDate);"
    },
    {
        "用户": "Can you help me create a program called student_ Is there a label index for TA? The index needs to contain the first 10 characters of the alias and teacher attributes in the student tag.",
        "查询": "CREATE TAG INDEX student_ta ON student(alias(10), teacher(10))"
    },
    {
        "用户": "请帮我查找年龄在30到32岁之间的球员，并告诉我这些球员的年龄。",
        "查询": "LOOKUP ON player\nWHERE player.age < 32 and player.age >30\nYIELD DISTINCT properties(vertex).age as v"
    },
    {
        "用户": "请将名为LaMarcus Aldridge，年龄为33的球员插入到player集合中，其ID为player102。",
        "查询": "INSERT VERTEX player(name, age) VALUES \"player102\":(\"LaMarcus Aldridge\", 33)"
    },
    {
        "用户": "返回数组[1,2,3]中的所有元素，除了数字4。",
        "查询": "UNWIND [1,2,3] AS a RETURN a\nMINUS\nWITH 4 AS a\nRETURN a"
    },
    {
        "用户": "返回字符串'384748.39'是否匹配正则表达式'\\\\d+(\\\\.\\\\d{2})?'。",
        "查询": "RETURN \"384748.39\" =~ \"\\\\d+(\\\\.\\\\d{2})?\""
    },
    {
        "用户": "增加一个名为index_ttl_tag03_c的标签索引，索引的属性为c，长度为10。",
        "查询": "CREATE TAG INDEX index_ttl_tag03_c on ttl_tag03(c(10));"
    },
    {
        "用户": "Find all entities of interest to 'player100' and return the target nodes of their edges",
        "查询": "$var = GO FROM \"player100\" OVER follow\nYIELD dst(edge) AS dst"
    },
    {
        "用户": "从 'Tim Duncan' 开始，沿着 '喜欢' 的关系反向查找到 'Nobody' 或 'Spur'，最多经过 3 个节点的所有路径，并返回这些路径。",
        "查询": "FIND ALL PATH FROM \"Tim Duncan\" TO \"Nobody\", \"Spur\" OVER like REVERSELY UPTO 3 STEPS YIELD path as p"
    },
    {
        "用户": "请将值为2的person节点插入到图数据库中。",
        "查询": "INSERT VERTEX person(p1) VALUES \"2\":(2)"
    },
    {
        "用户": "Please help me identify all the relationships between players named 'Tim Duncan' and other entities, and return these relationships.",
        "查询": "MATCH p=(v:player{name:\"Tim Duncan\"})-->(v2)\nRETURN relationships(p)"
    },
    {
        "用户": "If the person tag does not exist, can you help me create a person tag?",
        "查询": "CREATE TAG IF NOT EXISTS person(p1 int)"
    },
    {
        "用户": "Could you please help me find the names of the first three people?",
        "查询": "MATCH (v)\nRETURN v.person.name LIMIT 3"
    },
    {
        "用户": "获取从 'Tim Duncan' 出发，通过 '喜欢' 关系能够到达的所有实体，并返回这些实体的信息。",
        "查询": "GET SUBGRAPH FROM 'Tim Duncan' OUT like  YIELD vertices as v"
    },
    {
        "用户": "Obtain students with names less than 'a' and return their ID, name, and age.",
        "查询": "LOOKUP ON student WHERE student.name < \"a\" YIELD id(vertex) as id, student.name as name, student.age as age"
    },
    {
        "用户": "Expand the list [1,2,3,3] into a single number, remove duplicates, sum, and return the result.",
        "查询": "UNWIND [1,2,3,3] AS d RETURN sum(distinct d) AS sum"
    },
    {
        "用户": "嘿，能帮我一下吗？我想反向遍历所有边，从 'Russell Westbrook' 开始，找出所有具有 'serve' 和 'like' 属性的源实体 ID。",
        "查询": "GO FROM \"Russell Westbrook\" OVER * REVERSELY YIELD serve._src, like._src"
    },
    {
        "用户": "请帮我找出名为'Tim Duncan'的球员的所有二度关注者，并将这些关注者的信息返回给我。",
        "查询": "MATCH p=(v:player{name:\"Tim Duncan\"})-[e:follow*2]->(v2)\nRETURN DISTINCT v2 AS Friends"
    },
    {
        "用户": "Hello, please help me find out which entities' Boris Diaw 'has worked for, as well as the relationships and service times between these entities.",
        "查询": "$var = GO FROM 'Boris Diaw','Boris Diaw' OVER serve YIELD serve._src AS src, serve._dst AS dst;\nFETCH PROP ON serve $var.src->$var.dst YIELD DISTINCT serve.start_year, serve.end_year, edge as relationship"
    },
    {
        "用户": "Identify all entities directly or indirectly connected to entity 'player100' through the 'follow' relationship, and return the IDs of these entities.",
        "查询": "MATCH (v) -[e:follow*1..2]->(v2)\nWHERE id(v) == \"player100\"\nRETURN id(v2) AS destination"
    },
    {
        "用户": "返回所有球员的年龄和姓名，并按年龄降序、姓名升序排序。",
        "查询": "MATCH (v:player) RETURN v.player.age AS Age, v.player.name AS Name\nORDER BY Age DESC, Name ASC"
    },
    {
        "用户": "Insert a player entity named 'Tim Duncan', aged 42, and assign it the unique identifier 'player100'.",
        "查询": "INSERT VERTEX player(name, age) VALUES \"player100\":(\"Tim Duncan\", 42)"
    },
    {
        "用户": "Hello, could you please help me find all entities in type t1 where col4 is' banana 'and col3 is true, and return their IDs to me?",
        "查询": "LOOKUP ON t1 WHERE t1.col4 == \"banana\" AND t1.col3 == true YIELD id(vertex) as id"
    },
    {
        "用户": "插入一个顶点，属于personWithDefault标签，顶点属性为：name属性为'Tom'，age属性为20。",
        "查询": "INSERT VERTEX personWithDefault(name, age) VALUES \"Tom\":(\"Tom\", 20)"
    },
    {
        "用户": "找出 'Russell Westbrook' 所 '效力' 和 '喜欢' 的所有实体之间的关系，并返回这些关系边。",
        "查询": "GO FROM 'Russell Westbrook' OVER serve, like YIELD edge as e"
    },
    {
        "用户": "Set the 'serve' between 'player668' and 'team200'_ With_ The 'end' of the default 'edge_ Increase the 'year' attribute by 1 and return 'start'_ Year 'and' end_ The value of 'year'.",
        "查询": "UPSERT EDGE on serve_with_default\n\"player668\" -> \"team200\"\nSET end_year = end_year + 1\nYIELD start_year, end_year"
    },
    {
        "用户": "从 'Yao Ming' 到 'Danny Green'，找出最多三步之内，没有 '喜欢' 属性或 '喜欢' 属性值大于等于80的所有路径，并返回这些路径的起始节点。",
        "查询": "FIND ALL PATH WITH PROP FROM \"Yao Ming\" TO \"Danny Green\" OVER * BIDIRECT\nWHERE like.likeness is  EMPTY OR like.likeness >= 80 UPTO 3 STEPS YIELD path as p |\nYIELD startnode($-.p) as startnode"
    },
    {
        "用户": "如果t1标签不存在，则创建一个具有p1字符串和p2整数属性的标签。",
        "查询": "CREATE TAG IF NOT EXISTS t1 (p1 string, p2 int)"
    },
    {
        "用户": "Can you help me find out if the dictionary order of all students' teacher names is less than 'a' for entities, and return the IDs of these entities to me?",
        "查询": "LOOKUP ON student WHERE student.teacher < \"a\" YIELD id(vertex) as id"
    },
    {
        "用户": "If the player tag does not exist, create a player tag that contains name and age attributes.",
        "查询": "CREATE TAG IF NOT EXISTS player(name string, age int)"
    },
    {
        "用户": "Hello, please help me create a label index with a length of 5 on the col1 attribute of the t1 label.",
        "查询": "CREATE TAG INDEX ti1 ON t1(col1(5));"
    },
    {
        "用户": "Please help me display the index of the edges.",
        "查询": "SHOW EDGE INDEXES"
    },
    {
        "用户": "找出名为 'Tracy McGrady' 的球员所 '喜欢' 的所有实体，且喜欢程度为90，并返回这些关系和实体。",
        "查询": "MATCH (:player{name:\"Tracy McGrady\"})-[e:like*0..1{likeness: 90}]->(v)\nRETURN e, v"
    },
    {
        "用户": "Hello, please help me find those players who are 40 or 20 years old and have names. I need their ID and age information.",
        "查询": "LOOKUP ON player WHERE player.age IN [40, 20] AND player.name > \"\" YIELD id(vertex) as id, player.age"
    },
    {
        "用户": "Find all the entities that 'Paul George' likes and return them.",
        "查询": "GO FROM \"Paul George\" OVER like YIELD like._dst"
    },
    {
        "用户": "找出 'Tim Duncan' 所喜欢的所有实体，并返回这些实体的 ID。",
        "查询": "GO FROM \"Tim Duncan\" OVER like YIELD like._dst"
    },
    {
        "用户": "View edge type as test_ Comment_ Details of edge.",
        "查询": "DESC edge test_comment_edge;"
    },
    {
        "用户": "找出 'Boris Diaw' 所服务的所有球队并返回四个值，起始节点的姓名，服务关系的起始时间，终点队名以及队伍。",
        "查询": "$var = GO FROM \"Boris Diaw\" OVER serve YIELD $^.player.name as name, serve.start_year as start, $$.team.name as team;YIELD $var.team"
    },
    {
        "用户": "得了高血压应该去哪个科室就诊？",
        "查询": "GO FROM \"高血压\" OVER cure_department YIELD dst(edge);"
    },
    {
        "用户": "获取'player101'、'player102'和'player103'的属性，并返回这些顶点的属性。",
        "查询": "FETCH PROP ON player \"player101\", \"player102\", \"player103\" YIELD properties(vertex)"
    },
    {
        "用户": "请帮我查找年龄为25或28的所有球员，并返回他们的姓名和年龄。",
        "查询": "LOOKUP ON player\nWHERE player.age IN [25,28]\nYIELD properties(vertex).name, properties(vertex).age"
    },
    {
        "用户": "Find all paths from 'Tim Duncan' to 'Tony Parker', which must go through a 'like' relationship, up to 3 steps, and return the path and the relationships on the path.",
        "查询": "FIND ALL PATH WITH PROP FROM \"Tim Duncan\" TO \"Tony Parker\" OVER like UPTO 3 STEPS YIELD path as p |\nYIELD relationships($-.p) as relationships"
    },
    {
        "用户": "找出球员名为'James Harden', 'Jonathon Simmons', 'Klay Thompson', 'Dejounte Murray', 'Paul Gasol'中，年龄为23或者ID为'James Harden'的球员的姓名。",
        "查询": "MATCH (v)\nWHERE id(v) IN ['James Harden', 'Jonathon Simmons', 'Klay Thompson', 'Dejounte Murray', 'Paul Gasol']\n      AND (id(v) == 'James Harden' OR v.player.age == 23)\nRETURN v.player.name AS Name"
    },
    {
        "用户": "找出名为'Tony Parker'的球员所关联的所有球员，并返回去重后的这些球员的姓名和年龄。",
        "查询": "MATCH (v:player{name:\"Tony Parker\"})--(v2:player)\nRETURN DISTINCT v2.player.name, v2.player.age"
    },
    {
        "用户": "Hello, please help me check all the attributes related to 'Tim Duncan', including ID, key, label, and attributes.",
        "查询": "FETCH PROP ON * 'Tim Duncan' YIELD id(vertex), keys(vertex) as keys, tags(vertex) as tags_, properties(vertex) as props"
    },
    {
        "用户": "您好，请问能帮我查找一下别名为'abc'的学生实体的ID吗？",
        "查询": "LOOKUP ON student WHERE student.alias == \"abc\" YIELD id(vertex) as id"
    },
    {
        "用户": "Please help me check the date with timestamp 23333.",
        "查询": "RETURN DATE(\"23333\")"
    },
    {
        "用户": "Find all players associated with a player named 'Tony Parker' and return the names and ages of the players after deduplication.",
        "查询": "MATCH (v:player{name:\"Tony Parker\"})--(v2:player)\nRETURN DISTINCT v2.player.name, v2.player.age"
    },
    {
        "用户": "Please help me find all team information related to 'Tim Duncan' and remove the labels of these teams.",
        "查询": "GO FROM \"Tim Duncan\" OVER serve YIELD serve._dst as id | DELETE TAG team FROM $-.id"
    },
    {
        "用户": "找出'player100'所'关注'的所有实体，并返回这些实体的边的目标节点",
        "查询": "GO FROM \"player100\" OVER follow WHERE properties($$).name IS NOT EMPTY YIELD dst(edge)"
    },
    {
        "用户": "Starting from 'Tim Duncan' and following the 'like' relationship, find an entity with a distance of 3. The return result is limited to the first hop automatically selecting 1 edge, the second hop selecting 2 edges, and the third hop selecting 2 edges.",
        "查询": "GO 3 STEPS FROM \"Tim Duncan\" OVER like LIMIT [1, 2, 2];"
    },
    {
        "用户": "Please insert an edge pointing from '1' to '2' on edge type e1, with attribute p1 of 10 and weight of @ 0.",
        "查询": "INSERT EDGE e1(p1) VALUES \"1\"->\"2\"@0:(10)"
    },
    {
        "用户": "请帮我找出名为'Tim Duncan'的球员所关联的所有实体，并按照年龄降序排序，跳过第一个结果，然后告诉我年龄最大的实体的姓名和年龄。",
        "查询": "MATCH (v:player{name:\"Tim Duncan\"}) --> (v2)\nRETURN v2.player.name AS Name, v2.player.age AS Age\nORDER BY Age DESC SKIP 1 LIMIT 1"
    },
    {
        "用户": "查找年龄为40的球员的姓名，然后沿着反向的‘喜欢’关系，从这些球员出发，向外扩展1到2步，返回每个实体的ID、姓名、边和起点、终点节点信息。",
        "查询": "LOOKUP ON player WHERE player.age == 40 YIELD player.name AS name |\nGO 1 TO 2 STEPS FROM $-.name OVER like REVERSELY YIELD like._dst AS dst, $$.player.name AS name, edge as e, $$ as dstnode, $^ as srcnode"
    },
    {
        "用户": "Identify the entities and their relationships that are connected to entity 'Tim Duncan' through a 'service' or 'like' relationship, and return these entities.",
        "查询": "MATCH (n)-[e:serve|like*2..3]->(v)\nWHERE id(n) == \"Tim Duncan\"\nRETURN e, v"
    },
    {
        "用户": "Obtain the relationship properties of 'Tim Duncan' liked by 'Tony Parker' and 'Tracy McGrady' liked by 'Grant Hill', and return the termination nodes of these relationships.",
        "查询": "FETCH PROP ON like \"Tony Parker\"->\"Tim Duncan\", \"Grant Hill\" -> \"Tracy McGrady\" YIELD edge as e |\nYIELD endNode($-.e) AS nodes"
    },
    {
        "用户": "将实体'player101'关注实体'player100'，并设置关注度为 95。",
        "查询": "INSERT EDGE follow(degree) VALUES \"player101\" -> \"player100\":(95)"
    },
    {
        "用户": "如果没有名为any_shape的标签，请帮我创建一个名为any_shape的标签，该标签包含一个地理形状的geography属性。",
        "查询": "CREATE TAG IF NOT EXISTS any_shape(geo geography)"
    },
    {
        "用户": "返回所有球员的队友信息。",
        "查询": "MATCH (v:player) UNWIND (v)-[:teammate]->() AS p RETURN p"
    },
    {
        "用户": "If tag t5 does not exist, could you help me create a tag t5? This label contains three attributes: p1 is a non empty fixed string type with a length of 5, p2 is an integer type, and p3 is an optional integer type.",
        "查询": "CREATE TAG IF NOT EXISTS t5(p1 fixed_string(5) NOT NULL, p2 int, p3 int DEFAULT NULL)"
    },
    {
        "用户": "找出从'player102'到'team204'的最短路径，并返回该路径。",
        "查询": "FIND SHORTEST PATH FROM \"player102\" TO \"team204\" OVER * YIELD path AS p"
    },
    {
        "用户": "当名字为'Tony Parker'的球员的时候，将其年龄加2，并返回名字和年龄。",
        "查询": "UPDATE VERTEX ON player \"player101\"\nSET age = age + 2\nWHEN name == \"Tony Parker\"\nYIELD name AS Name, age AS Age"
    },
    {
        "用户": "返回字符串 'Yao Ming' 和数值 -30.142857142857142 的和。",
        "查询": "RETURN \"Yao Ming\" + -30.142857142857142"
    },
    {
        "用户": "找出喜欢 'LeBron James' 的实体，并返回这些实体的关系路径、n节点的player.name和m节点的player.name。",
        "查询": "MATCH p = (n)<-[:like]-(m)\nWHERE id(n) == \"LeBron James\"\nRETURN p, n.player.name, m.player.name"
    },
    {
        "用户": "查找所有评分为888的喜欢关系，返回这些关系的起点和终点实体。",
        "查询": "LOOKUP ON like WHERE like.likeness == 888 YIELD src(edge) as src, dst(edge) as dst"
    },
    {
        "用户": "Please help me find a date, which is December 3rd, 123 BC.",
        "查询": "RETURN DATE({year:-123, month:12, day:3})"
    },
    {
        "用户": "Returns the number of minutes at time '02:59:40'.",
        "查询": "RETURN time(\"02:59:40\").minute AS minute"
    },
    {
        "用户": "如果边不存在，则创建一条serve边，包含起始年份和结束年份。",
        "查询": "CREATE EDGE IF NOT EXISTS serve(start_year int, end_year int)"
    },
    {
        "用户": "插入一条边，表示'player101'在 1999 年至 2018 年期间为'team204'服务，并插入另一条边，表示'player102'在 2006 年至 2015 年期间为'team203'服务。",
        "查询": "INSERT EDGE serve(start_year, end_year) VALUES \"player101\" -> \"team204\":(1999, 2018),\"player102\" -> \"team203\":(2006, 2015)"
    },
    {
        "用户": "找出从名为'Tim Duncan'的球员出发所关联的所有球员，并返回这些球员的姓名。",
        "查询": "MATCH (v:player{name:\"Tim Duncan\"})-->(v2:player)\nRETURN v2.player.name AS Name"
    },
    {
        "用户": "Starting from 'player100', take 3 consecutive steps along all edges to return the names and ages of all endpoint entities. It is required that only 1 edge can be selected during the first jump, 2 edges can be selected during the second jump, and 3 edges can be selected during the third jump. “",
        "查询": "GO 3 STEPS FROM \"player100\"\nOVER *\nYIELD properties($$).name AS NAME, properties($$).age AS Age\nSAMPLE [1,2,3]"
    },
    {
        "用户": "请帮我找到名为'Tim Duncan'的球员所服务的所有实体，并返回这些实体及其关系。",
        "查询": "MATCH (v:player{name:\"Tim Duncan\"})-[]->(v2)<-[e:serve]-(v3)\nRETURN v2, v3"
    },
    {
        "用户": "找出从 'Tim Duncan' 开始，通过 '喜欢' 关系且喜欢程度大于90的路径，最多3步到达 '服务' 关系的实体，并按路径长度排序，返回前5条路径。",
        "查询": "$a = GO FROM \"Tim Duncan\" over * YIELD like._dst AS src, serve._src AS dst;\nFIND NOLOOP PATH WITH PROP FROM $a.src TO $a.dst OVER like WHERE like.likeness > 90 UPTO 3 STEPS YIELD path as p |\nORDER BY $-.p | LIMIT 5"
    },
    {
        "用户": "Hello, please help me add a student node named Bob, which needs to include age, alias, name, and teacher information.",
        "查询": "INSERT VERTEX\n  student(age, alias, name, teacher)\nVALUES\n  \"Bob\" : (28, \"abc\", \"Bob\", \"Candy\")"
    },
    {
        "用户": "Hello, please help me identify the entities related to 'Tim Duncan' and their subgraphs, starting with their IDs. Thank you!",
        "查询": "GO from 'Tim Duncan' OVER serve YIELD serve._src AS id |\nGET SUBGRAPH WITH PROP FROM $-.id\nYIELD vertices as nodes, edges as relationships"
    },
    {
        "用户": "Please help me calculate the arccosine value to be 0.5.",
        "查询": "RETURN acos(0.5)"
    },
    {
        "用户": "创建一个名为TAG的标签，该标签包含一个姓名字符串属性。",
        "查询": "CREATE TAG `TAG` (name string)"
    },
    {
        "用户": "Hello, please help me identify entities with a 'serve' or 'like' relationship with 'Tim Duncan', with a distance of 2 to 3, and return them to me.",
        "查询": "MATCH (n)-[e:serve|like*2..3]->(v)\nWHERE id(n) == \"Tim Duncan\"\nRETURN e, v"
    },
    {
        "用户": "在ttl_tag中找到b等于10的所有实体，并计算它们的a和b属性值。",
        "查询": "LOOKUP ON ttl_tag where ttl_tag.b==10 yield ttl_tag.a as a,ttl_tag.b as b;"
    },
    {
        "用户": "Count the number of teams that have a 'like' relationship with players with ID 'Tim Duncan'.",
        "查询": "MATCH (v1)-[:like]->(v2:player)-[:serve]->(v3)\nWHERE id(v2) == 'Tim Duncan'\nRETURN COUNT(*)"
    },
    {
        "用户": "找出球员ID为'Paul Gasol'，和'Grizzlies'或'Lakers'有效力关系的球队名称，并返回这些顶点下球员的名称和他们效力球队名称。",
        "查询": "MATCH (v)-[:serve]->(t)\nWHERE (NOT NOT id(v) == 'Paul Gasol') AND id(v) == 'Paul Gasol' AND id(t) IN ['Grizzlies', 'Lakers']\nRETURN v.player.name AS Name, t.team.name AS Team"
    },
    {
        "用户": "请帮我返回列表[1, 2, 3, 4, 5]中的第一个元素。",
        "查询": "RETURN list[1, 2, 3, 4, 5] [0..0] AS a"
    },
    {
        "用户": "Find all entities in type t1 where col1 is less than or equal to 2 and col2 is less than or equal to 2.0, and return the IDs of these entities.",
        "查询": "LOOKUP ON t1 WHERE t1.col1 <= 2 AND t1.col2 <= 2.0 YIELD id(vertex) as id"
    },
    {
        "用户": "Identify the entities that Tim Duncan likes and their first and second degree relationships, and return the source, target, and edge information of these entities and relationships.",
        "查询": "GO FROM 'Tim Duncan' OVER like YIELD like._src as src, like._dst as dst |\nGO 1 TO 2 STEPS FROM $-.src OVER like YIELD $-.src as src, $-.dst, like._dst as dst, edge as e"
    },
    {
        "用户": "Obtain the relationship attributes of 'Tim Duncan' liked by 'Tony Parker' and 'Tracy McGrady' liked by 'Grant Hill', and return the starting nodes of these relationships.",
        "查询": "FETCH PROP ON like \"Tony Parker\"->\"Tim Duncan\", \"Grant Hill\" -> \"Tracy McGrady\" YIELD edge as e |\nYIELD startNode($-.e) AS nodes"
    },
    {
        "用户": "Find the entity of player 'Tony Parker' and return its ID.",
        "查询": "LOOKUP ON player WHERE player.name == \"Tony Parker\" YIELD id(vertex) as id"
    },
    {
        "用户": "Please insert a player named LaMarcus Aldridge, aged 33, into the player set with ID player102.",
        "查询": "INSERT VERTEX player(name, age) VALUES \"player102\":(\"LaMarcus Aldridge\", 33)"
    },
    {
        "用户": "Hey, hello! I need to start with the entity of 'Tim Duncan', take 100000000000 steps along the 'serve' edge, and then tell me the IDs of all the endpoint entities of the 'serve' edge. Can you help me find it?",
        "查询": "GO 10000000000000 STEPS FROM \"Tim Duncan\" OVER serve YIELD serve._dst;"
    },
    {
        "用户": "Please help me find all the friends in the 1-3 degree relationship of a player named 'Tim Duncan' and return their information.",
        "查询": "MATCH p=(v:player{name:\"Tim Duncan\"})-[e:follow*1..3]->(v2)\nRETURN v2 AS Friends"
    },
    {
        "用户": "查找ID为1的实体，并返回其数量。",
        "查询": "match p = (v)\nwhere id(v) == 1\nreturn count(*)"
    },
    {
        "用户": "Find all paths from 'Tim Duncan' to 'Tony Parker' that contain relationships with the 'like' attribute, up to three steps, and return all relationships on these paths.",
        "查询": "FIND ALL PATH WITH PROP FROM \"Tim Duncan\" TO \"Tony Parker\" OVER like UPTO 3 STEPS YIELD path as p |\nYIELD relationships($-.p) as relationships"
    },
    {
        "用户": "从 'Tim Duncan' 开始，沿着 '喜欢' 的关系找到 'Tony Parker' 或 'LaMarcus Aldridge' 的所有路径，最多不超过3步，并返回这些路径。",
        "查询": "FIND ALL PATH FROM \"Tim Duncan\" TO \"Tony Parker\", \"LaMarcus Aldridge\" OVER like UPTO 3 STEPS YIELD path as p"
    },
    {
        "用户": "Set the 'start' on the edge between 'player100' and 'team204'_ The year attribute increases by 1 when 'end'_ When year 'is greater than 2010, return the updated' start '_ Year 'and' end_ Year '.",
        "查询": "UPDATE EDGE ON serve \"player100\" -> \"team204\"@0\nSET start_year = start_year + 1\nWHEN end_year > 2010\nYIELD start_year, end_year"
    },
    {
        "用户": "找出与 'Tim Duncan' 通过 '服务' 或 '喜欢' 关系相连，且关系强度为90，距离为2到3的实体及关系。",
        "查询": "MATCH (n)-[e:serve|like*2..3{likeness: 90}]-(v)\nWHERE id(n) == \"Tim Duncan\"\nRETURN e, v"
    },
    {
        "用户": "找出所有名字不以'R'结尾的球员，并返回他们的姓名和年龄。",
        "查询": "MATCH (v:player)\nWHERE NOT v.player.name ENDS WITH \"R\"\nRETURN v.player.name, v.player.age"
    },
    {
        "用户": "Find the entity that has a 'like' relationship with 'Nobody' and return the number 1.",
        "查询": "GO FROM \"Nobody\" OVER like YIELD like._dst | YIELD 1"
    },
    {
        "用户": "显示所有标签。",
        "查询": "SHOW TAGS"
    },
    {
        "用户": "获取 'Tony Parker' 球员的姓名和年龄。",
        "查询": "FETCH PROP ON player \"Tony Parker\" YIELD player.name, player.age"
    },
    {
        "用户": "如果标签t5不存在，您能帮我创建一个标签t5吗？该标签包含三个属性：p1是长度为5的非空固定字符串类型，p2是整数类型，p3是可选的整数类型。",
        "查询": "CREATE TAG IF NOT EXISTS t5(p1 fixed_string(5) NOT NULL, p2 int, p3 int DEFAULT NULL)"
    },
    {
        "用户": "Please help me find the friends of all the friends of the player named 'Tim Duncan' and return their names to me.",
        "查询": "MATCH p=(v:player{name:\"Tim Duncan\"})-[e:follow*2]->(v2)\nWHERE ALL(e_ in e WHERE e_.degree > 0)\nRETURN DISTINCT v2 AS Friends"
    },
    {
        "用户": "Please help me return to 'basketball'_ The first 6 characters of 'player'.",
        "查询": "RETURN left(\"basketball_player\",6)"
    },
    {
        "用户": "Remove the space before the string 'basketball player'.",
        "查询": "RETURN ltrim(\" basketball player \")"
    },
    {
        "用户": "Hello, please help me obtain the attributes of all entities of 'Boris Diaw' and return the node information of these entities to me.",
        "查询": "FETCH PROP ON * 'Boris Diaw' YIELD vertex as node"
    },
    {
        "用户": "更新ID为'player668'的球员的姓名为'Amber'，年龄增加1岁，并返回更新后的姓名和年龄。",
        "查询": "UPSERT VERTEX ON player \"player668\"\nSET name = \"Amber\", age = age + 1\nYIELD name AS Name, age AS Age"
    },
    {
        "用户": "Identify all interest relationships starting from 'player101', then identify the target entities of these interest relationships, and return the team and player names in the attributes of these target entities.",
        "查询": "GO FROM \"player101\" OVER follow YIELD dst(edge) AS id |\nGO FROM $-.id OVER serve YIELD properties($$).name AS Team,\nproperties($^).name AS Player"
    },
    {
        "用户": "请问您知道现在是几点钟吗？",
        "查询": "RETURN datetime().hour"
    },
    {
        "用户": "什么病和霍奇金病使用相同的药物？",
        "查询": "MATCH (n:disease)-[e:recommend_drug]->(n1:drug)<-[e2]-(n2:disease) WHERE n.disease.name=='心脏病' return n2.disease.name"
    },
    {
        "用户": "Obtain the name and age of player 'Tim Duncan'.",
        "查询": "FETCH PROP ON player \"Tim Duncan\" YIELD player.name, player.age"
    },
    {
        "用户": "得了糖尿病推荐吃什么食物？",
        "查询": "MATCH (n:disease)-[e:recommend_eat]->(n1:food) WHERE n.disease.name=='糖尿病' return n1.food.name"
    },
    {
        "用户": "在标签B的nickName属性上创建索引idx_B_8。",
        "查询": "CREATE TAG INDEX idx_B_8 on B(nickName);"
    },
    {
        "用户": "查找所有 '喜欢' 关系中，亲密度小于39的源节点、目标节点和边的rank。",
        "查询": "LOOKUP ON like where like.likeness < 39 YIELD src(edge) as src, dst(edge) as dst, rank(edge) as rank"
    },
    {
        "用户": "Hello, could you please help me obtain all the entity attributes of 'Tim Duncan' and return the entity as a node?",
        "查询": "FETCH PROP ON * 'Tim Duncan' YIELD vertex as node"
    },
    {
        "用户": "Please help me create an edge follow that includes an integer attribute degree.",
        "查询": "CREATE EDGE follow(degree int)"
    },
    {
        "用户": "Could you please help me find the start and end years of the 'serve' attribute between 'Tony Parker' and 'Spurs'?",
        "查询": "FETCH PROP ON serve \"Tony Parker\"->\"Spurs\" YIELD serve.start_year, serve.end_year"
    },
    {
        "用户": "获取从'player101'开始，通过'follow'关系的一步可达的所有实体和边。",
        "查询": "GET SUBGRAPH 1 STEPS FROM \"player101\" IN follow YIELD VERTICES AS nodes, EDGES AS relationships"
    },
    {
        "用户": "将'player100'和'team204'之间的'serve'边的起始年份加1，当结束年份大于2010时，返回起始年份和结束年份。",
        "查询": "UPDATE EDGE ON serve \"player100\" -> \"team204\"@0\nSET start_year = start_year + 1\nWHEN end_year > 2010\nYIELD start_year, end_year"
    },
    {
        "用户": "找出 'Tim Duncan' 喜欢的第一个 'Tony Parker' 实体。",
        "查询": "GO FROM \"Tim Duncan\" OVER like WHERE [like._dst == \"Tony Parker\"]  LIMIT [1];"
    },
    {
        "用户": "返回球员的年龄和数量，按数量和年龄降序排列。",
        "查询": "MATCH (n:player)\nRETURN n.player.age as age, count(*) as number\nORDER BY number DESC, age DESC"
    },
    {
        "用户": "您好，请帮我查找与 'LeBron James' 相关的实体及其关系类型，并返回实体的名称或 'abc'。",
        "查询": "MATCH (v1:player{name: \"LeBron James\"}) -[r]-> (v2)\nRETURN type(r) AS Type, CASE WHEN v2.tea.name IS NOT NULL THEN v2.tea.name WHEN v2.playe.name IS NOT NULL THEN v2.playe.name ELSE \"abc\" END AS Name"
    },
    {
        "用户": "找出名为'Tim Duncan'的球员所关联的所有实体，并返回这些实体的唯一节点。",
        "查询": "MATCH p=(v:player{name:\"Tim Duncan\"})--()\nWITH nodes(p) AS n\nUNWIND n AS n1\nRETURN DISTINCT n1"
    },
    {
        "用户": "Find the relationship of player Manu Ginobili, return his age, relationship strength, name and gender of the associated player, start year of the relationship, and age of the associated player, and sort them by name, with a limit of 3 results.",
        "查询": "match (src_v:player{name:\"Manu Ginobili\"})-[e]-(dst_v)\n  return properties(src_v).age,properties(e).degree,properties(dst_v).name AS name,src_v.player.sex,e.start_year,dst_v.player.age\n  order by name limit 3;"
    },
    {
        "用户": "Returns the edge attributes between 'Tim Duncan' liked by 'Tony Parker' and 'Tracy McGrady' liked by 'Grant Hill'.",
        "查询": "FETCH PROP ON like \"Tony Parker\"->\"Tim Duncan\", \"Grant Hill\" -> \"Tracy McGrady\" YIELD properties(edge) as properties"
    },
    {
        "用户": "计算名为'Tim Duncan'的球员与其他实体之间的关系数量。",
        "查询": "MATCH (v:player{name:\"Tim Duncan\"}) -[e]- (v2)\nRETURN count(e)"
    },
    {
        "用户": "Please help me find all the information about the player named 'Tim Duncan'.",
        "查询": "MATCH (v:player{name:\"Tim Duncan\"}) RETURN v"
    },
    {
        "用户": "Hello, could you please help me find the team name and relationship type related to 'LeBron James'?",
        "查询": "MATCH (v1) -[r:serve]-> (v2)\nWHERE id(v1) == \"LeBron James\"\nRETURN type(r) AS Type, v2.team.name AS Name"
    },
    {
        "用户": "创建一个名为player的标签，包含姓名和年龄两个属性。",
        "查询": "CREATE TAG player(name string, age int)"
    },
    {
        "用户": "Could you please help me find the shortest path from 'Tim Duncan' to 'Tony Parker' that is connected through a liking relationship?",
        "查询": "FIND SHORTEST PATH FROM \"Tim Duncan\" TO \"Tony Parker\" OVER like YIELD path as p"
    },
    {
        "用户": "Can you help me find all the teams' Boris Diaw 'has played for? I want to know the names of these teams.",
        "查询": "GO FROM \"Boris Diaw\" OVER serve YIELD $^.player.name as name, serve.start_year as start, $$.team.name as team | YIELD $-.team"
    },
    {
        "用户": "Find entities served or liked by a player named 'Tracy McGrady' with a maximum distance of 1, and return these relationships and entities.",
        "查询": "MATCH (:player{name:\"Tracy McGrady\"})-[e:serve|like*0..1]-(v)\nRETURN e, v"
    },
    {
        "用户": "找出与ID为'A'球员相关联的所有实体，并返回到这些实体的路径。",
        "查询": "MATCH p= (v:player) -- (v2) WHERE id(v)==\"A\" RETURN p"
    },
    {
        "用户": "Find the relationship of player Manu Ginobili, return his age, degree of relationship, end entity name of relationship, gender, start year of relationship, and age of end entity, sort by name and limit the return of the first three results.",
        "查询": "match (src_v:player{name:\"Manu Ginobili\"})-[e]-(dst_v)\n  return properties(src_v).age,properties(e).degree,properties(dst_v).name AS name,src_v.player.sex,e.start_year,dst_v.player.age\n  order by name limit 3;"
    },
    {
        "用户": "Can you help me find the age attribute of the person with ID 1?",
        "查询": "FETCH PROP ON person \"1\" YIELD person.age as age;"
    },
    {
        "用户": "您好，请帮我找出'bachelor'标签的节点，并返回这些节点与其'serve'关系的终点节点的'team'属性值。",
        "查询": "MATCH (p:bachelor)-[:serve]->(t)\nRETURN t.team.name AS team"
    },
    {
        "用户": "Can you help me count the number of entities with edges between two nodes?",
        "查询": "MATCH () --> (v) --> () RETURN count(*)"
    },
    {
        "用户": "Can you help me find all the attributes of 'Boris Diaw'? I need his ID and age information.",
        "查询": "FETCH PROP ON * 'Boris Diaw' YIELD id(vertex), player.age"
    },
    {
        "用户": "Please help me create an edge called follow, which has an attribute called degree.",
        "查询": "CREATE EDGE follow(degree int)"
    },
    {
        "用户": "TTL of tag t1_ DURATION set to 2, TTL_ COL set to 'p2'.",
        "查询": "ALTER TAG t1 TTL_DURATION = 2, TTL_COL = \"p2\""
    },
    {
        "用户": "请找出'player100'关注的所有实体，并帮我返回这些实体的边的目标实体。",
        "查询": "$var = GO FROM \"player100\" OVER follow\nYIELD dst(edge) AS dst"
    },
    {
        "用户": "Returns the age of the youngest player.",
        "查询": "MATCH (v:player) RETURN min(v.player.age)"
    },
    {
        "用户": "请帮我创建一个名为player的标签，其中包含姓名和年龄两个属性。",
        "查询": "CREATE TAG player(name string, age int)"
    },
    {
        "用户": "Hello, could you please help me find the shortest path from 'Tony Parker' or 'Yao Ming' to 'Manu Ginobili', 'Spurs', and' Lakes'? The path can only have a maximum of 5 steps, all entities and relationships that need to be included in the path, and then return the path information to me, okay?",
        "查询": "FIND SHORTEST PATH FROM \"Tony Parker\", \"Yao Ming\" TO \"Manu Ginobili\", \"Spurs\", \"Lakers\" OVER * UPTO 5 STEPS YIELD path as p"
    },
    {
        "用户": "如果test1标签不存在，则创建一个test1标签，包含参数p1（字符串类型）和p2（整数类型）。",
        "查询": "CREATE TAG IF NOT EXISTS test1(p1 string, p2 int)"
    },
    {
        "用户": " 请问您能帮我统计一下存在两个节点之间的边的实体数量吗？",
        "查询": "MATCH () --> (v) --> () RETURN count(*)"
    },
    {
        "用户": "Find all the relationships served by a player named 'Ben Simmons' and return these relationships.",
        "查询": "MATCH (v:player{name:\"Ben Simmons\"})-[e:serve]-(v2)\nRETURN e"
    },
    {
        "用户": "请找出'player101'关注的所有实体，并返回这些实体的度数和ID。",
        "查询": "$var1 = GO FROM \"player101\" OVER follow\nYIELD properties(edge).degree AS Degree, dst(edge) as ID"
    },
    {
        "用户": "Identify all bidirectional 'like' relationship paths from 'Tim Duncan' to 'Tony Parker', with a maximum of 3 steps, and return these paths.",
        "查询": "FIND NOLOOP PATH FROM \"Tim Duncan\" TO \"Tony Parker\" OVER like BIDIRECT UPTO 3 STEPS YIELD path as p"
    },
    {
        "用户": "Count the number of entities favored by all players who play for 'Spurs'.",
        "查询": "MATCH (v1)-[:like]->(v2:player)-[:serve]->(v3)\nWHERE id(v3) == 'Spurs'\nRETURN COUNT(*)"
    },
    {
        "用户": "删除'player100'在'2021'年开始服务的所有实体。",
        "查询": "GO FROM \"player100\" OVER serve WHERE properties(edge).start_year == \"2021\" YIELD dst(edge) AS id | DELETE VERTEX $-.id"
    },
    {
        "用户": "Identify all entities related to player 'Shaquille O'Neal', return the names, ages, genders, and ages of these entities, and sort them by age and name, returning only one record.",
        "查询": "match (v1)-->(v2:player)-->(v3) where v2.player.name==\"Shaquille O'Neal\"\n  return properties(v1).name,properties(v2).age as age,properties(v3).name AS name,v2.player.sex,v1.player.age\n  order by age, name limit 1;"
    },
    {
        "用户": "查找前10条ttl_m_edge1类型的边。",
        "查询": "MATCH ()-[e:ttl_m_edge1]->() return e limit 10;"
    },
    {
        "用户": "展示边索引的状态。",
        "查询": "SHOW EDGE INDEX STATUS"
    },
    {
        "用户": "Could you please help me find the shortest path connecting 'Tim Duncan' to 'LaMarcus Aldridge' through a liking relationship?",
        "查询": "FIND SHORTEST PATH FROM \"Tim Duncan\" TO \"LaMarcus Aldridge\" OVER like YIELD path as p"
    },
    {
        "用户": "请帮我查找年龄在30到32岁之间的球员，并告诉我这些球员的年龄。",
        "查询": "LOOKUP ON player\nWHERE player.age < 32 and player.age >30\nYIELD DISTINCT properties(vertex).age as v"
    },
    {
        "用户": "使用MY_SPACE空间。",
        "查询": "use MY_SPACE"
    },
    {
        "用户": "您好，请帮我找出那些老师名字字典序小于'a'的学生，并告诉我他们的ID。",
        "查询": "LOOKUP ON student WHERE student.teacher < \"a\" YIELD id(vertex) as id"
    },
    {
        "用户": "Hello, could you please help me find all entities older than 20, starting from 'Russell Westbrook' and after a maximum of two relationships, and return the information of these entities to me?",
        "查询": "GO 1 TO 2 STEPS FROM 'Russell Westbrook' OVER * where properties($$).age > 20 YIELD $$ as dst"
    },
    {
        "用户": "Find all the friends of a player named 'Tim Duncan' who has a two jump 'follow' relationship with him and the first jump has a degree greater than 98, and return these players as friends.",
        "查询": "MATCH p=(v:player{name:\"Tim Duncan\"})-[e:follow*2]->(v2)\nWHERE e[0].degree > 98\nRETURN DISTINCT v2 AS Friends"
    },
    {
        "用户": "Please help me return the child list from the 3rd to 1st element in the list [1, 2, 3, 4, 5] as a.",
        "查询": "RETURN list[1, 2, 3, 4, 5] [3..1] AS a"
    },
    {
        "用户": "找出名为'Tim Duncan'的球员所喜欢的所有名字、错误标签及其属性信息。",
        "查询": "MATCH (v:player)-[:like]->(t) WHERE v.player.name==\"Tim Duncan\" RETURN v.player.name, t.errortag.name, properties(v), t"
    },
    {
        "用户": "请帮我将一个具有几何形状的边插入到实体201和实体302之间，这个边的几何形状是一个由四个点组成的多边形。",
        "查询": "INSERT EDGE any_shape_edge(geo) VALUES \"201\"->\"302\":(ST_GeogFromText(\"POLYGON((0 1, 1 2, 2 3, 0 1))\"))"
    },
    {
        "用户": "找出 'Tim Duncan' 和 'Tony Parker' 喜欢的所有实体，并返回这些实体与他们之间的关系。",
        "查询": "YIELD {a:1, b:['Tim Duncan', 'Tony Parker'], c:'Tim Duncan'} AS a\n| YIELD $-.a.c AS b\n| UNWIND $-.b AS c\n| GO FROM $-.c OVER like YIELD edge AS e"
    },
    {
        "用户": "查找名为'Tim Duncan'的球员实体，并返回该实体的ID。",
        "查询": "LOOKUP ON player WHERE player.name == \"Tim Duncan\" YIELD id(vertex) as id"
    },
    {
        "用户": "If it doesn't exist, can you help me create an arbitrary shape of any with geographic information_ Shape_ What about edge?",
        "查询": "CREATE EDGE IF NOT EXISTS any_shape_edge(geo geography)"
    },
    {
        "用户": "找出'player102'关注的所有实体，返回这些实体的ID、边的度和'player102'的年龄，再加上'player100'关注的所有实体的ID、边的度和'player100'的年龄。",
        "查询": "GO FROM \"player102\" OVER follow\nYIELD dst(edge) AS id, properties(edge).degree AS Degree, properties($$).age AS Age\nUNION /* DISTINCT */\nGO FROM \"player100\" OVER follow\nYIELD dst(edge) AS id, properties(edge).degree AS Degree, properties($$).age AS Age"
    },
    {
        "用户": "找出年龄大于45岁的球员与洛杉矶湖人队有服务关系的所有实体，并返回这些实体的姓名、'hello'、喜欢程度和所属球队名称，用'@'组合姓名和所属球队名称。",
        "查询": "MATCH (a:player)-[b:serve]-(c:team{name: \"Lakers\"})\nWHERE a.player.age > 45\nRETURN concat_ws(\"@\",a.player.name, NULL, \"hello\", b.likeness, c.team.name) as result"
    },
    {
        "用户": "删除test标签。",
        "查询": "DROP TAG test"
    },
    {
        "用户": "Can you help me find the relationship from 'Shaquille O'Neal' to 'Manu Ginobili', 'Spurs', and' Lakers'? It is best to go through the shortest path that does not exceed 5 steps and passes through any edge. Thank you!",
        "查询": "FIND SHORTEST PATH FROM \"Shaquille O\\'Neal\" TO \"Manu Ginobili\", \"Spurs\", \"Lakers\" OVER * UPTO 5 STEPS YIELD path as p"
    },
    {
        "用户": "Returns the age of the youngest player among all players.",
        "查询": "MATCH (v:player) RETURN min(v.player.age)"
    },
    {
        "用户": "Please find a player named 'Tim Duncan' and help me find the names of other players related to him.",
        "查询": "MATCH (v:player{name:\"Tim Duncan\"})-->()<--(v3)\nRETURN v3.player.name AS Name"
    },
    {
        "用户": "如果边不存在，则创建一个名为follow的边，该边具有一个整数类型的属性degree。",
        "查询": "CREATE EDGE IF NOT EXISTS follow(degree int)"
    },
    {
        "用户": "If the player tag does not exist, create a player tag that includes name and age attributes.",
        "查询": "CREATE TAG IF NOT EXISTS player(name string, age int)"
    },
    {
        "用户": "双向查找从Tim Duncan到Yao Ming之间，满足喜欢程度在80到90之间或是2001年后的队友的所有路径，最多3步，并返回这些路径。",
        "查询": "FIND ALL PATH WITH PROP FROM \"Tim Duncan\" TO \"Yao Ming\" OVER * BIDIRECT\nWHERE (like.likeness >= 80 and like.likeness <= 90) OR (teammate.start_year is not EMPTY and teammate.start_year > 2001) UPTO 3 STEPS YIELD path as p"
    },
    {
        "用户": "Obtain the name and age of the player for 'Boris Diaw'.",
        "查询": "FETCH PROP ON player 'Boris Diaw' YIELD player.name, player.age"
    },
    {
        "用户": "Please help me check the date corresponding to the timestamp 1625469277.",
        "查询": "RETURN datetime(timestamp(1625469277))"
    },
    {
        "用户": "Find all the entities that the player named 'Tim Duncan' likes, with a distance of 2-3 jumps, and return quantity statistics results.",
        "查询": "MATCH (:player{name: \"Tim Duncan\"})-[e:like*2..3]-(v)\nRETURN count(v)"
    },
    {
        "用户": "Calculate what 1 plus 1 equals.",
        "查询": "RETURN 1+1"
    },
    {
        "用户": "Please help me find all the following relationship paths for a player named 'Tim Duncan' and return the friend nodes on the path.",
        "查询": "MATCH p=(v:player{name:\"Tim Duncan\"})-[e:follow*]->(v2)\nRETURN v2 AS Friends"
    },
    {
        "用户": "Please help me identify all the entities that 'player100' is interested in and return their IDs.",
        "查询": "$var = GO FROM \"player100\" OVER follow YIELD dst(edge) AS id"
    },
    {
        "用户": "请帮我显示所有标签。",
        "查询": "SHOW TAGS"
    },
    {
        "用户": "获取'player100'的属性，并返回该实体的属性信息。",
        "查询": "FETCH PROP ON player \"player100\" YIELD properties(vertex)"
    },
    {
        "用户": "Find the age of the player named 'LaMarcus Aldridge' and return.",
        "查询": "match (v:player{name:\"LaMarcus Aldridge\"}) return v.player.age;"
    },
    {
        "用户": "您好，请帮我查找一下从2005年开始，Boris Diaw为哪些团队效力过，并且告诉我Boris Diaw的姓名，起始年份，团队名还有123。",
        "查询": "$var = GO FROM \"Boris Diaw\" OVER serve YIELD $^.player.name as name, serve.start_year as start, $$.team.name as team;YIELD $var.*, 123 as hash WHERE $var.start > 2005"
    },
    {
        "用户": "Identify non repeating paths from 'Tim Duncan' to 'Tony Parker' or 'Manu Ginobili', with a relationship of 'like' and a maximum of 3 steps, and return these paths.",
        "查询": "FIND NOLOOP PATH FROM \"Tim Duncan\" TO \"Tony Parker\", \"Manu Ginobili\" OVER like UPTO 3 STEPS YIELD path as p"
    },
    {
        "用户": "删除从 'Boris Diaw' 出发的所有 '喜欢' 边",
        "查询": "GO FROM \"Boris Diaw\" OVER like\nYIELD like._src as src, like._dst as dst, like._rank as rank\n| DELETE EDGE like $-.src->$-.dst @ $-.rank"
    },
    {
        "用户": "找出满足条件 e1.col1 >= 1 且 e1.col8 > 'apple' 的实体 e1，返回它们的源节点和目标节点。",
        "查询": "LOOKUP ON e1 WHERE e1.col1 >= 1 AND e1.col8 > \"apple\" YIELD src(edge) as src, dst(edge) as dst"
    },
    {
        "用户": "Hello, could you please help me search for relationships that have been ranked 1 since 2016 and return a maximum of 1000 records?",
        "查询": "match ()-[e]->()\nwhere abs(rank(e)) == 1 and e.start_year == 2016\nRETURN e\nlimit 1000"
    },
    {
        "用户": "Find all the entities that Duncan likes and return the concatenation results of their source node ID, player age, name, and liking level.",
        "查询": "GO FROM \"Tim Duncan\" over like YIELD concat(like._src, $^.player.age, $$.player.name, like.likeness) AS A"
    },
    {
        "用户": "Create an edge called follow, which has an attribute called degree.",
        "查询": "CREATE EDGE follow(degree int)"
    },
    {
        "用户": "找出名为'Tracy McGrady'的球员在2000年开始曾经效力或喜欢的所有实体，并返回这些实体与关系的信息。",
        "查询": "MATCH (:player{name:\"Tracy McGrady\"})-[e:serve|like*0..1{start_year: 2000}]->(v)\nRETURN e, v"
    },
    {
        "用户": "给学生标签添加一个默认为'abc'的字符串别名属性。",
        "查询": "ALTER TAG student ADD (alias string default \"abc\")"
    },
    {
        "用户": "请找出名为'Tim Duncan'的球员所拥有的所有关系，并返回这些关系的属性列表。",
        "查询": "MATCH (v:player{name:\"Tim Duncan\"})-[e]->()\nRETURN keys(e)"
    },
    {
        "用户": "如果标签player不存在，则创建一个名为player的标签，包含姓名和年龄属性。",
        "查询": "CREATE TAG IF NOT EXISTS player(name string, age int)"
    },
    {
        "用户": "您好，请帮我查找一下t1类型中col3为false且col1大于等于1的所有实体，并将它们的ID返回给我好吗？",
        "查询": "LOOKUP ON t1 WHERE t1.col3 == false AND t1.col1 >= 1 YIELD id(vertex) as id"
    },
    {
        "用户": "Hello, please help me obtain the properties of 'Boris Diaw' and 'Tony Parker' and return their IDs to me.",
        "查询": "FETCH PROP ON player 'Boris Diaw', 'Tony Parker' YIELD vertex as node | YIELD id($-.node) as id"
    },
    {
        "用户": "Identify all entities with a focus of over 90 'player100' and return the target nodes of their edges.",
        "查询": "GO FROM \"player100\" OVER follow\nWHERE follow.degree > 90\nYIELD dst(edge)"
    },
    {
        "用户": "找出从 'xxx' 或 'zzz' 出发，经过不超过4个 '喜欢' 关系，到达 'Manu Ginobili'、'Spurs' 或 'Lakers' 的最短路径，并返回该路径。",
        "查询": "MATCH p = shortestPath( (a)-[e:like*..4]->(b) )\n  WHERE id(b) IN ['Manu Ginobili', 'Spurs', 'Lakers'] and id(a) in ['xxx', 'zzz']\n  RETURN p"
    },
    {
        "用户": "去掉字符串'basketball player'前面的空格。",
        "查询": "RETURN ltrim(\" basketball player \")"
    },
    {
        "用户": "Please insert an entity with an age of 13, named 'n2', into t2.",
        "查询": "INSERT VERTEX t2 (name, age) VALUES \"11\":(\"n2\", 13)"
    },
    {
        "用户": "返回一个结果，判断数字4是否大于数字3。",
        "查询": "WITH 4 AS one, 3 AS two RETURN one > two AS result"
    },
    {
        "用户": "If only_ The polygon tag does not exist. Can you help me create an only with polygon geographic attributes_ What about the Polygon label?",
        "查询": "CREATE TAG IF NOT EXISTS only_polygon(geo geography(polygon))"
    },
    {
        "用户": "查找年龄大于等于40岁的球员，并返回他们的ID和年龄。",
        "查询": "LOOKUP ON player WHERE player.age >= 40.0 YIELD id(vertex) as name, player.age AS Age"
    },
    {
        "用户": "获取 'Tim Duncan' 球员的姓名和年龄。",
        "查询": "FETCH PROP ON player \"Tim Duncan\" YIELD player.name, player.age"
    },
    {
        "用户": "找出与 'Danny Green' 喜欢的实体，返回起点实体的名称和朋友的名称。",
        "查询": "MATCH (v1) -[:like]-> (v2)\nWHERE id(v1) == \"Danny Green\"\nRETURN v1.player.name AS Name, v2.player.name AS Friend"
    },
    {
        "用户": "Show all spaces.",
        "查询": "show spaces"
    },
    {
        "用户": "Obtain the name and age of the 'Tony Parker' player.",
        "查询": "FETCH PROP ON player \"Tony Parker\" YIELD player.name, player.age"
    },
    {
        "用户": "请帮我显示查询结果的标签信息。",
        "查询": "PROFILE format=\"row\" SHOW TAGS"
    },
    {
        "用户": "Find entities served or liked by a player named 'Tracy McGrady' with a maximum distance of 1, and return these relationships and entities.",
        "查询": "MATCH (:player{name:\"Tracy McGrady\"})-[e:serve|like*0..1]-(v)\nRETURN e, v"
    },
    {
        "用户": "Find all entities that 'player100' is interested in and return the target nodes of their edges",
        "查询": "GO FROM \"player100\" OVER follow WHERE properties($$).name IS NOT EMPTY YIELD dst(edge)"
    },
    {
        "用户": "Find the players whose names contain 'Tim', then find the people they like, and return their age, whether they like 'Tony Parker', and the IDs of the source and target nodes.",
        "查询": "$var = LOOKUP ON player\nWHERE player.name CONTAINS 'Tim'\nYIELD player.age AS age, id(vertex) AS vid;\nGO FROM $var.vid\nOVER like REVERSELY\nYIELD\n  $var.age AS age,\n  ('Tony Parker' == like._dst) AS liked,\n  like._src AS src,\n  like._dst AS dst"
    },
    {
        "用户": "您好，请帮我查找一下从'Thunders'顶点出发，沿着边serve遍历的关系，我需要知道它们的源节点、边的属性、边的ID、目标节点以及目标节点的ID。",
        "查询": "GO FROM 'Thunders' OVER serve REVERSELY YIELD $^ as src,tags($^), id($^), id($$), $$ as dst"
    },
    {
        "用户": "Please help me find all players aged 25 or 28 and return their names and ages.",
        "查询": "LOOKUP ON player\nWHERE player.age IN [25,28]\nYIELD properties(vertex).name, properties(vertex).age"
    },
    {
        "用户": "您好，请帮我找到ID为'Boris Diaw'的实体并将其返回给我。",
        "查询": "MATCH (v) WHERE id(v) == 'Boris Diaw' RETURN (v)"
    },
    {
        "用户": "您好，请帮我查找一下'Boris Diaw'在'Hawks'效力期间的起始年份、结束年份以及关系类型，可以吗？",
        "查询": "FETCH PROP ON serve 'Boris Diaw' -> 'Hawks' YIELD serve.start_year, serve.end_year, edge as relationship"
    },
    {
        "用户": "请帮我移除同步监听器。",
        "查询": "REMOVE LISTENER SYNC"
    },
    {
        "用户": "得了肺炎需要注意什么？",
        "查询": "LOOKUP ON disease WHERE disease.name == \"肺炎\" YIELD properties(vertex).prevent"
    },
    {
        "用户": "在'201'和'302'之间插入一个任意形状的边，我需要一个多边形，顶点坐标为 (0 1, 1 2, 2 3, 0 1)。",
        "查询": "INSERT EDGE any_shape_edge(geo) VALUES \"201\"->\"302\":(ST_GeogFromText(\"POLYGON((0 1, 1 2, 2 3, 0 1))\"))"
    },
    {
        "用户": "Please help me create a tag called player, which includes two attributes: name and age.",
        "查询": "CREATE TAG player(name string, age int)"
    },
    {
        "用户": "Find all the paths starting from 'Tim Duncan' and reaching the 'Service' relationship through up to three nodes through the 'Like' relationship, and sort them by path length to return the top five paths.",
        "查询": "$a = GO FROM \"Tim Duncan\" over * YIELD like._dst AS src, serve._src AS dst;\nFIND ALL PATH FROM $a.src TO $a.dst OVER like UPTO 3 STEPS YIELD path as p |\nORDER BY $-.p | LIMIT 5"
    },
    {
        "用户": "创建一个名为person的标签，其中包含一个名为name的字符串属性，并在name属性上创建一个长度为3的索引。",
        "查询": "create tag person(name string);\ncreate tag index p1 on person(name(3));"
    },
    {
        "用户": "获取'Boris Diaw'的球员的姓名、年龄，并返回该球员年龄是否大于30的结果。",
        "查询": "FETCH PROP ON player 'Boris Diaw' YIELD player.name, player.age, player.age > 30"
    },
    {
        "用户": "查看边类型为test_comment_edge的详细信息。",
        "查询": "DESC edge test_comment_edge;"
    },
    {
        "用户": "Identify all entities that have a 'like' relationship with entity 'Tim Duncan' and their relationships.",
        "查询": "MATCH (n)-[e:like*2..3]-(v)\nWHERE id(n) == \"Tim Duncan\"\nRETURN e, v"
    },
    {
        "用户": "请问您能帮我查找一下'Boris Diaw'的所有属性吗？我需要他的ID和年龄信息。",
        "查询": "FETCH PROP ON * 'Boris Diaw' YIELD id(vertex), player.age"
    },
    {
        "用户": "Obtain the attributes of all entities on 'test' and return the vertices of these entities.",
        "查询": "FETCH PROP ON * \"test\" YIELD vertex AS v"
    },
    {
        "用户": "Hello, please help me find all entities associated with 'Tony Parker' and return their IDs to me, remove duplicates, and output.",
        "查询": "MATCH (a)--(b) WHERE id(b) == 'Tony Parker' RETURN DISTINCT id(a)\nUNION\nMATCH (a)--(b) WHERE id(b) == 'Tony Parker' RETURN DISTINCT id(a)"
    },
    {
        "用户": "请帮我找出所有存在关系的实体，并返回这些关系的详细信息，最多返回3条。",
        "查询": "MATCH ()<-[e]-()\nRETURN e\nLIMIT 3"
    },
    {
        "用户": "您好，我想请您帮忙找一下，从 'Tony Parker' 或 'Yao Ming' 到 'Manu Ginobili'、'Spurs'、'Lakers' 中的任意一个实体，最短路径最多包含5个步骤，能给我返回一下路径信息吗？",
        "查询": "FIND SHORTEST PATH FROM \"Tony Parker\", \"Yao Ming\" TO \"Manu Ginobili\", \"Spurs\", \"Lakers\" OVER * UPTO 5 STEPS YIELD path as p"
    },
    {
        "用户": "查找与球员 'Manu Ginobili' 有2到3跳 '喜欢' 关系的实体，返回这些实体的性别、关系强度、姓名、年龄和关系开始年份，并按照关系强度、姓名、年龄排序，最多返回5条记录。",
        "查询": "match (src_v:player{name:\"Manu Ginobili\"})-[e:like*2..3]-(dst_v)\n  return distinct properties(src_v).sex,properties(e[0]).degree as degree,properties(dst_v).name as name,src_v.player.age AS age, e[1].start_year,dst_v.player.age\n  order by degree, name, age limit 5;"
    },
    {
        "用户": "插入一个名为ttl_tag06的顶点，包含属性a和b，VID为10，a和b的属性值为当前时间。",
        "查询": "INSERT VERTEX ttl_tag06(a,b) VALUES \"10\":(now(),now());"
    },
    {
        "用户": "我需要提交一个作业，帮我从HDFS下载指定路径下的文件。",
        "查询": "SUBMIT JOB DOWNLOAD HDFS \"hdfs://<hadoop_address>:<hadoop_port>/<sst_file_path>"
    },
    {
        "用户": "找出年龄超过30岁的，且与球员'Tim Duncan'有任何关系相连的所有实体，并返回这些实体的关系路径，最多返回100条。",
        "查询": "MATCH p=(v:player)-[]->(n)\nWHERE id(v)==\"Tim Duncan\" and n.player.age>30\nRETURN p LIMIT 100"
    },
    {
        "用户": "Can you help me find all the attributes of the entity 'Boris Diaw'? I need to know its ID and age attributes.",
        "查询": "FETCH PROP ON * 'Boris Diaw' YIELD id(vertex), player.age"
    },
    {
        "用户": "Hello, please help me find student entities with the alias' abc 'and return their IDs to me.",
        "查询": "LOOKUP ON student WHERE student.alias == \"abc\" YIELD id(vertex) as id"
    },
    {
        "用户": "To insert an arbitrarily shaped edge between '201' and '302', I need a polygon with vertex coordinates (0 1, 1 2, 2 3, 0 1).",
        "查询": "INSERT EDGE any_shape_edge(geo) VALUES \"201\"->\"302\":(ST_GeogFromText(\"POLYGON((0 1, 1 2, 2 3, 0 1))\"))"
    },
    {
        "用户": "Find all edges of entity e1 that meet the conditions e1. col1>=1 and e1. col3>false, and return the source and target nodes of these edges.",
        "查询": "LOOKUP ON e1 WHERE e1.col1 >= 1 AND e1.col3 > false YIELD src(edge) as src, dst(edge) as dst"
    },
    {
        "用户": "查找所有 'Boris Diaw' 所 '喜欢' 的实体，返回这些实体的 ID。",
        "查询": "GO FROM \"Boris Diaw\" OVER like YIELD like._dst"
    },
    {
        "用户": "查找 'Russell Westbrook' 所喜欢的所有实体，并返回这些实体的 ID。",
        "查询": "GO FROM \"Russell Westbrook\" OVER like YIELD like._dst"
    },
    {
        "用户": "找出与实体'player100'通过'follow'关系直接或间接相连的所有实体，并返回这些实体的 ID。",
        "查询": "MATCH (v) -[e:follow*1..2]->(v2)\nWHERE id(v) == \"player100\"\nRETURN id(v2) AS destination"
    },
    {
        "用户": "Please help me find a player node named 'Tim Duncan' and all nodes connected to it, and return these nodes.",
        "查询": "MATCH p=(v:player{name:\"Tim Duncan\"})-->(v2)\nRETURN nodes(p)"
    },
    {
        "用户": "Find the rank of source nodes, target nodes, and edges with an intimacy of less than 39 in all 'like' relationships.",
        "查询": "LOOKUP ON like where like.likeness < 39 YIELD src(edge) as src, dst(edge) as dst, rank(edge) as rank"
    },
    {
        "用户": "Find all entities that 'Tony Parker' likes except for 'Danny Green' and return the names of these entities.",
        "查询": "GO FROM 'Tony Parker' OVER like\nWHERE like._dst NOT IN ['Danny Green']\nYIELD $$.player.name"
    },
    {
        "用户": "请帮我获取名为'player100'的球员的属性中的姓名。",
        "查询": "FETCH PROP ON player \"player100\"\nYIELD properties(vertex).name"
    },
    {
        "用户": "Starting from 'Russell Westbrook', after 1 to 2 steps of relationship, find the IDs of the endpoint entities of all 'serve' and 'like' edges",
        "查询": "GO 1 TO 2 STEPS FROM 'Russell Westbrook' OVER * YIELD serve._dst, like._dst"
    },
    {
        "用户": "高血压推荐吃什么食物？",
        "查询": "GO FROM \"高血压\" OVER recommend_eat YIELD dst(edge);"
    },
    {
        "用户": "Please help me find all team information related to 'Tim Duncan' and remove the labels of these teams.",
        "查询": "GO FROM \"Tim Duncan\" OVER serve YIELD serve._dst as id | DELETE TAG team FROM $-.id"
    },
    {
        "用户": "查找名为'Tim Duncan'的球员实体，并返回该实体的ID。",
        "查询": "LOOKUP ON player WHERE player.name == \"Tim Duncan\" YIELD id(vertex) as id"
    },
    {
        "用户": "Set the TTL duration of tag t1 to 2 and the TTL column to 'p2'.",
        "查询": "ALTER TAG t1 TTL_DURATION = 2, TTL_COL = \"p2\""
    },
    {
        "用户": "嘿，你好！我需要找出年龄为40或20岁且姓名不为空的球员实体。能帮我返回这些实体的ID和年龄信息吗？",
        "查询": "LOOKUP ON player WHERE player.age IN [40, 20] AND player.name > \"\" YIELD id(vertex) as id, player.age"
    },
    {
        "用户": "Please help me find all players aged 25 or 28 and return their names and ages.",
        "查询": "LOOKUP ON player\nWHERE player.age IN [25,28]\nYIELD properties(vertex).name, properties(vertex).age"
    },
    {
        "用户": "Identify entities that have a 'like' relationship with 'Dejounte Murray', return the names and ages of these entities, and sort them in descending age and ascending name order, returning the 0th record.",
        "查询": "MATCH (v1) -[:like]-> (v)\nWHERE id(v1) == 'Dejounte Murray'\nRETURN v.player.name AS Name, v.player.age AS Age\nORDER BY Age DESC, Name ASC\nLIMIT 0"
    },
    {
        "用户": "Hello, please help me find the attributes about 'Tim Duncan' and return the entity as a node. Thank you.",
        "查询": "FETCH PROP ON * 'Tim Duncan' YIELD vertex as node"
    },
    {
        "用户": "Please insert an edge pointing from entity 1 to entity 2 on edge e1, with attribute p1 of 10 and weight of 0.",
        "查询": "INSERT EDGE e1(p1) VALUES \"1\"->\"2\"@0:(10)"
    },
    {
        "用户": "删除 'Russell Westbrook' 所 '喜欢' 的所有实体及其边。",
        "查询": "$var = GO FROM \"Russell Westbrook\" OVER like YIELD like._dst as id; DELETE VERTEX $var.id WITH EDGE"
    },
    {
        "用户": "请问您能帮我查找一下没有关系权重的边吗？然后返回它们的权重排名前三的值。",
        "查询": "match ()-[e]->()\nwhere rank(e) == 0\nRETURN rank(e)\nlimit 3"
    },
    {
        "用户": "找出与 'LeBron James' 通过 '喜欢' 关系相连的实体，并返回这些实体的关系及其名称。",
        "查询": "MATCH p = (n)-[:like]-(m)\nWHERE id(n) == \"LeBron James\"\nRETURN p, n.player.name, m.player.name"
    },
    {
        "用户": "Please help me find a player named 'Tim Duncan' and find the name of another player related to him.",
        "查询": "MATCH (v:player{name:\"Tim Duncan\"})-->(v2)<--(v3)\nRETURN v3.player.name AS Name"
    },
    {
        "用户": "找出名为'Yao Ming'的球员所服务的距离为1到3的实体，并返回起点实体的名称。",
        "查询": "MATCH (v:player {name: \"Yao Ming\"})-[:serve*1..3]->() RETURN v.player.name"
    },
    {
        "用户": "返回球员 Carmelo Anthony 的年龄和性别属性。",
        "查询": "match (v:player) where id(v)==\"Carmelo Anthony\" return properties(v).age,v.player.sex;"
    },
    {
        "用户": "Find all the entities that Russell Westbrook likes and return their IDs.",
        "查询": "GO FROM \"Russell Westbrook\" OVER like YIELD like._dst"
    },
    {
        "用户": "找出 'Tony Parker' 所喜欢的实体中，'喜欢程度' 不为 95、56、21 的所有实体，并返回这些实体的名称和 '喜欢程度' 。",
        "查询": "GO FROM 'Tony Parker' OVER like\nWHERE like.likeness NOT IN {95,56,21}\nYIELD $$.player.name, like.likeness"
    },
    {
        "用户": "您好，请帮我找出列表a中从1到5中大于2的所有数字加上10的结果，并将结果返回给我。谢谢！",
        "查询": "YIELD [n IN range(1, 5) WHERE n > 2 | n + 10] AS a"
    },
    {
        "用户": "您好，请帮我查找一下与 'LeBron James' 有关的团队名称和关系类型，可以吗？",
        "查询": "MATCH (v1) -[r:serve]-> (v2)\nWHERE id(v1) == \"LeBron James\"\nRETURN type(r) AS Type, v2.team.name AS Name"
    },
    {
        "用户": "找出名为'Tim Duncan'的球员所喜欢的喜好度为90的实体，距离该球员2到3个关系，并返回这些实体及关系。",
        "查询": "MATCH (:player{name:\"Tim Duncan\"})<-[e:like*2..3{likeness: 90}]-(v)\nRETURN e, v"
    },
    {
        "用户": "从实体'player101'出发，沿着'follow'边最多100步，获取所有经过的实体和边（子图）。",
        "查询": "GET SUBGRAPH 100 STEPS FROM \"player101\" OUT follow YIELD VERTICES AS nodes, EDGES AS relationships"
    },
    {
        "用户": "Could you please display the host information and version information of Graph, Storage, and Meta services in the database.",
        "查询": "SHOW HOSTS"
    },
    {
        "用户": "If the edge between 'player149' and 'team219' exists and the start year is not equal to 2016, the end year will be added by 1 and the start and end years will be returned.",
        "查询": "UPSERT EDGE on serve\n\"player149\" -> \"team219\"\nSET end_year = end_year + 1\nWHEN start_year != 2016\nYIELD start_year, end_year"
    },
    {
        "用户": "Identify the service relationships of players over 45 years old in the Lakers team, and return the player's name followed by a string of hello.",
        "查询": "MATCH (a:player)-[b:serve]-(c:team{name: \"Lakers\"})\nWHERE a.player.age > 45\nRETURN  concat(a.player.name, \"hello\")"
    },
    {
        "用户": "I would like to log in using the Drainer service (192.168.10.106:9889). Can you help me achieve this?",
        "查询": "SIGN IN DRAINER SERVICE(192.168.10.106:9889)"
    },
    {
        "用户": "Insert 4 edges, namely Tim ->May, Tim ->Tony, Tony ->May, May ->Tim, each with 4 attribute values, including string, integer, floating-point number, and timestamp.",
        "查询": "INSERT EDGE\n  edge_1(col1, col2, col3, col4)\nVALUES\n  \"Tim\"  -> \"May\":  (\"Good\", 18, 11.11, `timestamp`(\"2000-10-10T10:00:00\")),\n  \"Tim\"  -> \"Tony\": (\"Good\", 18, 11.11, `timestamp`(\"2000-10-10T10:00:00\")),\n  \"Tony\" -> \"May\":  (\"Like\", 18, 11.11, `timestamp`(\"2000-10-10T10:00:00\")),\n  \"May\"  -> \"Tim\":  (\"Like\", 18, 11.11, `timestamp`(\"2000-10-10T10:00:00\"))"
    },
    {
        "用户": "返回以字符串'apple'是否以'app'开头、以'a'开头、以大写字母'A'开头。",
        "查询": "RETURN'apple'STARTS WITH'app','apple'STARTS WITH'a','apple'STARTS WITH toUpper('a')"
    },
    {
        "用户": "Find a player entity named 'Tim Duncan' and return the ID of that entity.",
        "查询": "LOOKUP ON player WHERE player.name == \"Tim Duncan\" YIELD id(vertex) as id"
    },
    {
        "用户": "找出从 'Tim Duncan' 开始，通过 '喜欢' 关系最多不超过3步能到达的所有实体，并返回这些实体的路径。",
        "查询": "$a = GO FROM \"Tim Duncan\" over * YIELD like._dst AS src, serve._src AS dst;\nFIND ALL PATH FROM $a.src TO $a.dst OVER like UPTO 3 STEPS YIELD path as p"
    },
    {
        "用户": "获取所有师傅为'a'的学生，并返回这些学生的ID。",
        "查询": "LOOKUP ON student WHERE student.teacher == \"a\" YIELD id(vertex) as id"
    },
    {
        "用户": "查找球员 'Tony Parker' 的实体，并返回该实体的ID。",
        "查询": "LOOKUP ON player WHERE player.name == \"Tony Parker\" YIELD id(vertex) as id"
    },
    {
        "用户": "Please help me remove the synchronization listener.",
        "查询": "REMOVE LISTENER SYNC"
    },
    {
        "用户": "Obtain the name and age of the 'Tony Parker' player.",
        "查询": "FETCH PROP ON player \"Tony Parker\" YIELD player.name, player.age"
    },
    {
        "用户": "请帮我找出从'player100'到'team204'的所有路径，并返回这些路径。",
        "查询": "FIND ALL PATH FROM \"player100\" TO \"team204\" OVER * WHERE follow.degree is EMPTY or follow.degree >=0 YIELD path AS p"
    },
    {
        "用户": "找出从'player100'到'team204'的所有路径，并返回这些路径。",
        "查询": "FIND NOLOOP PATH FROM \"player100\" TO \"team204\" OVER * YIELD path AS p"
    },
    {
        "用户": "从 'Tim Duncan' 出发，沿着 '喜欢' 关系，向两个方向遍历4步，返回遍历到的所有实体和边。",
        "查询": "GET SUBGRAPH 4 steps from 'Tim Duncan' BOTH like YIELD vertices as a, edges as b"
    },
    {
        "用户": "请帮我找出名为'Tim Duncan'的球员所连接的所有实体，并返回这些实体。",
        "查询": "MATCH (v:player{name:\"Tim Duncan\"}) -[*0]-> (v2)\nRETURN v2"
    },
    {
        "用户": "Identify entities that have a 'liking' or 'service' relationship with 'Rajon Rondo', return the degree of these relationships, and sort them by degree, returning up to the top 5 results.",
        "查询": "match (src_v)-[e:like|serve]->(dst_v)-[e2]-(dst_v2) where  id(src_v)==\"Rajon Rondo\"\n  return properties(e).degree as degree,properties(e2).degree AS degree1\n  order by degree, degree1 limit 5;"
    },
    {
        "用户": "请帮我解释并以dot格式显示所有标签。",
        "查询": "EXPLAIN format=\"dot\" SHOW TAGS"
    },
    {
        "用户": "获取 'Tony Parker' 喜欢的 'Tim Duncan' 和 'Grant Hill' 喜欢的 'Tracy McGrady' 的关系和终点信息。",
        "查询": "FETCH PROP ON like \"Tony Parker\"->\"Tim Duncan\", \"Grant Hill\" -> \"Tracy McGrady\" YIELD edge as relationship |\nYIELD endNode($-.relationship) AS node"
    },
    {
        "用户": "May I ask if you could help me search for edges that do not have related weights? Then return the top three values of their weight rankings.",
        "查询": "match ()-[e]->()\nwhere rank(e) == 0\nRETURN rank(e)\nlimit 3"
    },
    {
        "用户": "Please help me insert two vertices, one is the team named 'Trail Blazers' and the other is the team named' Spurs'.",
        "查询": "INSERT VERTEX team(name) VALUES \"team203\":(\"Trail Blazers\"), \"team204\":(\"Spurs\")"
    },
    {
        "用户": "Please help me return the ages and names of all players, sorted in descending order of age and ascending order of names.",
        "查询": "MATCH (v:player) RETURN v.player.age AS Age, v.player.name AS Name\nORDER BY Age DESC, Name ASC"
    },
    {
        "用户": "找出与 'Tim Duncan' 相关的所有实体，这些实体与 'Tim Duncan' 之间存在 2 到 3 条 '喜欢' 的关系，返回这些关系和实体。",
        "查询": "MATCH (n)-[e:like*2..3]-(v)\nWHERE id(n) == \"Tim Duncan\"\nRETURN e, v"
    },
    {
        "用户": "Can you help me generate a random number between 1 and 100?",
        "查询": "RETURN rand32(1,100)"
    },
    {
        "用户": "从'player100'开始，沿着所有边连续走3步，返回所有终点个实体的名称和年龄，要求在第一跳时只能选择1条边，第二跳时可以选择2条边，第三跳时可以选择3条边。",
        "查询": "GO 3 STEPS FROM \"player100\"\nOVER *\nYIELD properties($$).name AS NAME, properties($$).age AS Age\nSAMPLE [1,2,3]"
    },
    {
        "用户": "Count the number of null values and return them. If there are none, return 0.",
        "查询": "YIELD COUNT(CASE WHEN null THEN null ELSE 1 END) AS nulls"
    },
    {
        "用户": "获取 'Tony Parker' 喜欢的 'Tim Duncan' 和 'Grant Hill' 喜欢的 'Tracy McGrady' 的关系属性，并返回这些关系的起始节点。",
        "查询": "FETCH PROP ON like \"Tony Parker\"->\"Tim Duncan\", \"Grant Hill\" -> \"Tracy McGrady\" YIELD edge as e |\nYIELD startNode($-.e) AS nodes"
    },
    {
        "用户": "Find the teams that a player named 'Tracy McGrady' has played for since 2000, and return information about their relationships and entities.",
        "查询": "MATCH (:player{name:\"Tracy McGrady\"})-[e:serve*0..1{start_year: 2000}]-(v)\nRETURN e, v"
    },
    {
        "用户": "给标签t1添加两个属性，一个是整数类型的p3，另一个是长度为10的固定字符串类型的p4。",
        "查询": "ALTER TAG t1 ADD (p3 int32, p4 fixed_string(10))"
    },
    {
        "用户": "请将'player101'关注'player102'的关系插入，关注度为90，谢谢。",
        "查询": "INSERT EDGE follow(degree) VALUES \"player101\" -> \"player102\":(90)"
    },
    {
        "用户": "Obtain the attributes of the 'player100' entity and return the vertex information of that entity.",
        "查询": "FETCH PROP ON player, t1 \"player100\" YIELD vertex AS v"
    },
    {
        "用户": "获取 'Tony Parker' 喜欢的 'Tim Duncan' 和 'Grant Hill' 喜欢的 'Tracy McGrady' 的关系属性，并返回这些关系的终止节点。",
        "查询": "FETCH PROP ON like \"Tony Parker\"->\"Tim Duncan\", \"Grant Hill\" -> \"Tracy McGrady\" YIELD edge as e |\nYIELD endNode($-.e) AS nodes"
    },
    {
        "用户": "Please follow 'player102' to 'player100' and set the attention level to 75.",
        "查询": "INSERT EDGE follow(degree) VALUES \"player102\" -> \"player100\":(75)"
    },
    {
        "用户": "Can you help me return the current date and time?",
        "查询": "RETURN datetime()"
    },
    {
        "用户": "Please identify the entities connected to 'player102' through the 'follow' relationship and return the target nodes of their edges.",
        "查询": "GO 2 STEPS FROM \"player102\" OVER follow YIELD dst(edge)"
    },
    {
        "用户": "Find the age of player Carmelo Anthony and return.",
        "查询": "match (v:player) where id(v)==\"Carmelo Anthony\" return v.player.age;"
    },
    {
        "用户": "创建一个名为TAG的标签，标签中包含一个名为name的字符串属性。",
        "查询": "CREATE TAG TAG(name string)"
    },
    {
        "用户": "Please help me at any_ Create a shape label named any_ Shape_ Geo_ The index of index is based on the geo attribute.",
        "查询": "CREATE TAG INDEX IF NOT EXISTS any_shape_geo_index ON any_shape(geo)"
    },
    {
        "用户": "Please add a listener to the space basketball player, then synchronize the metadata to 192.168.10.105:9569 and store it in 192.168.10.105:9789.",
        "查询": "ADD LISTENER SYNC META 192.168.10.105:9569 STORAGE 192.168.10.105:9789 TO SPACE basketballplayer"
    },
    {
        "用户": "获取从'player100'到'team204'的 serve 关系，并返回该边。",
        "查询": "FETCH PROP ON serve \"player100\" -> \"team204\" YIELD edge AS e"
    },
    {
        "用户": "请帮我找出名为'Tim Duncan'的球员与其他实体之间的所有关系。",
        "查询": "MATCH p=(v:player{name:\"Tim Duncan\"})-->(v2)\nRETURN relationships(p)"
    },
    {
        "用户": "Find the entities that 'player102' and 'player100' are interested in, and return their IDs, degree of edges, and age of 'player100'.",
        "查询": "GO FROM \"player102\" OVER follow\nYIELD dst(edge) AS id, properties(edge).degree AS Degree, properties($$).age AS Age\nUNION /* DISTINCT */\nGO FROM \"player100\" OVER follow\nYIELD dst(edge) AS id, properties(edge).degree AS Degree, properties($$).age AS Age"
    },
    {
        "用户": "请帮我删除所有与'Tim Duncan'有关的团队标签。",
        "查询": "$var = GO FROM \"Tim Duncan\" OVER serve YIELD serve._dst as id; DELETE TAG team FROM $var.id"
    },
    {
        "用户": "找出与 'Dejounte Murray' 有 '喜欢' 关系的实体，返回这些实体的姓名和年龄，并按年龄降序、姓名升序排序，跳过前三个结果。",
        "查询": "MATCH (v1) -[:like]-> (v)\nWHERE id(v1) == 'Dejounte Murray'\nRETURN v.player.name AS Name, v.player.age AS Age\nORDER BY Age DESCENDING, Name ASC\nSKIP 3"
    },
    {
        "用户": "Find players aged 40 or older and return their ID and age.",
        "查询": "LOOKUP ON player WHERE player.age >= 40.0 YIELD id(vertex) as name, player.age AS Age"
    },
    {
        "用户": "找出'player102'和'player100'所'关注'的所有实体，并返回这些实体的边的目标实体。",
        "查询": "GO FROM \"player102\" OVER follow YIELD dst(edge)\nUNION ALL\nGO FROM \"player100\" OVER follow YIELD dst(edge)"
    },
    {
        "用户": "能否展示一下所有的空间呢？",
        "查询": "SHOW SPACES"
    },
    {
        "用户": "请问您能帮我找到从 'Tiago Splitter' 到 'LaMarcus Aldridge' 的最短路径吗？",
        "查询": "FIND SHORTEST PATH FROM \"Tiago Splitter\" TO \"LaMarcus Aldridge\" OVER * YIELD path as p"
    },
    {
        "用户": "请帮我找出名为'Tim Duncan'的球员的所有1到3度好友，并返回这些好友的信息。",
        "查询": "MATCH p=(v:player{name:\"Tim Duncan\"})-[e:follow*1..3]->(v2)\nRETURN v2 AS Friends"
    },
    {
        "用户": "请帮我将'Basketball_Player'改写为大写形式。",
        "查询": "RETURN upper(\"Basketball_Player\")"
    },
    {
        "用户": "找出与实体 'Tim Duncan' 通过 '服务' 或 '喜欢' 关系相连的实体及其关系，并返回这些实体。",
        "查询": "MATCH (n)-[e:serve|like*2..3]->(v)\nWHERE id(n) == \"Tim Duncan\"\nRETURN e, v"
    },
    {
        "用户": "Find all entity paths that can be reached through up to three nodes through the 'like' relationship starting from 'Tim Duncan', and sort them by path length, returning the top five paths.",
        "查询": "$a = GO FROM \"Tim Duncan\" over * YIELD like._dst AS src, serve._src AS dst;\nFIND NOLOOP PATH FROM $a.src TO $a.dst OVER like UPTO 3 STEPS YIELD path as p |\nORDER BY $-.p | LIMIT 5"
    },
    {
        "用户": "找出 'Tony Parker' 所 '喜欢' 的所有实体的 ID，并返回这些实体的 ID 和 'Tony Parker' 的年龄。",
        "查询": "$v1 = GO FROM \"Tony Parker\" OVER like YIELD id($$) AS dst, $^.player.age AS age"
    },
    {
        "用户": "查找名为'Tony Parker'的球员实体，并返回该实体的ID。",
        "查询": "LOOKUP ON player WHERE player.name == \"Tony Parker\" YIELD id(vertex) as id"
    },
    {
        "用户": "获取实体'player100'的所有属性。",
        "查询": "FETCH PROP ON player \"player100\" YIELD properties(vertex)"
    },
    {
        "用户": "Find the entities that Tony Parker likes, but does not include entities with likes of 95, 56, or 21, and return the names and likes of these entities.",
        "查询": "GO FROM 'Tony Parker' OVER like\nWHERE like.likeness NOT IN {95,56,21}\nYIELD $$.player.name, like.likeness"
    },
    {
        "用户": "请帮我查询时间戳1625469277对应的时间。",
        "查询": "RETURN datetime(1625469277)"
    },
    {
        "用户": "Hey, can you help me check out the entities that 'Tim Duncan' likes or has served since 2000? The distance should be between 2 and 3.",
        "查询": "MATCH (:player{name:\"Tim Duncan\"})-[e:serve|like*2..3{start_year: 2000}]-(v)\nRETURN e, v"
    },
    {
        "用户": "从 'Tim Duncan' 出发，经过 '喜欢' 关系，到达距离为 1 或 2 步的实体，且不包括 'YAO MING'，统计每个实体的出边数，返回出边数相同的实体数量。",
        "查询": "GO 1 TO 2 STEPS FROM \"Tim Duncan\" OVER like WHERE like._dst != \"YAO MING\" YIELD dst(edge) AS vid\n| GROUP BY $-.vid YIELD 1 AS id\n| GROUP BY $-.id YIELD COUNT($-.id);"
    },
    {
        "用户": "您好，请帮我找出与ID为'Tom'的实体直接相连的所有实体，并给我返回它们之间的关系路径。",
        "查询": "MATCH p=(v)-[e*1]->(v2) WHERE id(v) IN [\"Tom\"] RETURN p"
    },
    {
        "用户": "请将变量read_only设置为true。",
        "查询": "SET VARIABLES read_only=true"
    },
    {
        "用户": "Delete the test tag.",
        "查询": "DROP TAG test"
    },
    {
        "用户": "Find all entities that 'like' and 'Tony Parker', and return the IDs of the 'like' entities in their relationship with 'Tony Parker'.",
        "查询": "GO FROM \"Tony Parker\" OVER like REVERSELY YIELD like._dst"
    },
    {
        "用户": "Find all paths from 'Tim Duncan' to 'Tony Parker' or 'LaMarcus Aldridge', with the relationship 'like' on the path, go through a maximum of three steps, and return these paths.",
        "查询": "FIND ALL PATH FROM \"Tim Duncan\" TO \"Tony Parker\", \"LaMarcus Aldridge\" OVER like UPTO 3 STEPS YIELD path as p"
    },
    {
        "用户": "查找与 'Dwyane Wade' 通过两个 '喜欢' 关系相连的实体，返回这些实体的名称。",
        "查询": "MATCH (v1) -[:like]-> () -[:like]-> (v3)\nWHERE id(v1) == 'Dwyane Wade'\nRETURN v3.player.name AS Name"
    },
    {
        "用户": "请帮我查找any_shape的所有实体的几何信息，并将其以文本形式返回。",
        "查询": "LOOKUP ON any_shape YIELD ST_ASText(any_shape.geo)"
    },
    {
        "用户": "Find the entities and their relationships that a player named 'Tracy McGrady' serves or likes with a maximum distance of 1.",
        "查询": "MATCH (:player{name:\"Tracy McGrady\"})-[e:serve|like*0..1]->(v)\nRETURN e, v"
    },
    {
        "用户": "\"返回1加1是否等于2\"。",
        "查询": "RETURN 1 + 1 == 2"
    },
    {
        "用户": "Find all entities one step away from entity 'A' and return the source and target nodes of these entities.",
        "查询": "GO 1 STEPS FROM \"A\" OVER follow YIELD src(edge),dst(edge)"
    },
    {
        "用户": "Please identify all entities that 'player100', who are 42 years old or older, are interested in and return their information to me.",
        "查询": "GO FROM \"player100\" OVER follow\nWHERE $^.player.age >= 42\nYIELD dst(edge)"
    },
    {
        "用户": "Create a tag called TAG, which contains a name attribute.",
        "查询": "CREATE TAG TAG(name string)"
    },
    {
        "用户": "找出名字中包含Pa的球员的姓名和年龄。",
        "查询": "MATCH (v:player)\nWHERE v.player.name CONTAINS \"Pa\"\nRETURN v.player.name, v.player.age"
    },
    {
        "用户": "Search for the shortest path from 'Yao Ming' to 'Tony Parker' or 'Tracy McGrady', which includes' like 'and' service 'relationships. Go through a maximum of 5 steps and return path information.",
        "查询": "FIND SHORTEST PATH FROM \"Yao Ming\"  TO \"Tony Parker\", \"Tracy McGrady\" OVER like,serve UPTO 5 STEPS YIELD path as p"
    },
    {
        "用户": "Find all entities that Boris Diaw likes and return their IDs.",
        "查询": "GO FROM \"Boris Diaw\" OVER like YIELD like._dst"
    },
    {
        "用户": "Please help me create a label called player.",
        "查询": "SHOW CREATE TAG player"
    },
    {
        "用户": "Please identify the edges connected to the entity with ID 1 that rank greater than 2, and return the starting node, target node, ranking, and attribute p1 of these edges. Finally, sort in descending order of ranking.",
        "查询": "GO FROM \"1\"\nOVER e1\nWHERE rank(edge) > 2\nYIELD src(edge), dst(edge), rank(edge) AS Rank, properties(edge).p1 |\nORDER BY $-.Rank DESC"
    },
    {
        "用户": "Returns the age and names of all players, sorted in descending age and ascending name order.",
        "查询": "MATCH (v:player) RETURN v.player.age AS Age, v.player.name AS Name\nORDER BY Age DESC, Name ASC"
    },
    {
        "用户": "创建一条带有起始年份和结束年份属性的serve边。",
        "查询": "CREATE EDGE serve(start_year int, end_year int)"
    },
    {
        "用户": "请帮我找出从'player100'到'team204'的所有路径，并返回这些路径。",
        "查询": "FIND NOLOOP PATH FROM \"player100\" TO \"team204\" OVER * YIELD path AS p"
    },
    {
        "用户": "Returns the age and gender attributes of player Carmelo Anthony.",
        "查询": "match (v:player) where id(v)==\"Carmelo Anthony\" return properties(v).age,v.player.sex;"
    },
    {
        "用户": "I want to exit the Drainer service, please help me exit.",
        "查询": "SIGN OUT DRAINER SERVICE"
    },
    {
        "用户": "Please help me calculate the remainder of dividing the hash value named 'Tim' by 100.",
        "查询": "YIELD hash(\"Tim\") % 100"
    },
    {
        "用户": "请帮我移除DRAINER。",
        "查询": "REMOVE DRAINER"
    },
    {
        "用户": "您好，我想查询一下从2000年开始，与'Tim Duncan'有2-3级'serve'关系的所有实体和关系，能帮我找找吗？",
        "查询": "MATCH (n)-[e:serve*2..3{start_year: 2000}]-(v)\nWHERE id(n) == \"Tim Duncan\"\nRETURN e, v"
    },
    {
        "用户": "Add 'player100' to the service team of 'team204' from 1998 to 2017 and set the weight to 1.",
        "查询": "insert edge serve(start_year,end_year)\nvalues \"player100\"->\"team204\"@1:(1998, 2017)"
    },
    {
        "用户": "Please help me check the information for terminating session ID 1625553545984255 and plan ID 163.",
        "查询": "KILL QUERY(SESSION=1625553545984255,PLAN=163)"
    },
    {
        "用户": "Find all entities' follow 'or' serve 'by players named' Tim Duncan 'and return their relationships.",
        "查询": "MATCH (v:player{name:\"Tim Duncan\"})-[e:follow|:serve]->(v2)\nRETURN e"
    },
    {
        "用户": "Please help me return a range from 1 to 5, with all elements starting from the third element as a.",
        "查询": "RETURN range(1,5)[3..] AS a"
    },
    {
        "用户": "您好，请问您能帮我一下吗？我需要获取'Boris Diaw'和'Not Exist'之间边的属性，并将源节点的信息存储在变量'a'中返回。",
        "查询": "FETCH PROP ON serve \"Boris Diaw\"->\"Not Exist\" YIELD src(edge) as a"
    },
    {
        "用户": "找出从'player100'到'team204'的所有路径，并返回这些路径。",
        "查询": "FIND ALL PATH FROM \"player100\" TO \"team204\" OVER * WHERE follow.degree is EMPTY or follow.degree >=0 YIELD path AS p"
    },
    {
        "用户": "请问您能帮我查找与 'Tim Duncan' 有 '服务' 关系的所有实体，并返回它们的 ID 吗？",
        "查询": "YIELD \"Tim Duncan\" as vid | GO FROM $-.vid OVER serve YIELD serve._dst"
    },
    {
        "用户": "Please find out the names and ages of players under the age of 21. Thank you.",
        "查询": "MATCH (v:player)\nWHERE v[toLower(\"AGE\")] < 21\nRETURN v.player.name, v.player.age"
    },
    {
        "用户": "请帮我找到所有与 'Tim Duncan' 有关的球队信息，并删除这些球队的标签。",
        "查询": "GO FROM \"Tim Duncan\" OVER serve YIELD serve._dst as id | DELETE TAG team FROM $-.id"
    },
    {
        "用户": "Please help me find players aged between 30 and 32 and tell me the ages of these players.",
        "查询": "LOOKUP ON player\nWHERE player.age < 32 and player.age >30\nYIELD DISTINCT properties(vertex).age as v"
    },
    {
        "用户": "找出满足条件 e1.col1 >= 1 和 e1.col3 > false 的实体 e1 的所有边，返回这些边的源节点和目标节点。",
        "查询": "LOOKUP ON e1 WHERE e1.col1 >= 1 AND e1.col3 > false YIELD src(edge) as src, dst(edge) as dst"
    },
    {
        "用户": "Find all friends in a 'follow' relationship with a player named 'Tim Duncan' after two jumps, with a degree greater than 1 for each jump, and return the names of these friends.",
        "查询": "MATCH p=(v:player{name:\"Tim Duncan\"})-[e:follow*2]->(v2)\nWHERE e.degree > 1\nRETURN DISTINCT v2 AS Friends"
    },
    {
        "用户": "您好，请帮我查找与 'LeBron James' 相关的实体及其关系类型，并返回实体的名称或 'abc'。",
        "查询": "MATCH (v1:player{name: \"LeBron James\"}) -[r]-> (v2)\nRETURN type(r) AS Type, CASE WHEN v2.tea.name IS NOT NULL THEN v2.tea.name WHEN v2.playe.name IS NOT NULL THEN v2.playe.name ELSE \"abc\" END AS Name"
    },
    {
        "用户": "Find all the entities that 'James Harden' likes' and return them.",
        "查询": "GO FROM \"James Harden\" OVER like YIELD like._dst"
    },
    {
        "用户": "查找所有 '喜欢' 关系中，亲密度大于89的边，并返回这些边的源节点、目标节点和权重。",
        "查询": "LOOKUP ON like where like.likeness > 89 YIELD src(edge) as src, dst(edge) as dst, rank(edge) as rank"
    },
    {
        "用户": "Please identify all entities that 'player100' is interested in and help me return the target entities of their edges.",
        "查询": "$var = GO FROM \"player100\" OVER follow\nYIELD dst(edge) AS dst"
    },
    {
        "用户": "从 'Tim Duncan' 开始，通过反向 '喜欢' 关系查找不超过3步的路径，直到到达 'Nobody' 或 'Spur'，并且返回路径。",
        "查询": "FIND NOLOOP PATH FROM \"Tim Duncan\" TO \"Nobody\", \"Spur\" OVER like REVERSELY UPTO 3 STEPS YIELD path as p"
    },
    {
        "用户": "Find all paths from 'Tim Duncan' to 'Tony Parker', which must go through a 'like' relationship, up to 3 steps, and return the path and the relationships on the path.",
        "查询": "FIND ALL PATH WITH PROP FROM \"Tim Duncan\" TO \"Tony Parker\" OVER like UPTO 3 STEPS YIELD path as p |\nYIELD relationships($-.p) as relationships"
    },
    {
        "用户": "找出从 'Tim Duncan' 到 'Tony Parker' 的所有双向 '喜欢' 关系路径，最多包含3步，并返回这些路径。",
        "查询": "FIND NOLOOP PATH FROM \"Tim Duncan\" TO \"Tony Parker\" OVER like BIDIRECT UPTO 3 STEPS YIELD path as p"
    },
    {
        "用户": "得了糖尿病应该去哪个科室就诊？",
        "查询": "GO FROM \"糖尿病\" OVER cure_department YIELD dst(edge);"
    },
    {
        "用户": "Create an edge that represents the start and end years of the service.",
        "查询": "CREATE EDGE serve(start_year int, end_year int)"
    },
    {
        "用户": "获取 'Tony Parker' 喜欢的 'Tim Duncan' 和 'Grant Hill' 喜欢的 'Tracy McGrady' 的关系边和起始节点。",
        "查询": "FETCH PROP ON like \"Tony Parker\"->\"Tim Duncan\", \"Grant Hill\" -> \"Tracy McGrady\" YIELD edge as relationship |\nYIELD startNode($-.relationship) AS node"
    },
    {
        "用户": "找出t1类型中col1大于'aaaaa'的所有实体，并返回这些实体的ID。",
        "查询": "LOOKUP ON t1 WHERE t1.col1 > \"aaaaa\" YIELD id(vertex) as id"
    },
    {
        "用户": "请帮我删除名为'Tony Parker'的实体以及与之相关的所有连接。",
        "查询": "DELETE VERTEX \"Tony Parker\" WITH EDGE;"
    },
    {
        "用户": "请帮我返回一个范围从1到5的数组中倒数第二个元素。",
        "查询": "RETURN range(1,5)[-2]"
    },
    {
        "用户": "Obtain the name and age attributes of the 'Tony Parker' player.",
        "查询": "FETCH PROP ON player \"Tony Parker\" YIELD player.name, player.age"
    },
    {
        "用户": "Obtain the name and age of a player named 'Tony Parker'.",
        "查询": "FETCH PROP ON player \"Tony Parker\" YIELD player.name, player.age"
    },
    {
        "用户": "从实体'player101'开始，通过边'serve'往外延伸一步，返回所有顶点和边。",
        "查询": "GET SUBGRAPH WITH PROP 1 STEPS FROM \"player101\" OUT serve YIELD VERTICES AS nodes, EDGES AS relationships"
    },
    {
        "用户": "请帮我找出年龄不在20到25岁之间的所有球员，并按年龄排序，然后告诉我他们的姓名和年龄。",
        "查询": "MATCH (v:player)\nWHERE v.player.age NOT IN range(20,25)\nRETURN v.player.name AS Name, v.player.age AS Age\nORDER BY Age"
    },
    {
        "用户": "Create a label called person, which contains a string attribute called name, and create an index with a length of 3 on the name attribute.",
        "查询": "create tag person(name string);\ncreate tag index p1 on person(name(3));"
    },
    {
        "用户": "If the label team does not exist, create a label named 'team' with the 'name' attribute.",
        "查询": "CREATE TAG IF NOT EXISTS team(name string)"
    },
    {
        "用户": "找出年龄小于25岁的球员所对应的实体的姓名和年龄。",
        "查询": "MATCH (v:player)-[e]->(v2)\nWHERE v2.player.age < 25\nRETURN v2.player.name, v2.player.age"
    },
    {
        "用户": " 请帮我添加一个球员节点，名字叫做 'A Loner'，年龄为 0，然后再删除这个节点以及与它相关的所有连接。",
        "查询": "INSERT VERTEX player(name, age) VALUES \"A Loner\": (\"A Loner\", 0);\nDELETE VERTEX \"A Loner\" WITH EDGE;"
    },
    {
        "用户": "请帮我查询时间戳1625469277对应的日期。",
        "查询": "RETURN datetime(timestamp(1625469277))"
    },
    {
        "用户": "请帮我获取'player100'、'player101'、'player102'、'player103'的属性中的年龄和姓名，并按照年龄升序、姓名降序排序。",
        "查询": "FETCH PROP ON player \"player100\", \"player101\", \"player102\", \"player103\"\nYIELD properties(vertex).age AS age, properties(vertex).name AS name\n| ORDER BY $-.age ASC, $-.name DESC"
    },
    {
        "用户": "请找出与'player100'有'follow'关系的实体，并告诉我它们的ID。",
        "查询": "MATCH (v)<-[e:follow]- (v2) WHERE id(v) =='player100'\nRETURN id(v2) AS destination"
    },
    {
        "用户": "能帮我把字符串\" basketball player \"末尾的空格去掉吗？",
        "查询": "RETURN rtrim(\" basketball player \")"
    },
    {
        "用户": "寻找从 'Tim Duncan' 和 'Tiago Splitter' 到 'Tony Parker' 和 'Spurs' 的最短路径，路径上包括 '喜欢' 和 '服务' 的关系，最多经过5个步骤，并返回路径信息。",
        "查询": "FIND SHORTEST PATH FROM \"Tim Duncan\", \"Tiago Splitter\" TO \"Tony Parker\", \"Spurs\" OVER like,serve UPTO 5 STEPS YIELD path as p"
    },
    {
        "用户": "Identify entities that have a 'like' relationship with 'Dejounte Murray', return the names and ages of these entities, and sort them in descending age and ascending name order, skipping the first three results.",
        "查询": "MATCH (v1) -[:like]-> (v)\nWHERE id(v1) == 'Dejounte Murray'\nRETURN v.player.name AS Name, v.player.age AS Age\nORDER BY Age DESCENDING, Name ASC\nSKIP 3"
    },
    {
        "用户": "您能帮我生成一个范围在1到100之间的随机64位整数吗？",
        "查询": "RETURN rand64(1,100)"
    },
    {
        "用户": "找出从 'Tim Duncan' 到 'Tony Parker' 的所有双向 '喜欢' 关系路径，最多包含3跳距离，并返回这些路径。",
        "查询": "FIND NOLOOP PATH FROM \"Tim Duncan\" TO \"Tony Parker\" OVER like BIDIRECT UPTO 3 STEPS YIELD path as p"
    },
    {
        "用户": "创建一个名为team的标签，标签包含一个名为name的字符串属性。",
        "查询": "CREATE TAG team(name string)"
    },
    {
        "用户": "找出 'Russell Westbrook' 的实体所 '喜欢' 的所有实体，并返回这些实体的 ID。",
        "查询": "GO FROM \"Russell Westbrook\" OVER like YIELD like._dst"
    },
    {
        "用户": "Hello, could you please help me find the source node, target node, and weight of 'Boris Diaw' service relationship in 'Spurs'?",
        "查询": "FETCH PROP ON serve 'Boris Diaw'->\"Spurs\" YIELD serve._src, serve._dst, serve._rank"
    },
    {
        "用户": "找出'player100'关注的所有实体，并返回这些实体的姓名和所属的球队名称。",
        "查询": "GO FROM \"player100\" OVER follow\nYIELD dst(edge) AS id |\nGO FROM $-.id OVER serve\nYIELD properties($^).name AS Player, properties($$).name AS Team"
    },
    {
        "用户": "查找t1中col1值在'羊🐏羊'和'🐏羊'之间的所有实体，并返回这些实体的ID。",
        "查询": "LOOKUP ON t1 WHERE \"羊🐏羊\" < t1.col1 and t1.col1 < \"🐏羊\" YIELD id(vertex) as id"
    },
    {
        "用户": "Please help me generate a random number between 1 and 100.",
        "查询": "RETURN rand32(1,100)"
    },
    {
        "用户": "您好，请帮我查找与 'Tony Parker' 相关联的实体，距离为2跳，并返回它们的ID。",
        "查询": "GO 1 STEPS FROM 'Tony Parker' OVER like YIELD like._dst AS id\n| GO 2 STEPS FROM $-.id OVER like YIELD like._dst"
    },
    {
        "用户": "Identify all entities that have previously provided services to 'Thunders' and return their source nodes, labels on edges, edge IDs, target nodes, and target node IDs",
        "查询": "GO FROM 'Thunders' OVER serve REVERSELY YIELD $^ as src,tags($^), id($^), id($$), $$ as dst"
    },
    {
        "用户": "Please insert the relationship between 'player101' and 'player102' with a 90 degree of attention. Thank you.",
        "查询": "INSERT EDGE follow(degree) VALUES \"player101\" -> \"player102\":(90)"
    },
    {
        "用户": "Hello, please help me find all entities that have a 'service' relationship with 'Tim Duncan' and return their IDs to me.",
        "查询": "YIELD \"Tim Duncan\" as vid | GO FROM $-.vid OVER serve YIELD serve._dst"
    },
    {
        "用户": "如果不存在名为player_index_1的标签索引，就创建一个索引，索引的字段为player的name属性，长度限制为20。",
        "查询": "CREATE TAG INDEX IF NOT EXISTS player_index_1 ON player(name(20))"
    },
    {
        "用户": "如果person标签不存在，能否帮我创建一个属性为p1、数据类型为整型的person标签呢？",
        "查询": "CREATE TAG IF NOT EXISTS person(p1 int)"
    },
    {
        "用户": "请问您能帮我把学生 'Alen' 的老师更新为 'Bob' 吗？",
        "查询": "UPDATE VERTEX ON student \"Alen\" SET teacher = \"Bob\""
    },
    {
        "用户": "您好，请帮我找出满足以下条件的实体 e1：e1.col1 大于等于 1，且 e1.col5 大于时间 11:11:11。并且请返回这些实体的源节点和目标节点。",
        "查询": "LOOKUP ON e1 WHERE e1.col1 >= 1 AND e1.col5 > time(\"11:11:11\") YIELD src(edge) as src, dst(edge) as dst"
    },
    {
        "用户": "您好，请帮我找一下，以 'Tim Duncan' 为起点的子图，然后返回其中的属性，但是只限制返回一个结果。",
        "查询": "GET SUBGRAPH WITH PROP FROM 'Tim Duncan' | LIMIT 1"
    },
    {
        "用户": "请问您能帮我查找一下'Boris Diaw'在效力于'Hawks'期间的起始年份、结束年份以及关系类型吗？",
        "查询": "FETCH PROP ON serve 'Boris Diaw' -> 'Hawks' YIELD serve.start_year, serve.end_year, edge as relationship"
    },
    {
        "用户": "找出'player101'关注的所有实体，并返回这些实体的关注度。",
        "查询": "GO FROM \"player101\" OVER follow\nYIELD src(edge) AS s, dst(edge) AS d\n| FETCH PROP ON follow $-.s -> $-.d\nYIELD properties(edge).degree"
    },
    {
        "用户": "请帮我获取实体类型为 any_shape，ID为103的实体的几何信息，并将其以文本形式返回。",
        "查询": "FETCH PROP ON any_shape \"103\" YIELD ST_ASText(any_shape.geo)"
    },
    {
        "用户": "查找年龄为40的球员的姓名，然后沿着反向的‘喜欢’关系，从这些球员出发，向外扩展1到2步，返回每个实体的ID、姓名、边和起点、终点节点信息。",
        "查询": "LOOKUP ON player WHERE player.age == 40 YIELD player.name AS name |\nGO 1 TO 2 STEPS FROM $-.name OVER like REVERSELY YIELD like._dst AS dst, $$.player.name AS name, edge as e, $$ as dstnode, $^ as srcnode"
    },
    {
        "用户": "Please identify all entities associated with player ID 'A' and return the path to these entities.",
        "查询": "MATCH p= (v:player) -- (v2) WHERE id(v)==\"A\" RETURN p"
    },
    {
        "用户": "请帮我找出所有没有被其他实体关注的实体，并返回它们的所有信息。",
        "查询": "MATCH (v)-[e:follow]->()\nWHERE rank(e)==0\nRETURN *"
    },
    {
        "用户": "找出名字中包含'Tim'的球员，然后找出他们所喜欢的人，并返回这些人的年龄、是否喜欢'Tony Parker'、源节点和目标节点的ID。",
        "查询": "$var = LOOKUP ON player\nWHERE player.name CONTAINS 'Tim'\nYIELD player.age AS age, id(vertex) AS vid;\nGO FROM $var.vid\nOVER like REVERSELY\nYIELD\n  $var.age AS age,\n  ('Tony Parker' == like._dst) AS liked,\n  like._src AS src,\n  like._dst AS dst"
    },
    {
        "用户": "从 'Tim Duncan' 出发，沿着 '喜欢' 关系，找到距离为3的实体，返回结果限制为第一跳自动选择1条边，第二跳选择2条边，第三跳选择2条边。",
        "查询": "GO 3 STEPS FROM \"Tim Duncan\" OVER like LIMIT [1, 2, 2];"
    },
    {
        "用户": "If the player_ With_ If the default tag does not exist, create a player entity tag with a default age of 20.",
        "查询": "CREATE TAG IF NOT EXISTS player_with_default(name string, age int DEFAULT 20)"
    },
    {
        "用户": "At edge_ 1_ Add an index edge next to ttl_ 1_ Ttl_ Index_ Second_ Degree, with the degree attribute as the keyword, is used to accelerate second degree relationship queries.",
        "查询": "CREATE EDGE INDEX edge_1_ttl_index_second_degree ON edge_1_ttl(degree)"
    },
    {
        "用户": "请帮我返回列表 [1, 2, 3] 中的所有元素",
        "查询": "YIELD list[1, 2, 3][0..-1] AS a"
    },
    {
        "用户": "您好，请帮我获取关于'Tim Duncan'的所有属性信息，包括ID、键、标签和属性值。",
        "查询": "FETCH PROP ON * 'Tim Duncan' YIELD  id(vertex), keys(vertex) as keys, tags(vertex) as tags_, properties(vertex) as props"
    },
    {
        "用户": "Please help me insert a player entity named 'Kobe' with an empty age.",
        "查询": "INSERT VERTEX player(name, age) VALUES \"Kobe\":(\"Kobe\",null)"
    },
    {
        "用户": "Obtain all entities that can be reached through the 'like' relationship starting from 'Tim Duncan' and return information about these entities.",
        "查询": "GET SUBGRAPH FROM 'Tim Duncan' OUT like  YIELD vertices as v"
    },
    {
        "用户": "返回名为'LaMarcus Aldridge'的球员的年龄和性别属性。",
        "查询": "match (v:player{name:\"LaMarcus Aldridge\"}) return properties(v).age,v.player.sex;"
    },
    {
        "用户": "Find all entities that like LeBron James, then find the entities that like them, and return the relationships and attributes between them.",
        "查询": "MATCH p = (n)-[:like]->()-[:like]->()\nWHERE id(n) == \"LeBron James\"\nRETURN *"
    },
    {
        "用户": "请帮我找一下名为'Tim Duncan'的球员在哪些球队效力过，并告诉我这些球队的名称。",
        "查询": "MATCH (v:player{name:\"Tim Duncan\"})-[e]->(t)\nWHERE (v)-[e]->(t:team)\nRETURN (v)-->()"
    },
    {
        "用户": "Find a player entity named 'Tim Duncan' and return the ID of that entity.",
        "查询": "LOOKUP ON player WHERE player.name == \"Tim Duncan\" YIELD id(vertex) as id"
    },
    {
        "用户": "您好，请帮我查找一下，从 'Tim Duncan' 开始，沿着 'serve' 关系，经过10步，能否返回所有实体的 ID呢？",
        "查询": "GO 10 STEPS FROM \"Tim Duncan\" OVER serve YIELD $$ as dst"
    },
    {
        "用户": "Obtain the serve relationship from 'player100' to 'team204' and return the edge of this attribute.",
        "查询": "FETCH PROP ON serve \"player100\" -> \"team204\" YIELD edge AS e"
    },
    {
        "用户": "找出'player666','player667','player668'所'serve'的所有关系，并返回这些关系的起始年份和结束年份。",
        "查询": "GO FROM \"player666\", \"player667\", \"player668\"\nOVER serve\nYIELD properties(edge).start_year, properties(edge).end_year"
    },
    {
        "用户": "Find players named 'Tracy McGrady' with a maximum distance of 1 serving or liking entities and relationships, and return these relationships and entities.",
        "查询": "MATCH (:player{name:\"Tracy McGrady\"})-[e:serve|like*0..1]->(v)\nRETURN e, v"
    },
    {
        "用户": "找出名为'Tim Duncan'的球员所属的所有球队，并返回与该球员有关系的所有实体关系。",
        "查询": "MATCH (v:player{name:\"Tim Duncan\"})-[e]->(t) WHERE (v)-[e]->(t:team) RETURN (v)-->()"
    },
    {
        "用户": "Can you help me find the 'serve' relationship attribute between 'Boris Diaw' and 'Spurs'? I need to return the source node, target node, and relationship weights.",
        "查询": "FETCH PROP ON serve 'Boris Diaw'->\"Spurs\" YIELD serve._src, serve._dst, serve._rank"
    },
    {
        "用户": "Starting from 'player101', obtain all nodes and edges within step 1.",
        "查询": "GET SUBGRAPH 1 STEPS FROM \"player101\" YIELD VERTICES AS nodes, EDGES AS relationships"
    },
    {
        "用户": "Update the 'teacher' attribute of the student named 'Alen' to 'Bob'.",
        "查询": "UPDATE VERTEX ON student \"Alen\" SET teacher = \"Bob\""
    },
    {
        "用户": "Hello, please help me find all entities that have a 'service' relationship with 'Tim Duncan' and return their IDs to me.",
        "查询": "YIELD \"Tim Duncan\" as vid | GO FROM $-.vid OVER serve YIELD serve._dst"
    },
    {
        "用户": "Insert two edges to indicate that 'player101' served 'team204' from 1999 to 2018, and 'player102' served 'team203' from 2006 to 2015.",
        "查询": "INSERT EDGE serve(start_year, end_year) VALUES \"player101\" -> \"team204\":(1999, 2018),\"player102\" -> \"team203\":(2006, 2015)"
    },
    {
        "用户": "找出 'Tony Parker' 所喜欢的所有实体，并返回这些实体的 ID。",
        "查询": "GO FROM \"Tony Parker\" OVER like YIELD like._dst"
    },
    {
        "用户": "将'player667'与'team200'之间的边关系'serve'更新为结束年份为2022，并返回起始年份和结束年份。",
        "查询": "UPSERT EDGE on serve\n\"player667\" -> \"team200\"@0\nSET end_year = 2022\nYIELD start_year, end_year"
    },
    {
        "用户": "Find all the entities that 'Paul George' likes' and return their IDs.",
        "查询": "GO FROM \"Paul George\" OVER like YIELD like._dst"
    },
    {
        "用户": "找出所有名字中包含Pa的球员，并返回他们的名字和年龄。",
        "查询": "MATCH (v:player)\nWHERE v.player.name CONTAINS \"Pa\"\nRETURN v.player.name, v.player.age"
    },
    {
        "用户": "如果边e1不存在的话，能否帮我创建一条e1的边，并且设置边e1的属性p1为整数类型呢？",
        "查询": "CREATE EDGE IF NOT EXISTS e1(p1 int)"
    },
    {
        "用户": "If the name of the team label does not exceed 20 characters in length, can you help me create a name called team_ What about the label index of index?",
        "查询": "CREATE TAG INDEX IF NOT EXISTS team_index ON team(name(20))"
    },
    {
        "用户": "Please help me start from 'player100', traverse any type of edge, perform 1 to 3 jumps, and return the name and age of the traversed entity. Each jump can automatically select two edges.",
        "查询": "GO 1 TO 3 STEPS FROM \"player100\"\nOVER *\nYIELD properties($$).name AS NAME, properties($$).age AS Age\nSAMPLE [2,2,2]"
    },
    {
        "用户": "查找球员Carmelo Anthony的年龄并返回。",
        "查询": "match (v:player) where id(v)==\"Carmelo Anthony\" return v.player.age;"
    },
    {
        "用户": "Display the character set.",
        "查询": "SHOW CHARSET"
    },
    {
        "用户": "Please help me find all the paths from 'player100' to 'team204' and return them.",
        "查询": "FIND ALL PATH FROM \"player100\" TO \"team204\" OVER * WHERE follow.degree is EMPTY or follow.degree >=0 YIELD path AS p"
    },
    {
        "用户": "返回除 'Paul Gasol' 外的所有实体的球员姓名。",
        "查询": "MATCH (v)\nWHERE id(v) != 'Paul Gasol'\nRETURN v.player.name AS Name"
    },
    {
        "用户": "获取 'Tony Parker' 喜欢 'Tim Duncan' 和 'Grant Hill' 喜欢 'Tracy McGrady' 的关系属性，并返回这些属性。",
        "查询": "FETCH PROP ON like \"Tony Parker\"->\"Tim Duncan\", \"Grant Hill\" -> \"Tracy McGrady\" YIELD edge as e |\nYIELD properties($-.e)"
    },
    {
        "用户": "Obtain the edge with a weight of 1 between 'player100' and 'team204', and return the alias of the edge as e.",
        "查询": "FETCH PROP ON serve \"player100\" -> \"team204\"@1 YIELD edge AS e"
    },
    {
        "用户": "请问您能帮我找出与 'Tony Parker' 相关联的所有实体吗？并且能否将这些实体的 ID 返回给我，去除重复后输出。",
        "查询": "MATCH (a)--(b) WHERE id(b) == 'Tony Parker' RETURN DISTINCT id(a)\nUNION\nMATCH (a)--(b) WHERE id(b) == 'Tony Parker' RETURN DISTINCT id(a)"
    },
    {
        "用户": "请帮我将一个名为'n3'，年龄为14的实体插入到t2类型中。",
        "查询": "INSERT VERTEX t2 (name, age) VALUES \"11\":(\"n3\", 14)"
    },
    {
        "用户": "查找名为'Tim Duncan'的球员实体，并返回该实体的ID。",
        "查询": "LOOKUP ON player WHERE player.name == \"Tim Duncan\" YIELD id(vertex) as id"
    },
    {
        "用户": "Find the entity that 'LeBron James' likes and the entity that the entity likes, and return the names and relationship paths of these three entities.",
        "查询": "MATCH p = (n)-[:like]->(m)-[:like]->(k)\nWHERE id(n) == \"LeBron James\"\nRETURN p, n.player.name, m.player.name, k.player.name"
    },
    {
        "用户": "Please help me find all 1-3 degree friends of a player named 'Tim Duncan' and return their information.",
        "查询": "MATCH p=(v:player{name:\"Tim Duncan\"})-[e:follow*1..3]->(v2)\nRETURN v2 AS Friends"
    },
    {
        "用户": "获取球员 'Tim Duncan' 的姓名和年龄。",
        "查询": "FETCH PROP ON player \"Tim Duncan\" YIELD player.name, player.age"
    },
    {
        "用户": "请帮我找出名为'Tim Duncan'的球员节点以及与之相关的所有节点，并将这些关系返回给我。",
        "查询": "MATCH p=(v:player{name:\"Tim Duncan\"})-->(v2)\nRETURN p"
    },
    {
        "用户": "请帮我提交任务，以平衡数据。",
        "查询": "SUBMIT JOB BALANCE DATA"
    },
    {
        "用户": "Obtain the name of the team 'Spurs'.",
        "查询": "FETCH PROP ON team \"Spurs\" YIELD team.name"
    },
    {
        "用户": "Insert two vertices, one with ID team203 and name Trail Blazers, and the other with ID team204 and name Spurs.",
        "查询": "INSERT VERTEX team(name) VALUES \"team203\":(\"Trail Blazers\"), \"team204\":(\"Spurs\")"
    },
    {
        "用户": "分别从 'Tim Duncan' 和 'Tony Parker' 出发，找出他们'效力'的所有实体，返回球员的名字，开始服务的年份，和所服务的队伍名字，最后返回所有结果",
        "查询": "$var = GO FROM \"Tim Duncan\" OVER serve YIELD $^.player.name, serve.start_year, $$.team.name\nUNION ALL\nGO FROM \"Tony Parker\" OVER serve YIELD $^.player.name, serve.start_year, $$.team.name;\nYIELD $var.*"
    },
    {
        "用户": "Please help me create a school entity with an ID of 'DUT' and a name of 'DUT', which was established on March 1, 1988 at 08:00:00.",
        "查询": "INSERT VERTEX school(name, found_time) VALUES \"DUT\":(\"DUT\", timestamp(\"1988-03-01T08:00:00\"))"
    },
    {
        "用户": "更新'serve'边上权重为0，且为'player666'到'team200'的关系，当'end_year'的值等于2010时，将'end_year'的值设为2021，返回'start_year'和'end_year'。",
        "查询": "UPSERT EDGE on serve\n\"player666\" -> \"team200\"@0\nSET end_year = 2021\nWHEN end_year == 2010\nYIELD start_year, end_year"
    },
    {
        "用户": "请帮我找出从'team204'到'player100'的最短路径，并告诉我该路径的详细信息。",
        "查询": "FIND SHORTEST PATH WITH PROP FROM \"team204\" TO \"player100\" OVER * REVERSELY YIELD path AS p"
    },
    {
        "用户": "查找名为'Tracy McGrady'的球员所服务或喜欢最多距离为1的实体，并返回这些关系和实体。",
        "查询": "MATCH (:player{name:\"Tracy McGrady\"})-[e:serve|like*0..1]-(v)\nRETURN e, v"
    },
    {
        "用户": "请帮我删除所有与'Tim Duncan'有关的团队标签。",
        "查询": "GO FROM \"Tim Duncan\" OVER serve YIELD serve._dst as id | DELETE TAG team FROM $-.id"
    },
    {
        "用户": "Create a 'follow' edge between 'player101' and 'player100', with an attribute of 95.",
        "查询": "INSERT EDGE follow(degree) VALUES \"player101\" -> \"player100\":(95)"
    },
    {
        "用户": "统计列表中的元素数量，包括重复元素的数量和去重后的元素数量。",
        "查询": "WITH [NULL, 1, 1, 2, 2] As a UNWIND a AS b\nRETURN count(b), count(*), count(DISTINCT b)"
    },
    {
        "用户": "请找出名为'Tim Duncan'的球员所关联的所有实体，并按照实体的年龄降序排列，然后告诉我实体的姓名和年龄。",
        "查询": "MATCH (v:player{name:\"Tim Duncan\"}) --> (v2)\nRETURN v2.player.name AS Name, v2.player.age AS Age\nORDER BY Age DESC"
    },
    {
        "用户": "Find all entities in type t1 where col4 is' banana 'and col3 is greater than true, and return the IDs of these entities.",
        "查询": "LOOKUP ON t1 WHERE t1.col4 == \"banana\" AND t1.col3 > true YIELD id(vertex) as id"
    },
    {
        "用户": " 您好，请帮我查找一下名为'Tim Duncan'的球员所喜好程度为90的实体，距离在2到3之间的所有节点和边。",
        "查询": "MATCH (:player{name:\"Tim Duncan\"})-[e:like*2..3{likeness: 90}]-(v)\nRETURN e, v"
    },
    {
        "用户": "如果player标签不存在，则创建player标签，包含名称和年龄属性。",
        "查询": "CREATE TAG IF NOT EXISTS player(name string, age int)"
    },
    {
        "用户": "找出年龄在20到25岁之间的球员的姓名和年龄。",
        "查询": "MATCH (v:player)\nWHERE v.player.age IN range(20,25)\nRETURN v.player.name, v.player.age"
    },
    {
        "用户": "Identify entities that have a 'like' relationship with 'Dejounte Murray', return the names and ages of these entities, and sort them in descending age and ascending name order, with a maximum of 3 results returned.",
        "查询": "MATCH (v1) -[:like]-> (v)\nWHERE id(v1) == 'Dejounte Murray'\nRETURN v.player.name AS Name, v.player.age AS Age\nORDER BY Age DESC, Name ASC\nLIMIT 3"
    },
    {
        "用户": "Can you help me find the name and age of a player named 'Tony Parker'?",
        "查询": "LOOKUP ON player WHERE player.name == \"Tony Parker\"\nYIELD properties(vertex).name, properties(vertex).age"
    },
    {
        "用户": "查找球员Manu Ginobili的关系，返回他的年龄、关系的度数、关系的终点实体名字、性别、关系开始年份和终点实体的年龄，按名字排序并限制返回前三个结果。",
        "查询": "match (src_v:player{name:\"Manu Ginobili\"})-[e]-(dst_v)\n  return properties(src_v).age,properties(e).degree,properties(dst_v).name AS name,src_v.player.sex,e.start_year,dst_v.player.age\n  order by name limit 3;"
    },
    {
        "用户": "插入一个名为'Tony Parker'，年龄为 36 且id为'player101'的球员实体。",
        "查询": "INSERT VERTEX player(name, age) VALUES \"player101\":(\"Tony Parker\", 36)"
    },
    {
        "用户": "Find all entities in type t1 where col1 is greater than 'aaaaa' and return the IDs of these entities.",
        "查询": "LOOKUP ON t1 WHERE t1.col1 > \"aaaaa\" YIELD id(vertex) as id"
    },
    {
        "用户": "找出喜欢 'Dejounte Murray' 的所有实体，按年龄降序、姓名升序排序，跳过前三个结果，返回后三个实体的姓名和年龄。",
        "查询": "MATCH (v1) -[:like]-> (v)\nWHERE id(v1) == 'Dejounte Murray'\nRETURN v.player.name AS Name, v.player.age AS Age\nORDER BY Age DESC, Name ASC\nSKIP 3\nLIMIT 3"
    },
    {
        "用户": "Delete edge index edge_ 1_ Ttl_ Index_ Second_ Start_ Time.",
        "查询": "DROP EDGE INDEX edge_1_ttl_index_second_start_time"
    },
    {
        "用户": "Obtain student entities with alias' abc 'and return their IDs.",
        "查询": "LOOKUP ON student WHERE student.alias == \"abc\" YIELD id(vertex) as id"
    },
    {
        "用户": "返回一个空列表的最后一个元素作为a，返回一个空列表的第一个元素作为b。",
        "查询": "RETURN last(LIST[]) AS a, head(LIST[]) AS b"
    },
    {
        "用户": "请找出与'player102'通过'follow'关系相连的实体，并返回这些实体的边的目标节点。",
        "查询": "GO 2 STEPS FROM \"player102\" OVER follow YIELD dst(edge)"
    },
    {
        "用户": "查找 'Russell Westbrook' 所 '喜欢' 的所有实体，并返回这些实体。",
        "查询": "GO FROM \"Russell Westbrook\" OVER like YIELD like._dst"
    },
    {
        "用户": "Return all entities with a player named 'Tim Duncan' liking level of 95, and return the original node name.",
        "查询": "MATCH (v:player{name: 'Tim Duncan'})-[e:like{likeness: 95}]->() return v.player.name AS name"
    },
    {
        "用户": "Please help me obtain the entity type as any_ Shape, the geometric information of the entity with ID 103, and return it in text form.",
        "查询": "FETCH PROP ON any_shape \"103\" YIELD ST_ASText(any_shape.geo)"
    },
    {
        "用户": "Hello, please help me find entity e1 that meets the following conditions: e1. col1 is greater than or equal to 1 and e1. col5 is greater than or equal to '11:11:11:11', and return the source and target nodes of the edges related to it.",
        "查询": "LOOKUP ON e1 WHERE e1.col1 >= 1 AND e1.col5 >= time(\"11:11:11\") YIELD src(edge) as src, dst(edge) as dst"
    },
    {
        "用户": "Create a 'like' edge from 'Tom' to 'Conan' with an edge weight of 100.",
        "查询": "INSERT EDGE like(likeness) VALUES \"Tom\"->\"Conan\":(100)"
    },
    {
        "用户": "删除标签test。",
        "查询": "DROP TAG test"
    },
    {
        "用户": "找出从'team204'到'player100'的最短路径，并返回路径信息。",
        "查询": "FIND SHORTEST PATH WITH PROP FROM \"team204\" TO \"player100\" OVER * REVERSELY YIELD path AS p"
    },
    {
        "用户": "请找出名为'Tim Duncan'的球员节点以及与其相关的所有节点。",
        "查询": "MATCH p=(v:player{name:\"Tim Duncan\"})-->(v2)\nRETURN nodes(p)"
    },
    {
        "用户": "请帮我删除 'Tim Duncan' 和 'Tony Parker' 的 'player' 标签。",
        "查询": "DELETE TAG player FROM \"Tim Duncan\", \"Tony Parker\";"
    },
    {
        "用户": "Identify entities that have a 'like' relationship with 'LeBron James' and return the relationships and names between these entities.",
        "查询": "MATCH p = (n)-[:like]-(m)\nWHERE id(n) == \"LeBron James\"\nRETURN p, n.player.name, m.player.name"
    },
    {
        "用户": "请帮我找出所有以字母't'开头的球员的姓名和年龄。",
        "查询": "MATCH (v:player)\nWHERE v.player.name STARTS WITH \"t\"\nRETURN v.player.name, v.player.age"
    },
    {
        "用户": "嘿，你好！我需要从'Tim Duncan'的实体开始，沿着'serve'边走10000000000000步，然后告诉我所有'serve'边的终点实体的ID。你能帮我找一下吗？",
        "查询": "GO 10000000000000 STEPS FROM \"Tim Duncan\" OVER serve YIELD serve._dst;"
    },
    {
        "用户": "Find the start year of all matches played by a player named 'Tim Duncan' and return the average value.",
        "查询": "match (v0:player)-[e0]->(v1) where id(v0) == \"Tim Duncan\" unwind e0.start_year as a return avg(a)"
    },
    {
        "用户": " 嘿，你能帮我查一下2000年以后，'Tim Duncan'喜欢或者服务过的实体吗？距离要在2到3之间哦。",
        "查询": "MATCH (:player{name:\"Tim Duncan\"})-[e:serve|like*2..3{start_year: 2000}]-(v)\nRETURN e, v"
    },
    {
        "用户": "Please help me use space1 space.",
        "查询": "USE space1"
    },
    {
        "用户": "请找出所有名字中含有Pa的球员，并告诉我他们的名字和年龄。",
        "查询": "MATCH (v:player)\nWHERE v.player.name CONTAINS \"Pa\"\nRETURN v.player.name, v.player.age"
    },
    {
        "用户": "Hello, I would like to ask for your help in finding any entity from 'Tony Parker' or 'Yao Ming' to 'Manu Ginobili', 'Spurs', or' Lakes'. The shortest path can contain up to 5 steps. Can you return the path information to me?",
        "查询": "FIND SHORTEST PATH FROM \"Tony Parker\", \"Yao Ming\" TO \"Manu Ginobili\", \"Spurs\", \"Lakers\" OVER * UPTO 5 STEPS YIELD path as p"
    },
    {
        "用户": "Please help me find the entities connected by the player named 'Tim Duncan' and arrange them in descending order of age. Skip the first result and return the name and age of the second result.",
        "查询": "MATCH (v:player{name:\"Tim Duncan\"}) --> (v2)\nRETURN v2.player.name AS Name, v2.player.age AS Age\nORDER BY Age DESC SKIP 1 LIMIT 1"
    },
    {
        "用户": "Find a player named 'Manu Ginobili' and entities that have a two hop relationship with them. Return the gender, relationship strength, name, age, and relationship start year of these entities, sorted by relationship strength, name, and age, with a maximum of 5 records returned.",
        "查询": "match (src_v:player{name:\"Manu Ginobili\"})-[e*2]-(dst_v)\n  return properties(src_v).sex,properties(e[0]).degree as degree,properties(dst_v).name as name,src_v.player.age AS age, e[1].start_year,dst_v.player.age\n  order by degree, name, age limit 5;"
    },
    {
        "用户": "Find all associated entities of the 'player100' entity, where the name attribute of the entity is not empty, and return the edges of these entities leading to the destination.",
        "查询": "GO FROM \"player100\" OVER * WHERE properties($$).name IS NOT EMPTY YIELD dst(edge)"
    },
    {
        "用户": "请展示一下第一个分区的信息。",
        "查询": "SHOW PARTS 1"
    },
    {
        "用户": "您能帮我找到所有查询语句吗？",
        "查询": "SHOW QUERIES"
    },
    {
        "用户": "Please help me find any_ The geographical location of all entities in the shape and a textual representation of these geographical locations is returned.",
        "查询": "LOOKUP ON any_shape YIELD ST_ASText(any_shape.geo)"
    },
    {
        "用户": "Hello, please help me find a course node named 'English' and name it 'node', and then return its attribute information.",
        "查询": "FETCH PROP ON course \"English\" YIELD vertex as node"
    },
    {
        "用户": "De-duplicate the list [1,1,2,2,3,3] and sort it in ascending order, then return the sorted list.",
        "查询": "WITH [1,1,2,2,3,3] AS n\nUNWIND n AS r\nWITH DISTINCT r AS r\nORDER BY r\nRETURN collect(r)"
    },
    {
        "用户": "如果名字为'Joe'的球员存在，则将其年龄设置为30，并返回该球员的姓名和年龄。",
        "查询": "UPSERT VERTEX ON player \"player666\"\nSET age = 30\nWHEN name == \"Joe\"\nYIELD name AS Name, age AS Age"
    },
    {
        "用户": "得了白血病的治愈概率是多少？",
        "查询": "LOOKUP ON disease WHERE disease.name == \"白血病\" YIELD properties(vertex).cured_prob"
    },
    {
        "用户": "Hello, could you please help me find the shortest path from 'Tony Parker' and 'Yao Ming' to 'Manu Ginobili', 'Spurs', and' Lakes'? The relationship attributes on the path need to meet the requirements of 'teammate. start'_ Year 'is not empty or' like. likeness' is greater than 90, which can take up to 3 steps and return all nodes on the path.",
        "查询": "FIND SHORTEST PATH WITH PROP FROM \"Tony Parker\", \"Yao Ming\" TO \"Manu Ginobili\", \"Spurs\", \"Lakers\" OVER * BIDIRECT WHERE teammate.start_year is not EMPTY OR like.likeness > 90 UPTO 3 STEPS YIELD path as p |\nYIELD distinct nodes($-.p) as nodes"
    },
    {
        "用户": "您好，请帮我查找一下关于'Tim Duncan'的属性，并将实体作为节点返回，谢谢。",
        "查询": "FETCH PROP ON * 'Tim Duncan' YIELD vertex as node"
    },
    {
        "用户": "查找名为'Tim Duncan'的球员实体，并返回该实体的ID。",
        "查询": "LOOKUP ON player WHERE player.name == \"Tim Duncan\" YIELD id(vertex) as id"
    },
    {
        "用户": "Find all the entities that Chris Paul likes and return their IDs.",
        "查询": "GO FROM \"Chris Paul\" OVER like YIELD like._dst"
    },
    {
        "用户": "Update the edge 'serve' between 'player668' and 'team200', set the starting year to 2000, the ending year to the original year plus 1, and return the starting and ending years.",
        "查询": "UPSERT EDGE on serve\n\"player668\" -> \"team200\"@0\nSET start_year = 2000, end_year = end_year + 1\nYIELD start_year, end_year"
    },
    {
        "用户": "查找学号为1的学生，并返回该学生的ID和年龄。",
        "查询": "LOOKUP ON student WHERE student.number == 1 YIELD id(vertex) as name, student.age"
    },
    {
        "用户": "获取 'Tony Parker' 球员的姓名和年龄。",
        "查询": "FETCH PROP ON player \"Tony Parker\" YIELD player.name, player.age"
    },
    {
        "用户": "Starting from 'Tim Duncan', reverse search for paths that do not exceed 3 steps through the 'like' relationship until reaching 'Nobody' or 'Spur' and returning the path.",
        "查询": "FIND NOLOOP PATH FROM \"Tim Duncan\" TO \"Nobody\", \"Spur\" OVER like REVERSELY UPTO 3 STEPS YIELD path as p"
    },
    {
        "用户": "如果存在名为'David West'且年龄大于20的球员，将其姓名改为'David'，年龄增加11岁，并返回姓名和年龄。",
        "查询": "UPSERT VERTEX \"player111\" SET player.name = \"David\", player.age = $^.player.age + 11\nWHEN $^.player.name == \"David West\" AND $^.player.age > 20\nYIELD $^.player.name AS Name, $^.player.age AS Age"
    },
    {
        "用户": "Find a student with student ID 1 and return their ID and age.",
        "查询": "LOOKUP ON student WHERE student.number == 1 YIELD id(vertex) as name, student.age"
    },
    {
        "用户": "获取 'Tony Parker' 喜欢的 'Tim Duncan' 和 'Grant Hill' 喜欢的 'Tracy McGrady' 的关系属性，并返回这些关系的终止节点。",
        "查询": "FETCH PROP ON like \"Tony Parker\"->\"Tim Duncan\", \"Grant Hill\" -> \"Tracy McGrady\" YIELD edge as e |\nYIELD endNode($-.e) AS nodes"
    },
    {
        "用户": "Calculate the result of subtracting the negative number 1 from the number 1 and return it.",
        "查询": "YIELD 1- -1"
    },
    {
        "用户": "Hello, could you please help me find a two-step path starting from 'Tim Duncan' and extending outward along the 'serve' relationship, and then return the edge information that has passed?",
        "查询": "GO 2 STEPS FROM \"Tim Duncan\" OVER serve YIELD edge as e"
    },
    {
        "用户": "找出 'Tim Duncan' 喜欢的第一个 'Tony Parker' 实体。",
        "查询": "GO FROM \"Tim Duncan\" OVER like WHERE [like._dst == \"Tony Parker\"]  LIMIT [1];"
    },
    {
        "用户": "返回列表`list`[1, 2, 3]中是否包含数字3的判断结果。",
        "查询": "WITH [1, 2, 3] AS `list` RETURN 3 IN `list` AS r"
    },
    {
        "用户": "Find all entities connected to a player named 'Manu Ginobili', return their attributes such as gender, relationship strength, name, age, and sort them by relationship strength, name, and age, and return a maximum of 5 records.",
        "查询": "match (src_v:player{name:\"Manu Ginobili\"})-[e*2]-(dst_v)\n  return properties(src_v).sex,properties(e[0]).degree as degree,properties(dst_v).name as name,src_v.player.age AS age, e[1].start_year,dst_v.player.age\n  order by degree, name, age limit 5;"
    },
    {
        "用户": "找出'McGrady'的实体所喜欢的所有实体，并返回这些实体的ID。",
        "查询": "GO FROM \"Tracy McGrady\" OVER like YIELD like._dst"
    },
    {
        "用户": "If the name of the team label does not exceed 20 characters in length, create a name called team_ The label index of index.",
        "查询": "CREATE TAG INDEX IF NOT EXISTS team_index ON team(name(20))"
    },
    {
        "用户": "Returns the third element of the array [1, 2, 3].",
        "查询": "YIELD [1, 2, 3][2]"
    },
    {
        "用户": "寻找从 'Tim Duncan' 到 'Tony Parker' 或 'Spurs' 的最短路径，路径上经过喜欢或服务关系，最多经过3个步骤，并返回找到的路径信息。",
        "查询": "FIND SHORTEST PATH FROM \"Tim Duncan\" TO \"Tony Parker\", \"Spurs\" OVER like,serve UPTO 3 STEPS YIELD path as p"
    },
    {
        "用户": "找出t1类型中col4为‘banana’且col3大于true的所有实体，并返回这些实体的ID。",
        "查询": "LOOKUP ON t1 WHERE t1.col4 == \"banana\" AND t1.col3 > true YIELD id(vertex) as id"
    },
    {
        "用户": "请将值为1的person节点插入到属性p1为1的顶点中。",
        "查询": "INSERT VERTEX person(p1) VALUES \"1\":(1)"
    },
    {
        "用户": "返回球员名为James Harden、Jonathon Simmons、Klay Thompson、Dejounte Murray、Paul Gasol的实体的姓名。",
        "查询": "MATCH (v)\nWHERE id(v) IN ['James Harden', 'Jonathon Simmons', 'Klay Thompson', 'Dejounte Murray', 'Paul Gasol']\n      AND true\nRETURN v.player.name AS Name"
    },
    {
        "用户": "返回1加1的结果和一个介于1到5之间的随机数。",
        "查询": "RETURN 1+1, rand32(1, 5)"
    },
    {
        "用户": "Please help me create an edge representing the service relationship, including the start and end years.",
        "查询": "CREATE EDGE serve(start_year int, end_year int)"
    },
    {
        "用户": "找出从 'Tim Duncan' 开始，通过 '喜欢' 和 '服务' 关系，最多经过5个步骤到达的所有实体，并返回这些实体的路径。",
        "查询": "GO FROM \"Tim Duncan\" over * YIELD like._dst AS src, serve._src AS dst\n| FIND SHORTEST PATH FROM $-.src TO $-.dst OVER like UPTO 5 STEPS YIELD path as p"
    },
    {
        "用户": "Hello, could you please help me find the start and end years of Boris Diaw's employment with 'Spurs'?",
        "查询": "FETCH PROP ON serve \"Boris Diaw\"->\"Spurs\" YIELD serve.start_year, serve.start_year"
    },
    {
        "用户": "得了戊型病毒性肝炎应该做哪些检查？",
        "查询": "GO FROM \"戊型病毒性肝炎\" OVER need_check YIELD dst(edge);"
    },
    {
        "用户": "请帮我生成一个介于1到6之间的随机数。",
        "查询": "YIELD rand32(1, 6)"
    },
    {
        "用户": "找出与 'Tim Duncan' 有两到三跳 '喜欢' 关系且喜好程度为90的实体及关系。",
        "查询": "MATCH (n)-[e:like*2..3{likeness: 90}]-(v)\nWHERE id(n) == \"Tim Duncan\"\nRETURN e, v"
    },
    {
        "用户": "Returns the age and gender attributes of player Carmelo Anthony.",
        "查询": "match (v:player) where id(v)==\"Carmelo Anthony\" return properties(v).age,v.player.sex;"
    },
    {
        "用户": "Could you please help me find the shortest path connecting 'Tim Duncan' to 'LaMarcus Aldridge' through a liking relationship?",
        "查询": "FIND SHORTEST PATH FROM \"Tim Duncan\" TO \"LaMarcus Aldridge\" OVER like YIELD path as p"
    },
    {
        "用户": "Hello, please help me find the student with student ID 1. I need to know their ID and age.",
        "查询": "LOOKUP ON student WHERE student.number == 1 YIELD id(vertex) as name, student.age"
    },
    {
        "用户": "Identify entities that do not pay attention to 'player102' among the entities that 'player100' focuses on.",
        "查询": "GO FROM \"player100\" OVER follow YIELD dst(edge)\nMINUS\nGO FROM \"player102\" OVER follow YIELD dst(edge)"
    },
    {
        "用户": "Find the names and ages of all players ending with the letter 'r'.",
        "查询": "MATCH (v:player)\nWHERE v.player.name ENDS WITH \"r\"\nRETURN v.player.name, v.player.age"
    },
    {
        "用户": "获取 'Tony Parker' 喜欢的 'Tim Duncan' 和 'Grant Hill' 喜欢的 'Tracy McGrady' 的关系属性，并返回这些关系的起始节点。",
        "查询": "FETCH PROP ON like \"Tony Parker\"->\"Tim Duncan\", \"Grant Hill\" -> \"Tracy McGrady\" YIELD edge as e |\nYIELD startNode($-.e) AS nodes"
    },
    {
        "用户": "Find the entities that a player named 'Tracy McGrady' serves or likes with a maximum distance of 1, and return these relationships and entities.",
        "查询": "MATCH (:player{name:\"Tracy McGrady\"})-[e:serve|like*0..1]-(v)\nRETURN e, v"
    },
    {
        "用户": "您能帮我找到所有实体的信息吗？",
        "查询": "MATCH (v) RETURN v"
    },
    {
        "用户": "Obtain the attributes of an entity with entity type player or t1 and identification as player100, and return the vertex information of that entity.",
        "查询": "FETCH PROP ON player, t1 \"player100\" YIELD vertex AS v"
    },
    {
        "用户": "Please find all entities associated with a player named 'Tim Duncan' and arrange them in descending order of age, then skip the first two entities and return their names and ages.",
        "查询": "MATCH (v:player{name:\"Tim Duncan\"}) --> (v2)\nRETURN v2.player.name AS Name, v2.player.age AS Age\nORDER BY Age DESC SKIP 1+1"
    },
    {
        "用户": "请帮我找出名字为'Tim Duncan'的球员，或者年龄小于30且名字为'Yao Ming'的球员，或者名字既不是'Yao Ming'也不是'Tim Duncan'的实体，并告诉我这些球员的名字和年龄。",
        "查询": "MATCH (v:player)\nWHERE v.player.name == \"Tim Duncan\"\nXOR (v.player.age < 30 AND v.player.name == \"Yao Ming\")\nOR NOT (v.player.name == \"Yao Ming\" OR v.player.name == \"Tim Duncan\")\nRETURN v.player.name, v.player.age"
    },
    {
        "用户": "找出与实体 'Tim Duncan' 之间存在 2-3 跳 '喜欢' 关系的所有实体及关系。",
        "查询": "MATCH (n)-[e:like*2..3]->(v)\nWHERE id(n) == \"Tim Duncan\"\nRETURN e, v"
    },
    {
        "用户": "描述 test_comment_tag 标签的详细信息。",
        "查询": "DESC tag test_comment_tag;"
    },
    {
        "用户": "您好，请帮我找一下，以 'Tim Duncan' 为起点的子图，然后给我返回第一个结果好吗？",
        "查询": "$a = GET SUBGRAPH WITH PROP FROM 'Tim Duncan' | LIMIT 1"
    },
    {
        "用户": "请帮我提交紧凑型作业。",
        "查询": "SUBMIT JOB COMPACT"
    },
    {
        "用户": "Please help me obtain any with ID '103'_ The geographic information of the shape entity is returned.",
        "查询": "FETCH PROP ON any_shape \"103\" YIELD ST_ASText(any_shape.geo)"
    },
    {
        "用户": "Starting from entity 'player101', take up to 100 steps along the 'follow' edge to obtain all entities and edges (subgraphs) that have passed through.",
        "查询": "GET SUBGRAPH 100 STEPS FROM \"player101\" OUT follow YIELD VERTICES AS nodes, EDGES AS relationships"
    },
    {
        "用户": "删除顶点 't-e-t-04' 的 'ttl_expire_tag03' 标签。",
        "查询": "DELETE TAG ttl_expire_tag03 FROM \"t-e-t-04\";"
    },
    {
        "用户": "Identify all entities that can be reached through the 'like' relationship in up to three steps starting from 'Tim Duncan' and return their paths.",
        "查询": "$a = GO FROM \"Tim Duncan\" over * YIELD like._dst AS src, serve._src AS dst;\nFIND NOLOOP PATH FROM $a.src TO $a.dst OVER like UPTO 3 STEPS YIELD path as p"
    },
    {
        "用户": "Find all entities that Tony Parker likes, except for Danny Green, and return the names of these entities.",
        "查询": "GO FROM 'Tony Parker' OVER like\nWHERE like._dst NOT IN {'Danny Green'}\nYIELD $$.player.name"
    },
    {
        "用户": "Find all the entities that 'Paul George' likes and return their IDs.",
        "查询": "GO FROM \"Paul George\" OVER like YIELD like._dst"
    },
    {
        "用户": "返回数组 [1, 2, 3] 中下标为 2 的元素。",
        "查询": "YIELD [1, 2, 3][2]"
    },
    {
        "用户": "如果only_linestring标签不存在，能否帮我创建一个包含linestring类型地理信息的only_linestring标签呢？",
        "查询": "CREATE TAG IF NOT EXISTS only_linestring(geo geography(linestring))"
    },
    {
        "用户": "找出名为'Tim Duncan'的球员所关联的所有实体，并按照年龄降序排序，跳过第一个结果，返回年龄最大的实体的姓名和年龄。",
        "查询": "MATCH (v:player{name:\"Tim Duncan\"}) --> (v2)\nRETURN v2.player.name AS Name, v2.player.age AS Age\nORDER BY Age DESC SKIP 1 LIMIT 1"
    },
    {
        "用户": "请将变量read_only设置为true。",
        "查询": "SET VARIABLES read_only=true"
    },
    {
        "用户": "返回同时出现在列表[1,2]和[1,2,3,4]中的元素。",
        "查询": "UNWIND [1,2] AS a RETURN a\nINTERSECT\nUNWIND [1,2,3,4] AS a\nRETURN a"
    },
    {
        "用户": "Find a player entity named 'Tim Duncan' and return the ID of that entity.",
        "查询": "LOOKUP ON player WHERE player.name == \"Tim Duncan\" YIELD id(vertex) as id"
    },
    {
        "用户": "您好，请帮我查找一下t1类型中col4为‘banana’且col3为真的所有实体，并将它们的ID返回给我好吗？",
        "查询": "LOOKUP ON t1 WHERE t1.col4 == \"banana\" AND t1.col3 == true YIELD id(vertex) as id"
    },
    {
        "用户": "Calculate the number of relationships between a player named 'Tim Duncan' and other entities.",
        "查询": "MATCH (v:player{name:\"Tim Duncan\"}) -[e]- (v2)\nRETURN count(e)"
    },
    {
        "用户": "请按照球员的年龄降序和姓名升序排序，并返回所有球员的年龄和姓名。",
        "查询": "MATCH (v:player) RETURN v.player.age AS Age, v.player.name AS Name\nORDER BY Age DESC, Name ASC"
    },
    {
        "用户": "找出从 'Tim Duncan' 到 'Tony Parker' 或 'LaMarcus Aldridge' 的所有路径，路径上的关系为 '喜欢'，最多经过三步，并返回这些路径。",
        "查询": "FIND ALL PATH FROM \"Tim Duncan\" TO \"Tony Parker\", \"LaMarcus Aldridge\" OVER like UPTO 3 STEPS YIELD path as p"
    },
    {
        "用户": "找出名为'Tracy McGrady'的球员所'喜欢'的点赞程度为90的实体及其关系。",
        "查询": "MATCH (:player{name:\"Tracy McGrady\"})-[e:like*1{likeness: 90}]->(v)\nRETURN e, v"
    },
    {
        "用户": "Obtain the attributes of the 'Tony Parker' player, including name and age.",
        "查询": "$v1 = FETCH PROP ON player \"Tony Parker\"\nYIELD properties(Vertex) AS props, properties(Vertex).name AS name, properties(Vertex).age AS age"
    },
    {
        "用户": "Could you please help me delete the vertices' LeBron James', 'Dwyane Wade', 'Carmelo Anthony', and their related edges?",
        "查询": "DELETE VERTEX \"LeBron James\", \"Dwyane Wade\", \"Carmelo Anthony\" WITH EDGE;"
    },
    {
        "用户": "请帮我返回列表[1, 2, 3, 4, 5]中的第一个元素。",
        "查询": "RETURN list[1, 2, 3, 4, 5] [0..0] AS a"
    },
    {
        "用户": "Starting from 'Tim Duncan', go through the 'like' and 'effectiveness' relationships to obtain all entities and relationships within the two steps.",
        "查询": "GET SUBGRAPH WITH PROP 2 STEPS FROM 'Tim Duncan' IN like OUT serve YIELD vertices as nodes, edges as relationships"
    },
    {
        "用户": "获取所有学生中，其老师的名字大于'a'的学生，并返回这些学生的ID。",
        "查询": "LOOKUP ON student WHERE student.teacher > \"a\" YIELD id(vertex) as id"
    },
    {
        "用户": "Find the players followed by the player with ID player101 and sort them in descending order of number of followers, returning the names and number of followers of the players.",
        "查询": "MATCH (v1:player)-[:follow]-(v2:player)\nWHERE id(v1)== \"player101\"\nRETURN v2.player.name AS Name, count(*) as cnt ORDER BY cnt DESC"
    },
    {
        "用户": "Please help me obtain the name in the attributes of the player named 'player100'.",
        "查询": "FETCH PROP ON player \"player100\"\nYIELD properties(vertex).name"
    },
    {
        "用户": "重建名为player_index_1的标签索引。",
        "查询": "REBUILD TAG INDEX player_index_"
    },
    {
        "用户": "Find a player entity named 'Tim Duncan' and return the ID of that entity.",
        "查询": "LOOKUP ON player WHERE player.name == \"Tim Duncan\" YIELD id(vertex) as id"
    },
    {
        "用户": "您好，请帮我找出与'Tim Duncan'有关的实体和它们之间的关系的子图，以这些实体的ID为起点。谢谢！",
        "查询": "GO from 'Tim Duncan' OVER serve YIELD serve._src AS id |\nGET SUBGRAPH WITH PROP FROM $-.id\nYIELD vertices as nodes, edges as relationships"
    },
    {
        "用户": "您好，请帮我查找与 'Marco Belinelli' 有关系的所有实体，并将它们的信息返回给我。",
        "查询": "MATCH (v:player)-[e]-(v2)\nWHERE id(v)=='Marco Belinelli'\nRETURN v2"
    },
    {
        "用户": "得了肺癌不能吃什么食物？",
        "查询": "GO FROM \"肺癌\" OVER no_eat YIELD dst(edge);"
    },
    {
        "用户": "您好，请帮我找到满足以下条件的实体e1，即e1.col1大于等于1且e1.col5大于等于'11:11:11'，并返回与之相关的边的源节点和目标节点。",
        "查询": "LOOKUP ON e1 WHERE e1.col1 >= 1 AND e1.col5 >= time(\"11:11:11\") YIELD src(edge) as src, dst(edge) as dst"
    },
    {
        "用户": "查找与 'LeBron James' 有关系的实体，返回关系类型和实体名称，如果是球队则返回球队名称，如果是球员则返回球员名称。",
        "查询": "MATCH (v1) -[r]-> (v2)\nWHERE id(v1) == \"LeBron James\"\nRETURN type(r) AS Type, CASE WHEN v2.team.name IS NOT NULL THEN v2.team.name WHEN v2.player.name IS NOT NULL THEN v2.player.name END AS Name"
    },
    {
        "用户": "插入一个名为'Tim Duncan'，年龄为 42 的选手实体，并赋予其唯一标识'player100'。",
        "查询": "INSERT VERTEX player(name, age) VALUES \"player100\":(\"Tim Duncan\", 42)"
    },
    {
        "用户": "Find the shortest path from 'Yao Ming' to 'Tony Parker' or 'Tracy McGrady', which is connected through a 'like' and 'service' relationship. Go through a maximum of 5 steps and return path information.",
        "查询": "FIND SHORTEST PATH FROM \"Yao Ming\"  TO \"Tony Parker\", \"Tracy McGrady\" OVER like,serve UPTO 5 STEPS YIELD path as p"
    },
    {
        "用户": "Returns the element with subscript 2 in array [1, 2, 3].",
        "查询": "YIELD [1, 2, 3][2]"
    },
    {
        "用户": "查询所有全文索引。",
        "查询": "SHOW FULLTEXT INDEXES;"
    },
    {
        "用户": "找出从 'Tim Duncan' 到 'Tony Parker' 或 'LaMarcus Aldridge' 的不重复路径，路径上的关系为 '喜欢'，最多包含3个步骤，并返回这些路径。",
        "查询": "FIND NOLOOP PATH FROM \"Tim Duncan\" TO \"Tony Parker\", \"LaMarcus Aldridge\" OVER like UPTO 3 STEPS YIELD path as p"
    },
    {
        "用户": "获取子图，从 'Tony Parker' 出发，经过 5 步 '队友' 关系和 '服务' 关系，找到所有 '喜欢' 关系的实体和边。",
        "查询": "GET SUBGRAPH WITH PROP 5 steps from 'Tony Parker' IN teammate OUT serve BOTH like YIELD VERTICES as nodes, EDGES as relationships"
    },
    {
        "用户": "请帮我查找名为'Tim Duncan'的球员的全部信息。",
        "查询": "MATCH (v:player{name:\"Tim Duncan\"}) RETURN v"
    },
    {
        "用户": "Please help me return the time of 12:31 minutes, 14 seconds, 111 milliseconds, 222 microseconds.",
        "查询": "WITH time({hour: 12, minute: 31, second: 14, millisecond:111, microsecond: 222}) AS d RETURN d"
    },
    {
        "用户": "Can you help me find the shortest path from 'Tiago Splitter' to 'LaMarcus Aldridge'?",
        "查询": "FIND SHORTEST PATH FROM \"Tiago Splitter\" TO \"LaMarcus Aldridge\" OVER * YIELD path as p"
    },
    {
        "用户": "找出名为 'Tim Duncan' 的球员所参与的所有比赛的开始年份，计算平均值并返回。",
        "查询": "match (v0:player)-[e0]->(v1) where id(v0) == \"Tim Duncan\" unwind e0.start_year as a return avg(a)"
    },
    {
        "用户": "查找满足条件 e1.col1 >= 1 和 e1.col3 > false 的所有实体 e1 的边，返回这些边的源节点和目标节点。",
        "查询": "LOOKUP ON e1 WHERE e1.col1 >= 1 AND e1.col3 > false YIELD src(edge) as src, dst(edge) as dst"
    },
    {
        "用户": "Please find the shortest path from 'team204' to 'player100' and return the path information.",
        "查询": "FIND SHORTEST PATH WITH PROP FROM \"team204\" TO \"player100\" OVER * REVERSELY YIELD path AS p"
    },
    {
        "用户": "Find all entities in type t1 where col1 is less than or equal to 2 and col8 is less than or equal to 'banana', and return the IDs of these entities.",
        "查询": "LOOKUP ON t1 WHERE t1.col1 <= 2 AND t1.col8 <= \"banana\" YIELD id(vertex) as id"
    },
    {
        "用户": "Can you please find the names and ages of players under the age of 25?",
        "查询": "MATCH (v:player)-[e]->(v2)\nWHERE v2.player.age < 25\nRETURN v2.player.name, v2.player.age"
    },
    {
        "用户": "Please help me return the first three numbers in the range of 1 to 5.",
        "查询": "RETURN range(1,5)[0..3]"
    },
    {
        "用户": "找出所有以字母't'开头的球员的姓名和年龄。",
        "查询": "MATCH (v:player)\nWHERE v.player.name STARTS WITH \"t\"\nRETURN v.player.name, v.player.age"
    },
    {
        "用户": "Please help me create a label called player.",
        "查询": "SHOW CREATE TAG player"
    },
    {
        "用户": "Please help me find the names and ages of all players starting with the letter't '.",
        "查询": "MATCH (v:player)\nWHERE v.player.name STARTS WITH \"t\"\nRETURN v.player.name, v.player.age"
    },
    {
        "用户": "找出名为'Tim Duncan'的球员所连接的所有实体，并返回这些实体。",
        "查询": "MATCH (v:player{name:\"Tim Duncan\"}) -[*0]-> (v2)\nRETURN v2"
    },
    {
        "用户": "展开列表[1,2,3]并返回每个元素。",
        "查询": "UNWIND [1,2,3] AS n RETURN n"
    },
    {
        "用户": "返回不重复的结果集，包括21+1），字符串'1+1'，整数3，字符串'2'和字符串'true'。",
        "查询": "RETURN DISTINCT 1+1, '1+1', (int)3.14, (string)(1+1), (string)true"
    },
    {
        "用户": "从实体'player101'出发，通过'serve'关系向外扩展1步，返回扩展得到的实体和关系。",
        "查询": "GET SUBGRAPH WITH PROP 1 STEPS FROM \"player101\" OUT serve YIELD VERTICES AS nodes, EDGES AS relationships"
    },
    {
        "用户": "找出名为'Tim Duncan'的球员的所有朋友的朋友，并返回这些朋友的姓名。",
        "查询": "MATCH p=(v:player{name:\"Tim Duncan\"})-[e:follow*2]->(v2)\nWHERE ALL(e_ in e WHERE e_.degree > 0)\nRETURN DISTINCT v2 AS Friends"
    },
    {
        "用户": "Please help me calculate the tangent value to be 0.5.",
        "查询": "RETURN tan(0.5)"
    },
    {
        "用户": "您好，请问您能帮我查找一下从 'Tim Duncan' 开始，沿着 'serve' 关系，向外经过1到10步的所有实体的 ID吗？",
        "查询": "GO 1 TO 10 STEPS FROM \"Tim Duncan\" OVER serve YIELD $$ as dst"
    },
    {
        "用户": "请帮我找出名为'Tim Duncan'的球员的所有相关实体，但要求实体不是球队类型，并返回这些路径信息。",
        "查询": "MATCH (v:player{name:\"Tim Duncan\"})-[e]->(t)\nWHERE NOT (v)-[e]->(t:team)\nRETURN (v)-->()"
    },
    {
        "用户": "Find the entity that 'LeBron James' likes and return the path of the entity pair, the player name of the starting entity, and the player name of the ending entity.",
        "查询": "MATCH p = (n)-[:like]->(m)\nWHERE id(n) == \"LeBron James\"\nRETURN p, n.player.name, m.player.name"
    },
    {
        "用户": "Find all friends of a player named 'Tim Duncan' and return the number of friends and the number of friends after deduplication.",
        "查询": "MATCH (n:player {name : \"Tim Duncan\"})-[]->(friend:player)-[]->(fof:player)\nRETURN count(fof), count(DISTINCT fof)"
    },
    {
        "用户": "Find the entity of player 'Tony Parker' and return the ID of that entity.",
        "查询": "LOOKUP ON player WHERE player.name == \"Tony Parker\" YIELD id(vertex) as id"
    },
    {
        "用户": "Please help me create a file called idx on label B_ B_ The index of 9, which contains attributes such as id, nickName, namex (1), and createDate.",
        "查询": "CREATE TAG INDEX idx_B_9 on B(id, nickName, namex(1), createDate);"
    },
    {
        "用户": "Find an entity with a distance of 1 to 3 served by a player named 'Yao Ming' and return the name of the starting entity.",
        "查询": "MATCH (v:player {name: \"Yao Ming\"})-[:serve*1..3]->() RETURN v.player.name"
    },
    {
        "用户": "创建一个名为ttl_tag06的标签，包含两个时间戳属性a和b，设置过期时间为3，过期属性为a。",
        "查询": "CREATE TAG ttl_tag06(a timestamp, b timestamp) ttl_duration=3,ttl_col=\"a\";"
    },
    {
        "用户": "Display character set information.",
        "查询": "SHOW CHARSET"
    },
    {
        "用户": "找出从 'Tim Duncan' 到 'Tony Parker'或'Spurs'，经过 '喜欢' 和 '服务' 关系的路径，最多包含3个步骤，并返回路径信息。",
        "查询": "FIND NOLOOP PATH FROM \"Tim Duncan\" TO \"Tony Parker\", \"Spurs\" OVER like,serve UPTO 3 STEPS YIELD path as p"
    },
    {
        "用户": "得了肺炎需要注意什么？",
        "查询": "LOOKUP ON disease WHERE disease.name == \"肺炎\" YIELD properties(vertex).prevent"
    },
    {
        "用户": "从 'Tim Duncan' 出发，沿着 '喜欢' 关系走三步，返回回结果限制为第一跳自动选择1条边，第二跳选择3条边，第三跳选择2条边",
        "查询": "GO 3 STEPS FROM \"Tim Duncan\" OVER like YIELD like._dst SAMPLE [1, 3, 2];"
    },
    {
        "用户": "Identify all entities that 'Russell Westbrook' serves' or 'likes' and return the types and attributes of these edges.",
        "查询": "GO FROM \"Russell Westbrook\" OVER serve, like  YIELD properties(edge) as props, type(edge) as type"
    },
    {
        "用户": "找出所有关注度超过90的'player100'的实体，并返回这些实体的边的目标节点。",
        "查询": "GO FROM \"player100\" OVER follow\nWHERE follow.degree > 90\nYIELD dst(edge)"
    },
    {
        "用户": "获取名为 'Tony Parker' 的球员的姓名和年龄属性。",
        "查询": "FETCH PROP ON player \"Tony Parker\" YIELD player.name, player.age"
    },
    {
        "用户": "Please help me return to the first three elements in the list.",
        "查询": "WITH list[1, 2, 3, 4, 5] AS a\nRETURN a[..3] AS r"
    },
    {
        "用户": "If there is no player tag, can you help me create one? The label should contain both name (string type, cannot be empty) and age (integer type) attributes.",
        "查询": "CREATE TAG IF NOT EXISTS player(name string NOT NULL, age int)"
    },
    {
        "用户": "Identify entities with a 'service' or 'like' relationship with 'Tim Duncan' and a relationship strength of 90, and return the relationships and IDs of these entities.",
        "查询": "MATCH (n)-[e:serve|like*2..3{likeness: 90}]->(v)\nWHERE id(n) == \"Tim Duncan\"\nRETURN e, v"
    },
    {
        "用户": "Returns a list containing three values, which are the absolute values of the current number of query results plus one, the number three, and the number two.",
        "查询": "YIELD COUNT(*)+1 ,1+2 ,(INT)abs(count(2))"
    },
    {
        "用户": "找出名为'Tim Duncan'的球员所关联的所有实体，并按照实体的年龄进行排序，返回实体的姓名和年龄。",
        "查询": "MATCH (v:player{name:\"Tim Duncan\"}) --> (v2)\nRETURN v2.player.name AS Name, v2.player.age AS Age\nORDER BY Age"
    },
    {
        "用户": "创建一条边，表示服务的开始年份和结束年份。",
        "查询": "CREATE EDGE serve(start_year int, end_year int)"
    },
    {
        "用户": "查找满足条件 e1.col1 >= 1 和 e1.col3 >= false 的实体 e1，返回与之相关的边的源节点和目标节点。",
        "查询": "LOOKUP ON e1 WHERE e1.col1 >= 1 AND e1.col3 >= false YIELD src(edge) as src, dst(edge) as dst"
    },
    {
        "用户": "If there is no tag t5, can you help me create a tag t5? This label contains three attributes: p1 is a non empty string type with a fixed length of 5, p2 is an integer type, and p3 is an optional integer type (default is empty).",
        "查询": "CREATE TAG IF NOT EXISTS t5(p1 fixed_string(5) NOT NULL, p2 int, p3 int DEFAULT NULL)"
    },
    {
        "用户": "返回1+1、字符串'1+1'、整数3、字符串'2'、字符串'true'的不重复结果。",
        "查询": "RETURN DISTINCT 1+1, '1+1', (int)3.14, (string)(1+1), (string)true"
    },
    {
        "用户": "找出'player100'所'关注'的所有实体，并返回这些实体所属的队伍和球员名称。",
        "查询": "GO FROM \"player100\" OVER follow\nYIELD dst(edge) AS id |\nGO FROM $-.id OVER serve\nYIELD properties($^).name AS Player, properties($$).name AS Team"
    },
    {
        "用户": "您好，请帮我查找一下从2005年开始，Boris Diaw为哪些团队效力过，并且告诉我Boris Diaw的姓名，起始年份，团队名还有123。",
        "查询": "$var = GO FROM \"Boris Diaw\" OVER serve YIELD $^.player.name as name, serve.start_year as start, $$.team.name as team;YIELD $var.*, 123 as hash WHERE $var.start > 2005"
    },
    {
        "用户": "查找从 'Tony Parker' 到 'Yao Ming' 之间的路径，路径上的属性需满足：队友关系的起始年份晚于2000年，或者喜欢关系的亲密度不为空且大于等于80。最多返回3步路径，并返回路径信息。",
        "查询": "FIND ALL PATH WITH PROP FROM \"Tony Parker\" TO \"Yao Ming\" OVER * BIDIRECT\nWHERE  teammate.start_year > 2000 OR (like.likeness is not EMPTY AND like.likeness >= 80) UPTO 3 STEPS YIELD path as p"
    },
    {
        "用户": "找出名为'Tim Duncan'的球员的所有1到3度好友，并返回这些好友的信息。",
        "查询": "MATCH p=(v:player{name:\"Tim Duncan\"})-[e:follow*1..3]->(v2)\nRETURN v2 AS Friends"
    },
    {
        "用户": "Identify entities that have a 'like' relationship with 'Tim Duncan' or 'Chris Paul', then identify the entities that these entities like, and return the names and IDs of these entities.",
        "查询": "GO FROM 'Tim Duncan', 'Chris Paul' OVER like YIELD $^.player.name AS name, dst(edge) AS id |\nGO FROM $-.id OVER like YIELD $-.name, dst(edge) as dst"
    },
    {
        "用户": "Returns whether the string 'apple' starts with 'app', starts with 'a', and starts with uppercase 'a'.",
        "查询": "RETURN'apple'STARTS WITH'app','apple'STARTS WITH'a','apple'STARTS WITH toUpper('a')"
    },
    {
        "用户": "Edge_ 1_ Change the expiration time of TTL to 100 and set the expiration policy to degree.",
        "查询": "ALTER edge edge_1_ttl ttl_duration = 100, ttl_col = \"degree\""
    },
    {
        "用户": "如果t1标签不存在，则创建一个具有p1字符串和p2整数属性的标签。",
        "查询": "CREATE TAG IF NOT EXISTS t1 (p1 string, p2 int)"
    },
    {
        "用户": "Hello, could you please help me find the shortest path from 'Tiago Splitter' to 'LaMarcus Aldridge', with a path length of less than 5, and return all entities and relationships on the path to me?",
        "查询": "MATCH p = shortestPath( (a:player{name:\"Tiago Splitter\"})-[e*..5]->(b:player{name:\"LaMarcus Aldridge\"}) ) RETURN  p"
    },
    {
        "用户": "Hello, could you please help me find the shortest path from 'Tony Parker' and 'Yao Ming' to 'Manu Ginobili', 'Spurs', and' Lakes', and return the path information to me?",
        "查询": "FIND SHORTEST PATH FROM \"Tony Parker\", \"Yao Ming\" TO \"Manu Ginobili\", \"Spurs\", \"Lakers\" OVER * REVERSELY YIELD path as p"
    },
    {
        "用户": "找出从'player100'开始，通过'follow'关系经过1到2跳所到达的所有实体，并返回这些实体的目的地。",
        "查询": "GO 1 TO 2 STEPS FROM \"player100\" OVER follow\nYIELD dst(edge) AS destination"
    },
    {
        "用户": "Obtain the name and age attributes of the 'Tony Parker' player.",
        "查询": "FETCH PROP ON player \"Tony Parker\" YIELD player.name, player.age"
    },
    {
        "用户": "Please help me find a player node named 'Tim Duncan' and all related nodes, and return these relationships to me.",
        "查询": "MATCH p=(v:player{name:\"Tim Duncan\"})-->(v2)\nRETURN p"
    },
    {
        "用户": "在t1标签的col1属性上新增一个长度为5的标签索引。",
        "查询": "CREATE TAG INDEX ti1 ON t1(col1(5));"
    },
    {
        "用户": "获取从'player100'到'team204'的serve关系，并返回该属性的边缘。",
        "查询": "FETCH PROP ON serve \"player100\" -> \"team204\" YIELD edge AS e"
    },
    {
        "用户": "Tom 喜欢 Conan，喜欢程度为 100。",
        "查询": "INSERT EDGE like(likeness) VALUES \"Tom\"->\"Conan\":(100)"
    },
    {
        "用户": "Identify the entities that Tim Duncan and Chris Paul, who are over 20 years old, like and return their IDs. Then, start from these entities and identify all relationships with a liking level greater than 80. Returns the target entity of these relationships.",
        "查询": "$var = GO FROM \"Tim Duncan\", \"Chris Paul\" OVER like WHERE properties($$).age > 20 YIELD id($$) as id;\nGO FROM $var.id OVER * WHERE properties(edge).likeness > 80 YIELD $$ as dst"
    },
    {
        "用户": "Hello, please help me identify the entities related to 'Tim Duncan' and the IDs of the target entities in the 'like' relationship.",
        "查询": "GO 2 STEPS FROM \"Tim Duncan\" OVER like YIELD like._dst AS dst | YIELD DISTINCT $-.dst AS dst"
    },
    {
        "用户": "Find a player entity named 'Tony Parker' and return its ID.",
        "查询": "LOOKUP ON player WHERE player.name == \"Tony Parker\" YIELD id(vertex) as id"
    },
    {
        "用户": "您好，请帮我查询一下关于'Tim Duncan'的所有属性，包括ID、键、标签和属性。",
        "查询": "FETCH PROP ON * 'Tim Duncan' YIELD id(vertex), keys(vertex) as keys, tags(vertex) as tags_, properties(vertex) as props"
    },
    {
        "用户": "从 'Tim Duncan' 出发，沿着 '喜欢' 关系向外扩展3步，返回结果限制为第1页，每页2个结果。",
        "查询": "GO 3 STEPS FROM \"Tim Duncan\" OVER like LIMIT [1, 2, 2];"
    },
    {
        "用户": "Find the entity of player 'Tim Duncan' and return the ID of that entity.",
        "查询": "LOOKUP ON player WHERE player.name == \"Tim Duncan\" YIELD id(vertex) as id"
    },
    {
        "用户": "如果边的结束年份为2010，则将边的结束年份更新为2022，并返回起始年份和结束年份。",
        "查询": "UPSERT EDGE on serve\n\"player666\" -> \"team200\"@0\nSET end_year = 2022\nWHEN end_year == 2010\nYIELD start_year, end_year"
    },
    {
        "用户": "您好，请帮我找出与'Tim Duncan'有关的实体和它们之间的关系的子图，以这些实体的ID为起点。谢谢！",
        "查询": "GO from 'Tim Duncan' OVER serve YIELD serve._src AS id |\nGET SUBGRAPH WITH PROP FROM $-.id\nYIELD vertices as nodes, edges as relationships"
    },
    {
        "用户": "查找名为'Tracy McGrady'的球员在2000年之后所效力过的球队，返回他们之间的关系及实体的相关信息。",
        "查询": "MATCH (:player{name:\"Tracy McGrady\"})-[e:serve*0..1{start_year: 2000}]-(v)\nRETURN e, v"
    },
    {
        "用户": "查找 'Tony Parker' 喜欢的 'Tim Duncan' 和 'Grant Hill' 喜欢的 'Tracy McGrady' 的关系及其终点节点信息。",
        "查询": "FETCH PROP ON like \"Tony Parker\"->\"Tim Duncan\", \"Grant Hill\" -> \"Tracy McGrady\" YIELD edge as relationship |\nYIELD endNode($-.relationship) AS node"
    },
    {
        "用户": "Hello, please help me identify all entities labeled as player and helper.",
        "查询": "MATCH (v:player:bachelor) RETURN v"
    },
    {
        "用户": "找出'player101'所'关注'的所有实体，并返回这些实体的源节点和目标节点。",
        "查询": "$var = GO FROM \"player101\" OVER follow\nYIELD src(edge) AS s, dst(edge) AS d"
    },
    {
        "用户": "Returns the edge attributes between 'Tim Duncan' liked by 'Tony Parker' and 'Tracy McGrady' liked by 'Grant Hill'.",
        "查询": "FETCH PROP ON like \"Tony Parker\"->\"Tim Duncan\", \"Grant Hill\" -> \"Tracy McGrady\" YIELD properties(edge) as properties"
    },
    {
        "用户": "展示所有空间。",
        "查询": "show spaces"
    },
    {
        "用户": "得了心脏病应该吃什么食物？",
        "查询": "GO FROM \"心脏病\" OVER recommend_eat YIELD dst(edge);"
    },
    {
        "用户": "Hey, can you help me find the player with 'Tim' in their name? Then let's see if there's any 'Tony Parker' among the people they like, and finally tell me the age of these players, okay?",
        "查询": "LOOKUP ON player\nWHERE player.name CONTAINS 'Tim'\nYIELD player.age as age, id(vertex) as vid |\nGO FROM $-.vid OVER like REVERSELY YIELD $-.age AS age, like._dst AS dst |\nYIELD\n  any(d IN COLLECT(DISTINCT $-.dst) WHERE d=='Tony Parker') AS d,\n  $-.age as age"
    },
    {
        "用户": "Please identify the entities that have a 'follow' relationship with 'player100' and tell me their IDs.",
        "查询": "MATCH (v)<-[e:follow]- (v2) WHERE id(v) =='player100'\nRETURN id(v2) AS destination"
    },
    {
        "用户": "Please insert a player named 'Tim Duncan' and aged 42 into the player vertex and assign them 'player100' as a unique identifier.",
        "查询": "INSERT VERTEX player(name, age) VALUES \"player100\":(\"Tim Duncan\", 42)"
    },
    {
        "用户": "请帮我删除名为 'Grant Hill' 的实体以及与之相关的所有边。",
        "查询": "DELETE VERTEX \"Grant Hill\" WITH EDGE"
    },
    {
        "用户": "找出与 'Tim Duncan' 有两到三跳 '喜欢' 关系，且喜欢程度为90的实体，返回这些关系和实体。",
        "查询": "MATCH (n)-[e:like*2..3{likeness: 90}]->(v)\nWHERE id(n) == \"Tim Duncan\"\nRETURN e, v"
    },
    {
        "用户": "Search for entities with a 2-3 hop 'like' relationship with player 'Manu Ginobili', return their gender, relationship strength, name, age, and relationship start year, and sort them by relationship strength, name, and age, with a maximum of 5 records returned.",
        "查询": "match (src_v:player{name:\"Manu Ginobili\"})-[e:like*2..3]-(dst_v)\n  return distinct properties(src_v).sex,properties(e[0]).degree as degree,properties(dst_v).name as name,src_v.player.age AS age, e[1].start_year,dst_v.player.age\n  order by degree, name, age limit 5;"
    },
    {
        "用户": "Expand the list [1,2,3,3] and remove duplicates, then sum and return the result.",
        "查询": "UNWIND [1,2,3,3] AS d RETURN sum(distinct d) AS sum"
    },
    {
        "用户": "找出'player100'关注的所有实体，并返回这些实体的边的目标实体。",
        "查询": "$var = GO FROM \"player100\" OVER follow\nYIELD dst(edge) AS dst"
    },
    {
        "用户": "您好，请帮我获取'Boris Diaw'实体的所有属性，并将该实体的节点返回。",
        "查询": "FETCH PROP ON player 'Boris Diaw' YIELD vertex as node"
    },
    {
        "用户": "获取'player100'、'player106'和'team200'的所有属性，并返回它们的顶点。",
        "查询": "FETCH PROP ON * \"player100\", \"player106\", \"team200\" YIELD vertex AS v"
    },
    {
        "用户": "Find the entity of player 'Tim Duncan' and return the ID of that entity.",
        "查询": "LOOKUP ON player WHERE player.name == \"Tim Duncan\" YIELD id(vertex) as id"
    },
    {
        "用户": "找出名为 'Tim Duncan' 的球员参与的所有比赛的开始年份，并返回平均值。",
        "查询": "match (v0:player)-[e0]->(v1) where id(v0) == \"Tim Duncan\" unwind e0.start_year as a return avg(a)"
    },
    {
        "用户": "找出 'Tim Duncan' 所 '喜欢' 的实体及其一度和二度关系，返回这些实体和关系的源节点、目标节点和边信息。",
        "查询": "GO FROM 'Tim Duncan' OVER like YIELD like._src as src, like._dst as dst |\nGO 1 TO 2 STEPS FROM $-.src OVER like YIELD $-.src as src, $-.dst, like._dst as dst, edge as e"
    },
    {
        "用户": "Hello, please help me identify all relationships with a starting year of 2016 and a weight of 1, and return a maximum of 1000 relationships.",
        "查询": "match ()-[e]->()\nwhere abs(rank(e)) == 1 and e.start_year == 2016\nRETURN e\nlimit 1000"
    },
    {
        "用户": "Please focus entity 'player101' on entity 'player100' and set the attention level to 95.",
        "查询": "INSERT EDGE follow(degree) VALUES \"player101\" -> \"player100\":(95)"
    },
    {
        "用户": "删除边索引 edge_1_ttl_index_second_degree。",
        "查询": "DROP EDGE INDEX edge_1_ttl_index_second_degree"
    },
    {
        "用户": "请帮我找出所有关注'player100'的实体，并将它们作为目的地。",
        "查询": "GO FROM \"player100\" OVER follow REVERSELY\nYIELD src(edge) AS destination"
    },
    {
        "用户": "找出 'Russell Westbrook' 所 '服务' 或 '喜欢' 的所有实体，并返回这些边的类型和属性。",
        "查询": "GO FROM \"Russell Westbrook\" OVER serve, like  YIELD properties(edge) as props, type(edge) as type"
    },
    {
        "用户": "请找出名为'Tim Duncan'的球员所关联的所有实体，并按照年龄降序排列，然后跳过前两个实体，最后返回实体的姓名和年龄。",
        "查询": "MATCH (v:player{name:\"Tim Duncan\"}) --> (v2)\nRETURN v2.player.name AS Name, v2.player.age AS Age\nORDER BY Age DESC SKIP 1+1"
    },
    {
        "用户": "Please help me insert two vertices, one with the team name 'Trail Blazers' and the other with the team name' Spurs'.",
        "查询": "INSERT VERTEX team(name) VALUES \"team203\":(\"Trail Blazers\"), \"team204\":(\"Spurs\")"
    },
    {
        "用户": "查找名为'Tim Duncan'的球员实体，并返回该实体的ID。",
        "查询": "LOOKUP ON player WHERE player.name == \"Tim Duncan\" YIELD id(vertex) as id"
    },
    {
        "用户": "请使用<your_graph_space>图空间帮助我。",
        "查询": "USE <your_graph_space>"
    },
    {
        "用户": "Please sort the players in descending order of age and ascending order of names, and return the ages and names of all players.",
        "查询": "MATCH (v:player) RETURN v.player.age AS Age, v.player.name AS Name\nORDER BY Age DESC, Name ASC"
    },
    {
        "用户": "Find all the entities that a player named 'Tim Duncan' is following and return them as his friends.",
        "查询": "MATCH p=(v:player{name:\"Tim Duncan\"})-[e:follow*]->(v2)\nRETURN v2 AS Friends"
    },
    {
        "用户": "Please help me find the names and ages of players aged between 20 and 25.",
        "查询": "MATCH (v:player)\nWHERE v.player.age IN range(20,25)\nRETURN v.player.name, v.player.age"
    },
    {
        "用户": "请帮我找出名为'Tim Duncan'的球员所属的团队名或所关联的球员姓名，并返回该名称。",
        "查询": "MATCH (v:player{name:\"Tim Duncan\"})--(v2)\nRETURN\nCASE WHEN v2.team.name IS NOT NULL\nTHEN v2.team.name\nWHEN v2.player.name IS NOT NULL\nTHEN v2.player.name END AS Name"
    },
    {
        "用户": "您好，请帮我创建一些标签和边，其中一些需要设置默认值。标签包括人物、学生、兴趣、学校，边包括同学和学习。",
        "查询": "CREATE TAG IF NOT EXISTS person(name string, age int);\nCREATE TAG IF NOT EXISTS personWithDefault(\n  name string DEFAULT \"\",\n  age int DEFAULT 18, isMarried bool DEFAULT false,\n  BMI double DEFAULT 18.5, department string DEFAULT \"engineering\",\n  birthday timestamp DEFAULT timestamp(\"2020-01-10T10:00:00\")\n);\nCREATE TAG IF NOT EXISTS student(grade string, number int);\nCREATE TAG IF NOT EXISTS studentWithDefault(grade string DEFAULT \"one\", number int);\nCREATE TAG IF NOT EXISTS employee(name int);\nCREATE TAG IF NOT EXISTS interest(name string);\nCREATE TAG IF NOT EXISTS school(name string, create_time timestamp);\nCREATE EDGE IF NOT EXISTS schoolmate(likeness int, nickname string);\nCREATE EDGE IF NOT EXISTS schoolmateWithDefault(likeness int DEFAULT 80);\nCREATE EDGE IF NOT EXISTS study(start_time timestamp, end_time timestamp);"
    },
    {
        "用户": "请问您能帮我查找一下'Tony Parker'和'Spurs'之间的'serve'属性的起始年份和结束年份吗？",
        "查询": "FETCH PROP ON serve \"Tony Parker\"->\"Spurs\" YIELD serve.start_year, serve.end_year"
    },
    {
        "用户": "Identify entities related to player 'Shaquille O'Neal', return the names, ages, and names of these entities, and sort them by name, only returning the first result.",
        "查询": "match (v1)-->(v2:player)-->(v3) where v2.player.name==\"Shaquille O'Neal\"\n  return properties(v1).name,properties(v2).age as age,properties(v3).name AS name\n  order by name limit 1;"
    },
    {
        "用户": "Find all service records for 'player666', 'player667', and 'player668', and return the start and end years of these records.",
        "查询": "GO FROM \"player666\", \"player667\", \"player668\"\nOVER serve\nYIELD properties(edge).start_year, properties(edge).end_year"
    },
    {
        "用户": "Please help me generate a list containing numbers 1 to 5 and assign the index range of the list from 0 to 10 to variable a.",
        "查询": "RETURN list[1, 2, 3, 4, 5] [0..10] AS a"
    },
    {
        "用户": "Returns the age of the oldest player among all players.",
        "查询": "MATCH (v:player) RETURN max(v.player.age)"
    },
    {
        "用户": "Hello, could you please help me find out, starting with 'Tim Duncan' and extending the 'like' relationship in two directions by four steps, and then returning all entities and relationships to me?",
        "查询": "GET SUBGRAPH 4 steps from 'Tim Duncan' BOTH like YIELD VERTICES as nodes, EDGES as relationships"
    },
    {
        "用户": "请帮我使用图空间test。",
        "查询": "USE test"
    },
    {
        "用户": "修改标签t1的注释为'test1'。",
        "查询": "ALTER TAG t1 COMMENT ='test1'"
    },
    {
        "用户": "如果'player149'在2016年开始为'team219'服务，则将其结束年份增加1并更新，并返回开始年份和结束年份。",
        "查询": "UPSERT EDGE on serve\n\"player149\" -> \"team219\"\nSET end_year = end_year + 1\nWHEN start_year == 2016\nYIELD start_year, end_year"
    },
    {
        "用户": "请帮我找出名为'Tim Duncan'的球员所关联的所有实体，并按照实体的年龄进行排序，然后返回实体的姓名和年龄。",
        "查询": "MATCH (v:player{name:\"Tim Duncan\"}) --> (v2)\nRETURN v2.player.name AS Name, v2.player.age AS Age\nORDER BY Age"
    },
    {
        "用户": "统计与id为 'Tim Duncan' 的，有 '喜欢' 关系的球员所在的球队数量。",
        "查询": "MATCH (v1)-[:like]->(v2:player)-[:serve]->(v3)\nWHERE id(v2) == 'Tim Duncan'\nRETURN COUNT(*)"
    },
    {
        "用户": "删除两个实体，id分别为'player111'和'team203'。",
        "查询": "DELETE VERTEX \"player111\", \"team203\""
    },
    {
        "用户": "Find the players whose names contain 'Tim', then find the people they like, and return their age, whether they like 'Tony Parker', and the IDs of the source and target nodes.",
        "查询": "$var = LOOKUP ON player\nWHERE player.name CONTAINS 'Tim'\nYIELD player.age AS age, id(vertex) AS vid;\nGO FROM $var.vid\nOVER like REVERSELY\nYIELD\n  $var.age AS age,\n  ('Tony Parker' == like._dst) AS liked,\n  like._src AS src,\n  like._dst AS dst"
    },
    {
        "用户": "Find all entities that the player named 'Tim Duncan' likes in the second or third jump, and return quantity statistics results.",
        "查询": "MATCH (:player{name: \"Tim Duncan\"})-[e:like*2..3]-(v)\nRETURN count(v)"
    },
    {
        "用户": "找出与 'Tim Duncan' 有 '喜欢' 关系，且关系强度为90，距离为2或3的所有实体及关系。",
        "查询": "MATCH (n)-[e:like*2..3{likeness: 90}]-(v)\nWHERE id(n) == \"Tim Duncan\"\nRETURN e, v"
    },
    {
        "用户": "查找 'Tony Parker' 喜欢的 'Tim Duncan' 和 'Grant Hill' 喜欢的 'Tracy McGrady' 的关系及其终点节点信息。",
        "查询": "FETCH PROP ON like \"Tony Parker\"->\"Tim Duncan\", \"Grant Hill\" -> \"Tracy McGrady\" YIELD edge as relationship |\nYIELD endNode($-.relationship) AS node"
    },
    {
        "用户": "找出名为'Tim Duncan'的球员的所有朋友的朋友，并返回朋友的朋友的数量和去重后的数量。",
        "查询": "MATCH (n:player {name : \"Tim Duncan\"})-[]->(friend:player)-[]->(fof:player)\nRETURN count(fof), count(DISTINCT fof)"
    },
    {
        "用户": "请判断'a'是否在 {a:1, b:2} 这个映射中，并返回结果a。",
        "查询": "RETURN \"a\" IN MAP{a:1, b:2} AS a"
    },
    {
        "用户": "Please help me return the trimmed string 'basketball player'.",
        "查询": "RETURN trim(\" basketball player \")"
    },
    {
        "用户": "您好，请帮我找一下与'Tim Duncan'有关的实体和关系，距离为2到3。",
        "查询": "MATCH (n)-[e:serve|like*2..3]->(v)\nWHERE id(n) == \"Tim Duncan\"\nRETURN e, v"
    },
    {
        "用户": "请问1+1等于2吗",
        "查询": "RETURN 1+1==2"
    },
    {
        "用户": "删减不存在的标签索引。",
        "查询": "DROP TAG INDEX IF EXISTS not_exists_tag_index"
    },
    {
        "用户": "查找 'James Harden' 所 '喜欢' 的所有实体，并且返回这些实体。",
        "查询": "GO FROM \"James Harden\" OVER like YIELD like._dst"
    },
    {
        "用户": "如果用户clear_space_user不存在，则新建该用户，并设置密码为'nebula'。",
        "查询": "CREATE USER IF NOT EXISTS clear_space_user WITH PASSWORD 'nebula';"
    },
    {
        "用户": "请问您能帮我找一下前三个人的姓名吗？",
        "查询": "MATCH (v)\nRETURN v.person.name LIMIT 3"
    },
    {
        "用户": "查找 'Tracy McGrady' 所 '喜欢' 的所有实体，返回这些实体的 ID。",
        "查询": "GO FROM \"Tracy McGrady\" OVER like YIELD like._dst"
    },
    {
        "用户": "Starting from entity 'player101' and following the 'follow' relationship, obtain subgraphs within 100 steps and return nodes and edges.",
        "查询": "GET SUBGRAPH 100 STEPS FROM \"player101\" OUT follow YIELD VERTICES AS nodes, EDGES AS relationships"
    },
    {
        "用户": "找出满足条件 e1.col1 <= 2 且 e1.col3 < true 的所有实体 e1 的源节点和目标节点。",
        "查询": "LOOKUP ON e1 WHERE e1.col1 <= 2 AND e1.col3 < true YIELD src(edge) as src, dst(edge) as dst"
    },
    {
        "用户": "Remove the attention relationship edge from 'player101' to 'team204'.",
        "查询": "DELETE EDGE follow \"player101\" -> \"team204\""
    },
    {
        "用户": "Hello, please help me identify all relationships with a starting year of 2016 and ranking 1, and return a maximum of 1000 relationships.",
        "查询": "match ()-[e]->()\nwhere abs(rank(e)) == 1 and e.start_year == 2016\nRETURN e\nlimit 1000"
    },
    {
        "用户": "Starting from 'player100', take 3 consecutive steps along all edges to return the names and ages of all endpoint entities. It is required that only 1 edge can be selected during the first jump, 2 edges can be selected during the second jump, and 3 edges can be selected during the third jump.",
        "查询": "GO 3 STEPS FROM \"player100\"\nOVER *\nYIELD properties($$).name AS NAME, properties($$).age AS Age\nSAMPLE [1,2,3]"
    },
    {
        "用户": "糖尿病的治愈概率是多少？",
        "查询": "FETCH PROP ON disease \"糖尿病\" YIELD properties(vertex).cured_prob as prob"
    },
    {
        "用户": "Obtain the relationship and endpoint information between 'Tim Duncan' liked by 'Tony Parker' and 'Tracy McGrady' liked by 'Grant Hill'.",
        "查询": "FETCH PROP ON like \"Tony Parker\"->\"Tim Duncan\", \"Grant Hill\" -> \"Tracy McGrady\" YIELD edge as relationship |\nYIELD endNode($-.relationship) AS node"
    },
    {
        "用户": "Please help me create a player entity named 'Tim Duncan', aged 42, and give him a unique identifier of 'player100'.",
        "查询": "INSERT VERTEX player(name, age) VALUES \"player100\":(\"Tim Duncan\", 42)"
    },
    {
        "用户": "If the test1 tag does not exist, create a test1 tag that contains parameters p1 (string type) and p2 (integer type).",
        "查询": "CREATE TAG IF NOT EXISTS test1(p1 string, p2 int)"
    },
    {
        "用户": "Obtain the name and age of the 'Tim Duncan' player.",
        "查询": "FETCH PROP ON player \"Tim Duncan\" YIELD player.name, player.age"
    },
    {
        "用户": "Please help me return the timestamp as 06:18:43 on January 5, 2022.",
        "查询": "RETURN timestamp(\"2022-01-05T06:18:43\")"
    },
    {
        "用户": "Find a player entity named 'Tony Parker' and return.",
        "查询": "MATCH (v:player{name:\"Tony Parker\"}) RETURN v"
    },
    {
        "用户": "找出 'Tim Duncan' 所 '喜欢' 或 '服务' 的实体，且这些实体的 '服务开始年份' 大于 1970 或 '年龄' 小于 50，返回这些实体的 ID 和边信息。",
        "查询": "GO FROM \"Tim Duncan\" OVER like, serve\n  WHERE serve.start_year > 1970 OR properties($$).age < 50\n  YIELD $$ AS dst, edge AS e"
    },
    {
        "用户": "Returns a result of 1+1.",
        "查询": "RETURN 1+1"
    },
    {
        "用户": "请问您能帮我查找一下'Boris Diaw'和'Spurs'之间的'serve'关系属性吗？我需要返回源节点、目标节点和关系权重。",
        "查询": "FETCH PROP ON serve 'Boris Diaw'->\"Spurs\" YIELD serve._src, serve._dst, serve._rank"
    },
    {
        "用户": "请问您能帮我找出从 'Tim Duncan' 到 'Tony Parker' 之间通过喜欢关系连接的最短路径吗？",
        "查询": "FIND SHORTEST PATH FROM \"Tim Duncan\" TO \"Tony Parker\" OVER like YIELD path as p"
    },
    {
        "用户": "请帮我找出从'player100'到'team204'的所有路径，并返回这些路径。",
        "查询": "FIND NOLOOP PATH FROM \"player100\" TO \"team204\" OVER * YIELD path AS p"
    },
    {
        "用户": "Please help me find any_ The geometric information of all entities in the shape is returned in text form.",
        "查询": "LOOKUP ON any_shape YIELD ST_ASText(any_shape.geo)"
    },
    {
        "用户": "Create a tag called TAG, which contains a string attribute named name.",
        "查询": "CREATE TAG TAG(name string)"
    },
    {
        "用户": "Find the paths between entities that have a 'like' or 'service' relationship with 'Tim Duncan', up to 3 steps, sorted by path length, and return to the top 5 paths.",
        "查询": "$a = GO FROM \"Tim Duncan\" over * YIELD like._dst AS src, serve._src AS dst;\nFIND ALL PATH FROM $a.src TO $a.dst OVER like UPTO 3 STEPS YIELD path as p |\nORDER BY $-.p | LIMIT 5"
    },
    {
        "用户": "Find all the entities that Boris Diaw likes and return their IDs.",
        "查询": "GO FROM \"Boris Diaw\" OVER like YIELD like._dst"
    },
    {
        "用户": "获取 'Tony Parker' 球员的属性，包括姓名和年龄。",
        "查询": "$v1 = FETCH PROP ON player \"Tony Parker\"\nYIELD properties(Vertex) AS props, properties(Vertex).name AS name, properties(Vertex).age AS age"
    },
    {
        "用户": "请您介绍一下篮球运动员的不同角色。",
        "查询": "SHOW ROLES in basketballplayer"
    },
    {
        "用户": "双向查找 'Tim Duncan' 所 '服务' 或 '喜欢' 的所有实体，并返回这些实体的去重后的 ID。",
        "查询": "GO FROM 'Tim Duncan' OVER serve, like bidirect YIELD distinct dst(edge) as dst"
    },
    {
        "用户": "找出名为LaMarcus Aldridge的球员的性别和年龄属性。",
        "查询": "match (v:player) where properties(v).name==\"LaMarcus Aldridge\" return v.player.sex,properties(v).age;"
    },
    {
        "用户": "Find all entities that a player named 'Tracy McGrady' likes, with a level of 90, and return these relationships and entities.",
        "查询": "MATCH (:player{name:\"Tracy McGrady\"})-[e:like*0..1{likeness: 90}]->(v)\nRETURN e, v"
    },
    {
        "用户": "Can you help me find all entities that have a 'service' relationship with 'Tim Duncan' and return their IDs?",
        "查询": "YIELD \"Tim Duncan\" as vid | GO FROM $-.vid OVER serve YIELD serve._dst"
    },
    {
        "用户": "请帮我返回一个变量 $var，其中包含了两个字段 f 和 t，分别对应值 1 和 3。",
        "查询": "$var = YIELD 1 AS f, 3 AS t"
    },
    {
        "用户": "Please help me return a variable $var, which contains two fields f and t, corresponding to values 1 and 3, respectively.",
        "查询": "$var = YIELD 1 AS f, 3 AS t"
    },
    {
        "用户": "Identify non repeating paths from 'Tim Duncan' to 'Tony Parker' or 'Manu Ginobili', with a relationship of 'like' and a maximum of 3 steps, and return these paths.",
        "查询": "FIND NOLOOP PATH FROM \"Tim Duncan\" TO \"Tony Parker\", \"Manu Ginobili\" OVER like UPTO 3 STEPS YIELD path as p"
    },
    {
        "用户": "获取 'Tony Parker' 喜欢的 'Tim Duncan' 和 'Grant Hill' 喜欢的 'Tracy McGrady' 的关系和终点信息。",
        "查询": "FETCH PROP ON like \"Tony Parker\"->\"Tim Duncan\", \"Grant Hill\" -> \"Tracy McGrady\" YIELD edge as relationship |\nYIELD endNode($-.relationship) AS node"
    },
    {
        "用户": "找出名为'Tim Duncan'的球员所喜欢的所有实体，距离2-3跳关系，返回数量统计结果。",
        "查询": "MATCH (:player{name: \"Tim Duncan\"})-[e:like*2..3]-(v)\nRETURN count(v)"
    },
    {
        "用户": "Can you help me identify all entities related to 'Tim Duncan' and provide their edge endpoint information?",
        "查询": "GO FROM 'Tim Duncan' OVER * YIELD dst(edge) as dst"
    },
    {
        "用户": "Obtain the relationship and endpoint information between 'Tim Duncan' liked by 'Tony Parker' and 'Tracy McGrady' liked by 'Grant Hill'.",
        "查询": "FETCH PROP ON like \"Tony Parker\"->\"Tim Duncan\", \"Grant Hill\" -> \"Tracy McGrady\" YIELD edge as relationship |\nYIELD endNode($-.relationship) AS node"
    },
    {
        "用户": "Find all entities that a player named 'Tim Duncan' is following or playing for, and return these entities.",
        "查询": "MATCH p=(v:player{name:\"Tim Duncan\"})-[e:follow|serve*2]->(v2)\nRETURN DISTINCT v2"
    },
    {
        "用户": "您好，请帮我查找一下'Tony Parker'在效力于'Spurs'期间的起始年份和结束年份，谢谢。",
        "查询": "FETCH PROP ON serve \"Tony Parker\"->\"Spurs\" YIELD serve.start_year, serve.end_year"
    },
    {
        "用户": "Find the entities that 'Carmelo Anthony' and 'Dwyane Wade' like ', group them by entity name, count the quantity and total, and finally sort them in descending order by total and name, returning the first two results.",
        "查询": "GO FROM 'Carmelo Anthony', 'Dwyane Wade' OVER like\n   YIELD $$.player.name AS name\n   | GROUP BY $-.name\n     YIELD $-.name AS name,\n           SUM(1.5) AS sum,\n           COUNT(*) AS count\n      | ORDER BY $-.sum, $-.name  DESC\n      | LIMIT 2"
    },
    {
        "用户": "Please identify all entities that start with 'player100' and have a 'follow' relationship, and have a degree greater than 90 in the attributes of the edge, or have an age not equal to 33 and a name not equal to 'Tony Parker' in the endpoint entity, and return the attributes of these entities.",
        "查询": "GO FROM \"player100\"\nOVER follow\nWHERE properties(edge).degree > 90\nOR properties($$).age != 33\nAND properties($$).name != \"Tony Parker\"\nYIELD properties($$)"
    },
    {
        "用户": "找出所有属性值为90的关系，并返回这些关系。",
        "查询": "MATCH ()-[e]->()\nWITH e, properties(e) as props, keys(properties(e)) as kk\nLIMIT 10000 WHERE [i in kk where props[i] == 90]\nRETURN e"
    },
    {
        "用户": "获取 'Tony Parker' 喜欢的 'Tim Duncan' 和 'Grant Hill' 喜欢的 'Tracy McGrady' 的关系和终点信息。",
        "查询": "FETCH PROP ON like \"Tony Parker\"->\"Tim Duncan\", \"Grant Hill\" -> \"Tracy McGrady\" YIELD edge as relationship |\nYIELD endNode($-.relationship) AS node"
    },
    {
        "用户": "Create two 'like' edges, one connecting 'Tim Duncan' and 'Tim Parker' with a weight of 99, and the other connecting 'Tim Parker' and 'Tony Parker' with a liking level of 90.",
        "查询": "INSERT EDGE like(likeness) VALUES \"Tim Duncan\"->\"Tim Parker\":(99);\nINSERT EDGE like(likeness) VALUES \"Tim Parker\"->\"Tony Parker\":(90);"
    },
    {
        "用户": "找出名为'Tony Parker'的球员所关联的所有球员，得到球员的姓名和年龄。",
        "查询": "MATCH (v:player{name:\"Tony Parker\"})--(v2:player)\nRETURN v2.player.name, v2.player.age"
    },
    {
        "用户": "删减边索引edge_1_ttl_index_second_start_time。",
        "查询": "DROP EDGE INDEX edge_1_ttl_index_second_start_time"
    },
    {
        "用户": "Add two attributes to tag t1, one is p3 of integer type and the other is p4 of fixed string type with a length of 10.",
        "查询": "ALTER TAG t1 ADD (p3 int32, p4 fixed_string(10))"
    },
    {
        "用户": "Add a student node named Bob, which includes age, alias, name, and teacher information.",
        "查询": "INSERT VERTEX\n  student(age, alias, name, teacher)\nVALUES\n  \"Bob\" : (28, \"abc\", \"Bob\", \"Candy\")"
    },
    {
        "用户": "请问您能帮我获取'Boris Diaw'的所有属性吗？我想知道他的'player.name'和'player.age'。",
        "查询": "FETCH PROP ON * 'Boris Diaw', 'Boris Diaw' yield player.name, player.age"
    },
    {
        "用户": "请帮我找出'player100'所关注和服务的所有实体，并返回这些边的度和起始年份。",
        "查询": "GO FROM \"player100\" OVER follow, serve\nYIELD properties(edge).degree, properties(edge).start_year"
    },
    {
        "用户": "查找名为'LaMarcus Aldridge'的球员的年龄并返回。",
        "查询": "match (v:player{name:\"LaMarcus Aldridge\"}) return v.player.age;"
    },
    {
        "用户": "Find players aged 40 and return their names.",
        "查询": "LOOKUP ON player WHERE player.age == 40 YIELD id(vertex) as id |\nFETCH PROP ON player $-.id YIELD player.name"
    },
    {
        "用户": "Find all the entities that Tracy McGrady likes and return their IDs.",
        "查询": "GO FROM \"Tracy McGrady\" OVER like YIELD like._dst"
    },
    {
        "用户": "返回球员 Carmelo Anthony 的年龄和性别属性。",
        "查询": "match (v:player) where id(v)==\"Carmelo Anthony\" return properties(v).age,v.player.sex;"
    },
    {
        "用户": "Please help me find all the paths from 'player100' to 'team204' and return them.",
        "查询": "FIND NOLOOP PATH FROM \"player100\" TO \"team204\" OVER * YIELD path AS p"
    },
    {
        "用户": "Hey, hello! I want to start with 'Tim Duncan' and extend the 'serve' relationship outward by 100000000000 steps. Can you help me return the endpoint entities of all the edges I have passed through?",
        "查询": "GO 10000000000000 STEPS FROM \"Tim Duncan\" OVER serve YIELD dst(edge) as dst"
    },
    {
        "用户": "请找出与名为'Tim Duncan'的球员有两跳'follow'关系且第一跳关系度数大于98的球员，并将这些球员作为朋友返回给我。",
        "查询": "MATCH p=(v:player{name:\"Tim Duncan\"})-[e:follow*2]->(v2)\nWHERE e[0].degree > 98\nRETURN DISTINCT v2 AS Friends"
    },
    {
        "用户": "您好，请帮我查找一下'Zion Williamson'与'Spurs'之间的'serve.start_year'属性值，还有'Boris Diaw'与'Hawks'之间的'serve.start_year'属性值。",
        "查询": "FETCH PROP ON serve \"Zion Williamson\"->\"Spurs\", \"Boris Diaw\"->\"Hawks\" YIELD serve.start_year"
    },
    {
        "用户": "请帮我重建any_shape_geo_index索引。",
        "查询": "REBUILD TAG INDEX any_shape_geo_index"
    },
    {
        "用户": " 嘿，你能帮我查找一下名字里有'Tim'的球员吗？然后看看他们喜欢的人里有没有'Tony Parker'，最后告诉我这些球员的年龄好吗？",
        "查询": "LOOKUP ON player\nWHERE player.name CONTAINS 'Tim'\nYIELD player.age as age, id(vertex) as vid |\nGO FROM $-.vid OVER like REVERSELY YIELD $-.age AS age, like._dst AS dst |\nYIELD\n  any(d IN COLLECT(DISTINCT $-.dst) WHERE d=='Tony Parker') AS d,\n  $-.age as age"
    },
    {
        "用户": "请帮我将数字1、2、3放入一个列表中。",
        "查询": "RETURN list[1, 2, 3] AS a"
    },
    {
        "用户": "Find all the teams where Boris Diaw is located and return the starting name, starting service time, names of these teams, and team information.",
        "查询": "GO FROM \"Boris Diaw\" OVER serve YIELD $^.player.name as name, serve.start_year as start, $$.team.name as team | YIELD $-.team"
    },
    {
        "用户": "Hey, I want to start with 'Russell Westbrook' and go through 1-2 steps to find the IDs of all endpoint entities in 'serve' and 'like' relationships. Can you help me search for it?",
        "查询": "GO 1 TO 2 STEPS FROM 'Russell Westbrook' OVER * YIELD serve._dst, like._dst"
    },
    {
        "用户": "Obtain the properties of entity 'player100' and return these properties.",
        "查询": "FETCH PROP ON player \"player100\" YIELD properties(vertex)"
    },
    {
        "用户": "Find all the entities that 'Tim Duncan' and 'Tony Parker' like and return their relationships with them.",
        "查询": "YIELD {a:1, b:['Tim Duncan', 'Tony Parker'], c:'Tim Duncan'} AS a\n| YIELD $-.a.c AS b\n| UNWIND $-.b AS c\n| GO FROM $-.c OVER like YIELD edge AS e"
    },
    {
        "用户": "找出从 'Tiago Splitter' 到 'LaMarcus Aldridge' 的最短路径，路径上包括 '喜欢' 和 '队友' 关系，并返回路径信息。",
        "查询": "FIND SHORTEST PATH FROM \"Tiago Splitter\" TO \"LaMarcus Aldridge\" OVER like, teammate YIELD path as p"
    },
    {
        "用户": "Can you help me find all entities that have a 'service' relationship with 'Tim Duncan' and return their IDs?",
        "查询": "YIELD \"Tim Duncan\" as vid | GO FROM $-.vid OVER serve YIELD serve._dst"
    },
    {
        "用户": "如果不存在，则插入一条从 'Tom' 到 'Conan' 的 '喜欢' 边，边权值为 10。",
        "查询": "INSERT EDGE IF NOT EXISTS like(likeness) VALUES \"Tom\"->\"Conan\":(10)"
    },
    {
        "用户": "请帮我插入一个名为'player100'的球员，他的姓名是'Tim Duncan'，年龄是42岁。",
        "查询": "INSERT VERTEX player(name, age) VALUES \"player100\":(\"Tim Duncan\", 42)"
    },
    {
        "用户": "Please help me use the test graph space.",
        "查询": "USE test"
    },
    {
        "用户": "找出从'player100'到'team204'的所有路径，并返回这些路径。",
        "查询": "FIND NOLOOP PATH FROM \"player100\" TO \"team204\" OVER * YIELD path AS p"
    },
    {
        "用户": "返回球员 Carmelo Anthony 的年龄和性别属性。",
        "查询": "match (v:player) where id(v)==\"Carmelo Anthony\" return properties(v).age,v.player.sex;"
    },
    {
        "用户": "将边类型为work2的所有边的过期时间列ttl_col清空。",
        "查询": "ALTER EDGE work2 ttl_col = \"\";"
    },
    {
        "用户": "统计所有球员的年龄，并按照球员数量和年龄降序排列。",
        "查询": "MATCH (n:player)\nRETURN n.player.age as age, count(*) as number\nORDER BY number DESC, age DESC"
    },
    {
        "用户": "请帮我生成一个随机数。",
        "查询": "RETURN rand()"
    },
    {
        "用户": "Please help me use the graph space test.",
        "查询": "USE test"
    },
    {
        "用户": "Hello, please help me find a student entity with the alias' abc 'and give me their ID.",
        "查询": "LOOKUP ON student WHERE student.alias == \"abc\" YIELD id(vertex) as id"
    },
    {
        "用户": "Find entities e1 that meet the conditions e1. col1<=2 and e1. col3<=true, and return the source and target nodes of the edges of these entities.",
        "查询": "LOOKUP ON e1 WHERE e1.col1 <= 2 AND e1.col3 <= true YIELD src(edge) as src, dst(edge) as dst"
    },
    {
        "用户": "寻找从 'Yao Ming' 到 'Tony Parker' 或 'Tracy McGrady' 的最短路径，路径上包括 '喜欢' 和 '服务' 关系，最多经过5个步骤，并返回路径信息。",
        "查询": "FIND SHORTEST PATH FROM \"Yao Ming\"  TO \"Tony Parker\", \"Tracy McGrady\" OVER like,serve UPTO 5 STEPS YIELD path as p"
    },
    {
        "用户": "Please help me put the numbers 1, 2, and 3 in a list.",
        "查询": "RETURN list[1, 2, 3] AS a"
    },
    {
        "用户": "请帮我找出名为'Tim Duncan'的球员关联的团队或球员的名称，并返回给我。",
        "查询": "MATCH (v:player{name:\"Tim Duncan\"})--(v2)\nRETURN\nCASE WHEN v2.team.name IS NOT NULL\nTHEN v2.team.name\nWHEN v2.player.name IS NOT NULL\nTHEN v2.player.name END AS Name"
    },
    {
        "用户": "Please help me identify players with the name 'Tim Duncan', players under the age of 30 with the name 'Yao Ming', or entities with names that are neither 'Yao Ming' nor 'Tim Duncan', and tell me the names and ages of these players.",
        "查询": "MATCH (v:player)\nWHERE v.player.name == \"Tim Duncan\"\nXOR (v.player.age < 30 AND v.player.name == \"Yao Ming\")\nOR NOT (v.player.name == \"Yao Ming\" OR v.player.name == \"Tim Duncan\")\nRETURN v.player.name, v.player.age"
    },
    {
        "用户": "Obtain the relationship between 'player100' and 'team204', as well as the relationship between 'player133' and 'team202', and return the edges of these relationships.",
        "查询": "FETCH PROP ON serve \"player100\" -> \"team204\", \"player133\" -> \"team202\" YIELD edge AS e"
    },
    {
        "用户": "请在边e1上插入一条从实体1指向实体2的边，属性p1为10，权重为0。",
        "查询": "INSERT EDGE e1(p1) VALUES \"1\"->\"2\"@0:(10)"
    },
    {
        "用户": "得了初潮痛经的注意事项有哪些？",
        "查询": "LOOKUP ON disease WHERE disease.name == \"初潮痛经\" YIELD properties(vertex).prevent"
    },
    {
        "用户": "找出年龄大于等于35岁的'player101'所关注的所有实体，并返回这些实体的姓名和年龄。",
        "查询": "GO FROM \"player101\" OVER follow WHERE properties($$).age >= 35\nYIELD properties($$).name AS Teammate, properties($$).age AS Age"
    },
    {
        "用户": "Obtain the relationship properties of 'Tim Duncan' liked by 'Tony Parker' and 'Tracy McGrady' liked by 'Grant Hill', and return the termination nodes of these relationships.",
        "查询": "FETCH PROP ON like \"Tony Parker\"->\"Tim Duncan\", \"Grant Hill\" -> \"Tracy McGrady\" YIELD edge as e |\nYIELD endNode($-.e) AS nodes"
    },
    {
        "用户": "Please help me find the names and ages of all players who end with the letter 'r'.",
        "查询": "MATCH (v:player)\nWHERE v.player.name ENDS WITH \"r\"\nRETURN v.player.name, v.player.age"
    },
    {
        "用户": "Please help me create a school entity established on March 1, 1988 at 08:00:00, with its id and name both being 'DUT'.",
        "查询": "INSERT VERTEX school(name, found_time) VALUES \"DUT\":(\"DUT\", timestamp(\"1988-03-01T08:00:00\"))"
    },
    {
        "用户": "找出年龄为30的球员和他们所在的球队之间距离不超过5的最短路径，并返回该路径。",
        "查询": "MATCH p = shortestPath( (a:player{age:30})-[e*..5]->(b:team) )\n  WHERE length(p) == 1\n  RETURN p"
    },
    {
        "用户": "查找与名为'Tim Duncan'的球员有两到三跳服务或喜欢关系的实体，记录路径数量。",
        "查询": "MATCH (:player{name:\"Tim Duncan\"})-[e:serve|like*2..3]-(v)\nRETURN COUNT(e)"
    },
    {
        "用户": "Insert a player entity named 'Tony Parker' with an age of 36.",
        "查询": "INSERT VERTEX player(name, age) VALUES \"player101\":(\"Tony Parker\", 36)"
    },
    {
        "用户": "清空空间clear_space2的点和边信息（如果存在）。",
        "查询": "CLEAR SPACE IF EXISTS clear_space2;"
    },
    {
        "用户": "请帮我获取边'201'->'302'上的属性，返回该边的几何属性的文本表示。",
        "查询": "FETCH PROP ON any_shape_edge \"201\"->\"302\" YIELD ST_ASText(any_shape_edge.geo)"
    },
    {
        "用户": "请找出离实体'A'一步的所有实体，并将这些实体的源节点和目标节点返回给我。",
        "查询": "GO 1 STEPS FROM \"A\" OVER follow YIELD src(edge),dst(edge)"
    },
    {
        "用户": "插入一个名为 'A Loner'，年龄为 0 的球员节点，并删除该节点及其所有边。",
        "查询": "INSERT VERTEX player(name, age) VALUES \"A Loner\": (\"A Loner\", 0);\nDELETE VERTEX \"A Loner\" WITH EDGE;"
    },
    {
        "用户": "找出 'Tracy McGrady' 所 '喜欢' 的所有实体，并返回这些实体的 ID。",
        "查询": "GO FROM \"Tracy McGrady\" OVER like YIELD like._dst"
    },
    {
        "用户": "您好，请帮我查找与 'Tim Duncan' 有 '服务' 关系的所有实体，并将它们的 ID 返回给我。",
        "查询": "YIELD \"Tim Duncan\" as vid | GO FROM $-.vid OVER serve YIELD serve._dst"
    },
    {
        "用户": "Hello, please help me find all nodes and edges between 2 and 3 that a player named 'Tim Duncan' has a preference level of 90 for.",
        "查询": "MATCH (:player{name:\"Tim Duncan\"})-[e:like*2..3{likeness: 90}]-(v)\nRETURN e, v"
    },
    {
        "用户": "查找名为'Tracy McGrady'的球员所喜欢的距离为0到1的实体及其关系。",
        "查询": "MATCH (:player{name:\"Tracy McGrady\"})-[e:like*0..1]-(v)\nRETURN e, v"
    },
    {
        "用户": "获取类型为player或t1的'player100'和'player103'的所有属性，并返回它们的顶点。",
        "查询": "FETCH PROP ON player, t1 \"player100\", \"player103\" YIELD vertex AS v"
    },
    {
        "用户": "找出名为Tim Duncan的球员所喜欢的点赞程度为90的实体，距离为2到3个关系，并返回这些关系和实体。",
        "查询": "MATCH (:player{name:\"Tim Duncan\"})-[e:like*2..3{likeness: 90}]->(v)\nRETURN e, v"
    },
    {
        "用户": "Find all the entities that Boris Diaw likes and return their IDs.",
        "查询": "GO FROM \"Boris Diaw\" OVER like YIELD like._dst"
    },
    {
        "用户": "返回 'Tony Parker' 喜欢 'Tim Duncan' 且 'Grant Hill' 喜欢 'Tracy McGrady' 的关系属性。",
        "查询": "FETCH PROP ON like \"Tony Parker\"->\"Tim Duncan\", \"Grant Hill\" -> \"Tracy McGrady\" YIELD edge as e |\nYIELD properties($-.e)"
    },
    {
        "用户": "Obtain the 'serve' relationship attribute between 'player100' and 'team204'.",
        "查询": "FETCH PROP ON serve \"player100\" -> \"team204\" YIELD properties(edge)"
    },
    {
        "用户": "Tom likes Conan to a degree of 100.",
        "查询": "INSERT EDGE like(likeness) VALUES \"Tom\"->\"Conan\":(100)"
    },
    {
        "用户": "您好，请帮我获取一下'Tim Duncan'的所有实体属性，并将实体作为节点返回好吗？",
        "查询": "FETCH PROP ON * 'Tim Duncan' YIELD vertex as node"
    },
    {
        "用户": "Please help me insert a player entity named 'Kobe' and set its ID to 'Kobe'.",
        "查询": "INSERT VERTEX player(name) VALUES \"Kobe\":(\"Kobe\")"
    },
    {
        "用户": "找出'player101'关注的所有实体，并返回这些实体的关注度。",
        "查询": "GO FROM \"player101\" OVER follow\nYIELD src(edge) AS s, dst(edge) AS d\n| FETCH PROP ON follow $-.s -> $-.d\nYIELD properties(edge).degree"
    },
    {
        "用户": "May I ask if you could help me find the students whose teacher names have a smaller dictionary order than 'a'? I need their IDs.",
        "查询": "LOOKUP ON student WHERE student.teacher < \"a\" YIELD id(vertex) as id"
    },
    {
        "用户": "请帮我返回列表中前三个元素。",
        "查询": "WITH list[1, 2, 3, 4, 5] AS a\nRETURN a[..3] AS r"
    },
    {
        "用户": "您好，请帮我找一下这些实体和节点之间的关系，它们是 'Tony Parker'、'Tim Duncan' 和 'Yao Ming' 这三个实体，节点类型是 'player'。谢谢！",
        "查询": "UNWIND [\"Tony Parker\", \"Tim Duncan\", \"Yao Ming\"] AS a MATCH (v:player) WHERE v.player.name == a RETURN distinct a, v"
    },
    {
        "用户": "Please help me return to the first three elements in the list.",
        "查询": "WITH list[1, 2, 3, 4, 5] AS a\nRETURN a[..3] AS r"
    },
    {
        "用户": "请帮我找出名为'Tim Duncan'的球员的所有为'follow'关系的1到3度好友，并返回这些好友及其数量。",
        "查询": "MATCH p=(v:player{name:\"Tim Duncan\"})-[e:follow*1..3]->(v2:player)\nRETURN DISTINCT v2 AS Friends, count(v2)"
    },
    {
        "用户": "请插入一个名为'Kobe'的球员实体，其中属性'name'为'Kobe'，'age'为null。",
        "查询": "INSERT VERTEX player(name, age) VALUES \"Kobe\":(\"Kobe\",null)"
    },
    {
        "用户": "Can you help me return the current date and time?",
        "查询": "RETURN datetime()"
    },
    {
        "用户": "Hello, please help me identify the entities related to 'Tim Duncan' and the subgraphs of their relationships, starting with the IDs of these entities. Thank you!",
        "查询": "GO from 'Tim Duncan' OVER serve YIELD serve._src AS id |\nGET SUBGRAPH WITH PROP FROM $-.id\nYIELD vertices as nodes, edges as relationships"
    },
    {
        "用户": "Search for entities related to 'LeBron James', return the relationship type and entity name. If it is a team, return the team name. If it is a player, return the player name.",
        "查询": "MATCH (v1) -[r]-> (v2)\nWHERE id(v1) == \"LeBron James\"\nRETURN type(r) AS Type, CASE WHEN v2.team.name IS NOT NULL THEN v2.team.name WHEN v2.player.name IS NOT NULL THEN v2.player.name END AS Name"
    },
    {
        "用户": "返回一些布尔值，分别表示'apple'是否以'app'结尾、以'e'结尾、以'E'结尾、以'b'结尾。",
        "查询": "RETURN'apple'ENDS WITH'app','apple'ENDS WITH'e','apple'ENDS WITH'E','apple'ENDS WITH'b'"
    },
    {
        "用户": "Obtain the relationship edge with a weight of 1 for 'player100' on 'team204' and return the edge.",
        "查询": "FETCH PROP ON serve \"player100\" -> \"team204\"@1 YIELD edge AS e"
    },
    {
        "用户": "找出 'Chris Paul' 所 '喜欢' 的所有实体，并返回这些实体的 ID。",
        "查询": "GO FROM \"Chris Paul\" OVER like YIELD like._dst"
    },
    {
        "用户": "获取从 'Tim Duncan' 出发，通过 '喜欢' 关系能够到达的所有实体，并返回这些实体的信息。",
        "查询": "GET SUBGRAPH FROM 'Tim Duncan' OUT like  YIELD vertices as v"
    },
    {
        "用户": "将player668的姓名修改为Amber，并将年龄增加1岁，返回修改后的姓名和年龄。",
        "查询": "UPSERT VERTEX ON player \"player668\"\nSET name = \"Amber\", age = age + 1\nYIELD name AS Name, age AS Age"
    },
    {
        "用户": "Hello, I would like to ask for your help in finding the shortest path from 'Tony Parker' and 'Yao Ming' to any entity in 'Manu Ginobili', 'Spurs', or' Lakes'. The shortest path can contain up to 5 steps. Can you return the path information to me?",
        "查询": "FIND SHORTEST PATH FROM \"Tony Parker\", \"Yao Ming\" TO \"Manu Ginobili\", \"Spurs\", \"Lakers\" OVER * UPTO 5 STEPS YIELD path as p"
    },
    {
        "用户": "Identify entities related to player 'Shaquille O'Neal', return the names, ages, and names of these entities, and sort them by name, only returning the first result.",
        "查询": "match (v1)-->(v2:player)-->(v3) where v2.player.name==\"Shaquille O'Neal\"\n  return properties(v1).name,properties(v2).age as age,properties(v3).name AS name\n  order by name limit 1;"
    },
    {
        "用户": "请帮我找出名为'Tim Duncan'的球员关注的所有实体，并将这些实体作为他的朋友返回。",
        "查询": "MATCH p=(v:player{name:\"Tim Duncan\"})-[e:follow*1..]->(v2)\nRETURN v2 AS Friends"
    },
    {
        "用户": "找出名为Tim Duncan的球员所喜欢的点赞程度为90的实体，距离为2到3个关系，并返回这些关系和实体。",
        "查询": "MATCH (:player{name:\"Tim Duncan\"})-[e:like*2..3{likeness: 90}]->(v)\nRETURN e, v"
    },
    {
        "用户": "请帮我找出年龄小于21岁的球员，然后告诉我他们的姓名和年龄。",
        "查询": "MATCH (v:player)\nWHERE v[toLower(\"AGE\")] < 21\nRETURN v.player.name, v.player.age"
    },
    {
        "用户": "Hello, I would like to ask for your help in finding the shortest path from 'Tony Parker' and 'Yao Ming' to any entity in 'Manu Ginobili', 'Spurs', or' Lakes'. The shortest path can contain up to 5 steps. Can you return the path information to me?",
        "查询": "FIND SHORTEST PATH FROM \"Tony Parker\", \"Yao Ming\" TO \"Manu Ginobili\", \"Spurs\", \"Lakers\" OVER * UPTO 5 STEPS YIELD path as p"
    },
    {
        "用户": "Obtain subgraphs, starting from 'Tony Parker', go through 5 steps of 'teammate' and 'service' relationships, and find all entities and edges of 'like' relationships.",
        "查询": "GET SUBGRAPH WITH PROP 5 steps from 'Tony Parker' IN teammate OUT serve BOTH like YIELD VERTICES as nodes, EDGES as relationships"
    },
    {
        "用户": "获取 'Tony Parker' 喜欢的 'Tim Duncan' 和 'Grant Hill' 喜欢的 'Tracy McGrady' 的关系属性，并返回这些关系的起始节点。",
        "查询": "FETCH PROP ON like \"Tony Parker\"->\"Tim Duncan\", \"Grant Hill\" -> \"Tracy McGrady\" YIELD edge as e |\nYIELD startNode($-.e) AS nodes"
    },
    {
        "用户": "请找出从'player101'开始，经过两步关系，关注度大于90且年龄大于30的所有实体和关系。",
        "查询": "GET SUBGRAPH WITH PROP 2 STEPS FROM \"player101\"\nWHERE follow.degree > 90 AND $$.player.age > 30\nYIELD VERTICES AS nodes, EDGES AS relationships"
    },
    {
        "用户": "Could you please help me check the start and end years of Boris Diaw's service at Hawks?",
        "查询": "FETCH PROP ON serve 'Boris Diaw' -> 'Hawks' YIELD serve.start_year, serve.end_year"
    },
    {
        "用户": "您好，请帮我查找一下与 'LeBron James' 有关的团队名称和关系类型，可以吗？",
        "查询": "MATCH (v1) -[r:serve]-> (v2)\nWHERE id(v1) == \"LeBron James\"\nRETURN type(r) AS Type, v2.team.name AS Name"
    },
    {
        "用户": "Identify all entities that 'Russell Westbrook' serves' or 'likes' and return the types and attributes of these edges.",
        "查询": "GO FROM \"Russell Westbrook\" OVER serve, like  YIELD properties(edge) as props, type(edge) as type"
    },
    {
        "用户": "Find the names of players aged 40, and then follow the reverse 'like' relationship, starting from these players and extending 1 to 2 steps outward, returning the ID, name, edges, starting and ending node information of each entity.",
        "查询": "LOOKUP ON player WHERE player.age == 40 YIELD player.name AS name |\nGO 1 TO 2 STEPS FROM $-.name OVER like REVERSELY YIELD like._dst AS dst, $$.player.name AS name, edge as e, $$ as dstnode, $^ as srcnode"
    },
    {
        "用户": "Please identify all players whose names do not end with 'R' and tell me their age.",
        "查询": "MATCH (v:player)\nWHERE NOT v.player.name ENDS WITH \"R\"\nRETURN v.player.name, v.player.age"
    },
    {
        "用户": "得了糖尿病推荐吃什么药？",
        "查询": "GO FROM \"糖尿病\" OVER recommend_drug YIELD dst(edge);"
    },
    {
        "用户": "Please help me find all the following relationships for a player named 'Tim Duncan' and return all his friends.",
        "查询": "MATCH p=(v:player{name:\"Tim Duncan\"})-[e:follow*1..]->(v2)\nRETURN v2 AS Friends"
    },
    {
        "用户": "If the label player does not exist, create a label called player, containing name and age attributes.",
        "查询": "CREATE TAG IF NOT EXISTS player(name string, age int)"
    },
    {
        "用户": "Please establish a 'follow' edge between 'player101' and 'player100', with an attribute of 95.",
        "查询": "INSERT EDGE follow(degree) VALUES \"player101\" -> \"player100\":(95)"
    },
    {
        "用户": "查看和高血压相关的所有信息？",
        "查询": "GET SUBGRAPH 1 STEPS FROM \"高血压\" YIELD VERTICES AS nodes, EDGES AS all_edges;"
    },
    {
        "用户": "找出所有 '喜欢' 'Grant Hill' 的实体，并返回这些实体与 'Grant Hill' 的关系中的目标实体 ID。",
        "查询": "GO FROM \"Grant Hill\" OVER like REVERSELY YIELD like._dst"
    },
    {
        "用户": "找出从 'Tim Duncan' 开始，通过 '喜欢' 关系最多经过三个节点到达 '服务' 关系的所有路径，并按路径长度排序，返回前五条路径。",
        "查询": "$a = GO FROM \"Tim Duncan\" over * YIELD like._dst AS src, serve._src AS dst;\nFIND ALL PATH FROM $a.src TO $a.dst OVER like UPTO 3 STEPS YIELD path as p |\nORDER BY $-.p | LIMIT 5"
    },
    {
        "用户": "Search for people with the name 'abc' and return their names.",
        "查询": "LOOKUP ON person WHERE person.name==\"abc\" YIELD person.name"
    },
    {
        "用户": "找出名为'Tim Duncan'的球员与其相关的所有实体，要求实体不为team类型，并返回这些路径信息。",
        "查询": "MATCH (v:player{name:\"Tim Duncan\"})-[e]->(t)\nWHERE NOT (v)-[e]->(t:team)\nRETURN (v)-->()"
    },
    {
        "用户": "Find all the entities that Tracy McGrady likes and return their IDs.",
        "查询": "GO FROM \"Tracy McGrady\" OVER like YIELD like._dst"
    },
    {
        "用户": "Find all associated entities with non empty names for the entity with id 'player100' and return the edges leading to these entities.",
        "查询": "GO FROM \"player100\" OVER * WHERE properties($$).name IS NOT EMPTY YIELD dst(edge)"
    },
    {
        "用户": "获取 'Tony Parker' 球员的姓名和年龄属性。",
        "查询": "FETCH PROP ON player \"Tony Parker\" YIELD player.name, player.age"
    },
    {
        "用户": "如果团队标签的名字长度不超过20个字符，能否帮我创建一个团队标签的索引呢？",
        "查询": "CREATE TAG INDEX IF NOT EXISTS team_index ON team(name(20))"
    },
    {
        "用户": "Hey, can you help me find a student with a name smaller than 'a'? I need their ID, name, and age.",
        "查询": "LOOKUP ON student WHERE student.name < \"a\" YIELD id(vertex) as id, student.name as name, student.age as age"
    },
    {
        "用户": "Please help me add an alias attribute with a default value of 'abc' to the label student.",
        "查询": "ALTER TAG student ADD (alias string default \"abc\")"
    },
    {
        "用户": "Obtain the 'serve' relationship attribute from 'player100' to 'team204' and return it.",
        "查询": "FETCH PROP ON serve \"player100\" -> \"team204\" YIELD properties(edge)"
    },
    {
        "用户": "找出与 'Rajon Rondo' 有 '喜欢' 或 '服务' 关系的实体，返回这些关系的属性信息和相关实体的姓名、性别等信息，限制返回结果数量为5。",
        "查询": "match (src_v)-[e:like|serve]->(dst_v)-[e2]-(dst_v2) where  id(src_v)==\"Rajon Rondo\" return properties(e).degree1,properties(e).degree1,e2.a,dst_v.p.name,dst_v.player.sex1,properties(src_v).name2 limit 5;"
    },
    {
        "用户": "如果person标签不存在，能否帮我创建一个person标签呢？",
        "查询": "CREATE TAG IF NOT EXISTS person(p1 int)"
    },
    {
        "用户": "Find the path from 'Tim Duncan' to 'Tony Parker', passing through 'likes' and' services', with a maximum distance of 3 hops, and return the path information.",
        "查询": "FIND NOLOOP PATH FROM \"Tim Duncan\" TO \"Tony Parker\", \"Spurs\" OVER like,serve UPTO 3 STEPS YIELD path as p"
    },
    {
        "用户": "找出从'player101'开始，经过两步关系，关注度大于90且年龄大于30的所有实体和关系。",
        "查询": "GET SUBGRAPH WITH PROP 2 STEPS FROM \"player101\"\nWHERE follow.degree > 90 AND $$.player.age > 30\nYIELD VERTICES AS nodes, EDGES AS relationships"
    },
    {
        "用户": "请帮我找出年龄小于25岁的球员的姓名和年龄。",
        "查询": "MATCH (v:player)-[e]->(v2)\nWHERE v2.player.age < 25\nRETURN v2.player.name, v2.player.age"
    },
    {
        "用户": "Find the entities that Tony Parker likes, but does not include entities with likes of 95, 56, or 21, and return the names and likes of these entities.",
        "查询": "GO FROM 'Tony Parker' OVER like\nWHERE like.likeness NOT IN {95,56,21}\nYIELD $$.player.name, like.likeness"
    },
    {
        "用户": "找出与 'LeBron James' 喜欢的实体，和该实体喜欢的实体，并返回这三个实体的名称和关系路径。",
        "查询": "MATCH p = (n)-[:like]->(m)-[:like]->(k)\nWHERE id(n) == \"LeBron James\"\nRETURN p, n.player.name, m.player.name, k.player.name"
    },
    {
        "用户": "高血压的症状有哪些？",
        "查询": "MATCH (n:disease)-[e:has_symptom]->(n1:symptom) WHERE n.disease.name=='高血压' return n1.symptom.name"
    },
    {
        "用户": "找出从 'Tim Duncan' 到 'Tony Parker' 的所有路径，路径上必须经过 '喜欢' 关系，最多经过3个步骤，并返回路径和路径上的关系。",
        "查询": "FIND ALL PATH WITH PROP FROM \"Tim Duncan\" TO \"Tony Parker\" OVER like UPTO 3 STEPS YIELD path as p |\nYIELD relationships($-.p) as relationships"
    },
    {
        "用户": "请帮我找出名为'Tim Duncan'的球员所服务的所有实体，并返回这些实体及其关系。",
        "查询": "MATCH (v:player{name:\"Tim Duncan\"})-[]->(v2)<-[e:serve]-(v3)\nRETURN v2, v3"
    },
    {
        "用户": "If the test space does not exist, can you help me create a space called test? The type of entity ID is a fixed length string with a length of 30.",
        "查询": "CREATE SPACE IF NOT EXISTS test (vid_type=FIXED_STRING(30))"
    },
    {
        "用户": "Hello, please help me find the entities and their relationship types related to 'LeBron James' and return the entity name or' abc '.",
        "查询": "MATCH (v1:player{name: \"LeBron James\"}) -[r]-> (v2)\nRETURN type(r) AS Type, CASE WHEN v2.tea.name IS NOT NULL THEN v2.tea.name WHEN v2.playe.name IS NOT NULL THEN v2.playe.name ELSE \"abc\" END AS Name"
    },
    {
        "用户": "Please help me return a list where the elements are the result of adding 10 to each number greater than 2 from 1 to 5.",
        "查询": "RETURN [n IN range(1,5) WHERE n > 2 | n + 10] AS a"
    },
    {
        "用户": "找出与球员'Shaquille O'Neal'有关系的实体，返回这些实体的姓名、年龄、性别和年龄，按年龄和姓名排序，只返回一条记录。",
        "查询": "match (v1)-->(v2:player)-->(v3) where v2.player.name==\"Shaquille O'Neal\"\n  return properties(v1).name,properties(v2).age as age,properties(v3).name AS name,v2.player.sex,v1.player.age\n  order by age, name limit 1;"
    },
    {
        "用户": "查找与 'Dwyane Wade' 通过两个 '喜欢' 关系相连的实体，返回这些实体的名称。",
        "查询": "MATCH (v1) -[:like]-> () -[:like]-> (v3)\nWHERE id(v1) == 'Dwyane Wade'\nRETURN v3.player.name AS Name"
    },
    {
        "用户": "请帮我登录到Drainer服务(192.168.10.106:9889)。",
        "查询": "SIGN IN DRAINER SERVICE(192.168.10.106:9889)"
    },
    {
        "用户": "Returns elements that appear simultaneously in lists [1,2] and [1,2,3,4].",
        "查询": "UNWIND [1,2] AS a RETURN a\nINTERSECT\nUNWIND [1,2,3,4] AS a\nRETURN a"
    },
    {
        "用户": "Please help me return the first four numbers in the range of 1 to 5.",
        "查询": "RETURN range(1,5)[0..3]"
    },
    {
        "用户": "在'player101'和'player100'之间建立一条'follow'边，边的属性为95。",
        "查询": "INSERT EDGE follow(degree) VALUES \"player101\" -> \"player100\":(95)"
    },
    {
        "用户": "获取'player100'实体的属性，并返回该实体的顶点信息。",
        "查询": "FETCH PROP ON player, t1 \"player100\" YIELD vertex AS v"
    },
    {
        "用户": "Hello, please help me identify all entities related to 'Tim Duncan' and provide their edge endpoints.",
        "查询": "GO FROM 'Tim Duncan' OVER * YIELD dst(edge) as dst"
    },
    {
        "用户": "您好，请问您能帮我找一下从 'Tiago Splitter' 到 'Tony Parker' 的最短路径吗？路径最多只能有一步哦，麻烦您帮我查一下并返回给我。",
        "查询": "FIND SHORTEST PATH FROM \"Tiago Splitter\" TO \"Tony Parker\" OVER * UPTO 1 STEPS YIELD path as p"
    },
    {
        "用户": "获取 'Tony Parker' 喜欢的 'Tim Duncan' 和 'Grant Hill' 喜欢的 'Tracy McGrady' 的关系属性，并返回这些关系的起始节点。",
        "查询": "FETCH PROP ON like \"Tony Parker\"->\"Tim Duncan\", \"Grant Hill\" -> \"Tracy McGrady\" YIELD edge as e |\nYIELD startNode($-.e) AS nodes"
    },
    {
        "用户": " 您好，请帮我查找一下与'Tim Duncan'相关的实体和该实体的子图，以这些实体的ID为起点，并返回节点和边的属性信息。",
        "查询": "GO from 'Tim Duncan' OVER serve YIELD serve._src AS id |\nGET SUBGRAPH WITH PROP FROM $-.id\nYIELD vertices as nodes, edges as relationships"
    },
    {
        "用户": "您好，请帮我找出所有起始年份为2016且排名为1的关系，最多返回1000条。",
        "查询": "match ()-[e]->()\nwhere abs(rank(e)) == 1 and e.start_year == 2016\nRETURN e\nlimit 1000"
    },
    {
        "用户": "查找名字为'Tim Duncan'的球员实体，并返回该实体的ID。",
        "查询": "LOOKUP ON player WHERE player.name == \"Tim Duncan\" YIELD id(vertex) as id"
    },
    {
        "用户": "Please help me return the third element in an array from 1 to 5.",
        "查询": "RETURN range(1,5)[3]"
    },
    {
        "用户": "If the edge does not exist, create a serve edge with start_ Year and end_ Year attribute.",
        "查询": "CREATE EDGE IF NOT EXISTS serve(start_year int, end_year int)"
    },
    {
        "用户": "请问字符串'apple'是否以'b'为开头，以及'apple'是否以'app'为开头。",
        "查询": "RETURN'apple'STARTS WITH'b','apple'NOT STARTS WITH'app'"
    },
    {
        "用户": "您能帮我返回当前时间的小时数吗？",
        "查询": "RETURN datetime().hour"
    },
    {
        "用户": "If there is no only_ Can we create a point label that contains geographic location information?",
        "查询": "CREATE TAG IF NOT EXISTS only_point(geo geography(point))"
    },
    {
        "用户": "请展示一下作业 <job_id> 的相关信息。",
        "查询": "SHOW JOB <job_id>"
    },
    {
        "用户": "找出与 'LeBron James' 有两跳 '喜欢' 关系的所有实体，并返回这些实体的所有属性。",
        "查询": "MATCH p = (n)-[:like]->()-[:like]->()\nWHERE id(n) == \"LeBron James\"\nRETURN *"
    },
    {
        "用户": "给标签t1添加一个名为p5的double类型属性，该属性默认值为0.4，不允许为空，并且有一个注释为'test2'。",
        "查询": "ALTER TAG t1 ADD (p5 double NOT NULL DEFAULT 0.4 COMMENT'p5') COMMENT='test2'"
    },
    {
        "用户": "Hello, please help me obtain the properties of 'Boris Diaw' and 'Tony Parker' and return their IDs to me.",
        "查询": "FETCH PROP ON player 'Boris Diaw', 'Tony Parker' YIELD vertex as node | YIELD id($-.node) as id"
    },
    {
        "用户": "您好，请帮我找出所有起始年份为2020且边重为1的关系，最多返回1000条。",
        "查询": "match ()-[e]->()\nwhere abs(rank(e)) == 1 and e.start_year == 2020\nRETURN e\nlimit 1000"
    },
    {
        "用户": "Can you help me find the IDs of all entities that have a 'service' relationship with 'Tim Duncan'?",
        "查询": "GO FROM 'Tim Duncan' OVER serve bidirect YIELD serve._dst"
    },
    {
        "用户": "请问您能帮我查找一下'Boris Diaw'这个实体的所有属性吗？我需要知道它的ID和年龄属性。",
        "查询": "FETCH PROP ON * 'Boris Diaw' YIELD id(vertex), player.age"
    },
    {
        "用户": "请问您能帮我找到别名为'abc'的学生实体ID吗？",
        "查询": "LOOKUP ON student WHERE student.alias == \"abc\" YIELD id(vertex) as id"
    },
    {
        "用户": "Please help me delete all team tags related to 'Tim Duncan'.",
        "查询": "GO FROM \"Tim Duncan\" OVER serve YIELD serve._dst as id | DELETE TAG team FROM $-.id"
    },
    {
        "用户": "如果player标签不存在，则创建一个包含名称和年龄属性的player标签。",
        "查询": "CREATE TAG IF NOT EXISTS player(name string, age int)"
    },
    {
        "用户": "请帮我获取从'player101'开始，通过'follow'关系的一步可达的所有实体和边。",
        "查询": "GET SUBGRAPH 1 STEPS FROM \"player101\" IN follow YIELD VERTICES AS nodes, EDGES AS relationships"
    },
    {
        "用户": "获取'player100'的属性，并返回该实体的属性信息。",
        "查询": "FETCH PROP ON player \"player100\" YIELD properties(vertex)"
    },
    {
        "用户": "请问您能帮我找一下所有师傅名字是'a'的学生吗？我需要他们的ID。",
        "查询": "LOOKUP ON student WHERE student.teacher == \"a\" YIELD id(vertex) as id"
    },
    {
        "用户": "找出所有 '喜欢' 'Tony Parker' 的实体，并返回这些实体与 'Tony Parker' 的关系中 '喜欢' 的实体的 ID。",
        "查询": "GO FROM \"Tony Parker\" OVER like REVERSELY YIELD like._dst"
    },
    {
        "用户": "找出与'player102'有关系的实体的ID、度和年龄，与'player100'有关系的实体的ID、度和年龄的交集。",
        "查询": "MATCH (v:player)-[e:follow]->(v2)\nWHERE id(v) == \"player102\"\nRETURN id(v2) As id, e.degree As Degree, v2.player.age AS Age\nINTERSECT\nMATCH (v:player)-[e:follow]->(v2)\nWHERE id(v) == \"player100\"\nRETURN id(v2) As id, e.degree As Degree, v2.player.age AS Age"
    },
    {
        "用户": "Find all the relationships served by a player named 'Ben Simmons' and return these relationships.",
        "查询": "MATCH (v:player{name:\"Ben Simmons\"})-[e:serve]-(v2)\nRETURN e"
    },
    {
        "用户": "请找出以'player100'为起点，通过'follow'关系所连接的实体，并返回这些实体的属性中的'Team'和'Player'。",
        "查询": "GO FROM \"player100\" OVER follow YIELD dst(edge) AS id |\nGO FROM $-.id OVER serve YIELD properties($$).name AS Team,\nproperties($^).name AS Player"
    },
    {
        "用户": "Describe the label player.",
        "查询": "DESCRIBE TAG player"
    },
    {
        "用户": "新增一个名为Bob的学生节点，包含年龄、别名、姓名和老师信息。",
        "查询": "INSERT VERTEX\n  student(age, alias, name, teacher)\nVALUES\n  \"Bob\" : (28, \"abc\", \"Bob\", \"Candy\")"
    },
    {
        "用户": "查找名为'abc'的球员所服务的1到3距离的所有实体，并返回它们的所有属性。",
        "查询": "MATCH (v:player{name: \"abc\"}) -[:serve*1..3]-> ()\nRETURN *"
    },
    {
        "用户": "Find the teams that a player named 'Tracy McGrady' has played for since 2000, and return information about their relationships and entities.",
        "查询": "MATCH (:player{name:\"Tracy McGrady\"})-[e:serve*0..1{start_year: 2000}]-(v)\nRETURN e, v"
    },
    {
        "用户": "Find the names of the top three players and merge the names of 'Tony Parker' and 'Ben Simmons' back together.",
        "查询": "MATCH (v:player)\nWITH v.player.name AS n\nRETURN n ORDER BY n LIMIT 3\nUNION\nUNWIND [\"Tony Parker\", \"Ben Simmons\"] AS n\nRETURN n"
    },
    {
        "用户": "Returns the result of 1 plus 1 and a random number between 1 and 5.",
        "查询": "RETURN 1+1, rand32(1, 5)"
    },
    {
        "用户": "请帮我返回一个从1到5的范围中的前4个数字。",
        "查询": "RETURN range(1,5)[0..3]"
    },
    {
        "用户": "返回2021-07-19T02:59:40的分钟数。",
        "查询": "RETURN datetime(\"2021-07-19T02:59:40\").mInutE AS minute"
    },
    {
        "用户": "Hello, please help me find the entity with ID 'Boris Diaw' and return it to me.",
        "查询": "MATCH (v) WHERE id(v) == 'Boris Diaw' RETURN (v)"
    },
    {
        "用户": "查找与 'LeBron James' 有关系的实体，返回关系类型和实体名称，如果是球队则返回球队名称，如果是球员则返回球员名称。",
        "查询": "MATCH (v1) -[r]-> (v2)\nWHERE id(v1) == \"LeBron James\"\nRETURN type(r) AS Type, CASE WHEN v2.team.name IS NOT NULL THEN v2.team.name WHEN v2.player.name IS NOT NULL THEN v2.player.name END AS Name"
    },
    {
        "用户": "您好，请帮我查找一下在2016年开始的排名为1的关系，最多返回1000条记录，可以吗？",
        "查询": "match ()-[e]->()\nwhere abs(rank(e)) == 1 and e.start_year == 2016\nRETURN e\nlimit 1000"
    },
    {
        "用户": "Hello, could you please help me find out the starting and ending years of 'Boris Diaw' in 'Hawks'?",
        "查询": "FETCH PROP ON serve 'Boris Diaw' -> 'Hawks' YIELD serve.start_year, serve.end_year"
    },
    {
        "用户": "Obtain the relationship properties of 'Tim Duncan' liked by 'Tony Parker' and 'Tracy McGrady' liked by 'Grant Hill', and return the termination nodes of these relationships.",
        "查询": "FETCH PROP ON like \"Tony Parker\"->\"Tim Duncan\", \"Grant Hill\" -> \"Tracy McGrady\" YIELD edge as e |\nYIELD endNode($-.e) AS nodes"
    },
    {
        "用户": "Find the entities connected through the 'follow' relationship starting from 'player100', and return the age of the starting entity (SrcAge) and the age of the connecting entity (DestAge).",
        "查询": "GO FROM \"player100\" OVER follow YIELD properties($^).age AS SrcAge, properties($$).age AS DestAge"
    },
    {
        "用户": "返回标签为ttl_expire_tag03的前10个实体。",
        "查询": "MATCH (v:ttl_expire_tag03) RETURN v LIMIT 10;"
    },
    {
        "用户": "I need to submit an assignment to help me download files under the specified path from HDFS.",
        "查询": "SUBMIT JOB DOWNLOAD HDFS \"hdfs://<hadoop_address>:<hadoop_port>/<sst_file_path>"
    },
    {
        "用户": "请帮我获取ID为'103'的any_shape实体的地理信息并返回。",
        "查询": "FETCH PROP ON any_shape \"103\" YIELD ST_ASText(any_shape.geo)"
    },
    {
        "用户": "If there is a player named 'David West' and older than 20, change their name to 'David', increase their age by 11 years, and return their name and age.",
        "查询": "UPSERT VERTEX \"player111\" SET player.name = \"David\", player.age = $^.player.age + 11\nWHEN $^.player.name == \"David West\" AND $^.player.age > 20\nYIELD $^.player.name AS Name, $^.player.age AS Age"
    },
    {
        "用户": "找出'player102'和'player100'所'关注'的所有实体，并返回这些实体的边的目标实体。",
        "查询": "GO FROM \"player102\" OVER follow YIELD dst(edge)\nUNION\nGO FROM \"player100\" OVER follow YIELD dst(edge)"
    },
    {
        "用户": "Find the player entity with ID 'Carmelo Anthony' and return its age attribute value.",
        "查询": "match (v:player) where id(v)==\"Carmelo Anthony\" return v.player.age;"
    },
    {
        "用户": "Create an edge, if it does not exist, with attributes including start and end years. The default end year is 2010.",
        "查询": "CREATE EDGE IF NOT EXISTS serve_with_default(start_year int, end_year int DEFAULT 2010)"
    },
    {
        "用户": "请帮我从'player100'出发，经过任意类型的边，进行1到3跳的遍历，并返回遍历到的实体的姓名和年龄。每跳都可以自动选择两条边。",
        "查询": "GO 1 TO 3 STEPS FROM \"player100\"\nOVER *\nYIELD properties($$).name AS NAME, properties($$).age AS Age\nSAMPLE [2,2,2]"
    },
    {
        "用户": "得了糖尿病推荐吃什么？",
        "查询": "MATCH (n:disease{name:'糖尿病'})-[e:recommend_eat]->(n1:food) return n1.food.name"
    },
    {
        "用户": "请帮我创建一个成立时间为1988年3月1日08:00:00的学校实体，它的id和名字都是'DUT'。",
        "查询": "INSERT VERTEX school(name, found_time) VALUES \"DUT\":(\"DUT\", timestamp(\"1988-03-01T08:00:00\"))"
    },
    {
        "用户": "Can you show me all the spaces?",
        "查询": "SHOW SPACES"
    },
    {
        "用户": "Could you please help me find the start and end years of the 'serve' relationship between 'Tony Parker' and 'Spurs'?",
        "查询": "FETCH PROP ON serve \"Tony Parker\"->\"Spurs\" YIELD serve.start_year, serve.end_year"
    },
    {
        "用户": "Please help me insert an edge with a geometric shape between entity 201 and entity 302. The geometric shape of this edge is a polygon composed of four points.",
        "查询": "INSERT EDGE any_shape_edge(geo) VALUES \"201\"->\"302\":(ST_GeogFromText(\"POLYGON((0 1, 1 2, 2 3, 0 1))\"))"
    },
    {
        "用户": "查找e1中col1小于'abcde'的所有实体，返回这些实体的源节点和目标节点。",
        "查询": "LOOKUP ON e1 WHERE e1.col1 < \"abcde\" YIELD src(edge) as src, dst(edge) as dst"
    },
    {
        "用户": "Find entities e1 that meet the conditions e1. col1>=1 and e1. col3>=false, and return the source and target nodes of the edges related to them.",
        "查询": "LOOKUP ON e1 WHERE e1.col1 >= 1 AND e1.col3 >= false YIELD src(edge) as src, dst(edge) as dst"
    },
    {
        "用户": "Find all paths from 'player100' to 'team204' and return these paths.",
        "查询": "FIND ALL PATH FROM \"player100\" TO \"team204\" OVER * WHERE follow.degree is EMPTY or follow.degree >=0 YIELD path AS p"
    },
    {
        "用户": "Find the first 'Tony Parker' entity that Tim Duncan likes.",
        "查询": "GO FROM \"Tim Duncan\" OVER like WHERE [like._dst == \"Tony Parker\"]  LIMIT [1];"
    },
    {
        "用户": "If 'player149' started serving 'team219' in 2016, increase its end year by 1 and update it, returning the start and end years.",
        "查询": "UPSERT EDGE on serve\n\"player149\" -> \"team219\"\nSET end_year = end_year + 1\nWHEN start_year == 2016\nYIELD start_year, end_year"
    },
    {
        "用户": "Find a player entity named 'Tim Duncan' and return its ID.",
        "查询": "LOOKUP ON player WHERE player.name == \"Tim Duncan\" YIELD id(vertex) as id"
    },
    {
        "用户": "Starting from 'Tony Parker' and following the 'like' relationship, find all entities that are no more than 2 steps away, and return their IDs, edge information, player names, player age, and level of liking.",
        "查询": "GO 0 TO 2 STEPS FROM 'Tony Parker' OVER like YIELD DISTINCT dst(edge) as dst, edge as e, $$.player.name, $^.player.age, like.likeness"
    },
    {
        "用户": "Hello, please help me identify the entities related to 'Tim Duncan' and the subgraphs of their relationships, starting with the IDs of these entities. Thank you!",
        "查询": "GO from 'Tim Duncan' OVER serve YIELD serve._src AS id |\nGET SUBGRAPH WITH PROP FROM $-.id\nYIELD vertices as nodes, edges as relationships"
    },
    {
        "用户": "找出和 'Tim Duncan' 或 'Chris Paul' 有 '喜欢' 关系的实体，再找出这些实体所 '喜欢' 的实体，并返回这些实体的名称和ID。",
        "查询": "GO FROM 'Tim Duncan', 'Chris Paul' OVER like YIELD $^.player.name AS name, dst(edge) AS id |\nGO FROM $-.id OVER like YIELD $-.name, dst(edge) as dst"
    },
    {
        "用户": "查找与 'LeBron James' 有关系的实体，返回关系类型和实体名称，如果是球队则返回球队名称，如果是球员则返回球员名称。",
        "查询": "MATCH (v1) -[r]-> (v2)\nWHERE id(v1) == \"LeBron James\"\nRETURN type(r) AS Type, CASE WHEN v2.team.name IS NOT NULL THEN v2.team.name WHEN v2.player.name IS NOT NULL THEN v2.player.name END AS Name"
    },
    {
        "用户": "Please help me create a project called student_ The label index of alias, which is based on the alias attribute of the student label and has a length of 10.",
        "查询": "CREATE TAG INDEX student_alias ON student(alias(10))"
    },
    {
        "用户": "Please help me check the quantity of all entities in the player diagram.",
        "查询": "LOOKUP ON player YIELD id(vertex)|\nYIELD COUNT(*) AS Player_Number"
    },
    {
        "用户": "Obtain the edge attributes between 'Tim Duncan' liked by 'Tony Parker' and 'Tracy McGrady' liked by 'Grant Hill', and return these attributes.",
        "查询": "FETCH PROP ON like \"Tony Parker\"->\"Tim Duncan\", \"Grant Hill\" -> \"Tracy McGrady\" YIELD properties(edge) as properties"
    },
    {
        "用户": "展示排序规则。",
        "查询": "SHOW COLLATION"
    },
    {
        "用户": "在follow关系中，将实体'player102'关注实体'player100'的度设置为75。",
        "查询": "INSERT EDGE follow(degree) VALUES \"player102\" -> \"player100\":(75)"
    },
    {
        "用户": "找出 'James Harden' 所喜欢的所有实体，并返回这些实体的 ID。",
        "查询": "GO FROM \"James Harden\" OVER like YIELD like._dst"
    },
    {
        "用户": "请问您能帮我查找与 'LeBron James' 相关的实体及其关系类型吗？或者返回实体的名称或 'abc'。",
        "查询": "MATCH (v1:player{name: \"LeBron James\"}) -[r]-> (v2)\nRETURN type(r) AS Type, CASE WHEN v2.tea.name IS NOT NULL THEN v2.tea.name WHEN v2.playe.name IS NOT NULL THEN v2.playe.name ELSE \"abc\" END AS Name"
    },
    {
        "用户": "Please focus entity player100 on entity player101 and set the attention level to 95.",
        "查询": "INSERT EDGE follow(degree)\nVALUES \"player100\"->\"player101\":(95)"
    },
    {
        "用户": "将名为 'Alen' 的学生的 'teacher' 属性更新为 'Bob'。",
        "查询": "UPDATE VERTEX ON student \"Alen\" SET teacher = \"Bob\""
    },
    {
        "用户": "Please help me log in to the Drainer service (192.168.10.106:9889).",
        "查询": "SIGN IN DRAINER SERVICE(192.168.10.106:9889)"
    },
    {
        "用户": "找出前三名球员的姓名，并与'Tony Parker'和'Ben Simmons'的姓名合并返回。",
        "查询": "MATCH (v:player)\nWITH v.player.name AS n\nRETURN n ORDER BY n LIMIT 3\nUNION\nUNWIND [\"Tony Parker\", \"Ben Simmons\"] AS n\nRETURN n"
    },
    {
        "用户": "找出所有 '喜欢' 'Grant Hill' 的实体，并返回这些实体与 'Grant Hill' 的关系中的目标实体 ID。",
        "查询": "GO FROM \"Grant Hill\" OVER like REVERSELY YIELD like._dst"
    },
    {
        "用户": "Find all players associated with a player named 'Tim Duncan' and return their names.",
        "查询": "MATCH (v:player{name:\"Tim Duncan\"})-->(v2:player)\nRETURN v2.player.name AS Name"
    },
    {
        "用户": "Insert the vertex of a 38 year old player named 'David West' named 'player111'.",
        "查询": "INSERT VERTEX player(name,age) VALUES \"player111\":(\"David West\", 38)"
    },
    {
        "用户": "找出年龄大于等于35岁的'player101'的所有关注者，并返回他们的姓名和年龄。",
        "查询": "GO FROM \"player101\" OVER follow WHERE properties($$).age >= 35\nYIELD properties($$).name AS Teammate, properties($$).age AS Age"
    },
    {
        "用户": "Create an edge called follow, which has an attribute called degree.",
        "查询": "CREATE EDGE follow(degree int)"
    },
    {
        "用户": "请帮我创建一条边follow，其中包含一个整数属性degree。",
        "查询": "CREATE EDGE follow(degree int)"
    },
    {
        "用户": "Update the edge relationship 'serve' between 'player667' and 'team200' to end year 2022, and return the start and end years.",
        "查询": "UPSERT EDGE on serve\n\"player667\" -> \"team200\"@0\nSET end_year = 2022\nYIELD start_year, end_year"
    },
    {
        "用户": " 嘿，你能帮我查找一下名字里有'Tim'的球员吗？然后看看他们喜欢的人里有没有'Tony Parker'，最后告诉我这些球员的年龄好吗？",
        "查询": "LOOKUP ON player\nWHERE player.name CONTAINS 'Tim'\nYIELD player.age as age, id(vertex) as vid |\nGO FROM $-.vid OVER like REVERSELY YIELD $-.age AS age, like._dst AS dst |\nYIELD\n  any(d IN COLLECT(DISTINCT $-.dst) WHERE d=='Tony Parker') AS d,\n  $-.age as age"
    },
    {
        "用户": "Insert a player node named 'A Loner' with an age of 0 and delete it and all its edges.",
        "查询": "INSERT VERTEX player(name, age) VALUES \"A Loner\": (\"A Loner\", 0);\nDELETE VERTEX \"A Loner\" WITH EDGE;"
    },
    {
        "用户": "查看和感冒相关的所有信息？",
        "查询": "GET SUBGRAPH 1 STEPS FROM \"感冒\" YIELD VERTICES AS nodes, EDGES AS all_edges;"
    },
    {
        "用户": "Find all paths from 'Tim Duncan' to 'Tony Parker' that contain relationships with the 'like' attribute, up to three steps, and return all relationships on these paths.",
        "查询": "FIND ALL PATH WITH PROP FROM \"Tim Duncan\" TO \"Tony Parker\" OVER like UPTO 3 STEPS YIELD path as p |\nYIELD relationships($-.p) as relationships"
    },
    {
        "用户": "Find all teams where a player named 'Tony Parker' belongs and return the deduplication results of these teams and the player's age.",
        "查询": "MATCH (v:player{name: \"Tony Parker\"})-[:serve]->(t:team)\nWITH DISTINCT v.player.age as age, t\nRETURN t"
    },
    {
        "用户": "您好，请帮我查找一下'Tim Duncan'所服务的所有实体的ID。",
        "查询": "GO FROM \"Tim Duncan\" OVER serve YIELD serve._dst as id"
    },
    {
        "用户": "Tom likes Conan to a degree of 100.",
        "查询": "INSERT EDGE like(likeness) VALUES \"Tom\"->\"Conan\":(100)"
    },
    {
        "用户": "Hello, could you please help me find the IDs of all entities starting from 'Tim Duncan' and following the 'serve' relationship outward through steps 1 to 10?",
        "查询": "GO 1 TO 10 STEPS FROM \"Tim Duncan\" OVER serve YIELD $$ as dst"
    },
    {
        "用户": "Starting from 'player101', obtain all entities and relationships within step 1.",
        "查询": "GET SUBGRAPH 1 STEPS FROM \"player101\" YIELD VERTICES AS nodes, EDGES AS relationships"
    },
    {
        "用户": "Please help me count the number of 'follow' edges and return.",
        "查询": "LOOKUP ON follow YIELD edge AS e|\nYIELD COUNT(*) AS Follow_Number"
    },
    {
        "用户": "Can you help me remove the spaces at the end of the string \"basketball player\"?",
        "查询": "RETURN rtrim(\" basketball player \")"
    },
    {
        "用户": "Please calculate 11+12.",
        "查询": "RETURN 11+12"
    },
    {
        "用户": "请帮我找出名为'Tim Duncan'的球员的所有朋友，并告诉我每个朋友的数量。",
        "查询": "MATCH p=(v:player{name:\"Tim Duncan\"})-[e:follow*0..3]->(v2:player)\nRETURN DISTINCT v2 AS Friends, count(v2)"
    },
    {
        "用户": "您好，请帮我找出所有关系权重为0的边，并告诉我排名前三的权重值好吗？",
        "查询": "match ()-[e]->()\nwhere rank(e) == 0\nRETURN rank(e)\nlimit 3"
    },
    {
        "用户": "找出名为'Manu Ginobili'的球员所连接的所有实体，返回这些实体的性别、关系强度、姓名、年龄等属性，并按照关系强度、姓名、年龄排序，最多返回5条记录。",
        "查询": "match (src_v:player{name:\"Manu Ginobili\"})-[e*2]-(dst_v)\n  return properties(src_v).sex,properties(e[0]).degree as degree,properties(dst_v).name as name,src_v.player.age AS age, e[1].start_year,dst_v.player.age\n  order by degree, name, age limit 5;"
    },
    {
        "用户": "请帮我插入一个名为LaMarcus Aldridge，年龄为33的球员实体，并将其ID设为player102。",
        "查询": "INSERT VERTEX player(name, age) VALUES \"player102\":(\"LaMarcus Aldridge\", 33)"
    },
    {
        "用户": "请问您能帮我找到从 'Tiago Splitter' 到 'LaMarcus Aldridge' 的最短路径吗？",
        "查询": "FIND SHORTEST PATH FROM \"Tiago Splitter\" TO \"LaMarcus Aldridge\" OVER * YIELD path as p"
    },
    {
        "用户": "请帮我找出所有具有年龄信息的球员，并告诉我他们的姓名和年龄。",
        "查询": "MATCH (v:player)\nWHERE exists(v.player.age)\nRETURN v.player.name, v.player.age"
    },
    {
        "用户": "Find all the entities that McGrady likes and return their IDs.",
        "查询": "GO FROM \"Tracy McGrady\" OVER like YIELD like._dst"
    },
    {
        "用户": "Delete all 'likes' edges starting from' Boris Diaw '",
        "查询": "GO FROM \"Boris Diaw\" OVER like\nYIELD like._src as src, like._dst as dst, like._rank as rank\n| DELETE EDGE like $-.src->$-.dst @ $-.rank"
    },
    {
        "用户": "Hello, could you please help me search for player.name and player.age in all the attributes of 'Boris Diaw'?",
        "查询": "YIELD 'Boris Diaw' as id | FETCH PROP ON * $-.id yield player.name, player.age"
    },
    {
        "用户": "从'player101'开始，沿着'follow'关系向外扩展1步，返回扩展出的所有节点和边。",
        "查询": "GET SUBGRAPH 1 STEPS FROM \"player101\" IN follow YIELD VERTICES AS nodes, EDGES AS relationships"
    },
    {
        "用户": "Please help me return the sublist of the third to last element in the list [1,2,3,4,5].",
        "查询": "YIELD list[1, 2, 3, 4, 5][-3..-1] AS a"
    },
    {
        "用户": "Can you help me delete the status of the edge index?",
        "查询": "DROP EDGE INDEX edge_index_status"
    },
    {
        "用户": "查找满足条件col3为false且col2为1.0的实体e1的所有边，返回这些边的源节点和目标节点。",
        "查询": "LOOKUP ON e1 WHERE e1.col3 == false AND e1.col2 == 1.0 YIELD src(edge) as src, dst(edge) as dst"
    },
    {
        "用户": "Hello, could you please help me find the name and age attributes of a player named 'Grant Hill'?",
        "查询": "FETCH PROP ON player \"Grant Hill\" YIELD player.name, player.age"
    },
    {
        "用户": "Delete all entities and their edges that 'Russell Westbrook' likes'.",
        "查询": "$var = GO FROM \"Russell Westbrook\" OVER like YIELD like._dst as id; DELETE VERTEX $var.id WITH EDGE"
    },
    {
        "用户": "插入一个名为 Bob 的学生节点，包含年龄、别名、姓名和老师信息。",
        "查询": "INSERT VERTEX\n  student(age, alias, name, teacher)\nVALUES\n  \"Bob\" : (28, \"abc\", \"Bob\", \"Candy\")"
    },
    {
        "用户": "从 'Tim Duncan' 出发，沿着 '喜欢' 关系向外扩展3步，返回结果限制为第1页，每页2个结果。",
        "查询": "GO 3 STEPS FROM \"Tim Duncan\" OVER like LIMIT [1, 2, 2];"
    },
    {
        "用户": "找出 'Tim Duncan' 和 'Chris Paul' 喜欢的实体，然后找出这些实体与其他实体之间的关系及属性，但排除与 'Tim Duncan' 和 'Chris Paul' 相关的边和属性。",
        "查询": "$var = GO FROM 'Tim Duncan', 'Chris Paul' OVER like YIELD $^.player.name AS name, id($$) AS id;\nGO FROM $var.id OVER like  WHERE $var.name != $$.player.name YIELD $var.name, properties(edge) as props"
    },
    {
        "用户": "请问您能帮我查找前三个人的姓名吗？",
        "查询": "MATCH (v)\nRETURN v.person.name LIMIT 3"
    },
    {
        "用户": "If the player tag does not exist, create a player tag that includes name and age attributes.",
        "查询": "CREATE TAG IF NOT EXISTS player(name string, age int)"
    },
    {
        "用户": "您好，请问您能帮我找一下从 'Tiago Splitter' 到 'Tony Parker' 的最短路径吗？路径最多只能有一步哦，麻烦您帮我查一下并返回给我。",
        "查询": "FIND SHORTEST PATH FROM \"Tiago Splitter\" TO \"Tony Parker\" OVER * UPTO 1 STEPS YIELD path as p"
    },
    {
        "用户": "您好，请帮我查找一下'Boris Diaw'与'Spurs'之间的关系，并返回相关的边属性。",
        "查询": "FETCH PROP ON serve \"Boris Diaw\"->\"Spurs\" YIELD edge as e"
    },
    {
        "用户": "您好，请问您能帮我找出从 'Tim Duncan' 到 'Tony Parker' 的最短路径吗？路径上的所有节点也请一并返回。",
        "查询": "FIND SHORTEST PATH FROM \"Tim Duncan\" TO \"Tony Parker\" OVER like YIELD path as p\n| YIELD nodes($-.p) AS nodes | UNWIND $-.nodes AS a | YIELD $-.a AS a"
    },
    {
        "用户": "Please help me find out the names and ages of all players who started playing before 2000.",
        "查询": "MATCH (v:player)-[e]->()\nWHERE e.start_year < 2000\nRETURN DISTINCT v.player.name, v.player.age"
    },
    {
        "用户": "插入两个顶点，一个是名称为'Trail Blazers'的团队，另一个是名称为'Spurs'的团队。",
        "查询": "INSERT VERTEX team(name) VALUES \"team203\":(\"Trail Blazers\"), \"team204\":(\"Spurs\")"
    },
    {
        "用户": "Please help me create a label called team, which contains an attribute named name.",
        "查询": "CREATE TAG team(name string)"
    },
    {
        "用户": "Find all entities associated with a player named 'Tim Duncan' and sort them by their age, returning the names and ages of these entities.",
        "查询": "MATCH (v:player{name:\"Tim Duncan\"}) --> (v2)\nRETURN v2.player.name AS Name, v2.player.age AS Age\nORDER BY Age"
    },
    {
        "用户": "请帮我返回列表[1, 2, 3]中的所有元素。",
        "查询": "YIELD list[1, 2, 3][0..-1] AS a"
    },
    {
        "用户": "Find all the entities that Boris Diaw likes and return their IDs.",
        "查询": "GO FROM \"Boris Diaw\" OVER like YIELD like._dst"
    },
    {
        "用户": "找出喜欢'Tony Parker'的球员'Tim Duncan'，并返回'Tim Duncan'球员的姓名。",
        "查询": "MATCH (v:player{name:\"Tony Parker\"})\nWITH v AS a\nMATCH p=(o:player{name:\"Tim Duncan\"})-[]->(a)\nRETURN o.player.name"
    },
    {
        "用户": "从'player101'开始，能否帮我获取一步内的所有节点和边呢？",
        "查询": "GET SUBGRAPH 1 STEPS FROM \"player101\" YIELD VERTICES AS nodes, EDGES AS relationships"
    },
    {
        "用户": "查找所有 'Boris Diaw' 喜欢的实体，并删除这些实体与 'Boris Diaw' 的关系。",
        "查询": "GO FROM \"Boris Diaw\" OVER like YIELD like._dst as id | DELETE VERTEX $-.id WITH EDGE"
    },
    {
        "用户": "找出所有 'Boris Diaw' 所喜欢的实体，并返回这些实体的 ID。",
        "查询": "GO FROM \"Boris Diaw\" OVER like YIELD like._dst"
    },
    {
        "用户": "返回一个布尔值，表示'Tony No.1'是否匹配正则表达式'\\\\w+No\\\\.\\\\d+'。",
        "查询": "YIELD \"Tony No.1\" =~ \"\\\\w+No\\\\.\\\\d+\" AS r"
    },
    {
        "用户": "Starting from 'player100', identify all entities with a distance of 1 to 2 hops through the 'follow' relationship, and return the destinations of these entities.",
        "查询": "GO 1 TO 2 STEPS FROM \"player100\" OVER follow\nYIELD dst(edge) AS destination"
    },
    {
        "用户": "找出前三名球员的姓名，并将'Tony Parker'和'Ben Simmons'的姓名合并返回。",
        "查询": "MATCH (v:player)\nWITH v.player.name AS n\nRETURN n ORDER BY n LIMIT 3\nUNION\nUNWIND [\"Tony Parker\", \"Ben Simmons\"] AS n\nRETURN n"
    },
    {
        "用户": "您好，请帮我查找与 'LeBron James' 相关的实体及其关系类型，并返回实体的名称或 'abc'。",
        "查询": "MATCH (v1:player{name: \"LeBron James\"}) -[r]-> (v2)\nRETURN type(r) AS Type, CASE WHEN v2.tea.name IS NOT NULL THEN v2.tea.name WHEN v2.playe.name IS NOT NULL THEN v2.playe.name ELSE \"abc\" END AS Name"
    },
    {
        "用户": " 您好，请帮我查找一下那些名字中含有'Tim'的球员，然后告诉我他们喜欢的人的年龄，还有他们是否喜欢'Tony Parker'，并且告诉我他们与'Tony Parker'之间的关系。",
        "查询": "LOOKUP ON player\nWHERE player.name CONTAINS 'Tim'\nYIELD player.age AS age, id(vertex) AS vid |\nGO FROM $-.vid\nOVER like REVERSELY\nYIELD\n  $-.age AS age,\n  ('Tony Parker' == like._dst) AS liked,\n  like._src AS src,\n  like._dst AS dst"
    },
    {
        "用户": "Create a label called team, which contains a string attribute named name.",
        "查询": "CREATE TAG team(name string)"
    },
    {
        "用户": "创建一个名为player的标签，包含姓名和年龄两个属性。",
        "查询": "CREATE TAG player(name string, age int)"
    },
    {
        "用户": "找出与球员'Shaquille O'Neal'有关系的实体，返回这些实体的姓名、年龄和名称，并按名称排序，只返回第一个结果。",
        "查询": "match (v1)-->(v2:player)-->(v3) where v2.player.name==\"Shaquille O'Neal\"\n  return properties(v1).name,properties(v2).age as age,properties(v3).name AS name\n  order by name limit 1;"
    },
    {
        "用户": "Please help me find all the second time followers of a player named 'Tim Duncan' and return their names.",
        "查询": "MATCH p=(v:player{name:\"Tim Duncan\"})-[e:follow*2]->(v2)\nWHERE ALL(e_ in e WHERE e_.degree > 0)\nRETURN DISTINCT v2 AS Friends"
    },
    {
        "用户": "糖尿病的症状有哪些？",
        "查询": "MATCH (n:disease)-[e:has_symptom]->(n1:symptom) WHERE n.disease.name=='糖尿病' return n1.symptom.name"
    },
    {
        "用户": "Identify entities related to player 'Shaquille O'Neal', return the names, ages, and names of these entities, and sort them by name, only returning the first result.",
        "查询": "match (v1)-->(v2:player)-->(v3) where v2.player.name==\"Shaquille O'Neal\"\n  return properties(v1).name,properties(v2).age as age,properties(v3).name AS name\n  order by name limit 1;"
    },
    {
        "用户": "返回数组 [1, 2, 3] 中下标为 2 的元素。",
        "查询": "YIELD [1, 2, 3][2]"
    },
    {
        "用户": "展示所有标签的索引状态。",
        "查询": "SHOW TAG INDEX STATUS;"
    },
    {
        "用户": "您好，请帮我查找一下'Boris Diaw'在'Hawks'效力的起止年份好吗？",
        "查询": "FETCH PROP ON serve 'Boris Diaw' -> 'Hawks' YIELD serve.start_year, serve.end_year"
    },
    {
        "用户": "您好，请帮我查找一下实体类型为player且名称为'Boris Diaw'的实体的名称属性，然后将名称属性返回给我两次好吗？",
        "查询": "FETCH PROP ON player 'Boris Diaw' YIELD player.name, player.name"
    },
    {
        "用户": "激素抵抗型哮喘的易得人群是哪些？",
        "查询": "LOOKUP ON disease WHERE disease.name == \"激素抵抗型哮喘\" YIELD properties(vertex).easy_get"
    },
    {
        "用户": "Please help me find the shortest path from 'team204' to 'player100' and return the path information.",
        "查询": "FIND SHORTEST PATH WITH PROP FROM \"team204\" TO \"player100\" OVER * REVERSELY YIELD path AS p"
    },
    {
        "用户": "查找名为'Tracy McGrady'的球员所服务或喜欢，最多距离为1的实体，并返回这些关系和实体。",
        "查询": "MATCH (:player{name:\"Tracy McGrady\"})-[e:serve|like*0..1]-(v)\nRETURN e, v"
    },
    {
        "用户": "Please help me calculate the result after adding 1 to the date of October 11, 1984.",
        "查询": "WITH date({year: 1984, month: 10, day: 11}) AS x RETURN x + 1"
    },
    {
        "用户": "显示所有边的索引。",
        "查询": "SHOW EDGE INDEXES"
    },
    {
        "用户": "创建一条从 'Tom' 到 'Conan' 的 '喜欢' 边，边权为 100。",
        "查询": "INSERT EDGE like(likeness) VALUES \"Tom\"->\"Conan\":(100)"
    },
    {
        "用户": "Find the relationship and endpoint node information between 'Tim Duncan' liked by 'Tony Parker' and 'Tracy McGrady' liked by 'Grant Hill'.",
        "查询": "FETCH PROP ON like \"Tony Parker\"->\"Tim Duncan\", \"Grant Hill\" -> \"Tracy McGrady\" YIELD edge as relationship |\nYIELD endNode($-.relationship) AS node"
    },
    {
        "用户": "获取e1类型中col1为1且col3为false的所有边，返回这些边的源节点和目标节点。",
        "查询": "LOOKUP ON e1 WHERE e1.col1 == 1 AND e1.col3 == false YIELD src(edge) as src, dst(edge) as dst"
    },
    {
        "用户": "Please help me find the student with student ID 1, I need to know their ID and age.",
        "查询": "LOOKUP ON student WHERE student.number == 1 YIELD id(vertex) as name, student.age"
    },
    {
        "用户": "将'player666'与'team200'之间的边'serve'更新为结束年份为2022，当结束年份为2010时，返回开始年份和结束年份。",
        "查询": "UPSERT EDGE on serve\n\"player666\" -> \"team200\"@0\nSET end_year = 2022\nWHEN end_year == 2010\nYIELD start_year, end_year"
    },
    {
        "用户": "Description test_ Comment_ The detailed information of the tag tag.",
        "查询": "DESC tag test_comment_tag;"
    },
    {
        "用户": "Starting from 'Tony Parker' and following the 'like' relationship, find all entities that are no more than 2 steps away, and return their IDs, edge information, player names, player age, and level of liking.",
        "查询": "GO 0 TO 2 STEPS FROM 'Tony Parker' OVER like YIELD DISTINCT dst(edge) as dst, edge as e, $$.player.name, $^.player.age, like.likeness"
    },
    {
        "用户": "请帮我查找时间戳1625469277对应的日期。",
        "查询": "RETURN datetime(1625469277)"
    },
    {
        "用户": "找出与 'Nobody' 有 '喜欢' 关系的实体，并返回数字 1。",
        "查询": "GO FROM \"Nobody\" OVER like YIELD like._dst | YIELD 1"
    },
    {
        "用户": "判断数字4是否大于数字3，并返回结果。",
        "查询": "WITH 4 AS one, 3 AS two RETURN one > two AS result"
    },
    {
        "用户": "返回以字符串'apple'是否以'app'开头、以'a'开头、以大写的'a'开头。",
        "查询": "RETURN'apple'STARTS WITH'app','apple'STARTS WITH'a','apple'STARTS WITH toUpper('a')"
    },
    {
        "用户": "请将监听器添加到空间basketballplayer中，并同步元数据和存储服务器的IP地址为192.168.10.105:9569和192.168.10.105:9789。",
        "查询": "ADD LISTENER SYNC META 192.168.10.105:9569 STORAGE 192.168.10.105:9789 TO SPACE basketballplayer"
    },
    {
        "用户": "找出'player102'和'player100'所'关注'的所有实体的边的目标节点，并返回这些目标节点。",
        "查询": "GO FROM \"player102\" OVER follow YIELD dst(edge)\nUNION\nGO FROM \"player100\" OVER follow YIELD dst(edge)"
    },
    {
        "用户": "找出名为'Tim Duncan'的球员所喜欢的所有实体的名字、错误标签及其属性。",
        "查询": "MATCH (v:player)-[:like]->(t) WHERE v.player.name==\"Tim Duncan\" RETURN v.player.name, t.errortag.name, properties(v), t"
    },
    {
        "用户": "Hello, could you please help me find the points related to 'Tim Duncan'? The weight of the 'like' relationship between these points is 90, and the path length is 2 or 3. Can you provide me with information about these edges and endpoints?",
        "查询": "MATCH (n)-[e:like*2..3{likeness: 90}]-(v)\nWHERE id(n) == \"Tim Duncan\"\nRETURN e, v"
    },
    {
        "用户": "找出ID为player100的实体的标签。",
        "查询": "MATCH (v)\nWHERE id(v)==\"player100\"\nWITH labels(v) AS tags_unf\nUNWIND tags_unf AS tags_f\nRETURN tags_f"
    },
    {
        "用户": "获取id_edge中id为100的边，返回其源节点、目标节点和边的权重。",
        "查询": "LOOKUP ON id_edge WHERE id_edge.id == 100 YIELD src(edge) as src, dst(edge) as dst, rank(edge) as rank"
    },
    {
        "用户": "Please help me create a tag called player, which includes two attributes: name and age.",
        "查询": "CREATE TAG player(name string, age int)"
    },
    {
        "用户": "将实体'player102'关注实体'player100'，并设置关注度为 75。",
        "查询": "INSERT EDGE follow(degree) VALUES \"player102\" -> \"player100\":(75)"
    },
    {
        "用户": "请找出年龄不在20到25岁范围内的所有球员，并按照年龄进行排序，然后告诉我他们的姓名和年龄。",
        "查询": "MATCH (v:player)\nWHERE v.player.age NOT IN range(20,25)\nRETURN v.player.name AS Name, v.player.age AS Age\nORDER BY Age"
    },
    {
        "用户": "获取 'Tony Parker' 喜欢的 'Tim Duncan' 和 'Grant Hill' 喜欢的 'Tracy McGrady' 的关系属性，并返回这些关系的终止节点。",
        "查询": "FETCH PROP ON like \"Tony Parker\"->\"Tim Duncan\", \"Grant Hill\" -> \"Tracy McGrady\" YIELD edge as e |\nYIELD endNode($-.e) AS nodes"
    },
    {
        "用户": "请找出名为'Tim Duncan'的球员，并帮我找出与他有关系的其他球员的姓名。",
        "查询": "MATCH (v:player{name:\"Tim Duncan\"})-->()<--(v3)\nRETURN v3.player.name AS Name"
    },
    {
        "用户": "Find the entity of player 'Tim Duncan' and return the ID of that entity.",
        "查询": "LOOKUP ON player WHERE player.name == \"Tim Duncan\" YIELD id(vertex) as id"
    },
    {
        "用户": "Please help me obtain geometric information for any shape edge from entity 201 to entity 302.",
        "查询": "FETCH PROP ON any_shape_edge \"201\"->\"302\" YIELD ST_ASText(any_shape_edge.geo)"
    },
    {
        "用户": "Please help me find all entities associated with a player named 'Tim Duncan' and return the names and ages of these entities in descending order of age.",
        "查询": "MATCH (v:player{name:\"Tim Duncan\"}) --> (v2)\nRETURN v2.player.name AS Name, v2.player.age AS Age\nORDER BY Age DESC"
    },
    {
        "用户": "Hello, please help me find out all the entities that Boris Diaw has served and the start and end years of his service relationships in these entities. Thank you.",
        "查询": "$var = GO FROM 'Boris Diaw','Boris Diaw' OVER serve YIELD serve._src AS src, serve._dst AS dst;\nFETCH PROP ON serve $var.src->$var.dst YIELD DISTINCT serve.start_year, serve.end_year, edge as relationship"
    },
    {
        "用户": "请帮我在any_shape标签上创建一个名为any_shape_geo_index的索引，这个索引是基于geo属性的。",
        "查询": "CREATE TAG INDEX IF NOT EXISTS any_shape_geo_index ON any_shape(geo)"
    },
    {
        "用户": "你能帮我查找一下名为'Tony Parker'的球员的姓名和年龄吗？\n助手：当然可以！让我来帮你查一下。",
        "查询": "LOOKUP ON player WHERE player.name == \"Tony Parker\"\nYIELD properties(vertex).name, properties(vertex).age"
    },
    {
        "用户": "If label t1 does not exist, create a label that contains string type field a and integer type field b.",
        "查询": "CREATE TAG IF NOT EXISTS t1(a string, b int)"
    },
    {
        "用户": "Delete edge index edge_ 1_ Ttl_ Index_ Second_ Degree.",
        "查询": "DROP EDGE INDEX edge_1_ttl_index_second_degree"
    },
    {
        "用户": "请帮我生成一个介于1到6之间的32位随机数。",
        "查询": "YIELD rand32(1, 6)"
    },
    {
        "用户": "请帮我找出名为'Tim Duncan'的球员所连接的所有实体，并返回这些实体。",
        "查询": "MATCH (v:player{name:\"Tim Duncan\"}) -[*0]-> (v2)\nRETURN v2"
    },
    {
        "用户": "Hello, please help me find the relationship between 'Boris Diaw' and 'Spurs' and return the relevant edge attributes.",
        "查询": "FETCH PROP ON serve \"Boris Diaw\"->\"Spurs\" YIELD edge as e"
    },
    {
        "用户": "Hello, could you help me find a statement to create an edge type called work2?",
        "查询": "SHOW CREATE EDGE work2;"
    },
    {
        "用户": "找出以'player101'为起点的所有关注关系，然后找出这些关注关系的目标实体，并返回这些目标实体的属性中的球队名称和球员名称。",
        "查询": "GO FROM \"player101\" OVER follow YIELD dst(edge) AS id |\nGO FROM $-.id OVER serve YIELD properties($$).name AS Team,\nproperties($^).name AS Player"
    },
    {
        "用户": "删除名为multi_tag_index的标签索引。",
        "查询": "DROP TAG INDEX multi_tag_index;"
    },
    {
        "用户": "Hello, please help me find all nodes and edges between 2 and 3 that a player named 'Tim Duncan' has a preference level of 90 for.",
        "查询": "MATCH (:player{name:\"Tim Duncan\"})-[e:like*2..3{likeness: 90}]-(v)\nRETURN e, v"
    },
    {
        "用户": "找出球员名为'James Harden', 'Jonathon Simmons', 'Klay Thompson', 'Dejounte Murray', 'Paul Gasol'中，年龄为23或者ID为'James Harden'的球员的姓名。",
        "查询": "MATCH (v)\nWHERE id(v) IN ['James Harden', 'Jonathon Simmons', 'Klay Thompson', 'Dejounte Murray', 'Paul Gasol']\n      AND (id(v) == 'James Harden' OR v.player.age == 23)\nRETURN v.player.name AS Name"
    },
    {
        "用户": "Delete all entities serviced by 'player100' starting in '2021'.",
        "查询": "GO FROM \"player100\" OVER serve WHERE properties(edge).start_year == \"2021\" YIELD dst(edge) AS id | DELETE VERTEX $-.id"
    },
    {
        "用户": "创建一个woman标签，包含姓名、邮箱、年龄、性别和时间戳等属性，设置过期时间为0，过期列为时间戳。",
        "查询": "CREATE TAG woman(name string, email string, age int, gender string, row_timestamp timestamp) ttl_duration = 0, ttl_col = \"row_timestamp\";"
    },
    {
        "用户": "找出与'Rajon Rondo'有'喜欢'或'服务'关系的实体，返回这些关系的属性以及关联实体的姓名、性别等，最多返回5条记录。",
        "查询": "match (src_v)-[e:like|serve]->(dst_v)-[e2]-(dst_v2) where  id(src_v)==\"Rajon Rondo\" return properties(e).degree1,properties(e).degree1,e2.a,dst_v.p.name,dst_v.player.sex1,properties(src_v).name2 limit 5;"
    },
    {
        "用户": "找出从 'Tim Duncan' 到 'Tony Parker' 的所有路径，路径上必须经过 '喜欢' 关系，最多经过3个步骤，并返回路径和路径上的关系。",
        "查询": "FIND ALL PATH WITH PROP FROM \"Tim Duncan\" TO \"Tony Parker\" OVER like UPTO 3 STEPS YIELD path as p |\nYIELD relationships($-.p) as relationships"
    },
    {
        "用户": "Please help me explain and display all labels in dot format.",
        "查询": "EXPLAIN format=\"dot\" SHOW TAGS"
    },
    {
        "用户": "您好，请帮我找出满足以下条件的实体e1：e1.col1大于等于1且e1.col5大于时间点'11:11:11'。并且，能否将这些实体的边的源节点和目标节点也一并返回给我呢？",
        "查询": "LOOKUP ON e1 WHERE e1.col1 >= 1 AND e1.col5 > time(\"11:11:11\") YIELD src(edge) as src, dst(edge) as dst"
    },
    {
        "用户": "统计列表中每个元素出现的次数，并返回总元素个数、不重复元素个数。",
        "查询": "WITH [NULL, 1, 1, 2, 2] As a\nUNWIND a AS b\nRETURN count(b), COUNT(*), couNT(DISTINCT b)"
    },
    {
        "用户": "Get the start in the attributes on the serve relationship from 'player100' to 'team204'_ Year value.",
        "查询": "FETCH PROP ON serve \"player100\" -> \"team204\"\nYIELD properties(edge).start_year"
    },
    {
        "用户": "找出与 'Tim Duncan' 有2到3跳 '喜欢' 关系的所有实体，并返回这些关系和实体。",
        "查询": "MATCH (n)-[e:like*2..3]->(v)\nWHERE id(n) == \"Tim Duncan\"\nRETURN e, v"
    },
    {
        "用户": "Please help me insert a vertex named 'n3' with an age of 14 into t2.",
        "查询": "INSERT VERTEX t2 (name, age) VALUES \"11\":(\"n3\", 14)"
    },
    {
        "用户": "从 'Tim Duncan' 开始，沿着 '喜欢' 关系反向查找到 'Nobody' 或 'Spur' 的所有路径，最多包含3步，并返回这些路径。",
        "查询": "FIND ALL PATH FROM \"Tim Duncan\" TO \"Nobody\", \"Spur\" OVER like REVERSELY UPTO 3 STEPS YIELD path as p"
    },
    {
        "用户": "Edge_ 1_ Expiration time field of ttl ttl_ Col is set to null.",
        "查询": "ALTER EDGE edge_1_ttl  ttl_col = \"\""
    },
    {
        "用户": "获取标签test_comment_tag的创建语句。",
        "查询": "SHOW CREATE tag test_comment_tag;"
    },
    {
        "用户": "Obtain the names of all students whose teacher's dictionary order is less than 'a', and return the IDs of these students.",
        "查询": "LOOKUP ON student WHERE student.teacher < \"a\" YIELD id(vertex) as id"
    },
    {
        "用户": "Find the name and age of a player named 'Tony Parker'.",
        "查询": "LOOKUP ON player WHERE player.name == \"Tony Parker\"\nYIELD properties(vertex).name AS name, properties(vertex).age AS age"
    },
    {
        "用户": "Find all entities that a player named 'Tracy McGrady' likes, including direct and indirect relationships, with a liking level of 90, and return these entities and their relationships.",
        "查询": "MATCH (:player{name:\"Tracy McGrady\"})-[e:like*0..1{likeness: 90}]-(v)\nRETURN e, v"
    },
    {
        "用户": "修改标签t1，将属性p3的类型改为int64，将属性p4的类型改为string。",
        "查询": "ALTER TAG t1 CHANGE (p3 int64, p4 string)"
    },
    {
        "用户": "高血压的得病概率是多少？",
        "查询": "LOOKUP ON disease WHERE disease.name == \"高血压\" YIELD properties(vertex).get_prob"
    },
    {
        "用户": "Obtain the name and age attributes of a player named 'Tony Parker'.",
        "查询": "FETCH PROP ON player \"Tony Parker\" YIELD player.name, player.age"
    },
    {
        "用户": "请帮我插入两个顶点，一个顶点的属性为团队名称为\"Trail Blazers\"，另一个顶点的属性为团队名称为\"Spurs\"。",
        "查询": "INSERT VERTEX team(name) VALUES \"team203\":(\"Trail Blazers\"), \"team204\":(\"Spurs\")"
    },
    {
        "用户": "请问您能帮我获取'Boris Diaw'的所有实体的属性并返回它们的ID吗？",
        "查询": "FETCH PROP ON * 'Boris Diaw' YIELD id(vertex)"
    },
    {
        "用户": "从 'Tim Duncan' 出发，经过 '喜欢' 关系，到达距离为 1 或 2 步的实体，且不包括 'YAO MING'，统计每个实体的出边数，返回出边数相同的实体数量。",
        "查询": "GO 1 TO 2 STEPS FROM \"Tim Duncan\" OVER like WHERE like._dst != \"YAO MING\" YIELD dst(edge) AS vid\n| GROUP BY $-.vid YIELD 1 AS id\n| GROUP BY $-.id YIELD COUNT($-.id);"
    },
    {
        "用户": "Find the shortest path from 'Tiago Splitter' to 'LaMarcus Aldridge', which includes' likes' and 'teammates' relationships, and return path information.",
        "查询": "FIND SHORTEST PATH FROM \"Tiago Splitter\" TO \"LaMarcus Aldridge\" OVER like, teammate YIELD path as p"
    },
    {
        "用户": "Find all entities that 'player100', who are 42 years old or older, are interested in and return information about these entities.",
        "查询": "GO FROM \"player100\" OVER follow\nWHERE $^.player.age >= 42\nYIELD dst(edge)"
    },
    {
        "用户": "Delete entities' player111 'and' team203 '.",
        "查询": "DELETE VERTEX \"player111\", \"team203\""
    },
    {
        "用户": "If the relationship edge follow does not exist, create an edge named follow that contains an integer attribute degree.",
        "查询": "CREATE EDGE IF NOT EXISTS follow(degree int)"
    },
    {
        "用户": "Please help me find a player named 'Tim Duncan' and return their information.",
        "查询": "MATCH (v:player{name:\"Tim Duncan\"}) RETURN v"
    },
    {
        "用户": "找出 'Tim Duncan' 所 '喜欢' 的实体的 ID 和该实体对应的球员年龄，统计去重后的年龄大于40的实体数量并返回。",
        "查询": "GO FROM \"Tim Duncan\" OVER like YIELD like._dst AS dst, $$.player.age AS age\n| YIELD DISTINCT count(*) AS count where $-.age > 40"
    },
    {
        "用户": "Starting from 'player100' and passing through any type of edge, perform a 1 to 3 hop traversal to return the name and age of the traversed entity. Two edges can be automatically selected for each hop.",
        "查询": "GO 1 TO 3 STEPS FROM \"player100\"\nOVER *\nYIELD properties($$).name AS NAME, properties($$).age AS Age\nSAMPLE [2,2,2]"
    },
    {
        "用户": "如果名字为'Joe'的player节点存在，则将其年龄更新为31，并返回更新后的名字和年龄。",
        "查询": "UPSERT VERTEX ON player \"player666\"\nSET age = 31\nWHEN name == \"Joe\"\nYIELD name AS Name, age AS Age"
    },
    {
        "用户": "给标签t1添加两个属性p3和p4，p3是整型，p4是长度为10的固定字符串。",
        "查询": "ALTER TAG t1 ADD (p3 int32, p4 fixed_string(10))"
    },
    {
        "用户": "Please start from entity 'player101' and follow the 'follow' relationship to help me obtain subgraphs within 100 steps and return nodes and edges.",
        "查询": "GET SUBGRAPH 100 STEPS FROM \"player101\" OUT follow YIELD VERTICES AS nodes, EDGES AS relationships"
    },
    {
        "用户": "找出名为'Tim Duncan'的球员所喜欢的喜好度为90的实体，距离该球员2到3个关系，并返回这些实体及关系。",
        "查询": "MATCH (:player{name:\"Tim Duncan\"})<-[e:like*2..3{likeness: 90}]-(v)\nRETURN e, v"
    },
    {
        "用户": "Please help me find all the friends of the player named 'Tim Duncan', whose relationship is a two hop 'follow' with a degree greater than 1, and then return the names of these friends.",
        "查询": "MATCH p=(v:player{name:\"Tim Duncan\"})-[e:follow*2]->(v2)\nWHERE e.degree > 1\nRETURN DISTINCT v2 AS Friends"
    }
]