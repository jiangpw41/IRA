[
    {
        "用户": " 请问您能帮我找出年龄大于等于29.5岁的球员吗？我需要他们的ID和年龄信息。",
        "查询": "LOOKUP ON player WHERE player.age >= 29.5 YIELD id(vertex) as name, player.age AS Age"
    },
    {
        "用户": "Find all the entities that 'Tim' likes, including layer 2-3 relationships, return relationships, and entities.",
        "查询": "MATCH (:player{name: \"Tim Duncan\"})-[e:like*2..3]->(v)\nRETURN e, v"
    },
    {
        "用户": "房室管畸形的症状有哪些？",
        "查询": "MATCH (n:disease)-[e:has_symptom]->(n1:symptom) WHERE n.disease.name=='房室管畸形' return n1.symptom.name"
    },
    {
        "用户": "遗传性耳瘘的预防措施有哪些？",
        "查询": "MATCH (n:disease{name:\"遗传性耳瘘\"}) return n.disease.prevent"
    },
    {
        "用户": "您好，请问您能帮我查找一下名称为'Spurs'的球队的名称属性吗？",
        "查询": "FETCH PROP ON team \"Spurs\" YIELD team.name"
    },
    {
        "用户": "Identify entities with a 'liking' relationship with 'Tim Duncan' and a liking level greater than 90, and return the source entity name, target entity ID, target entity name, and liking level.",
        "查询": "GO FROM 'Tim Duncan' OVER like bidirect WHERE like.likeness > 90\nYIELD $^.player.name, like._dst, $$.player.name, like.likeness"
    },
    {
        "用户": "得了心脏病推荐吃什么药？",
        "查询": "GO FROM \"心脏病\" OVER recommend_drug YIELD dst(edge);"
    },
    {
        "用户": "返回所有球员与其队友之间的关系。",
        "查询": "MATCH (v:player) WITH (v)-[:teammate]->() AS p RETURN p"
    },
    {
        "用户": "尼古拉·瓦西勒娃的性别是什么？",
        "查询": "MATCH (n:character{name:'尼古拉·瓦西勒娃'}) return n.character.gender"
    },
    {
        "用户": "请问您能帮我查找一下，从 'Tim Duncan' 开始，通过 '喜欢' 和 '服务' 的关系，最多经过5个步骤可以到达的所有实体路径吗？然后按照路径长度进行排序，返回前10条路径。",
        "查询": "GO FROM \"Tim Duncan\" over * YIELD like._dst AS src, serve._src AS dst |\nFIND SHORTEST PATH FROM $-.src TO $-.dst OVER like UPTO 5 STEPS YIELD path as p |\nORDER BY $-.p | LIMIT 10"
    },
    {
        "用户": "找出名为'Tracy McGrady'的球员所'喜欢'的所有实体，且喜欢程度为90，返回这些实体及其关系。",
        "查询": "MATCH (:player{name:\"Tracy McGrady\"})-[e:like{likeness: 90}]->(v)\nRETURN e, v"
    },
    {
        "用户": "找出 'Tracy McGrady' 喜欢的实体，再找出这些实体所喜欢的实体ID。",
        "查询": "$var = GO FROM \"Tracy McGrady\" OVER like YIELD like._dst as id; GO FROM $var.id OVER like YIELD like._dst"
    },
    {
        "用户": " 嘿，你能帮我找一下从 'Yao Ming' 到 'Tony Parker' 的最短路径吗？这个路径可以通过 '喜欢' 和 '服务' 的关系来连接，但是最多只能经过5个步骤。然后把路径信息给我返回一下，好吗？",
        "查询": "YIELD \"Yao Ming\" AS src, \"Tony Parker\" AS dst\n| FIND SHORTEST PATH FROM $-.src TO $-.dst OVER like, serve UPTO 5 STEPS YIELD path as p"
    },
    {
        "用户": "Hello, I would like to check the entities that 'Tracy McGrady' likes, with a liking level of 90. Can you help me identify these entities and their relationships?",
        "查询": "MATCH (:player{name:\"Tracy McGrady\"})-[e:like{likeness: 90}]->(v)\nRETURN e, v"
    },
    {
        "用户": "Find all entities that players named 'Kyrie Irving' like, including 2 to 3 hop relationships, and return all information.",
        "查询": "MATCH (:player{name:\"Kyrie Irving\"})-[e:like*2..3]->()\nRETURN *"
    },
    {
        "用户": "哈维·瑞吉比特从属于哪个组织？",
        "查询": "MATCH (n:character{name:'哈维·瑞吉比特'})-[e:belong_to]-(n1:group) return n1"
    },
    {
        "用户": "马格纳斯·麦克唐纳的出生时间是什么？",
        "查询": "LOOKUP ON character WHERE character.name=='马格纳斯·麦克唐纳' YIELD properties(vertex).born AS born"
    },
    {
        "用户": "查找年龄等于40的球员，并返回这些球员的姓名。",
        "查询": "$a = LOOKUP ON player WHERE player.age == 40 YIELD id(vertex) as id;\nFETCH PROP ON player $a.id YIELD player.name"
    },
    {
        "用户": "您好，请帮我查找与 'Manu Ginobili' 有关系的实体，然后给我提供这些实体的 '喜欢程度'、'队友开始年份'、'服务开始年份' 和 '球员姓名'。",
        "查询": "GO FROM \"Manu Ginobili\" OVER * REVERSELY YIELD like.likeness, teammate.start_year, serve.start_year, $$.player.name"
    },
    {
        "用户": "嘿，你能帮我把一条从'Tim Duncan'到'Tim Parker'的喜欢程度为99的边插入进去吗？还有一条从'Tim Parker'到'Tony Parker'的喜欢程度为90的边也要插入哦！",
        "查询": "INSERT EDGE like(likeness) VALUES \"Tim Duncan\"->\"Tim Parker\":(99);\nINSERT EDGE like(likeness) VALUES \"Tim Parker\"->\"Tony Parker\":(90);"
    },
    {
        "用户": "Find players aged 40 and return their names.",
        "查询": "$a = LOOKUP ON player WHERE player.age == 40 YIELD id(vertex) as id;\nFETCH PROP ON player $a.id YIELD player.name"
    },
    {
        "用户": "找出与 'Manu Ginobili' 有 '喜欢' 或 '队友' 关系，且若是 '喜欢' 则要求程度大于90的实体，并返回这些实体的喜欢程度、开始年份和名称。",
        "查询": "GO FROM \"Manu Ginobili\" OVER like, teammate REVERSELY WHERE like.likeness > 90\nYIELD like.likeness, teammate.start_year, $$.player.name"
    },
    {
        "用户": "与希思科特·巴巴里具有两跳亲属关系的人有哪些？",
        "查询": "GO 2 STEPS FROM \"希思科特·巴巴里\" OVER Kindred YIELD dst(edge)"
    },
    {
        "用户": "Find the entities that Tony Parker likes, with a distance of 0 to 2 in both directions, and remove duplicates to return the IDs of these entities.",
        "查询": "GO 0 TO 2 STEPS FROM 'Tony Parker' OVER like BIDIRECT YIELD DISTINCT like._dst"
    },
    {
        "用户": "Return the names of the first two players, sorted by name.",
        "查询": "match (v:player) return properties(v).name AS name order by name limit 2;"
    },
    {
        "用户": "得了戊型病毒性肝炎推荐吃什么药？",
        "查询": "GO FROM \"戊型病毒性肝炎\" OVER recommend_drug YIELD dst(edge);"
    },
    {
        "用户": "返回所有球员的姓名和节点信息。",
        "查询": "match (v:player) return v.player.name, v"
    },
    {
        "用户": " 您好，请帮我查一下关于LeBron James所在球队的信息，球队名字是Cavaliers。能否告诉我路径、关系类型和球队名称呢？",
        "查询": "MATCH (v1:player{name: \"LeBron James\"}) -[r:serve]-> (v2:team{name: \"Cavaliers\"})\nRETURN type(r) AS Type, v2.team.name AS Name"
    },
    {
        "用户": "无排卵性不孕症的易感人群是哪些？",
        "查询": "MATCH (n:disease{name:\"无排卵性不孕症\"}) return n.disease.easy_get"
    },
    {
        "用户": "Find players named 'Kyrie Irving' who have 2 to 3 hops of service or favorite entities, and return quantity statistics results.",
        "查询": "MATCH (:player{name:\"Kyrie Irving\"})-[e:serve|like*2..3]-(v)\nRETURN count(v)"
    },
    {
        "用户": "返回名为'DeAndre Jordan'的球员节点。",
        "查询": "MATCH (v:player {name: \"DeAndre Jordan\"}) RETURN v"
    },
    {
        "用户": "Hey, can you help me find the people 'Tim Duncan' likes and the ones they like? I need to know the names of these people, namely 'Player', 'Friend', and 'FoF'.",
        "查询": "MATCH (v1) -[:like]-> (v2) -[:like]-> (v3)\nWHERE id(v1) == \"Tim Duncan\"\nRETURN v1.player.name AS Player, v2.player.name AS Friend, v3.player.name AS FoF"
    },
    {
        "用户": "查看和头痛相关的所有信息？",
        "查询": "GET SUBGRAPH 1 STEPS FROM \"头痛\" YIELD VERTICES AS nodes, EDGES AS all_edges"
    },
    {
        "用户": "多少种病能够通过康复治疗方式治愈？",
        "查询": "MATCH (n:disease)-[]->(n1:cure{name:'康复治疗'}) return count(n)"
    },
    {
        "用户": "哪些人物是多洛霍夫家族的成员？",
        "查询": "MATCH (n:character)-[e]-(n1:group{name:'多洛霍夫家族'}) return n"
    },
    {
        "用户": " 嘿，你能帮我找一下 'Tim Duncan' 喜欢的人和他们喜欢的人吗？我需要知道这些人的名字，分别是 'Player'、'Friend'、'FoF'。",
        "查询": "MATCH (v1) -[:like]-> (v2) -[:like]-> (v3)\nWHERE id(v1) == \"Tim Duncan\"\nRETURN v1.player.name AS Player, v2.player.name AS Friend, v3.player.name AS FoF"
    },
    {
        "用户": "获取'Boris Diaw'的球员的属性，并将球员节点返回。",
        "查询": "FETCH PROP ON player 'Boris Diaw' YIELD vertex as node"
    },
    {
        "用户": "匹配所有球员与其队友之间的关系。",
        "查询": "MATCH (v:player) WITH (v)-[:teammate]->() AS p RETURN p"
    },
    {
        "用户": "查找名为'Jordan'的球员，并返回该球员的节点信息。",
        "查询": "MATCH (v:player {name: \"DeAndre Jordan\"}) RETURN v"
    },
    {
        "用户": "马琳·麦金农是什么物种？",
        "查询": "MATCH (n:character{name:'马琳·麦金农'}) return n.character.species"
    },
    {
        "用户": "找出从 'Tim Duncan' 到 'Tony Parker' 的最多三步反向 '喜欢' 关系路径，并返回路径信息。",
        "查询": "FIND NOLOOP PATH FROM \"Tim Duncan\" TO \"Tony Parker\" OVER like REVERSELY UPTO 3 STEPS YIELD path as p"
    },
    {
        "用户": "Starting from 'Tim Duncan', identify all entities within the two steps that have a 'like' relationship with them, and return detailed information about these relationships.",
        "查询": "GET SUBGRAPH 2 STEPS FROM \"Tim Duncan\" BOTH like YIELD edges as e\n| UNWIND $-.e as a | YIELD $-.a AS a"
    },
    {
        "用户": "您好，请帮我查找一下和 'Danny Green' 有 '喜欢' 关系的实体，然后再找出这些实体的 '队友'。最后，能否返回这些实体及其关系的源节点和目标节点的ID呢？",
        "查询": "$a = GO FROM 'Danny Green' OVER like YIELD like._src AS src, like._dst AS dst;\nGO FROM $a.dst OVER teammate YIELD $a.src AS src, $a.dst, teammate._dst AS dst"
    },
    {
        "用户": "多洛雷斯·乌姆里奇是哪个学院的？",
        "查询": "MATCH (n:character{name:'多洛雷斯·乌姆里奇'})-[e:learn_from]-(n1:college) return n1.college.name"
    },
    {
        "用户": "Obtain the name of the team 'Spurs'.",
        "查询": "FETCH PROP ON team \"Spurs\" YIELD team.name"
    },
    {
        "用户": "Can you help me find the IDs of all entities that have a 'like' relationship with 'Tracy McGrady'?",
        "查询": "GO FROM \"Tracy McGrady\" OVER like YIELD like._dst"
    },
    {
        "用户": "复发性线性棘层松解性皮肤病的易感人群是哪些？",
        "查询": "MATCH (n:disease{name:\"复发性线性棘层松解性皮肤病\"}) return n.disease.easy_get"
    },
    {
        "用户": "找出与 'Tim Duncan' 有双向 '喜欢' 关系且 '喜欢程度' 大于90的实体，返回源实体名、目标实体ID、目标实体名和喜欢程度。",
        "查询": "GO FROM 'Tim Duncan' OVER like bidirect WHERE like.likeness > 90\nYIELD $^.player.name, like._dst, $$.player.name, like.likeness"
    },
    {
        "用户": "请帮我找出'Boris Diaw'所在的球队，然后找出所有球队名中包含'Haw'的时间段和球队信息，最后告诉我球员的姓名、效力开始年份、结束年份和球队名称。",
        "查询": "GO FROM 'Boris Diaw' OVER serve WHERE $$.team.name CONTAINS \"Haw\"\nYIELD $^.player.name, serve.start_year, serve.end_year, $$.team.name"
    },
    {
        "用户": "您好，请帮我找一下年龄大于等于29岁的球员，然后给我他们的ID和年龄信息。",
        "查询": "LOOKUP ON player WHERE player.age >= 29 YIELD id(vertex) as name, player.age AS Age"
    },
    {
        "用户": "Find all entities with a favorite relationship with a player named 'Cory Joseph' and return the relationship paths between these entities.",
        "查询": "MATCH p = (v:player{name: \"Cory Joseph\"})-[e:like]-(v2)\nRETURN p"
    },
    {
        "用户": "Find all the entities that 'Tim Duncan' likes and return the deduplication of the relationship attributes between these entities and the relationship itself.",
        "查询": "MATCH (v:player)-[e:like]->(v2)\nWHERE id(v) == \"Tim Duncan\"\nRETURN DISTINCT properties(e) as props, e"
    },
    {
        "用户": "查找名为'Tim Duncan'的球员经过2到3跳的喜欢的所有实体，并返回所有信息。",
        "查询": "MATCH (:player{name:\"Tim Duncan\"})-[e:like*2..3]->()\nRETURN *"
    },
    {
        "用户": "蒙太·奈特利是什么物种？",
        "查询": "MATCH (n:character{name:'蒙太·奈特利'}) return n.character.species"
    },
    {
        "用户": " 嘿，你能帮我找一下名字叫'Tim Duncan'的球员吗？我想知道他的年龄和ID，还有能不能把ID展示给我看看，最后告诉我ID是多少？",
        "查询": "LOOKUP ON player\nWHERE player.name == 'Tim Duncan'\nYIELD player.age as age, id(vertex) as vid\n| UNWIND $-.vid as a | YIELD $-.a AS a"
    },
    {
        "用户": "找出 'Boris Diaw' 所在的所有球队及其在该球队的服务时间，返回球员姓名、效力起始和结束年份以及队名。",
        "查询": "GO FROM \"Boris Diaw\" OVER serve YIELD $^.player.name, serve.start_year, serve.end_year, $$.team.name"
    },
    {
        "用户": "返回尼可·勒梅周边最多二跳关系的子图？",
        "查询": "GET SUBGRAPH 2 STEPS FROM \"尼可·勒梅\" YIELD VERTICES AS nodes, EDGES AS relationships;"
    },
    {
        "用户": "返回所有为 'Pistons' 效力的球员的姓名。",
        "查询": "MATCH (v)-[:serve]->(t)\nWHERE id(t) == 'Pistons'\nRETURN v.player.name AS Name"
    },
    {
        "用户": "查找球员'LeBron James'所在的球队为'Cavaliers'的路径，返回关系类型和球队名称。",
        "查询": "MATCH (v1:player{name: \"LeBron James\"}) -[r:serve]-> (v2:team{name: \"Cavaliers\"})\nRETURN type(r) AS Type, v2.team.name AS Name"
    },
    {
        "用户": "Find out the teammate relationships between all players and return the names of Player 1 and Player 2.",
        "查询": "MATCH (p1)-[:teammate]->(p2)\nRETURN p1.player.name, p2.player.name"
    },
    {
        "用户": "得了丙型肝炎病毒感染与肾小球肾炎应该去哪个科室就诊？",
        "查询": "GO FROM \"丙型肝炎病毒感染与肾小球肾炎\" OVER cure_department YIELD dst(edge);"
    },
    {
        "用户": "埃尔德·沃普尔参与了多少个组织？",
        "查询": "MATCH (n:character{name:'埃尔德·沃普尔'})-[e]-(n1:group) return count(n1)"
    },
    {
        "用户": "您好，请帮我查找名为'Jordan'的球员，并提供该球员的节点信息。",
        "查询": "MATCH (v:player {name: \"DeAndre Jordan\"}) RETURN v"
    },
    {
        "用户": "找出 和'LaMarcus Aldridge' 相关的团队名称和相关的球员的名称。",
        "查询": "GO FROM \"LaMarcus Aldridge\" OVER * YIELD $$.team.name, $$.player.name"
    },
    {
        "用户": "Hello, could you help me find all the entities that 'Cory Joseph' has a liking relationship with other players? Can you still tell me the path of their relationship?",
        "查询": "MATCH p = (v:player{name: \"Cory Joseph\"})-[e:like]-(v2)\nRETURN p"
    },
    {
        "用户": "乔治·韦斯莱是弗雷德·韦斯莱的什么关系？",
        "查询": "MATCH (n:character{name:'弗雷德·韦斯莱'})-[e]-(n1:character{name:'乔治·韦斯莱'}) return n1"
    },
    {
        "用户": "请问您能帮我找出与'LaMarcus Aldridge'有关的团队名称和相关球员的名称吗？",
        "查询": "GO FROM \"LaMarcus Aldridge\" OVER * YIELD $$.team.name, $$.player.name"
    },
    {
        "用户": " 请问您能帮我统计一下，有多少条路径能够连接球员v1和 'Tim Duncan'，并且这些路径还能够表示球员v1对 'Tim Duncan' 的喜爱以及他们之间的有效力关系吗？",
        "查询": "MATCH (v1)-[:like]->(v2:player)-[:serve]->(v3)\nWHERE id(v2) == 'Tim Duncan'\nRETURN COUNT(*)"
    },
    {
        "用户": "安东宁·多洛霍夫从属于哪个组织？",
        "查询": "MATCH (n:character{name:'安东宁·多洛霍夫'})-[e:belong_to]-(n1:group) return n1"
    },
    {
        "用户": "查找ID为'Paul Gasol'的顶点，并找出它通过效力关系连接的所有球队，返回此球员的姓名和他服务的球队名称。",
        "查询": "MATCH (v)-[:serve]->(t)\nWHERE (NOT NOT id(v) == 'Paul Gasol') AND id(v) == 'Paul Gasol'\nRETURN v.player.name AS Name, t.team.name AS Team"
    },
    {
        "用户": "伤痛宁膏能治什么病？",
        "查询": "MATCH (n:disease)-[]->(n1:drug{name:'伤痛宁膏'}) return n.disease.name"
    },
    {
        "用户": "您好，请帮我查找一下'Tony Parker'喜欢的所有东西，然后把它们返回给我好吗？",
        "查询": "GO FROM \"Tony Parker\" OVER like YIELD like._dst"
    },
    {
        "用户": "请问您能帮我找一下，从 'Tim Duncan' 到 'Tony Parker' 的最多三步反向 '喜欢' 关系路径吗？",
        "查询": "FIND NOLOOP PATH FROM \"Tim Duncan\" TO \"Tony Parker\" OVER like REVERSELY UPTO 3 STEPS YIELD path as p"
    },
    {
        "用户": "Find the entities that have a 'like' relationship with 'Dejounte', sort them in descending age and ascending name order, skip the first 11 results, and return the names and ages of the next 3 entities.",
        "查询": "MATCH (v1) -[:like]-> (v)\nWHERE id(v1) == 'Dejounte Murray'\nRETURN v.player.name AS Name, v.player.age AS Age\nORDER BY Age DESC, Name ASC\nSKIP 11\nLIMIT 3"
    },
    {
        "用户": "巴希达·巴沙特的眼睛颜色是什么？",
        "查询": "LOOKUP ON character WHERE character.name=='巴希达·巴沙特' YIELD properties(vertex).eye AS eye"
    },
    {
        "用户": "糖尿病的治疗时长通常是多久？",
        "查询": "MATCH (n:disease{name:\"糖尿病\"}) return n.disease.cure_lasttime"
    },
    {
        "用户": "Can you help me find all the entities that Boris Diaw likes and give me their IDs?",
        "查询": "GO FROM \"Boris Diaw\" OVER like YIELD like._dst"
    },
    {
        "用户": "Hello, please help me identify the relationship between players with a liking level of -1.",
        "查询": "match (v:player)-[e:like{likeness:-1}]->()  RETURN e"
    },
    {
        "用户": "您好，请帮我找出与球员 'Grant Hill' 有两跳 '喜欢' 关系的实体，并把这些路径返回给我。",
        "查询": "MATCH p = ()-[:like*2]->(v:player) WHERE id(v) == 'Grant Hill' RETURN p"
    },
    {
        "用户": "找出所有喜欢'Tony Parker' 和 'Tim Duncan' 的实体，并返回这些实体及其关系，但排除 'Tony Parker' 和 'Tim Duncan' 之间的关系。",
        "查询": "MATCH (v:player)-[e:like]->(v2) WHERE none_direct_dst(e) IN [\"Tony Parker\", \"Tim Duncan\"] RETURN *\nMINUS\nMATCH (v:player)-[e:like]->(v2) WHERE id(v2) IN [\"Tony Parker\", \"Tim Duncan\"] RETURN *"
    },
    {
        "用户": "您好，请帮我找一下ID为'Jason Kidd'的球员的姓名。",
        "查询": "MATCH (v)\nWHERE id(v) == 'Tim Duncan'\nRETURN v.player.name AS Name"
    },
    {
        "用户": "您好，请帮我找出从 'Tim Duncan' 到 'Nobody' 或 'Spur' 的 '喜欢' 关系的路径，最多包含3个节点，并返回这些路径。",
        "查询": "FIND NOLOOP PATH FROM \"Tim Duncan\" TO \"Nobody\",\"Spur\" OVER like REVERSELY UPTO 3 STEPS YIELD path as p"
    },
    {
        "用户": "厄克特从属于哪个组织？",
        "查询": "MATCH (n:character{name:'厄克特'})-[]-(n1) return n1.group.name"
    },
    {
        "用户": "Find players over 35 years old, count their number, total age, maximum age, minimum age, average age plus 1 and labels, and sort them by ID, quantity, maximum age, and minimum age. Skip the top 10 results and return 20 results.",
        "查询": "MATCH(n:player)-[:like]->(m)\n  WHERE n.player.age > 35\n  RETURN DISTINCT id(n) AS id,\n                  count(n) AS count,\n                  sum(floor(n.player.age)) AS sum,\n                  max(m.player.age) AS max,\n                  min(n.player.age) AS min,\n                  avg(distinct n.player.age)+1 AS age,\n                  labels(m) AS lb\n        ORDER BY id, count, max, min\n        SKIP 10 LIMIT 20;"
    },
    {
        "用户": "Find all the teams' Boris Diaw 'belongs to and their service time in that team, return the player name, start and end years of service, and team name.",
        "查询": "GO FROM \"Boris Diaw\" OVER serve YIELD $^.player.name, serve.start_year, serve.end_year, $$.team.name"
    },
    {
        "用户": "莫迪丝蒂·巴瑞波恩的父亲是什么物种？",
        "查询": "MATCH (n:character{name:'莫迪丝蒂·巴瑞波恩'})-[e:kindred{rel_type:'父亲'}]-(n1) return n1.character.species"
    },
    {
        "用户": "阿切尔·埃弗蒙德是什么物种？",
        "查询": "MATCH (n:character{name:'阿切尔·埃弗蒙德'}) return n.character.species"
    },
    {
        "用户": "查找名为'Tracy McGrady'的球员在2000年开始所效力或喜欢的所有实体及关系。",
        "查询": "MATCH (:player{name:\"Tracy McGrady\"})-[e:serve|like{start_year: 2000}]-(v)\nRETURN e, v"
    },
    {
        "用户": "Starting from 'Tim Duncan', identify all entities with a distance of 2 steps that have 'like' relationships with 'Tim Duncan', and return the edge information of these relationships.",
        "查询": "GET SUBGRAPH 2 STEPS FROM \"Tim Duncan\" BOTH like YIELD edges as e\n| UNWIND $-.e as a | YIELD $-.a AS a"
    },
    {
        "用户": "Returns the relationships between all players and their teammates.",
        "查询": "MATCH (v:player) WITH (v)-[:teammate]->() AS p RETURN p"
    },
    {
        "用户": "请问您能帮我找出与名为'Damian Lillard'的球员喜欢的所有事物有关系的实体的年龄吗？然后按照年龄从小到大排序，给我返回前三个实体及其年龄好吗？",
        "查询": "MATCH (v:player{name: \"Damian Lillard\"})-[:like]-(v2)--(v3)\nWITH v3, v3.player.age AS age\nRETURN v3, age ORDER BY age LIMIT 3"
    },
    {
        "用户": "请问您能帮我找到 'Tim Duncan' 喜欢的人或事物以及这些人或事物喜欢的其他人或事物吗？我想知道这三类实体的名字。",
        "查询": "MATCH (v1) -[:like]-> (v2) -[:like]-> (v3)\nWHERE id(v1) == \"Tim Duncan\"\nRETURN v1.player.name AS Player, v2.player.name AS Friend, v3.player.name AS FoF"
    },
    {
        "用户": "血稠的注意事项有哪些？",
        "查询": "MATCH (n:disease{name:\"血稠\"}) return n.disease.prevent"
    },
    {
        "用户": "找出名为'Tim Duncan'的球员所喜欢的喜好度为90的实体，且与该球员距离为2到3的所有实体，并返回这些实体及它们之间的关系。",
        "查询": "MATCH (:player{name:\"Tim Duncan\"})-[e:like*2..3{likeness: 90}]->(v)\nRETURN e, v"
    },
    {
        "用户": "Hello, could you please help me find players aged 30 and return their names and age plus 1 result?",
        "查询": "LOOKUP ON player WHERE player.age == 30 YIELD player.name, player.age + 1"
    },
    {
        "用户": "Identify entities that have a 'liking' or 'teammate' relationship with 'Dwight Howard', and return their liking level, teammate start year, and endpoint entity names.",
        "查询": "GO FROM \"Dwight Howard\" OVER like, teammate REVERSELY YIELD like.likeness, teammate.start_year, $$.player.name"
    },
    {
        "用户": "疥疮的发病原因是什么？",
        "查询": "MATCH (n:disease{name:\"疥疮\"}) return n.disease.cause"
    },
    {
        "用户": "找出名为'Tracy McGrady'的球员所'喜欢'的所有实体，且喜欢程度为90，返回这些实体和它们之间的关系。",
        "查询": "MATCH (:player{name:\"Tracy McGrady\"})-[e:like{likeness: 90}]->(v)\nRETURN e, v"
    },
    {
        "用户": "请问您能帮我找一下，球员 'Tim Duncan' 和球队 'Spurs' 之间最短的路径吗？最多只能有3个跳跃的关系。谢谢！",
        "查询": "MATCH p = allShortestPaths( (a:player)-[e:serve*..3]-(b:team) )\n  WHERE a.player.name == 'Tim Duncan' AND b.team.name == 'Spurs'\n  RETURN p"
    },
    {
        "用户": " 您好，请帮我找一下年龄超过30.5岁的球员，然后给我他们的ID和年龄。",
        "查询": "LOOKUP ON player WHERE player.age > 30.5 YIELD id(vertex) as name, player.age AS Age"
    },
    {
        "用户": "心脏病的得病概率是多少？",
        "查询": "LOOKUP ON disease WHERE disease.name == \"心脏病\" YIELD properties(vertex).get_prob"
    },
    {
        "用户": "Hello, please help me obtain the names and age information of 'Boris Diaw' and 'Tony Parker' players and ensure that they are not returned to me in duplicate.",
        "查询": "FETCH PROP ON player \"Boris Diaw\", \"Tony Parker\" YIELD DISTINCT player.name, player.age"
    },
    {
        "用户": "请问您能帮我查找一下，与 'Dwight Howard' 有 '喜欢' 或 '队友' 关系的实体吗？我需要获取这些实体的喜欢程度、队友开始年份以及终点实体名称。",
        "查询": "GO FROM \"Dwight Howard\" OVER like, teammate REVERSELY YIELD like.likeness, teammate.start_year, $$.player.name"
    },
    {
        "用户": "请问您能帮我找到球队'Spurs'的名字吗？",
        "查询": "FETCH PROP ON team \"Spurs\" YIELD team.name"
    },
    {
        "用户": "Can you help me identify entities that have a 'like' relationship with 'Tim Duncan'? I need to return detailed information about these relationships.",
        "查询": "GET SUBGRAPH 2 STEPS FROM \"Tim Duncan\" BOTH like YIELD edges as e\n| UNWIND $-.e as a | YIELD $-.a AS a"
    },
    {
        "用户": "您好，请问您能帮我找到名为'Boris Diaw'的球员节点并返回吗？",
        "查询": "MATCH (n:player) WHERE id(n) == \"Boris Diaw\" RETURN n;"
    },
    {
        "用户": "Find all entities and relationships that a player named 'Tracy McGrady' has played or liked since 2000.",
        "查询": "MATCH (:player{name:\"Tracy McGrady\"})-[e:serve|like{start_year: 2000}]-(v)\nRETURN e, v"
    },
    {
        "用户": "Return the relationship properties of 'Tony Parker' liking 'Tim Duncan' and 'Grant Hill' liking 'Tracy McGrady'.",
        "查询": "FETCH PROP ON like \"Tony Parker\"->\"Tim Duncan\", \"Grant Hill\" -> \"Tracy McGrady\" YIELD edge as relationship |\nYIELD properties($-.relationship)"
    },
    {
        "用户": "得了高血压推荐吃什么药？",
        "查询": "GO FROM \"高血压\" OVER recommend_drug YIELD dst(edge);"
    },
    {
        "用户": " 您好，请问您能帮我找一下'Cory Joseph'这个球员和其他球员之间有喜欢关系的所有实体吗？还能告诉我它们之间的关系路径吗？",
        "查询": "MATCH p = (v:player{name: \"Cory Joseph\"})-[e:like]-(v2)\nRETURN p"
    },
    {
        "用户": "三尖瓣闭锁的注意事项有哪些？",
        "查询": "MATCH (n:disease{name:\"三尖瓣闭锁\"}) return n.disease.prevent"
    },
    {
        "用户": "查看和糖尿病相关的所有信息？",
        "查询": "GET SUBGRAPH 1 STEPS FROM \"糖尿病\" YIELD VERTICES AS nodes, EDGES AS all_edges"
    },
    {
        "用户": "Find all entities that 'like' and 'Tony Parker', and return the endpoint IDs of their 'like' relationship with 'Tony Parker'.",
        "查询": "GO FROM \"Tony Parker\" OVER like REVERSELY YIELD like._dst"
    },
    {
        "用户": "奥塔莱恩·甘布尔是哪个组织的成员？",
        "查询": "MATCH (n:character{name:'奥塔莱恩·甘布尔'})-[e:belong_to]-(n1:group) return n1"
    },
    {
        "用户": "克丽奥娜是什么物种？",
        "查询": "MATCH (n:character{name:'克丽奥娜'}) return n.character.species"
    },
    {
        "用户": "Can you help me find out about 'Tim''s favorite entities and their related 2-3 level relationships?",
        "查询": "MATCH (:player{name: \"Tim Duncan\"})-[e:like*2..3]->(v)\nRETURN e, v"
    },
    {
        "用户": "雅各布·科瓦尔斯基的祖母的孙辈有谁？",
        "查询": "MATCH (n:character)-[e:kindred{rel_type:'孙辈'}]-(n1) WHERE n.character.name=='雅各布·科瓦尔斯基的祖母' return n1"
    },
    {
        "用户": "请问您能帮我查找一下，与'Dwight Howard'有喜欢或队友关系的实体吗？我需要知道这些实体的喜欢程度、队友开始年份和终点实体名称。",
        "查询": "GO FROM \"Dwight Howard\" OVER like, teammate REVERSELY YIELD like.likeness, teammate.start_year, $$.player.name"
    },
    {
        "用户": "您好，请帮我查找一下年龄为40岁的球员，并将他们的姓名返回给我好吗？",
        "查询": "$a = LOOKUP ON player WHERE player.age == 40 YIELD id(vertex) as id;\nFETCH PROP ON player $a.id YIELD player.name"
    },
    {
        "用户": "请问您能帮我找出与 'Kobe Bryant' 有喜欢关系的实体吗？然后再把这些实体的名称返回给我，包括通过两步路径相连的实体。",
        "查询": "GO 2 STEPS FROM 'Kobe Bryant' OVER like REVERSELY YIELD $$.player.name"
    },
    {
        "用户": "得了糖尿病推荐吃什么药？",
        "查询": "GO FROM \"糖尿病\" OVER recommend_drug YIELD dst(edge);"
    },
    {
        "用户": "伊丽莎白·斯马奇林是什么物种？",
        "查询": "MATCH (n:character{name:'伊丽莎白·斯马奇林'}) return n.character.species"
    },
    {
        "用户": "找出所有与球员 'Grant Hill' 距离为2跳 '喜欢' 关系的实体，并返回相关路径。",
        "查询": "MATCH p = ()-[:like*2]->(v:player) WHERE id(v) == 'Grant Hill' RETURN p"
    },
    {
        "用户": "Hello, please help me find an entity that has a 'like' or 'teammate' relationship with 'Manu Ginobili'. If it is' like ', please ensure that the liking level is greater than 90, and return the liking level of these entities, the starting year when they became teammates with' Manu Ginobili ', and the entity name.",
        "查询": "GO FROM \"Manu Ginobili\" OVER like, teammate REVERSELY WHERE like.likeness > 90\nYIELD like.likeness, teammate.start_year, $$.player.name"
    },
    {
        "用户": "找出和 'Danny Green' 通过 '喜欢' 关系相连的实体，再找出这些实体的 '队友'，并返回这些实体及其关系的源节点和目标节点的ID。",
        "查询": "$a = GO FROM 'Danny Green' OVER like YIELD like._src AS src, like._dst AS dst;\nGO FROM $a.dst OVER teammate YIELD $a.src AS src, $a.dst, teammate._dst AS dst"
    },
    {
        "用户": "创建两条两个实体之间的 '喜欢' 关系，'Tim Duncan' 喜欢 'Tim Parker' 的程度为 99，'Tim Parker' 喜欢 'Tony Parker' 的程度为 90。",
        "查询": "INSERT EDGE like(likeness) VALUES \"Tim Duncan\"->\"Tim Parker\":(99);\nINSERT EDGE like(likeness) VALUES \"Tim Parker\"->\"Tony Parker\":(90);"
    },
    {
        "用户": "查找年龄大于等于29岁的球员实体，并返回这些实体的ID和年龄信息。",
        "查询": "LOOKUP ON player WHERE player.age >= 29 YIELD id(vertex) as name, player.age AS Age"
    },
    {
        "用户": "您好，请帮我找出与 'Tim Duncan' 之间有 '喜欢' 和 '服务' 关系的实体，距离为 3，这些实体需要有标签且年龄大于 40，然后将它们返回给我。",
        "查询": "GO 3 STEPS FROM \"Tim Duncan\" OVER like,serve\n  WHERE size(labels($$))>0 AND $$.player.age>40\n  yield $$ as v"
    },
    {
        "用户": "塞缪尔·G·寇豪格的性别是什么？",
        "查询": "LOOKUP ON character WHERE character.name=='塞缪尔·G·寇豪格' YIELD properties(vertex).gender AS gender"
    },
    {
        "用户": "布拉德利从属于哪个组织？",
        "查询": "MATCH (n:character{name:'布拉德利'})-[e:belong_to]-(n1:group) return n1"
    },
    {
        "用户": "Starting from 'Tony Parker' and following a bidirectional 'like' relationship, go through steps 0 to 2 to return the IDs of all non repeating entities.",
        "查询": "GO 0 TO 2 STEPS FROM 'Tony Parker' OVER like BIDIRECT YIELD DISTINCT like._dst"
    },
    {
        "用户": "Obtain the name and age attributes of the 'Tony Parker' player.",
        "查询": "FETCH PROP ON player \"Tony Parker\" YIELD player.name, player.age"
    },
    {
        "用户": "Hey, can you help me find out the mutual liking relationships between 'Duncan' players and other players? I want to know the degree of liking between them.",
        "查询": "MATCH p2=(:player{name:\"Tim Duncan\"})-[e:like*1..2]-(:player{name:\"Tim Duncan\"})\nRETURN e.likeness AS e1"
    },
    {
        "用户": "请问您能帮我查找一下'Spurs'这支球队的队名属性吗？",
        "查询": "FETCH PROP ON team \"Spurs\" YIELD team.name"
    },
    {
        "用户": "查找名为‘Yao Ming’的球员及其任职的所有实体，并返回原始实体的名称。",
        "查询": "MATCH (v:player {name: \"Yao Ming\"})-[:serve*0..1]->() RETURN v.player.name"
    },
    {
        "用户": "Insert a 'like' edge, pointing from 'Tim Duncan' to 'Tim Parker', with a liking level of 99; Insert a 'like' edge, pointing from 'Tim Parker' to 'Tony Parker', with a liking level of 90.",
        "查询": "INSERT EDGE like(likeness) VALUES \"Tim Duncan\"->\"Tim Parker\":(99);\nINSERT EDGE like(likeness) VALUES \"Tim Parker\"->\"Tony Parker\":(90);"
    },
    {
        "用户": "返回前两个球员的姓名属性，并按照姓名属性进行排序。",
        "查询": "match (v:player) return properties(v).name AS name order by name limit 2;"
    },
    {
        "用户": "查找所有为 'Pistons' 队伍服务的球员，并返回这些球员的名字。",
        "查询": "MATCH (v)-[:serve]->(t)\nWHERE id(t) == 'Pistons'\nRETURN v.player.name AS Name"
    },
    {
        "用户": "您好，请帮我找一下与 'Manu Ginobili' 有亲密友好关系的人，或者是他的队友。如果是喜欢的关系，能否筛选出喜欢程度大于90的实体，并提供他们的喜欢程度、开始年份和名称。谢谢！",
        "查询": "GO FROM \"Manu Ginobili\" OVER like, teammate REVERSELY WHERE like.likeness > 90\nYIELD like.likeness, teammate.start_year, $$.player.name"
    },
    {
        "用户": "罗伯茨的妻子是谁？",
        "查询": "MATCH (n:character)-[e:kindred{rel_type:'妻子'}]-(n1) WHERE n.character.name=='罗伯茨' return n1"
    },
    {
        "用户": "Hello, please help me find out the type and quantity of relationships with a player named 'Tim Duncan'.",
        "查询": "MATCH (v:player{name: 'Tim Duncan'})-[e]->() RETURN type(e), count(*)"
    },
    {
        "用户": "巴巴吉德·阿金巴德从属于哪个组织？",
        "查询": "MATCH (n:character{name:'巴巴吉德·阿金巴德'})-[e:belong_to]-(n1:group) return n1"
    },
    {
        "用户": "Hello, please help me find the relationship between 'Tony Parker' and 'Tim Duncan', as well as the relationship properties between 'Grant Hill' and 'Tracy McGrady'.",
        "查询": "FETCH PROP ON like \"Tony Parker\"->\"Tim Duncan\", \"Grant Hill\" -> \"Tracy McGrady\" YIELD edge as relationship |\nYIELD properties($-.relationship)"
    },
    {
        "用户": "找出与 'Paul Gasol' 通过 '喜欢'、'服务'、'队友' 关系相连的所有实体，并返回这些关系的目标实体的 ID。",
        "查询": "GO FROM \"Paul Gasol\" OVER * YIELD like._dst, serve._dst, teammate._dst"
    },
    {
        "用户": "Hey, can you help me get the names and age information of 'Boris Diaw' and 'Tony Parker' players? Then give me the result after removing the weight.",
        "查询": "FETCH PROP ON player \"Boris Diaw\", \"Tony Parker\" YIELD DISTINCT player.name, player.age"
    },
    {
        "用户": "Hello, could you please help me find the names of players who have direct or indirect service relationships with player 'Rudy Gay'.",
        "查询": "MATCH (v:player {name: \"Rudy Gay\"})-[:serve*0..1]->(n) RETURN n.player.name"
    },
    {
        "用户": "乔治·韦斯莱参与了多少个组织？",
        "查询": "MATCH (n:character{name:'乔治·韦斯莱'})-[e]-(n1:group) return count(n1)"
    },
    {
        "用户": "请问您能帮我找到所有喜欢Grant Hill的人吗？我需要他们与Grant Hill的喜欢关系的终点ID。",
        "查询": "GO FROM \"Grant Hill\" OVER like REVERSELY YIELD like._dst"
    },
    {
        "用户": "威尔米娜·塔夫特的儿子是谁？",
        "查询": "MATCH (n:character{name:'威尔米娜·塔夫特'})-[e:kindred{rel_type:'儿子'}]-(n1) return n1"
    },
    {
        "用户": "哪些人物是邓布利多家族的成员？",
        "查询": "MATCH (n:character)-[e]-(n1:group{name:'邓布利多家族'}) return n"
    },
    {
        "用户": "Find players over 35 years old, count their number, total age, maximum age, minimum age, average age plus 1 and their labels, and sort them by ID, number, maximum age, and minimum age. Skip the top 10 results and return 20 results.",
        "查询": "MATCH(n:player)-[:like]->(m)\n  WHERE n.player.age > 35\n  RETURN DISTINCT id(n) AS id,\n                  count(n) AS count,\n                  sum(floor(n.player.age)) AS sum,\n                  max(m.player.age) AS max,\n                  min(n.player.age) AS min,\n                  avg(distinct n.player.age)+1 AS age,\n                  labels(m) AS lb\n        ORDER BY id, count, max, min\n        SKIP 10 LIMIT 20;"
    },
    {
        "用户": "安东宁·多洛霍夫的眼睛颜色是什么？",
        "查询": "LOOKUP ON character WHERE character.name=='安东宁·多洛霍夫' YIELD properties(vertex).eye AS eye"
    },
    {
        "用户": "找出名为'Carmelo Anthony'的球员所喜欢的实体，返回该球员的姓名和年龄。",
        "查询": "MATCH (v:player)-[e:like]->(t) WHERE v.player.name=='Carmelo Anthony'  RETURN v.player.name, v.player.age"
    },
    {
        "用户": "找出与 'Tim Duncan' 有 '喜欢' 关系且喜欢程度大于90的实体，返回源实体名、目标实体ID、目标实体名和喜欢程度。",
        "查询": "GO FROM 'Tim Duncan' OVER like bidirect WHERE like.likeness > 90\nYIELD $^.player.name, like._dst, $$.player.name, like.likeness"
    },
    {
        "用户": "Find the entities and relationships that a player named 'Tracy McGrady' has served or liked since 2000.",
        "查询": "MATCH (:player{name:\"Tracy McGrady\"})-[e:serve|like{start_year: 2000}]->(v)\nRETURN e, v"
    },
    {
        "用户": "得了糖尿病推荐吃什么食物？",
        "查询": "MATCH (n:disease)-[e:recommend_eat]->(n1:food) WHERE n.disease.name=='糖尿病' return n1.food.name"
    },
    {
        "用户": "得了高血压推荐吃什么药？",
        "查询": "GO FROM \"高血压\" OVER recommend_drug YIELD dst(edge);"
    },
    {
        "用户": "阿切尔·埃弗蒙德从属于哪个组织？",
        "查询": "MATCH (n:character{name:'阿切尔·埃弗蒙德'})-[e:belong_to]-(n1:group) return n1"
    },
    {
        "用户": "您好，请帮我找出那些喜欢程度为-1的球员之间的关系边吧。",
        "查询": "match (v:player)-[e:like{likeness:-1}]->()  RETURN e"
    },
    {
        "用户": " 您好，请帮我查找一下年龄超过20岁的球员所喜欢或间接喜欢的事物以及他们之间的关系好吗？",
        "查询": "match p= (v:player)-[e:like*1..2]->(d) where v.player.age > 20 return e"
    },
    {
        "用户": "找出和杜格德·麦克费尔相关的五个人？",
        "查询": "MATCH (n:character{name:'杜格德·麦克费尔'})-[e]-(n1) return n LIMIT 5"
    },
    {
        "用户": "Could you please help me find the name of the player named 'Ray Allen'?",
        "查询": "$v1 = YIELD \"Ray Allen\" AS a;\nFETCH PROP ON player $v1.a YIELD player.name AS name"
    },
    {
        "用户": "偏头痛的病因是什么？",
        "查询": "MATCH (n:disease{name:\"偏头痛\"}) return n.disease.cause"
    },
    {
        "用户": "坐骨神经盆腔出口狭窄症的推荐食物是什么？",
        "查询": "MATCH (n:disease)-[e:recommend_eat]->(n1:food) WHERE n.disease.name=='坐骨神经盆腔出口狭窄症' return n1.food.name"
    },
    {
        "用户": "Identify entities that have a 'like' relationship with 'Danny Green', then identify their 'teammates', and return the IDs of the source and target nodes of these entities and their relationships.",
        "查询": "$a = GO FROM 'Danny Green' OVER like YIELD like._src AS src, like._dst AS dst;\nGO FROM $a.dst OVER teammate YIELD $a.src AS src, $a.dst, teammate._dst AS dst"
    },
    {
        "用户": "Can you help me find the people or things that 'Tim Duncan' likes and other people or things that these people or things like? I would like to know the names of these three types of entities.",
        "查询": "MATCH (v1) -[:like]-> (v2) -[:like]-> (v3)\nWHERE id(v1) == \"Tim Duncan\"\nRETURN v1.player.name AS Player, v2.player.name AS Friend, v3.player.name AS FoF"
    },
    {
        "用户": "能帮我返回西弗勒斯·斯内普到多洛雷斯·乌姆里奇的最短路径吗？",
        "查询": "FIND SHORTEST PATH FROM \"西弗勒斯·斯内普\" TO \"多洛雷斯·乌姆里奇\" OVER * YIELD path AS p"
    },
    {
        "用户": "Find all players who have been liked by other players and return their names.",
        "查询": "MATCH (v:player) WHERE [t in [v] | (v)-[:like]->(t)] RETURN v.player.name AS name"
    },
    {
        "用户": "请问您能帮我找到所有 'Tony Parker' 喜欢的实体吗？",
        "查询": "FETCH PROP ON player 'Tony Parker' YIELD player.name as Name |\nGO FROM $-.Name OVER like YIELD like._dst"
    },
    {
        "用户": "获取'Boris Diaw'的球员节点，并将节点返回。",
        "查询": "FETCH PROP ON player 'Boris Diaw' YIELD vertex as node"
    },
    {
        "用户": "霍奇金病的得病概率是多少？",
        "查询": "LOOKUP ON disease WHERE disease.name == \"霍奇金病\" YIELD properties(vertex).get_prob"
    },
    {
        "用户": "Hello, please help me create a 'like' relationship between two entities. Specifically, 'Tim Duncan' likes' Tim Parker 'very much to a degree of 99, while' Tim Parker 'also likes' Tony Parker' to a degree of 90.",
        "查询": "INSERT EDGE like(likeness) VALUES \"Tim Duncan\"->\"Tim Parker\":(99);\nINSERT EDGE like(likeness) VALUES \"Tim Parker\"->\"Tony Parker\":(90);"
    },
    {
        "用户": "Find players known as' Duncan 'who have mutual liking relationships with other players and return their level of liking towards these relationships.",
        "查询": "MATCH p2=(:player{name:\"Tim Duncan\"})-[e:like*1..2]-(:player{name:\"Tim Duncan\"})\nRETURN e.likeness AS e1"
    },
    {
        "用户": "Hello, please help me find the number of preferred physical paths for the player with ID 'Tim Duncan' and let me know.",
        "查询": "MATCH (a:player)\nWHERE id(a)=='Tim Duncan'\nMATCH (a)-[:like]-(b)\nRETURN count(*) AS cnt"
    },
    {
        "用户": "Can you help me find the names of the top two players? Can I still sort by name attribute?",
        "查询": "match (v:player) return properties(v).name AS name order by name limit 2;"
    },
    {
        "用户": "请问您能帮我找出与 'Kobe Bryant' 有关系的实体吗？我想知道与他有 '喜欢' 关系的实体，而且距离不超过两步。能告诉我这些实体的名称吗？",
        "查询": "GO 2 STEPS FROM 'Kobe Bryant' OVER like REVERSELY YIELD $$.player.name"
    },
    {
        "用户": "莫拉格·麦克道格是哪个学院的？",
        "查询": "MATCH (n:character{name:'莫拉格·麦克道格'})-[e:learn_from]-(n1:college) return n1"
    },
    {
        "用户": "戊型病毒性肝炎的症状有哪些？",
        "查询": "MATCH (n:disease)-[e:has_symptom]->(n1:symptom) WHERE n.disease.name=='戊型病毒性肝炎' return n1.symptom.name"
    },
    {
        "用户": "请问您能帮我找出'Boris Diaw'喜欢的所有实体并返回它们的ID吗？",
        "查询": "GO FROM \"Boris Diaw\" OVER like YIELD like._dst"
    },
    {
        "用户": "小儿莫拉雷脑膜炎的主要症状是什么？",
        "查询": "MATCH (n:disease{name:\"小儿莫拉雷脑膜炎\"}) return n.disease.symptom"
    },
    {
        "用户": "请问您能帮我查找一下所有喜欢Steve Nash的实体以及它们与目标实体的关系吗？",
        "查询": "GO FROM \"Steve Nash\" OVER like REVERSELY YIELD like._dst"
    },
    {
        "用户": "Could you please help me search for entities that have a 'like' or 'teammate' relationship with 'Dwight Howard'? I need to obtain the likes of these entities, the start year of my teammates, and the name of the endpoint entity.",
        "查询": "GO FROM \"Dwight Howard\" OVER like, teammate REVERSELY YIELD like.likeness, teammate.start_year, $$.player.name"
    },
    {
        "用户": "Can you help me find out the teammates' relationships between players? I need to get their names.",
        "查询": "MATCH (p1)-[:teammate]->(p2)\nRETURN p1.player.name, p2.player.name"
    },
    {
        "用户": "扎卡赖斯·史密斯的眼睛颜色是什么？",
        "查询": "LOOKUP ON character WHERE character.name=='扎卡赖斯·史密斯' YIELD properties(vertex).eye AS eye"
    },
    {
        "用户": "请问您能帮我查找一下 'Russell Westbrook' 所效力和喜欢的所有实体的 ID 吗？",
        "查询": "GO FROM 'Russell Westbrook' OVER serve, like YIELD serve._dst, like._dst"
    },
    {
        "用户": "Identify all entities that have a liking, service, or teammate relationship with 'Paul Gasol', and return the ID of the target entity for these relationships.",
        "查询": "GO FROM \"Paul Gasol\" OVER * YIELD like._dst, serve._dst, teammate._dst"
    },
    {
        "用户": "小儿营养不良性消瘦的治疗时长是多久？",
        "查询": "MATCH (n:disease{name:\"小儿营养不良性消瘦\"}) return n.disease.cure_lasttime"
    },
    {
        "用户": "查找年龄为30的球员，返回他们的姓名和年龄加1的结果。",
        "查询": "LOOKUP ON player WHERE player.age == 30 YIELD player.name, player.age + 1"
    },
    {
        "用户": "请问您能帮我找到 Tim Duncan 和 Spurs 球队之间最短的路径吗？\n帮我找一下 Tim Duncan 和 Spurs 球队之间最短的路径，谢谢！\n嗨，您好！我需要找到 Tim Duncan 和 Spurs 球队之间最短的路径，能帮帮我吗？",
        "查询": "MATCH p = allShortestPaths( (a:player)-[e:serve*..3]-(b:team) )\n  WHERE a.player.name == 'Tim Duncan' AND b.team.name == 'Spurs'\n  RETURN p"
    },
    {
        "用户": "获取ID为'Carmelo Anthony'的球员的姓名和年龄。",
        "查询": "FETCH PROP ON player \"Carmelo Anthony\" YIELD player.name, player.age"
    },
    {
        "用户": "Could you please help me find the name of the player named 'Ray Allen'?",
        "查询": "$v1 = YIELD \"Ray Allen\" AS a;\nFETCH PROP ON player $v1.a YIELD player.name AS name"
    },
    {
        "用户": "Can you help me identify the number of paths that have a liking relationship with 'Carmelo Anthony'?",
        "查询": "GO FROM \"Carmelo Anthony\" OVER like YIELD like._dst| YIELD COUNT(*)"
    },
    {
        "用户": "您好，请帮我获取一下'Tony Parker'球员的姓名和年龄，可以吗？",
        "查询": "FETCH PROP ON player \"Tony Parker\" YIELD player.name, player.age"
    },
    {
        "用户": "Find the first entity that Tim Duncan likes.",
        "查询": "GO FROM \"Tim Duncan\" OVER like LIMIT 1;"
    },
    {
        "用户": "阿不思·西弗勒斯·波特的父亲是谁？",
        "查询": "MATCH (n:character{name:'阿不思·西弗勒斯·波特'})-[e]-(n1) WHERE e.rel_type=='父亲' return n1"
    },
    {
        "用户": "Identify entities that have a 'liking' or 'teammate' relationship with 'Manu Ginobili', and if 'liking', require a level greater than 90, and return the liking level, start year, and name of these entities.",
        "查询": "GO FROM \"Manu Ginobili\" OVER like, teammate REVERSELY WHERE like.likeness > 90\nYIELD like.likeness, teammate.start_year, $$.player.name"
    },
    {
        "用户": " 嘿，你能帮我找一下'Carmelo Anthony'这个球员喜欢的所有东西吗？还有，能告诉我他的名字和年龄吗？\"",
        "查询": "MATCH (v:player)-[e:like]->(t) WHERE v.player.name=='Carmelo Anthony'  RETURN v.player.name, v.player.age"
    },
    {
        "用户": "Can you help me find the names and node information of all the players?",
        "查询": "match (v:player) return v.player.name, v"
    },
    {
        "用户": "Hello, please help me identify the entity that has a 'like' relationship with player 'Grant Hill' with a distance of 2 jumps, and return the relevant path to me.",
        "查询": "MATCH p = ()-[:like*2]->(v:player) WHERE id(v) == 'Grant Hill' RETURN p"
    },
    {
        "用户": "Can you help me find out the relationship between players and their teammates?",
        "查询": "MATCH (v:player) WITH (v)-[:teammate]->() AS p RETURN p"
    },
    {
        "用户": "玛丽·卢·巴瑞波恩的养子是谁？",
        "查询": "MATCH (n:character{name:'玛丽·卢·巴瑞波恩'})-[e]-(n1) WHERE e.rel_type=='养子' return n1"
    },
    {
        "用户": "Identify the number of paths that have a liking relationship with 'Carmelo Anthony'.",
        "查询": "GO FROM \"Carmelo Anthony\" OVER like YIELD like._dst| YIELD COUNT(*)"
    },
    {
        "用户": "您好，请帮我找出与球员 'Grant Hill' 之间存在距离为2跳的 '喜欢' 关系的实体，并将相关路径返回给我。",
        "查询": "MATCH p = ()-[:like*2]->(v:player) WHERE id(v) == 'Grant Hill' RETURN p"
    },
    {
        "用户": "请问您能帮我查找一下名为 'Ray Allen' 的球员的姓名吗？",
        "查询": "$v1 = YIELD \"Ray Allen\" AS a;\nFETCH PROP ON player $v1.a YIELD player.name AS name"
    },
    {
        "用户": "找出与 'Tracy McGrady' 有 '喜欢' 关系的所有实体，返回这些实体的 ID。",
        "查询": "GO FROM \"Tracy McGrady\" OVER like YIELD like._dst"
    },
    {
        "用户": "厥脱的推荐食物有哪些？",
        "查询": "MATCH (n:disease)-[e:recommend_eat]->(n1:food) WHERE n.disease.name=='厥脱' return n1.food.name"
    },
    {
        "用户": "Find all the people 'Kristaps Porzingis' likes' and return their vids.",
        "查询": "GO FROM \"Tony Parker\" OVER like YIELD id($$) AS vid | RETURN $-.vid AS dst"
    },
    {
        "用户": "罗恩·韦斯莱从属于哪个组织？",
        "查询": "MATCH (n:character{name:'罗恩·韦斯莱'})-[e:belong_to]-(n1:group) return n1"
    },
    {
        "用户": "奥拉·奎尔克的出生地是哪里？",
        "查询": "MATCH (n:character{name:'奥拉·奎尔克'}) return n.character.born"
    },
    {
        "用户": "Find the shortest path with a maximum of three jumps between players aged 45 and a team named 'Spurs', and return the length of the path.",
        "查询": "MATCH p = shortestPath( (a:player)-[e:serve*..3]-(b:team) )\n  WHERE a.player.age > 45 AND b.team.name == 'Spurs'\n  RETURN length(p)"
    },
    {
        "用户": "Hello, please help me find out if there are any players over the age of 20, all the entities they like in 1-2 jumps, and the relationships between them.",
        "查询": "match p= (v:player)-[e:like*1..2]->(d) where v.player.age > 20 return e"
    },
    {
        "用户": "卡图卢斯·斯潘格尔的出生时间是什么？",
        "查询": "MATCH (n:character{name:'卡图卢斯·斯潘格尔'}) return n.character.born"
    },
    {
        "用户": "获取名称为'Spurs'的球队的名称属性。",
        "查询": "FETCH PROP ON team \"Spurs\" YIELD team.name"
    },
    {
        "用户": "Returns the names of all players playing for 'Pistons'.",
        "查询": "MATCH (v)-[:serve]->(t)\nWHERE id(t) == 'Pistons'\nRETURN v.player.name AS Name"
    },
    {
        "用户": "Identify the entities associated with 'Kobe Bryant', including all entities in the 'like' relationship within two steps, and return the names of these entities.",
        "查询": "GO 2 STEPS FROM 'Kobe Bryant' OVER like REVERSELY YIELD $$.player.name"
    },
    {
        "用户": " 嘿，你能帮我找一下'Tim Duncan'这个球员喜欢的喜好度为90的实体吗？还有，能给我找出与他距离在2到3之间的所有实体以及它们之间的关系吗？",
        "查询": "MATCH (:player{name:\"Tim Duncan\"})-[e:like*2..3{likeness: 90}]->(v)\nRETURN e, v"
    },
    {
        "用户": "瓦伦蒂娜·巴斯克斯的出生地是哪里？",
        "查询": "MATCH (n:character{name:'瓦伦蒂娜·巴斯克斯'}) return n.character.born"
    },
    {
        "用户": "查找名为 'Ray Allen' 的球员的姓名。",
        "查询": "$v1 = YIELD \"Ray Allen\" AS a;\nFETCH PROP ON player $v1.a YIELD player.name AS name"
    },
    {
        "用户": "杜格德·麦克利沃的逝世时间是什么？",
        "查询": "LOOKUP ON character WHERE character.name=='杜格德·麦克利沃' YIELD properties(vertex).dead AS dead"
    },
    {
        "用户": "找出所有 '喜欢' 'Tony Parker' 的实体，并返回这些实体与 'Tony Parker' 的 '喜欢' 关系的终点 ID。",
        "查询": "GO FROM \"Tony Parker\" OVER like REVERSELY YIELD like._dst"
    },
    {
        "用户": "Find the age of all entities that are related to players named 'Damian Lillard' and sort them in ascending order of age, returning the top three entities and their ages.",
        "查询": "MATCH (v:player{name: \"Damian Lillard\"})-[:like]-(v2)--(v3)\nWITH v3, v3.player.age AS age\nRETURN v3, age ORDER BY age LIMIT 3"
    },
    {
        "用户": "蒂尔登·图茨的妻子是谁？",
        "查询": "MATCH (n:character)-[e:kindred{rel_type:'妻子'}]-(n1) WHERE n.character.name=='蒂尔登·图茨' return n1"
    },
    {
        "用户": "Hey, can you help me find all the players in the 'Spurs' team? Then return the information of these players to me.",
        "查询": "MATCH (v:team{name:\"Spurs\"})--(v2)\nRETURN v2 AS Player"
    },
    {
        "用户": "Can you help me find the first person Tim Duncan likes?",
        "查询": "GO FROM \"Tim Duncan\" OVER like LIMIT 1;"
    },
    {
        "用户": "Find all players in the team named 'Spurs' and return their information.",
        "查询": "MATCH (v:team{name:\"Spurs\"})--(v2)\nRETURN v2 AS Player"
    },
    {
        "用户": "嘿，能帮我找出喜欢 'Dejounte Murray' 的所有实体中，球员名称和年龄吗？按照年龄降序、名称升序排序，然后跳过前11个结果，给我返回接下来的3个结果。",
        "查询": "MATCH (v1) -[:like]-> (v)\nWHERE id(v1) == 'Dejounte Murray'\nRETURN v.player.name AS Name, v.player.age AS Age\nORDER BY Age DESC, Name ASC\nSKIP 11\nLIMIT 3"
    },
    {
        "用户": "尼古拉·瓦西勒娃是哪个国家的魁地奇队员？",
        "查询": "MATCH (n:character{name:'尼古拉·瓦西勒娃'})-[e:belong_to]-(n1:group) return n1"
    },
    {
        "用户": "贝内迪塔是哪个物种的？",
        "查询": "MATCH (n:character{name:'贝内迪塔·多拉多'}) return n.character.species"
    },
    {
        "用户": "您好，请帮我查找一下名为 'Tony Parker' 的球员喜欢的所有实体，然后将它们返回给我好吗？",
        "查询": "FETCH PROP ON player 'Tony Parker' YIELD player.name as Name |\nGO FROM $-.Name OVER like YIELD like._dst"
    },
    {
        "用户": " 您好，请帮我找一下ID为'Paul Gasol'的顶点，然后找出通过'serve'关系连接的所有球队，最后给我返回这位球员的名字和他效力的球队的名称。",
        "查询": "MATCH (v)-[:serve]->(t)\nWHERE (NOT NOT id(v) == 'Paul Gasol') AND id(v) == 'Paul Gasol'\nRETURN v.player.name AS Name, t.team.name AS Team"
    },
    {
        "用户": "吉德罗·洛哈特的姐姐的弟弟是谁？",
        "查询": "MATCH (n:character)-[e:kindred{rel_type:'弟弟'}]-(n1) WHERE n.character.name=='吉德罗·洛哈特的姐姐' return n1"
    },
    {
        "用户": "尤里克的头发颜色是什么？",
        "查询": "MATCH (n:character{name:'怪人尤里克'}) return n.character.hair"
    },
    {
        "用户": "Hello, could you please help me find the subgraph with a distance of 2, starting from 'Tim Duncan' and through the relationship between 'likes' and' services', and return the detailed information of nodes and edges?",
        "查询": "GET SUBGRAPH WITH PROP 2 STEPS FROM 'Tim Duncan' IN like, serve YIELD vertices as nodes, edges as relationships"
    },
    {
        "用户": "霍奇金病的治疗方式有哪些？",
        "查询": "GO FROM \"霍奇金病\" OVER cure_way YIELD dst(edge);"
    },
    {
        "用户": " 您好，请帮我找一下，有没有年龄超过20岁的球员，他们在1到2次跳跃中喜欢的所有实体以及它们之间的关系。",
        "查询": "match p= (v:player)-[e:like*1..2]->(d) where v.player.age > 20 return e"
    },
    {
        "用户": "Find all the entities that Tony Parker likes and return them.",
        "查询": "GO FROM \"Tony Parker\" OVER like YIELD like._dst"
    },
    {
        "用户": " 嘿，你能帮我找一下'Kyrie Irving'喜欢的所有东西吗？我想知道他喜欢的实体，还有可能的关联关系，最好能给我返回所有相关信息。",
        "查询": "MATCH (:player{name:\"Kyrie Irving\"})-[e:like*2..3]->()\nRETURN *"
    },
    {
        "用户": "Hey, can you help me find all the entities that like 'Dejounte Murray', player names and ages? Sort by age descending and name ascending, then skip the first 11 results and return the next 3 results to me.",
        "查询": "MATCH (v1) -[:like]-> (v)\nWHERE id(v1) == 'Dejounte Murray'\nRETURN v.player.name AS Name, v.player.age AS Age\nORDER BY Age DESC, Name ASC\nSKIP 11\nLIMIT 3"
    },
    {
        "用户": "Find the name of a player named 'Ray Allen'.",
        "查询": "$v1 = YIELD \"Ray Allen\" AS a;\nFETCH PROP ON player $v1.a YIELD player.name AS name"
    },
    {
        "用户": "Hey, can you help me find the teams' Rajon Rondo 'played for between 2013 and 2018? I need to know his name, the years he started and ended playing, and the name of the team.",
        "查询": "GO FROM \"Rajon Rondo\" OVER serve WHERE serve.start_year >= 2013 AND serve.end_year <= 2018\nYIELD $^.player.name, serve.start_year, serve.end_year, $$.team.name"
    },
    {
        "用户": "找出所有喜欢 'Tony Parker' 和 'Tim Duncan' 的球员，并返回这些球员及其关系，但不包括 'Tony Parker' 和 'Tim Duncan' 之间的喜欢关系。",
        "查询": "MATCH (v:player)-[e:like]->(v2) WHERE none_direct_dst(e) IN [\"Tony Parker\", \"Tim Duncan\"] RETURN *\nMINUS\nMATCH (v:player)-[e:like]->(v2) WHERE id(v2) IN [\"Tony Parker\", \"Tim Duncan\"] RETURN *"
    },
    {
        "用户": "获取'Carmelo'的球员的姓名和年龄。",
        "查询": "FETCH PROP ON player \"Carmelo Anthony\" YIELD player.name, player.age"
    },
    {
        "用户": "找出球队名为'Spurs'的所有球员并返回它们的节点信息。",
        "查询": "MATCH (v:team{name:\"Spurs\"})--(v2)\nRETURN v2 AS Player"
    },
    {
        "用户": "西莫·斐尼甘的头发颜色是什么？",
        "查询": "MATCH (n:character{name:'西莫·斐尼甘'}) return n.character.hair"
    },
    {
        "用户": "找出名为'Carter'的球员所喜欢的球员距离为0到3跳的效力球队，统计为这些球队所服务的球员总数。",
        "查询": "MATCH (:player{name: \"Vince Carter\"})-[e1:like]->()-[e2:serve*0..3]->()<-[e3:serve]-(v)\nRETURN count(v)"
    },
    {
        "用户": "莫迪克斯·埃格的眼睛颜色是什么？",
        "查询": "MATCH (n:character{name:'莫迪克斯·埃格'}) return n.character.eye"
    },
    {
        "用户": "找出和坎坦克卢斯·诺特相关的两个人？",
        "查询": "MATCH (n:character{name:'坎坦克卢斯·诺特'})-[e]-(n1) return n LIMIT 2"
    },
    {
        "用户": "兰斯洛特是哪个物种的？",
        "查询": "MATCH (n:character) WHERE n.character.name=='兰斯洛特' return n.character.species"
    },
    {
        "用户": "液脱的得病概率是多少？",
        "查询": "LOOKUP ON disease WHERE disease.name == \"液脱\" YIELD properties(vertex).get_prob"
    },
    {
        "用户": "拉奇迪恩是什么性别？",
        "查询": "MATCH (n:character{name:'拉奇迪恩'}) return n.character.gender"
    },
    {
        "用户": " 您好，请帮我查找一下年龄为20岁的球员，然后将他们的所有节点信息返回给我好吗？",
        "查询": "match (v:player{age: 1+19}) RETURN v"
    },
    {
        "用户": "罗伯茨是什么物种的？",
        "查询": "MATCH (n:character{name:'罗伯茨'}) return n.character.species"
    },
    {
        "用户": "您好，请帮我查找一下名为'Rudy Gay'的球员的所有关系类型和数量，可以吗？",
        "查询": "MATCH (v:player{name: 'Rudy Gay'})-[e]->() RETURN type(e), count(*)"
    },
    {
        "用户": "Can you help me find all the entities that Boris Diaw likes and return their IDs?",
        "查询": "GO FROM \"Boris Diaw\" OVER like YIELD like._dst"
    },
    {
        "用户": "Hello, please help me identify all entities that like Tony Parker and return the endpoint IDs of their liking relationships with Tony Parker.",
        "查询": "GO FROM \"Tony Parker\" OVER like REVERSELY YIELD like._dst"
    },
    {
        "用户": "从 'Ricky Rubio' 开始，沿着 '喜欢' 关系，向外扩展 1 到 2 步，返回所有实体的 ID、关系权重和名称。",
        "查询": "GO 1 TO 2 STEPS FROM 'Tony Parker' OVER like YIELD DISTINCT like._dst, like.likeness, $$.player.name"
    },
    {
        "用户": "得了支气管炎应该去哪个科室就诊？",
        "查询": "GO FROM \"支气管炎\" OVER cure_department YIELD dst(edge);"
    },
    {
        "用户": "支气管炎的得病概率是多少？",
        "查询": "LOOKUP ON disease WHERE disease.name == \"支气管炎\" YIELD properties(vertex).get_prob"
    },
    {
        "用户": "Could you please help me obtain the name and age attributes of the 'Tony Parker' player?",
        "查询": "FETCH PROP ON player \"Tony Parker\" YIELD player.name, player.age"
    },
    {
        "用户": "维奥莱塔·伯斯德的血统是什么？",
        "查询": "MATCH (n:character{name:'维奥莱塔·伯斯德'}) return n.character.blood"
    },
    {
        "用户": "返回名为'Tim Duncan'的球员与其有关系的关系类型及数量。",
        "查询": "MATCH (v:player{name: 'Tim Duncan'})-[e]->() RETURN type(e), count(*)"
    },
    {
        "用户": "请问您能帮我找到40岁的球员并告诉我他们的姓名吗？",
        "查询": "$a = LOOKUP ON player WHERE player.age == 40 YIELD id(vertex) as id;\nFETCH PROP ON player $a.id YIELD player.name"
    },
    {
        "用户": "Find all entities that like 'Steve Nash' and return the target entities in their relationship with 'Steve Nash'.",
        "查询": "GO FROM \"Steve Nash\" OVER like REVERSELY YIELD like._dst"
    },
    {
        "用户": " 嘿，你能帮我查一下'Tim Duncan'和其他球员之间的友好关系吗？我想知道他们彼此之间的喜欢程度。",
        "查询": "MATCH p2=(:player{name:\"Tim Duncan\"})-[e:like*1..2]-(:player{name:\"Tim Duncan\"})\nRETURN e.likeness AS e1"
    },
    {
        "用户": "Find players aged (1+19) and return all node information for these players.",
        "查询": "match (v:player{age: 1+19}) RETURN v"
    },
    {
        "用户": "您好，请帮我找到'Boris Diaw'球员的属性，并将球员节点返回。",
        "查询": "FETCH PROP ON player 'Boris Diaw' YIELD vertex as node"
    },
    {
        "用户": "请问您能帮我查找一下'Carmelo'球员的姓名和年龄吗？",
        "查询": "FETCH PROP ON player \"Carmelo Anthony\" YIELD player.name, player.age"
    },
    {
        "用户": "返回从 'Tim Duncan' 到 'Tony Parker' 的最多三步反向 '喜欢' 关系的路径信息。",
        "查询": "FIND NOLOOP PATH FROM \"Tim Duncan\" TO \"Tony Parker\" OVER like REVERSELY UPTO 3 STEPS YIELD path as p"
    },
    {
        "用户": "妖精爵士歌手是什么物种？",
        "查询": "MATCH (n:character{name:'妖精爵士歌手'}) return n.character.species"
    },
    {
        "用户": "亨利七世的儿子是谁？",
        "查询": "MATCH (n:character{name:'亨利七世'})-[e:kindred{rel_type:'儿子'}]-(n1) return n1"
    },
    {
        "用户": "得了戊型病毒性肝炎推荐吃什么药？",
        "查询": "GO FROM \"霍奇金病\" OVER recommend_drug YIELD dst(edge);"
    },
    {
        "用户": " 嘿，你能帮我查一下叫'Yao Ming'的球员是为哪个球队效力的吗？还有，能告诉我他的真实姓名吗？",
        "查询": "MATCH (v:player {name: \"Yao Ming\"})-[:serve*0..1]->() RETURN v.player.name"
    },
    {
        "用户": "嘿，你能帮我找出与 'Tim Duncan' 有双向 '喜欢' 关系且 '喜欢程度' 大于90的实体吗？返回源实体名、目标实体ID、目标实体名和喜欢程度。",
        "查询": "GO FROM 'Tim Duncan' OVER like bidirect WHERE like.likeness > 90\nYIELD $^.player.name, like._dst, $$.player.name, like.likeness"
    },
    {
        "用户": "Find the shortest path of up to 3 jumps between player 'Tim Duncan' and team 'Spurs' and return to that path.",
        "查询": "MATCH p = allShortestPaths( (a:player)-[e:serve*..3]-(b:team) )\n  WHERE a.player.name == 'Tim Duncan' AND b.team.name == 'Spurs'\n  RETURN p"
    },
    {
        "用户": "Find all the entities that Boris Diaw likes and return their IDs.",
        "查询": "GO FROM \"Boris Diaw\" OVER like YIELD like._dst"
    },
    {
        "用户": "您好，请帮我查找一下球员 'Grant Hill' 的姓名和年龄属性，可以吗？",
        "查询": "FETCH PROP ON player \"Grant Hill\" YIELD player.name, player.age"
    },
    {
        "用户": "得了戊型病毒性肝炎的注意事项有哪些？",
        "查询": "LOOKUP ON disease WHERE disease.name == \"戊型病毒性肝炎\" YIELD properties(vertex).prevent"
    },
    {
        "用户": "雅各布·科瓦尔斯基的祖母的血统是什么？",
        "查询": "MATCH (n:character{name:'雅各布·科瓦尔斯基的祖母'}) return n.character.blood"
    },
    {
        "用户": "詹姆·小天狼星·波特的父亲是谁？",
        "查询": "MATCH (n:character{name:'詹姆·小天狼星·波特'})-[e]-(n1) WHERE e.rel_type=='父亲' return n1"
    },
    {
        "用户": "Find the shortest path length between players over 45 years old and a team named 'Spurs' with a maximum of three jumps.",
        "查询": "MATCH p = shortestPath( (a:player)-[e:serve*..3]-(b:team) )\n  WHERE a.player.age > 45 AND b.team.name == 'Spurs'\n  RETURN length(p)"
    },
    {
        "用户": "Hello, please help me search for the IDs, relationship weights, and names of all entities starting from 'Ricky Rubio', along the 'like' edge, at a distance of 1 to 2 steps.",
        "查询": "GO 1 TO 2 STEPS FROM 'Tony Parker' OVER like YIELD DISTINCT like._dst, like.likeness, $$.player.name"
    },
    {
        "用户": "找出所有 '喜欢' 'Grant Hill' 的实体，返回这些实体与 'Grant Hill' 的 '喜欢' 关系的终点 ID。",
        "查询": "GO FROM \"Grant Hill\" OVER like REVERSELY YIELD like._dst"
    },
    {
        "用户": "Find players aged 20 and return all node information for these players.",
        "查询": "match (v:player{age: 1+19}) RETURN v"
    },
    {
        "用户": "赫伯特·博克的岳父是谁？",
        "查询": "MATCH (n:character{name:'赫伯特·博克'})-[e]-(n1) WHERE e.rel_type=='岳父' return n1"
    },
    {
        "用户": "泪腺炎的症状有哪些？",
        "查询": "MATCH (n:disease{name:\"泪腺炎\"}) return n.disease.symptom"
    },
    {
        "用户": "嗨，您好！我想请您帮我找出年龄超过45岁的球员和名为'Spurs'的球队之间最多只需要三次跳跃的最短路径长度，可以吗？",
        "查询": "MATCH p = shortestPath( (a:player)-[e:serve*..3]-(b:team) )\n  WHERE a.player.age > 45 AND b.team.name == 'Spurs'\n  RETURN length(p)"
    },
    {
        "用户": "杰克·斯劳珀从属于哪些组织？",
        "查询": "MATCH (n:character{name:'杰克·斯劳珀'})-[e]-(n1) return n1"
    },
    {
        "用户": "找出年龄大于20岁的球员所喜欢或间接喜欢的实体及其关系。",
        "查询": "match p= (v:player)-[e:like*1..2]->(d) where v.player.age > 20 return e"
    },
    {
        "用户": "Hello, could you please help me find out the relationship type and team name of the team 'Cavaliers' where player' LeBron James' is located?",
        "查询": "MATCH (v1:player{name: \"LeBron James\"}) -[r:serve]-> (v2:team{name: \"Cavaliers\"})\nRETURN type(r) AS Type, v2.team.name AS Name"
    },
    {
        "用户": "您好，请帮我找一下与球员'Rudy Gay'有直接或间接服务关系的球员的名字。",
        "查询": "MATCH (v:player {name: \"Rudy Gay\"})-[:serve*0..1]->(n) RETURN n.player.name"
    },
    {
        "用户": "Could you please help me find the path information for a maximum of three reverse 'like' relationship from 'Tim Duncan' to 'Tony Parker'?",
        "查询": "FIND NOLOOP PATH FROM \"Tim Duncan\" TO \"Tony Parker\" OVER like REVERSELY UPTO 3 STEPS YIELD path as p"
    },
    {
        "用户": "小儿雅克什综合征的主要症状是什么？",
        "查询": "MATCH (n:disease{name:\"小儿雅克什综合征\"}) return n.disease.symptom"
    },
    {
        "用户": "吉德罗·洛哈特的姐姐是什么血统？",
        "查询": "MATCH (n:character{name:'吉德罗·洛哈特的姐姐'}) return n.character.blood"
    },
    {
        "用户": "Could you please help me find all the characters that a player named 'Damian Lillard' likes and sort them in descending order of age, returning me the top three characters and their age information?",
        "查询": "MATCH (v:player{name: \"Damian Lillard\"})-[:like]-(v2)--(v3)\nWITH v3, v3.player.age AS age\nRETURN v3, age ORDER BY age LIMIT 3"
    },
    {
        "用户": "Find the player node with ID 'Boris Diaw' and return it.",
        "查询": "MATCH (n:player) WHERE id(n) == \"Boris Diaw\" RETURN n;"
    },
    {
        "用户": "亨利·波特的儿子是谁？",
        "查询": "MATCH (n:character)-[e:kindred{rel_type:'儿子'}]-(n1) WHERE n.character.name=='亨利·波特' return n1"
    },
    {
        "用户": "Identify entities with a bidirectional 'like' relationship with 'Tim Duncan' and a 'like degree' greater than 90, and return the source entity name, target entity ID, target entity name, and like degree.",
        "查询": "GO FROM 'Tim Duncan' OVER like bidirect WHERE like.likeness > 90\nYIELD $^.player.name, like._dst, $$.player.name, like.likeness"
    },
    {
        "用户": "Hello, please help me find entities that have a 'like' and 'serve' relationship with Tim Duncan through a jump, starting from 'Tim Duncan'. If you can connect the two after a maximum of three jumps, please return these paths to me.",
        "查询": "GO FROM \"Tim Duncan\" over * YIELD like._dst AS src, serve._src AS dst |\nFIND ALL PATH FROM $-.src TO $-.dst OVER like UPTO 3 STEPS YIELD path as p"
    },
    {
        "用户": "Find the vertex with ID 'Paul Gasol' and connect all teams through the 'serve' relationship, and return the name of this player and the team he plays for..",
        "查询": "MATCH (v)-[:serve]->(t)\nWHERE (NOT NOT id(v) == 'Paul Gasol') AND id(v) == 'Paul Gasol'\nRETURN v.player.name AS Name, t.team.name AS Team"
    },
    {
        "用户": "Find all teammates and favorite entities of 'Manu Ginobili' between the ages of 30 and 40, and return the ages and names of these entities.",
        "查询": "GO FROM \"Manu Ginobili\" OVER like, teammate REVERSELY WHERE $$.player.age > 30 and $$.player.age < 40\nYIELD DISTINCT $$.player.age, $$.player.name"
    },
    {
        "用户": "特罗卡是哪个学院的教师？",
        "查询": "MATCH (n:character{name:'特罗卡'})-[e:learn_from]-(n1:college) return n1.character.name"
    },
    {
        "用户": "Hello, could you please help me find out the types and quantities of edges related to player 'Rudy Gay'?",
        "查询": "MATCH (v:player{name: 'Rudy Gay'})-[e]->() RETURN type(e), count(*)"
    },
    {
        "用户": "Hey, can you help me find all the entities that like Tony Parker? And return the entity IDs that favor the relationship between these entities and Tony Parker.",
        "查询": "GO FROM \"Tony Parker\" OVER like REVERSELY YIELD like._dst"
    },
    {
        "用户": "胰腺囊腺瘤和囊腺癌的治疗时长通常是多久？",
        "查询": "MATCH (n:disease{name:\"胰腺囊腺瘤和囊腺癌\"}) return n.disease.cure_lasttime"
    },
    {
        "用户": " 请问您能帮我查找一下在'Grant Hill'和'Yao Ming'之间的所有球员吗？我需要他们的详细信息。",
        "查询": "MATCH (v:player)\nWHERE v.player.name>\"Grant Hill\" and  v.player.name<=\"Yao Ming\"\nRETURN v"
    },
    {
        "用户": "赫普兹巴·史密斯的祖先是谁？",
        "查询": "MATCH (n:character)-[e:kindred{rel_type:'祖先'}]-(n1) WHERE n.character.name=='赫普兹巴·史密斯' return n1"
    },
    {
        "用户": "Hello, could you please help me find players aged 40 and tell me their names?",
        "查询": "$a = LOOKUP ON player WHERE player.age == 40 YIELD id(vertex) as id;\nFETCH PROP ON player $a.id YIELD player.name"
    },
    {
        "用户": "找出名为'Kyrie Irving'的球员所喜欢的所有实体，包括2到3跳关系，并返回所有信息。",
        "查询": "MATCH (:player{name:\"Kyrie Irving\"})-[e:like*2..3]->()\nRETURN *"
    },
    {
        "用户": "Find players aged 40 and return their names.",
        "查询": "$a = LOOKUP ON player WHERE player.age == 40 YIELD id(vertex) as id;\nFETCH PROP ON player $a.id YIELD player.name"
    },
    {
        "用户": "找出与 'Tim Duncan' 有 '喜欢' 关系的实体，然后找出这些实体所 '服务' 的实体。",
        "查询": "GO 1 STEPS FROM 'Tim Duncan' OVER like YIELD like._dst as id | GO FROM $-.id OVER serve YIELD serve._dst"
    },
    {
        "用户": "找出名为 'Ray Allen' 的球员的姓名。",
        "查询": "$v1 = YIELD \"Ray Allen\" AS a;\nFETCH PROP ON player $v1.a YIELD player.name AS name"
    },
    {
        "用户": "您好，请帮我找到名为'DeAndre Jordan'的球员节点。",
        "查询": "MATCH (v:player {name: \"DeAndre Jordan\"}) RETURN v"
    },
    {
        "用户": "疥疮的预防措施有哪些？",
        "查询": "MATCH (n:disease{name:\"疥疮\"}) return n.disease.prevent"
    },
    {
        "用户": "Find the path of the 'like' relationship from 'Tim Duncan' to 'Nobody' or 'Spur', with a maximum of 3 nodes, and return these paths.",
        "查询": "FIND NOLOOP PATH FROM \"Tim Duncan\" TO \"Nobody\",\"Spur\" OVER like REVERSELY UPTO 3 STEPS YIELD path as p"
    },
    {
        "用户": "找出 'Tim Duncan' 所 '喜欢' 的年龄大于38的实体，并返回这些实体与 'Tim Duncan' 之间的关系和实体的信息。",
        "查询": "GO FROM 'Tim Duncan' OVER like WHERE properties($$).age > 38 YIELD edge as e,  $$ as dst"
    },
    {
        "用户": "霍奇金病的易得人群是哪些？",
        "查询": "LOOKUP ON disease WHERE disease.name == \"霍奇金病\" YIELD properties(vertex).easy_get"
    },
    {
        "用户": "从'Tim Duncan'的实体出发，沿着'喜欢'关系向外遍历1到4步，返回边的'喜欢程度'以及边信息。",
        "查询": "go 1 to 4 steps from \"Tim Duncan\" over like yield like.likeness, edge as e"
    },
    {
        "用户": "找出年龄大于等于29.5岁的球员实体，返回这些球员的ID和年龄信息。",
        "查询": "LOOKUP ON player WHERE player.age >= 29.5 YIELD id(vertex) as name, player.age AS Age"
    },
    {
        "用户": "白血病的得病概率是多少？",
        "查询": "LOOKUP ON disease WHERE disease.name == \"白血病\" YIELD properties(vertex).get_prob"
    },
    {
        "用户": " 嘿，你能帮我找到'Carmelo Anthony'这个球员喜欢的东西吗？我想知道起始球员的名字和年龄。\"",
        "查询": "MATCH (v:player)-[e:like]->(t) WHERE v.player.name=='Carmelo Anthony'  RETURN v.player.name, v.player.age"
    },
    {
        "用户": "找出年龄大于35岁的球员，统计他们的数量、年龄总和、最大年龄、最小年龄、平均年龄加1和所属标签，并按照id、数量、最大年龄、最小年龄排序，跳过前10个结果，返回20个结果。",
        "查询": "MATCH(n:player)-[:like]->(m)\n  WHERE n.player.age > 35\n  RETURN DISTINCT id(n) AS id,\n                  count(n) AS count,\n                  sum(floor(n.player.age)) AS sum,\n                  max(m.player.age) AS max,\n                  min(n.player.age) AS min,\n                  avg(distinct n.player.age)+1 AS age,\n                  labels(m) AS lb\n        ORDER BY id, count, max, min\n        SKIP 10 LIMIT 20;"
    },
    {
        "用户": "兰斯洛特是哪个物种的？",
        "查询": "LOOKUP ON character WHERE character.name=='兰斯洛特' YIELD properties(vertex).species AS species"
    },
    {
        "用户": "您好，请帮我查找一下 'Tony Parker' 和 'Tim Duncan' 之间的关系，以及 'Grant Hill' 和 'Tracy McGrady' 之间的关系属性。",
        "查询": "FETCH PROP ON like \"Tony Parker\"->\"Tim Duncan\", \"Grant Hill\" -> \"Tracy McGrady\" YIELD edge as relationship |\nYIELD properties($-.relationship)"
    },
    {
        "用户": "您好，请帮我统计一下名为'Irving'的球员所服务或喜欢的实体数量，关系的距离需要在2到3跳之间。",
        "查询": "MATCH (:player{name:\"Kyrie Irving\"})-[e:serve|like*2..3]-(v)\nRETURN count(v)"
    },
    {
        "用户": "返回球员名为'Tim Duncan'的姓名。",
        "查询": "MATCH (v:player{name: 'Tim Duncan'}) return v.player.name AS name"
    },
    {
        "用户": "找出Tony Parker所喜欢的球员中，效力于Spurs的球员，返回相关的球员与球队。",
        "查询": "MATCH (v1)-[:like]->(v2:player)-[:serve]->(v3)\nWHERE id(v3) == 'Spurs' AND id(v1) == 'Tony Parker'\nRETURN v1, v2, v3"
    },
    {
        "用户": "嘿，你能帮我查一下年龄在30到40岁之间的 'Ginobili' 的队友和他喜欢的人吗？然后告诉我这些人的年龄和姓名。",
        "查询": "GO FROM \"Manu Ginobili\" OVER like, teammate REVERSELY WHERE $$.player.age > 30 and $$.player.age < 40\nYIELD DISTINCT $$.player.age, $$.player.name"
    },
    {
        "用户": "芙蓉·德拉库尔的妹妹是谁？",
        "查询": "MATCH (n:character)-[e:kindred{rel_type:'妹妹'}]-(n1) WHERE n.character.name=='芙蓉·德拉库尔' return n1"
    },
    {
        "用户": "请问您能帮我找出与 'Tim Duncan' 有 '喜欢' 关系的实体吗？我需要返回这些关系的详细信息。",
        "查询": "GET SUBGRAPH 2 STEPS FROM \"Tim Duncan\" BOTH like YIELD edges as e\n| UNWIND $-.e as a | YIELD $-.a AS a"
    },
    {
        "用户": "请问您能帮我查找一下2000年开始效力或喜欢名为'Tracy McGrady'的球员所涉及的所有实体和关系吗？",
        "查询": "MATCH (:player{name:\"Tracy McGrady\"})-[e:serve|like{start_year: 2000}]-(v)\nRETURN e, v"
    },
    {
        "用户": "Find players aged 40 and return their names.",
        "查询": "$a = LOOKUP ON player WHERE player.age == 40 YIELD id(vertex) as id;\nFETCH PROP ON player $a.id YIELD player.name"
    },
    {
        "用户": "请问您能帮我找到名为'Giannis Antetokounmpo'的球员的姓名吗？",
        "查询": "MATCH (v:player{name:\"Giannis Antetokounmpo\"}) RETURN v.name AS vname"
    },
    {
        "用户": " 嘿，你能帮我找一下 'Rajon Rondo' 在2013年至2018年期间效力过的球队吗？我需要知道他的姓名、开始和结束效力的年份，以及球队的名称。",
        "查询": "GO FROM \"Rajon Rondo\" OVER serve WHERE serve.start_year >= 2013 AND serve.end_year <= 2018\nYIELD $^.player.name, serve.start_year, serve.end_year, $$.team.name"
    },
    {
        "用户": "米拉贝拉·普伦基特从属于哪个组织？",
        "查询": "MATCH (n:character{name:'米拉贝拉·普伦基特'})-[e:belong_to]-(n1:group) return n1"
    },
    {
        "用户": " 嘿，你能帮我查一下'Boris Diaw'曾效力过的球队吗？我想知道他的姓名、效力起始和结束年份，还有队名。\"",
        "查询": "GO FROM \"Boris Diaw\" OVER serve YIELD $^.player.name, serve.start_year, serve.end_year, $$.team.name"
    },
    {
        "用户": "安克谢斯·奥斯博特的出生年份是什么？",
        "查询": "LOOKUP ON character WHERE character.name=='安克谢斯·奥斯博特' YIELD properties(vertex).born AS born"
    },
    {
        "用户": "Obtain the names and age information of 'Boris Diaw' and 'Tony Parker' players to return the results after deduplication.",
        "查询": "FETCH PROP ON player \"Boris Diaw\", \"Tony Parker\" YIELD DISTINCT player.name, player.age"
    },
    {
        "用户": "Hey, can you help me find a player named 'Tim Duncan'? I want to know his age and ID, and can you show me his ID and finally tell me what it is?",
        "查询": "LOOKUP ON player\nWHERE player.name == 'Tim Duncan'\nYIELD player.age as age, id(vertex) as vid\n| UNWIND $-.vid as a | YIELD $-.a AS a"
    },
    {
        "用户": "Identify all entities and their relationships that players over the age of 20 have enjoyed after 1 to 2 jumps.",
        "查询": "match p= (v:player)-[e:like*1..2]->(d) where v.player.age > 20 return e"
    },
    {
        "用户": "Find all 'like' relationships with a rating of 666, and return the starting and ending points of these relationships.",
        "查询": "LOOKUP ON like WHERE like.grade == 666 YIELD src(edge) as src, dst(edge) as dst"
    },
    {
        "用户": "得了心脏病推荐吃什么食物？",
        "查询": "MATCH (n:disease)-[e:recommend_eat]->(n1:food) WHERE n.disease.name=='心脏病' return n1.food.name"
    },
    {
        "用户": "周雅从属于哪个组织？",
        "查询": "MATCH (n:character{name:'周雅'})-[e:belong_to]-(n1:group) return n1"
    },
    {
        "用户": "找出所有与球员 'Grant Hill' 有两跳 '喜欢' 关系的实体，并返回这些路径。",
        "查询": "MATCH p = ()-[:like*2]->(v:player) WHERE id(v) == 'Grant Hill' RETURN p"
    },
    {
        "用户": "Starting from 'Tim Duncan', through the relationship between 'likes' and' services', find a subgraph with a distance of 2 and return information on nodes and edges.",
        "查询": "GET SUBGRAPH WITH PROP 2 STEPS FROM 'Tim Duncan' IN like, serve YIELD vertices as nodes, edges as relationships"
    },
    {
        "用户": "多发性骨骺发育不良推荐吃什么食物？",
        "查询": "MATCH (n:disease)-[e:recommend_eat]->(n1:food) WHERE n.disease.name=='多发性骨骺发育不良' return n1.food.name"
    },
    {
        "用户": "Hello, could you please help me find all the relationship types and quantities of a player named 'Rudy Gay'?",
        "查询": "MATCH (v:player{name: 'Rudy Gay'})-[e]->() RETURN type(e), count(*)"
    },
    {
        "用户": "Obtain the name and age attributes of the 'Kidd' player.",
        "查询": "FETCH PROP ON player \"Jason Kidd\" YIELD player.name, player.age"
    },
    {
        "用户": "糖尿病的得病概率是多少？",
        "查询": "LOOKUP ON disease WHERE disease.name == \"糖尿病\" YIELD properties(vertex).get_prob"
    },
    {
        "用户": "Find all the entities that a player named 'Tim Duncan' likes after 2 to 3 jumps and return all information.",
        "查询": "MATCH (:player{name:\"Tim Duncan\"})-[e:like*2..3]->()\nRETURN *"
    },
    {
        "用户": "Identify all entities that have a 'like' relationship with 'Tracy McGrady' and return the IDs of these entities.",
        "查询": "GO FROM \"Tracy McGrady\" OVER like YIELD like._dst"
    },
    {
        "用户": "血红蛋白E病的治疗科室是哪些？",
        "查询": "GO FROM \"血红蛋白E病\" OVER cure_department YIELD dst(edge);"
    },
    {
        "用户": "Find the entities that 'Tim Duncan' likes and the entities that this entity likes, and return the names of these three types of entities.",
        "查询": "MATCH (v1) -[:like]-> (v2) -[:like]-> (v3)\nWHERE id(v1) == \"Tim Duncan\"\nRETURN v1.player.name AS Player, v2.player.name AS Friend, v3.player.name AS FoF"
    },
    {
        "用户": "请问您能帮我找出所有喜欢Steve Nash的实体，并告诉我与Steve Nash的关系中的目标实体吗？",
        "查询": "GO FROM \"Steve Nash\" OVER like REVERSELY YIELD like._dst"
    },
    {
        "用户": "您好，请帮我找一下，从 'Tim Duncan' 到 'Nobody' 或 'Spur' 之间的所有路径，路径上的关系是 '喜欢'，最多可以有3个节点，然后把这些路径返回给我好吗？",
        "查询": "FIND NOLOOP PATH FROM \"Tim Duncan\" TO \"Nobody\",\"Spur\" OVER like REVERSELY UPTO 3 STEPS YIELD path as p"
    },
    {
        "用户": "Find all players serving the 'Pistons' team and return their names.",
        "查询": "MATCH (v)-[:serve]->(t)\nWHERE id(t) == 'Pistons'\nRETURN v.player.name AS Name"
    },
    {
        "用户": "您好，请帮我找一下年龄为30的球员，然后返回他们的姓名和年龄加1的结果，可以吗？",
        "查询": "LOOKUP ON player WHERE player.age == 30 YIELD player.name, player.age + 1"
    },
    {
        "用户": "请问您能帮我找出与 'Carmelo Anthony' 有 '喜欢' 关系的路径数量吗？",
        "查询": "GO FROM \"Carmelo Anthony\" OVER like YIELD like._dst| YIELD COUNT(*)"
    },
    {
        "用户": "哈桑·穆斯塔发的头发颜色是什么？",
        "查询": "MATCH (n:character{name:'哈桑·穆斯塔发'}) return n.character.hair"
    },
    {
        "用户": "找出 'Boris Diaw' 所在的所有球队，返回球员姓名、效力起始和结束年份以及队名。",
        "查询": "GO FROM \"Boris Diaw\" OVER serve YIELD $^.player.name, serve.start_year, serve.end_year, $$.team.name"
    },
    {
        "用户": "Find all entities that 'like' and 'Grant Hill', and return the endpoint IDs of their 'like' relationship with 'Grant Hill'.",
        "查询": "GO FROM \"Grant Hill\" OVER like REVERSELY YIELD like._dst"
    },
    {
        "用户": "泪腺炎的预防措施有哪些？",
        "查询": "MATCH (n:disease{name:\"泪腺炎\"}) return n.disease.prevent"
    },
    {
        "用户": "找出年龄大于45岁的球员和名为'Spurs'的球队之间最多三跳的最短的路径，并返回路径长度。",
        "查询": "MATCH p = shortestPath( (a:player)-[e:serve*..3]-(b:team) )\n  WHERE a.player.age > 45 AND b.team.name == 'Spurs'\n  RETURN length(p)"
    },
    {
        "用户": "能帮我返回詹姆·小天狼星·波特到德里安·普塞的最短路径吗？",
        "查询": "FIND SHORTEST PATH FROM \"詹姆·小天狼星·波特\" TO \"德里安·普塞\" OVER * YIELD path AS p"
    },
    {
        "用户": "弗雷德·韦斯莱的眼睛颜色是什么？",
        "查询": "LOOKUP ON character WHERE character.name=='弗雷德·韦斯莱' YIELD properties(vertex).eye AS eye"
    },
    {
        "用户": "统计一条路径的数量，表示球员v1喜欢 'Tim Duncan' 以及 'Tim Duncan' 有效力关系的球队路径。",
        "查询": "MATCH (v1)-[:like]->(v2:player)-[:serve]->(v3)\nWHERE id(v2) == 'Tim Duncan'\nRETURN COUNT(*)"
    },
    {
        "用户": "Identify all entities related to 'Manu Ginobili' and return their 'likes',' teammate start year ',' service start year ', and endpoint player names.",
        "查询": "GO FROM \"Manu Ginobili\" OVER * REVERSELY YIELD like.likeness, teammate.start_year, serve.start_year, $$.player.name"
    },
    {
        "用户": "从 'Tim Duncan' 出发，找出距离在两步内 '喜欢' 程度在95到100之间的所有实体和关系子图。",
        "查询": "GET SUBGRAPH WITH PROP 2 STEPS FROM 'Tim Duncan'\n  WHERE like.likeness > 95 AND like.likeness < 100\n  YIELD vertices as nodes, edges as relationships"
    },
    {
        "用户": "Can you help me find all the entities that Tony Parker likes?",
        "查询": "FETCH PROP ON player 'Tony Parker' YIELD player.name as Name |\nGO FROM $-.Name OVER like YIELD like._dst"
    },
    {
        "用户": "您好，请问您能帮我查找一下与名为'Rudy'的球员节点有0或1跳服务关系的球员姓名吗？",
        "查询": "MATCH (v:player {name: \"Rudy Gay\"})-[:serve*0..1]->(n) RETURN n.player.name"
    },
    {
        "用户": "查看和胸痛相关的所有信息？",
        "查询": "GET SUBGRAPH 1 STEPS FROM \"胸痛\" YIELD VERTICES AS nodes, EDGES AS all_edges"
    },
    {
        "用户": "Hey, can you help me find someone who has a 'like' relationship with 'Tim Duncan'? And then find out who these people 'serve' for?",
        "查询": "GO 1 STEPS FROM 'Tim Duncan' OVER like YIELD like._dst as id | GO FROM $-.id OVER serve YIELD serve._dst"
    },
    {
        "用户": "与埃尔德·沃普尔具有两跳亲属关系的人有哪些？",
        "查询": "GO 2 STEPS FROM \"埃尔德·沃普尔\" OVER kindred YIELD dst(edge)"
    },
    {
        "用户": "Identify the team names and player names associated with 'LaMarcus Aldridge'.",
        "查询": "GO FROM \"LaMarcus Aldridge\" OVER * YIELD $$.team.name, $$.player.name"
    },
    {
        "用户": "雷古勒斯·布莱克的母亲是谁？",
        "查询": "MATCH (n:character)-[e:kindred{rel_type:'母亲'}]-(n1) WHERE n.character.name=='雷古勒斯·布莱克' return n1"
    },
    {
        "用户": "Hey, can you help me find the entity 'Tim Duncan' that this player likes with a 90 degree preference? Also, can you help me identify all entities and their relationships within a distance of 2 to 3 from him?",
        "查询": "MATCH (:player{name:\"Tim Duncan\"})-[e:like*2..3{likeness: 90}]->(v)\nRETURN e, v"
    },
    {
        "用户": "呼吸系统疾病伴发的精神障碍的治疗药物有哪些？",
        "查询": "GO FROM \"呼吸系统疾病伴发的精神障碍\" OVER recommend_drug YIELD dst(edge);"
    },
    {
        "用户": "骨外软骨肉瘤的发病原因是什么？",
        "查询": "MATCH (n:disease{name:\"骨外软骨肉瘤\"}) return n.disease.cause"
    },
    {
        "用户": "找出喜欢名为'Tim Duncan'的球员且喜好程度为90的所有实体，且与'Tim Duncan'的关系为2到3跳，返回这些实体及它们与该球员的关系。",
        "查询": "MATCH (:player{name:\"Tim Duncan\"})<-[e:like*2..3{likeness: 90}]-(v)\nRETURN e, v"
    },
    {
        "用户": "得了心脏病推荐吃什么药？",
        "查询": "GO FROM \"心脏病\" OVER recommend_drug YIELD dst(edge);"
    },
    {
        "用户": "能帮我返回哈方·蒙特到约塞利德·瓦德考克的最短路径吗？",
        "查询": "FIND SHORTEST PATH FROM \"哈方·蒙特\" TO \"约塞利德·瓦德考克\" OVER * YIELD path AS p"
    },
    {
        "用户": "Can you help me find the name of a player named 'Giannis Antetokounmpo'?",
        "查询": "MATCH (v:player{name:\"Giannis Antetokounmpo\"}) RETURN v.name AS vname"
    },
    {
        "用户": "查看和神经棘红细胞增多症相关的所有信息？",
        "查询": "GET SUBGRAPH 1 STEPS FROM \"神经棘红细胞增多症\" YIELD VERTICES AS nodes, EDGES AS all_edges"
    },
    {
        "用户": "Create a 'like' relationship between two entities, with 'Tim Duncan' liking 'Tim Parker' to 99 degrees and 'Tim Parker' liking 'Tony Parker' to 90 degrees.",
        "查询": "INSERT EDGE like(likeness) VALUES \"Tim Duncan\"->\"Tim Parker\":(99);\nINSERT EDGE like(likeness) VALUES \"Tim Parker\"->\"Tony Parker\":(90);"
    },
    {
        "用户": "Find all the entities' Russell Westbrook 'serves' and' likes', and return the IDs of these entities.",
        "查询": "GO FROM 'Russell Westbrook' OVER serve, like YIELD serve._dst, like._dst"
    },
    {
        "用户": "得了戊型病毒性肝炎的治疗科室是哪些？",
        "查询": "GO FROM \"戊型病毒性肝炎\" OVER cure_department YIELD dst(edge);"
    },
    {
        "用户": "您好，请帮我查找一下与名为'Tim Duncan'的球员有关系的关系类型及数量。",
        "查询": "MATCH (v:player{name: 'Tim Duncan'})-[e]->() RETURN type(e), count(*)"
    },
    {
        "用户": "Find all the entities that the player named 'Damian Lillard' likes and return their age information, sorted by age, and return the top three entities and their ages.",
        "查询": "MATCH (v:player{name: \"Damian Lillard\"})-[:like]-(v2)--(v3)\nWITH v3, v3.player.age AS age\nRETURN v3, age ORDER BY age LIMIT 3"
    },
    {
        "用户": "Hello, please help me find the attributes of the 'Boris Diaw' player and return the player node.",
        "查询": "FETCH PROP ON player 'Boris Diaw' YIELD vertex as node"
    },
    {
        "用户": "帕金 (追球手II)的父亲是谁？",
        "查询": "MATCH (n:character)-[e:kindred{rel_type:'父亲'}]-(n1) WHERE n.character.name=='帕金 (追球手II)' return n1"
    },
    {
        "用户": "小肠气痛的发病原因是什么？",
        "查询": "MATCH (n:disease{name:\"小肠气痛\"}) return n.disease.cause"
    },
    {
        "用户": "找出与 'Dwight Howard' 通过 '喜欢' 或 '队友' 关系相连的实体，返回这些实体的喜欢程度、队友开始年份和终点实体名称。",
        "查询": "GO FROM \"Dwight Howard\" OVER like, teammate REVERSELY YIELD like.likeness, teammate.start_year, $$.player.name"
    },
    {
        "用户": "找出和埃尔德·沃普尔相关的两个人？",
        "查询": "MATCH (n:character{name:'埃尔德·沃普尔'})-[e]-(n1) return n LIMIT 2"
    },
    {
        "用户": "找出与 'Dwight Howard' 有 '喜欢' 或 '队友' 关系的实体，返回这些实体的喜欢程度、队友开始年份和终点实体名称。",
        "查询": "GO FROM \"Dwight Howard\" OVER like, teammate REVERSELY YIELD like.likeness, teammate.start_year, $$.player.name"
    },
    {
        "用户": "老年人支气管扩张的得病概率是多少？",
        "查询": "LOOKUP ON disease WHERE disease.name == \"老年人支气管扩张\" YIELD properties(vertex).get_prob"
    },
    {
        "用户": "心脏病的得病概率是多少？",
        "查询": "LOOKUP ON disease WHERE disease.name == \"心脏病\" YIELD properties(vertex).get_prob"
    },
    {
        "用户": "小儿糖原贮积病Ⅳ型的主要症状有哪些？",
        "查询": "MATCH (n:disease{name:\"小儿糖原贮积病Ⅳ型\"}) return n.disease.symptom"
    },
    {
        "用户": "维奥莱塔·伯斯德的丈夫是谁？",
        "查询": "MATCH (n:character)-[e:kindred{rel_type:'丈夫'}]-(n1) WHERE n.character.name=='维奥莱塔·伯斯德' return n1"
    },
    {
        "用户": "你能帮我找一下'Manu Ginobili'在30到40岁之间的队友和喜欢的人吗？我想知道他们的年龄和姓名。\"",
        "查询": "GO FROM \"Manu Ginobili\" OVER like, teammate REVERSELY WHERE $$.player.age > 30 and $$.player.age < 40\nYIELD DISTINCT $$.player.age, $$.player.name"
    },
    {
        "用户": "Find the vertex with ID 'Paul Gasol' and find all the teams it connects to through the effectiveness relationship. Return the name of this player and the team he serves..",
        "查询": "MATCH (v)-[:serve]->(t)\nWHERE (NOT NOT id(v) == 'Paul Gasol') AND id(v) == 'Paul Gasol'\nRETURN v.player.name AS Name, t.team.name AS Team"
    },
    {
        "用户": "芙蓉·德拉库尔的眼睛颜色是什么？",
        "查询": "MATCH (n:character{name:'芙蓉·德拉库尔'}) return n.character.eye"
    },
    {
        "用户": "嘿，你能帮我找出年龄大于38的实体，这些实体与'Tim Duncan'有什么关系和信息吗？",
        "查询": "GO FROM 'Tim Duncan' OVER like WHERE properties($$).age > 38 YIELD edge as e,  $$ as dst"
    },
    {
        "用户": "杰克·斯劳珀是哪个学院的？",
        "查询": "MATCH (n:character{name:'杰克·斯劳珀'})-[e:learn_from]-(n1:college) return n1.college.name"
    },
    {
        "用户": "找出所有 '喜欢' 'Steve Nash' 的实体，并关系中目标实体。",
        "查询": "GO FROM \"Steve Nash\" OVER like REVERSELY YIELD like._dst"
    },
    {
        "用户": "高血压的得病概率是多少？",
        "查询": "LOOKUP ON disease WHERE disease.name == \"高血压\" YIELD properties(vertex).get_prob"
    },
    {
        "用户": "Hey, can you help me find a player named 'Tim Duncan'? I need to know his age and ID, and finally, I need to display his detailed information.",
        "查询": "LOOKUP ON player\nWHERE player.name == 'Tim Duncan'\nYIELD player.age as age, id(vertex) as vid\n| UNWIND $-.vid as a | YIELD $-.a AS a"
    },
    {
        "用户": "弗雷德·韦斯莱是亚瑟·韦斯莱的什么关系？",
        "查询": "MATCH (n:character{name:'亚瑟·韦斯莱'})-[e]-(n1:character{name:'弗雷德·韦斯莱'}) return n1"
    },
    {
        "用户": "莫瑞根的后裔有哪些？",
        "查询": "MATCH (n:character{name:'莫瑞根'})-[e:kindred{rel_type:'后裔'}]-(n1) return n1"
    },
    {
        "用户": "得了高血压推荐吃什么食物？",
        "查询": "MATCH (n:disease)-[e:recommend_eat]->(n1:food) WHERE n.disease.name=='高血压' return n1.food.name"
    },
    {
        "用户": "您好，请帮我找一下ID为'Tim Duncan'的球员所喜欢的实体路径数量，然后告诉我。",
        "查询": "MATCH (a:player)\nWHERE id(a)=='Tim Duncan'\nMATCH (a)-[:like]-(b)\nRETURN count(*) AS cnt"
    },
    {
        "用户": "Identify the entities connected to 'Danny Green' through a 'like' relationship, then identify the 'teammates' of these entities, and return the IDs of the source and target nodes of these entities and their relationships.",
        "查询": "$a = GO FROM 'Danny Green' OVER like YIELD like._src AS src, like._dst AS dst;\nGO FROM $a.dst OVER teammate YIELD $a.src AS src, $a.dst, teammate._dst AS dst"
    },
    {
        "用户": "Hey, can you help me check the teammates and people he likes of 'Ginobili' between the ages of 30 and 40? Then tell me the ages and names of these people.",
        "查询": "GO FROM \"Manu Ginobili\" OVER like, teammate REVERSELY WHERE $$.player.age > 30 and $$.player.age < 40\nYIELD DISTINCT $$.player.age, $$.player.name"
    },
    {
        "用户": "查找年龄大于30.5的球员，返回这些球员的ID和年龄。",
        "查询": "LOOKUP ON player WHERE player.age > 30.5 YIELD id(vertex) as name, player.age AS Age"
    },
    {
        "用户": "查看和糖尿病相关的所有信息？",
        "查询": "GET SUBGRAPH 1 STEPS FROM \"糖尿病\" YIELD VERTICES AS nodes, EDGES AS all_edges"
    },
    {
        "用户": "找出球员名字在'Grant Hill'和'Yao Ming'之间的所有球员，返回这些球员的信息。",
        "查询": "MATCH (v:player)\nWHERE v.player.name>\"Grant Hill\" and  v.player.name<=\"Yao Ming\"\nRETURN v"
    },
    {
        "用户": "Hello, please help me find the player with ID 'Carmelo' and tell me his age.",
        "查询": "match (v:player) where id(v)==\"Carmelo Anthony\" return properties(v).age;"
    },
    {
        "用户": "玛莎是哪个组织的成员？",
        "查询": "MATCH (n:character{name:'玛莎'})-[e]-(n1:group) return n1"
    },
    {
        "用户": "鲍曼·赖特从属于哪个组织？",
        "查询": "MATCH (n:character{name:'鲍曼·赖特'})-[e:belong_to]-(n1:group) return n1"
    },
    {
        "用户": "纵隔非霍奇金淋巴瘤的主要症状是什么？",
        "查询": "MATCH (n:disease{name:\"纵隔非霍奇金淋巴瘤\"}) return n.disease.symptom"
    },
    {
        "用户": "鲁道夫·布兰德从属于哪个组织？",
        "查询": "MATCH (n:character{name:'鲁道夫·布兰德'})-[e:belong_to]-(n1:group) return n1"
    },
    {
        "用户": "Find a player named 'Jordan' and return the node information of that player.",
        "查询": "MATCH (v:player {name: \"DeAndre Jordan\"}) RETURN v"
    },
    {
        "用户": "染上高血压可能的原因是什么？",
        "查询": "MATCH (n:disease{name:\"高血压\"}) return n.disease.cause"
    },
    {
        "用户": "Hello, please help me identify entities older than 38 and the edges and information between these entities and 'Tim Duncan'.",
        "查询": "GO FROM 'Tim Duncan' OVER like WHERE properties($$).age > 38 YIELD edge as e,  $$ as dst"
    },
    {
        "用户": "您好，请帮我创建两个实体之间的'喜欢'关系。具体来说，'Tim Duncan'非常喜欢'Tim Parker'，程度为99，而'Tim Parker'也很喜欢'Tony Parker'，程度为90。",
        "查询": "INSERT EDGE like(likeness) VALUES \"Tim Duncan\"->\"Tim Parker\":(99);\nINSERT EDGE like(likeness) VALUES \"Tim Parker\"->\"Tony Parker\":(90);"
    },
    {
        "用户": "May I ask if you could help me find a favorite relationship with a rating of 666? I need to obtain the starting and ending entities of these relationships.",
        "查询": "LOOKUP ON like WHERE like.grade == 666 YIELD src(edge) as src, dst(edge) as dst"
    },
    {
        "用户": "外阴银屑病的主要症状是什么？",
        "查询": "MATCH (n:disease{name:\"外阴银屑病\"}) return n.disease.symptom"
    },
    {
        "用户": "染上慢性淋巴细胞性白血病可能的原因是什么？",
        "查询": "MATCH (n:disease{name:\"慢性淋巴细胞性白血病\"}) return n.disease.cause"
    },
    {
        "用户": "Can you help me find 'Manu Ginobili' teammates and loved ones between the ages of 30 and 40? I want to know their age and names. “",
        "查询": "GO FROM \"Manu Ginobili\" OVER like, teammate REVERSELY WHERE $$.player.age > 30 and $$.player.age < 40\nYIELD DISTINCT $$.player.age, $$.player.name"
    },
    {
        "用户": "找出所有 'Boris Diaw' 所 '喜欢' 的实体，并返回这些实体的 ID。",
        "查询": "GO FROM \"Boris Diaw\" OVER like YIELD like._dst"
    },
    {
        "用户": "染上戊型病毒性肝炎可能的原因是什么？",
        "查询": "MATCH (n:disease{name:\"戊型病毒性肝炎\"}) return n.disease.cause"
    },
    {
        "用户": "凯特里奇的头发颜色是什么？",
        "查询": "MATCH (n:character{name:'埃拉朵拉·凯特里奇'}) return n.character.hair"
    },
    {
        "用户": "Find the entities that 'Tim Duncan' likes' and the entities that this entity likes, and return the names of these entities, namely 'Player', 'Friend', and 'FoF'.",
        "查询": "MATCH (v1) -[:like]-> (v2) -[:like]-> (v3)\nWHERE id(v1) == \"Tim Duncan\"\nRETURN v1.player.name AS Player, v2.player.name AS Friend, v3.player.name AS FoF"
    },
    {
        "用户": "赫尔伯特·斯普林参与了多少个组织？",
        "查询": "MATCH (n:character{name:'赫尔伯特·斯普林'})-[e]-(n1:group) return count(n1)"
    },
    {
        "用户": "阿尔莫里克·索布里奇的头发颜色是什么？",
        "查询": "MATCH (n:character{name:'阿尔莫里克·索布里奇'}) return n.character.hair"
    },
    {
        "用户": "餐后血糖过低症的治愈概率是多少？",
        "查询": "MATCH (n:disease{name:\"餐后血糖过低症\"}) return n.disease.cured_prob"
    },
    {
        "用户": "特拉弗斯的血统是什么？",
        "查询": "MATCH (n:character{name:'特拉弗斯'}) return n.character.blood"
    },
    {
        "用户": "返回前两个球员的姓名，按照姓名排序。",
        "查询": "match (v:player) return properties(v).name AS name order by name limit 2;"
    },
    {
        "用户": "您好，请问您能帮我找到与'Tim Duncan'有喜欢和效力关系的实体和关系吗？",
        "查询": "GET SUBGRAPH WITH PROP 2 STEPS FROM 'Tim Duncan' IN like, serve YIELD vertices as nodes, edges as relationships"
    },
    {
        "用户": "Can you help me identify all entities that like Steve Nash and tell me the target entities in my relationship with Steve Nash?",
        "查询": "GO FROM \"Steve Nash\" OVER like REVERSELY YIELD like._dst"
    },
    {
        "用户": "您好，请帮我找一下从 'Yao Ming' 到 'Tony Parker' 的最短路径，路径上要包括喜欢和服务关系，最多经过5个步骤，然后把路径信息给我。",
        "查询": "YIELD \"Yao Ming\" AS src, \"Tony Parker\" AS dst\n| FIND SHORTEST PATH FROM $-.src TO $-.dst OVER like, serve UPTO 5 STEPS YIELD path as p"
    },
    {
        "用户": " 您好，请帮我查找一下，从 'Tim Duncan' 出发，找出距离在两步内 '喜欢' 程度在95到100之间的所有实体和关系子图，谢谢。",
        "查询": "GET SUBGRAPH WITH PROP 2 STEPS FROM 'Tim Duncan'\n  WHERE like.likeness > 95 AND like.likeness < 100\n  YIELD vertices as nodes, edges as relationships"
    },
    {
        "用户": "Can you help me find the names of all the players who play for 'Pistons'?",
        "查询": "MATCH (v)-[:serve]->(t)\nWHERE id(t) == 'Pistons'\nRETURN v.player.name AS Name"
    },
    {
        "用户": "睾丸肿瘤的治愈概率是多少？",
        "查询": "MATCH (n:disease{name:\"睾丸肿瘤\"}) return n.disease.cured_prob"
    },
    {
        "用户": "Hey, can you help me find something that the player 'Carmelo Anthony' likes? I want to know his name and age. “",
        "查询": "MATCH (v:player)-[e:like]->(t) WHERE v.player.name=='Carmelo Anthony'  RETURN v.player.name, v.player.age"
    },
    {
        "用户": "Find players older than 30.5 and return their IDs and ages.",
        "查询": "LOOKUP ON player WHERE player.age > 30.5 YIELD id(vertex) as name, player.age AS Age"
    },
    {
        "用户": "Can you help me find out the teammates' relationships between players? I need to know the names of Player 1 and Player 2.",
        "查询": "MATCH (p1)-[:teammate]->(p2)\nRETURN p1.player.name, p2.player.name"
    },
    {
        "用户": "Find all information about Boris Diaw's service with the 'Haw' team, including player name, service start year, service end year, and team name.",
        "查询": "GO FROM 'Boris Diaw' OVER serve WHERE $$.team.name CONTAINS \"Haw\"\nYIELD $^.player.name, serve.start_year, serve.end_year, $$.team.name"
    },
    {
        "用户": "与弗雷德·韦斯莱具有两跳亲属关系的人有哪些？",
        "查询": "GO 2 STEPS FROM \"弗雷德·韦斯莱\" OVER kindred YIELD dst(edge)"
    },
    {
        "用户": "财政大臣是什么物种？",
        "查询": "MATCH (n:character{name:'财政大臣'}) return n.character.species"
    },
    {
        "用户": "Please help me find out what 'Tracy McGrady' likes and then find the corresponding IDs for these things.",
        "查询": "$var = GO FROM \"Tracy McGrady\" OVER like YIELD like._dst as id; GO FROM $var.id OVER like YIELD like._dst"
    },
    {
        "用户": "Identify entities older than 38 that 'Tim Duncan' likes' and return information on the relationships and entities between these entities and 'Tim Duncan'.",
        "查询": "GO FROM 'Tim Duncan' OVER like WHERE properties($$).age > 38 YIELD edge as e,  $$ as dst"
    },
    {
        "用户": "找出球员 Tim Duncan 和球队 Spurs 之间至多3跳的最短的路径，并返回该路径。",
        "查询": "MATCH p = allShortestPaths( (a:player)-[e:serve*..3]-(b:team) )\n  WHERE a.player.name == 'Tim Duncan' AND b.team.name == 'Spurs'\n  RETURN p"
    },
    {
        "用户": "请问您能帮我查询一下所有球员的姓名和节点吗？",
        "查询": "match (v:player) return v.player.name, v"
    },
    {
        "用户": "Find the players' Tracy McGrady 'likes, and then find the IDs of the players they like.",
        "查询": "$var = GO FROM \"Tracy McGrady\" OVER like YIELD like._dst as id; GO FROM $var.id OVER like YIELD like._dst"
    },
    {
        "用户": "Hello, please help me identify all the entities that 'Russell Westbrook' serves' and 'likes', and return their IDs.",
        "查询": "GO FROM 'Russell Westbrook' OVER serve, like YIELD serve._dst, like._dst"
    },
    {
        "用户": "哪些人物是鼻涕虫俱乐部的成员？",
        "查询": "MATCH (n:character)-[e]-(n1:group{name:'鼻涕虫俱乐部'}) return n"
    },
    {
        "用户": "Find players aged 40 and return their names.",
        "查询": "$a = LOOKUP ON player WHERE player.age == 40 YIELD id(vertex) as id;\nFETCH PROP ON player $a.id YIELD player.name"
    },
    {
        "用户": "Returns the name of a player named 'Tim Duncan'.",
        "查询": "MATCH (v:player{name: 'Tim Duncan'}) return v.player.name AS name"
    },
    {
        "用户": "Returns the player name of the entity with ID 'Jason Kidd'.",
        "查询": "MATCH (v)\nWHERE id(v) == 'Tim Duncan'\nRETURN v.player.name AS Name"
    },
    {
        "用户": "Find all the entities that a player named 'Carmelo Anthony' likes and return the player's name and age.",
        "查询": "MATCH (v:player)-[e:like]->(t) WHERE v.player.name=='Carmelo Anthony'  RETURN v.player.name, v.player.age"
    },
    {
        "用户": "嘿，你能帮我找出那些被其他球员喜欢过的球员吗？我想知道他们的名字。",
        "查询": "MATCH (v:player) WHERE [t in [v] | (v)-[:like]->(t)] RETURN v.player.name AS name"
    },
    {
        "用户": "May I ask if you could help me find the team where 'Carter' likes players? I want to count how many players there are in these teams.",
        "查询": "MATCH (:player{name: \"Vince Carter\"})-[e1:like]->()-[e2:serve*0..3]->()<-[e3:serve]-(v)\nRETURN count(v)"
    },
    {
        "用户": "查找名为'Spurs'的团队中的所有球员，并返回这些球员的信息。",
        "查询": "MATCH (v:team{name:\"Spurs\"})--(v2)\nRETURN v2 AS Player"
    },
    {
        "用户": "Identify all players who like 'Tony Parker' and 'Tim Duncan', and return these players and their relationships, but excluding the liking relationships between 'Tony Parker' and 'Tim Duncan'.",
        "查询": "MATCH (v:player)-[e:like]->(v2) WHERE none_direct_dst(e) IN [\"Tony Parker\", \"Tim Duncan\"] RETURN *\nMINUS\nMATCH (v:player)-[e:like]->(v2) WHERE id(v2) IN [\"Tony Parker\", \"Tim Duncan\"] RETURN *"
    },
    {
        "用户": "拉尔斯·伦德克万从属于哪个组织？",
        "查询": "MATCH (n:character{name:'拉尔斯·伦德克万'})-[e:belong_to]-(n1:group) return n1"
    },
    {
        "用户": "西莫·斐尼甘的父亲是什么血统？",
        "查询": "MATCH (n:character{name:'西莫·斐尼甘的父亲'}) return n.character.blood"
    },
    {
        "用户": "返回ID为'Jason Kidd'的实体的球员姓名。",
        "查询": "MATCH (v)\nWHERE id(v) == 'Tim Duncan'\nRETURN v.player.name AS Name"
    },
    {
        "用户": "霍奇金病的症状有哪些？",
        "查询": "MATCH (n:disease)-[e:has_symptom]->(n1:symptom) WHERE n.disease.name=='霍奇金病' return n1.symptom.name"
    },
    {
        "用户": "Find the player entity with ID 'Carmelo' and return its age attribute value.",
        "查询": "match (v:player) where id(v)==\"Carmelo Anthony\" return properties(v).age;"
    },
    {
        "用户": "得了戊型病毒性肝炎推荐吃什么食物？",
        "查询": "MATCH (n:disease)-[e:recommend_eat]->(n1:food) WHERE n.disease.name=='戊型病毒性肝炎' return n1.food.name"
    },
    {
        "用户": "请问您能帮我查找一下与 'Tim Duncan' 有喜欢关系的实体吗？然后再在这些实体中找出与之有服务关系的实体，并把它们的 ID 返回给我好吗？",
        "查询": "GO 1 STEPS FROM 'Tim Duncan' OVER like YIELD like._dst as id | GO FROM $-.id OVER serve YIELD serve._dst"
    },
    {
        "用户": "Identify all entities that 'Russell Westbrook' works for and likes, and return the IDs of these entities.",
        "查询": "GO FROM 'Russell Westbrook' OVER serve, like YIELD serve._dst, like._dst"
    },
    {
        "用户": "Find teams with a distance of 0 to 3 jumps from the player named 'Tim Duncan' and count the number of players played for these teams.",
        "查询": "MATCH (:player{name: \"Tim Duncan\"})-[e1:like]->()-[e2:serve*0..3]->()<-[e3:serve]-(v)\nRETURN count(v)"
    },
    {
        "用户": "请问您能帮我找到ID为'Boris Diaw'的球员信息吗？",
        "查询": "MATCH (n:player) WHERE id(n) == \"Boris Diaw\" RETURN n;"
    },
    {
        "用户": "查找名为'abc'的球员所服务的最多距离为3的所有实体，返回这些实体的所有属性。",
        "查询": "MATCH (v:player{name: \"abc\"}) -[:serve*..3]-> ()\nRETURN *"
    },
    {
        "用户": "Could you please help me find the shortest path between player 'Tim Duncan' and team 'Spurs'? There can only be a maximum of 3 jumping relationships. Thank you!",
        "查询": "MATCH p = allShortestPaths( (a:player)-[e:serve*..3]-(b:team) )\n  WHERE a.player.name == 'Tim Duncan' AND b.team.name == 'Spurs'\n  RETURN p"
    },
    {
        "用户": "Hello, please help me find out, starting with 'Tim Duncan' and extending 1 to 4 steps outward, to find the 'liking level' and edge information between each edge. Thank you!",
        "查询": "go 1 to 4 steps from \"Tim Duncan\" over like yield like.likeness, edge as e"
    },
    {
        "用户": "获取球员 'Grant Hill' 的姓名和年龄属性。",
        "查询": "FETCH PROP ON player \"Grant Hill\" YIELD player.name, player.age"
    },
    {
        "用户": "巴巴吉德·阿金巴德的性别是什么？",
        "查询": "MATCH (n:character{name:'巴巴吉德·阿金巴德'}) return n.character.gender"
    },
    {
        "用户": "得了心脏病应该去哪个科室就诊？",
        "查询": "GO FROM \"心脏病\" OVER cure_department YIELD dst(edge);"
    },
    {
        "用户": "格奥尔基·兹德拉夫科的性别是什么？",
        "查询": "MATCH (n:character{name:'格奥尔基·兹德拉夫科'}) return n.character.gender"
    },
    {
        "用户": "找出 'Tim Duncan' 所 '喜欢' 的第一个实体。",
        "查询": "GO FROM \"Tim Duncan\" OVER like LIMIT 1;"
    },
    {
        "用户": "找出喜欢 'Dejounte Murray' 的所有实体中，球员名称和年龄，并按年龄降序、名称升序排序，跳过前11个结果，返回接下来的3个结果。",
        "查询": "MATCH (v1) -[:like]-> (v)\nWHERE id(v1) == 'Dejounte Murray'\nRETURN v.player.name AS Name, v.player.age AS Age\nORDER BY Age DESC, Name ASC\nSKIP 11\nLIMIT 3"
    },
    {
        "用户": "多少种病能够通过药物治疗方式治愈？",
        "查询": "MATCH (n:disease)-[]->(n1:cure{name:'药物治疗'}) return count(n)"
    },
    {
        "用户": "Hello, could you please help me find players aged 20 and return all the node information of these players?",
        "查询": "match (v:player{age: 1+19}) RETURN v"
    },
    {
        "用户": "哪些人物是普德米尔联队的成员？",
        "查询": "MATCH (n:character)-[e]-(n1:group{name:'普德米尔联队'}) return n"
    },
    {
        "用户": "Can you help me find out the entities and relationships that a player named 'Tracy McGrady' serves or likes after 2000?",
        "查询": "MATCH (:player{name:\"Tracy McGrady\"})-[e:serve|like{start_year: 2000}]->(v)\nRETURN e, v"
    },
    {
        "用户": "Hey, can you help me check out the teams' Boris Diaw 'has played for? I would like to know his name, starting and ending years of service, as well as the team name. “",
        "查询": "GO FROM \"Boris Diaw\" OVER serve YIELD $^.player.name, serve.start_year, serve.end_year, $$.team.name"
    },
    {
        "用户": "查找名为'Kyrie Irving'的球员有2到3跳所服务或喜欢的实体，返回数量统计结果。",
        "查询": "MATCH (:player{name:\"Kyrie Irving\"})-[e:serve|like*2..3]-(v)\nRETURN count(v)"
    },
    {
        "用户": "Can you help me find players aged 29.5 or older? I need their ID and age information.",
        "查询": "LOOKUP ON player WHERE player.age >= 29.5 YIELD id(vertex) as name, player.age AS Age"
    },
    {
        "用户": "找出ID为'Boris Diaw'的球员节点并返回。",
        "查询": "MATCH (n:player) WHERE id(n) == \"Boris Diaw\" RETURN n;"
    },
    {
        "用户": "Find all entities that like 'Dejounte Murray', including player names and ages, and sort them in descending age and ascending name order. Skip the first 11 results and return the next 3 results.",
        "查询": "MATCH (v1) -[:like]-> (v)\nWHERE id(v1) == 'Dejounte Murray'\nRETURN v.player.name AS Name, v.player.age AS Age\nORDER BY Age DESC, Name ASC\nSKIP 11\nLIMIT 3"
    },
    {
        "用户": "获取 'Tony Parker' 球员的姓名和年龄属性。",
        "查询": "FETCH PROP ON player \"Tony Parker\" YIELD player.name, player.age"
    },
    {
        "用户": "霍奇金病的治疗方式有哪些？",
        "查询": "GO FROM \"霍奇金病\" OVER cure_way YIELD dst(edge);"
    },
    {
        "用户": "Identify the players Tony Parker likes who play for Spurs, and return the relevant players and teams.",
        "查询": "MATCH (v1)-[:like]->(v2:player)-[:serve]->(v3)\nWHERE id(v3) == 'Spurs' AND id(v1) == 'Tony Parker'\nRETURN v1, v2, v3"
    },
    {
        "用户": "Obtain the name of the 'Spurs' team.",
        "查询": "FETCH PROP ON team \"Spurs\" YIELD team.name"
    },
    {
        "用户": "埃里克·华莱的性别是什么？",
        "查询": "MATCH (n:character{name:'埃里克·华莱'}) return n.character.gender"
    },
    {
        "用户": "遗传性凝血因子ⅩⅢ缺乏的治疗药物有哪些？",
        "查询": "GO FROM \"遗传性凝血因子ⅩⅢ缺乏\" OVER recommend_drug YIELD dst(edge);"
    },
    {
        "用户": "Identify all entities that have a 'like' relationship with 'Tim Duncan' and return their deduplicated IDs.",
        "查询": "GO FROM \"Tim Duncan\" OVER like YIELD like._dst AS dst | YIELD DISTINCT $-.dst AS dst"
    },
    {
        "用户": "您好，请帮我查找一下年龄为40的球员，然后把他们的姓名告诉我好吗？",
        "查询": "$a = LOOKUP ON player WHERE player.age == 40 YIELD id(vertex) as id;\nFETCH PROP ON player $a.id YIELD player.name"
    },
    {
        "用户": "Hello, could you please help me find a player named 'Joseph', identify his favorite relationships with other entities, and provide me with the paths to return these entities and relationships?",
        "查询": "MATCH p = (v:player{name: \"Cory Joseph\"})-[e:like]-(v2)\nRETURN p"
    },
    {
        "用户": "得了戊型病毒性肝炎的注意事项有哪些？",
        "查询": "LOOKUP ON disease WHERE disease.name == \"戊型病毒性肝炎\" YIELD properties(vertex).prevent"
    },
    {
        "用户": "什么病会伴随着高血压？",
        "查询": "MATCH (n:disease)-[e:accompany_with]->(n1:disease{name:'高血压'}) return n.disease.name"
    },
    {
        "用户": "请问您能帮我找出与 'Carmelo Anthony' 有喜欢关系的路径数量吗？",
        "查询": "GO FROM \"Carmelo Anthony\" OVER like YIELD like._dst| YIELD COUNT(*)"
    },
    {
        "用户": "迪米特洛夫从属于哪个组织？",
        "查询": "MATCH (n:character{name:'迪米特洛夫'})-[]-(n1:group) return n1"
    },
    {
        "用户": "什么病会伴随着糖尿病？",
        "查询": "MATCH (n:disease)-[e:accompany_with]->(n1:disease{name:'糖尿病'}) return n.disease.name"
    },
    {
        "用户": "软组织损伤应该去哪个科室就诊？",
        "查询": "GO FROM \"软组织损伤\" OVER cure_department YIELD dst(edge);"
    },
    {
        "用户": "眼睑热性疱疹的治疗时长通常是多久？",
        "查询": "MATCH (n:disease{name:\"眼睑热性疱疹\"}) return n.disease.cure_lasttime"
    },
    {
        "用户": "找出 'Boris Diaw' 在 'Haw' 球队服役期间的所有信息，包括球员姓名、服役起始年份、服役结束年份和所在队伍名称。",
        "查询": "GO FROM 'Boris Diaw' OVER serve WHERE $$.team.name CONTAINS \"Haw\"\nYIELD $^.player.name, serve.start_year, serve.end_year, $$.team.name"
    },
    {
        "用户": "Find all players with names between 'Grant Hill' and 'Yao Ming' and return their information.",
        "查询": "MATCH (v:player)\nWHERE v.player.name>\"Grant Hill\" and  v.player.name<=\"Yao Ming\"\nRETURN v"
    },
    {
        "用户": "找出球员 'Tim Duncan' 和球队 'Spurs' 之间至多3跳的最短的路径，并返回该路径。",
        "查询": "MATCH p = allShortestPaths( (a:player)-[e:serve*..3]-(b:team) )\n  WHERE a.player.name == 'Tim Duncan' AND b.team.name == 'Spurs'\n  RETURN p"
    },
    {
        "用户": "Hello, please help me identify all entities that have likes, services, and teammate relationships with 'Paul Gasol', and tell me the IDs of the target entities for these relationships.",
        "查询": "GO FROM \"Paul Gasol\" OVER * YIELD like._dst, serve._dst, teammate._dst"
    },
    {
        "用户": "与赫尔伯特·斯普林具有两跳亲属关系的人有哪些？",
        "查询": "GO 2 STEPS FROM \"赫尔伯特·斯普林\" OVER kindred YIELD dst(edge)"
    },
    {
        "用户": "Hello, could you please help me find the name of the player with ID 'Jason Kidd'.",
        "查询": "MATCH (v)\nWHERE id(v) == 'Tim Duncan'\nRETURN v.player.name AS Name"
    },
    {
        "用户": "找出 'Russell Westbrook' 所 '服务' 和 '喜欢' 的所有实体，并返回这些实体的 ID。",
        "查询": "GO FROM 'Russell Westbrook' OVER serve, like YIELD serve._dst, like._dst"
    },
    {
        "用户": "Find the path where player 'LeBron James' belongs to a team called' Cavaliers', and return the relationship type and team name.",
        "查询": "MATCH (v1:player{name: \"LeBron James\"}) -[r:serve]-> (v2:team{name: \"Cavaliers\"})\nRETURN type(r) AS Type, v2.team.name AS Name"
    },
    {
        "用户": "颜面部疖痈的易感人群是哪些？",
        "查询": "MATCH (n:disease{name:\"颜面部疖痈\"}) return n.disease.easy_get"
    },
    {
        "用户": "Hey, can you help me find all the information about 'Boris Diaw' on the 'Haw' team? I need to know his player name, start year of service, end year of service, and team name.",
        "查询": "GO FROM 'Boris Diaw' OVER serve WHERE $$.team.name CONTAINS \"Haw\"\nYIELD $^.player.name, serve.start_year, serve.end_year, $$.team.name"
    },
    {
        "用户": "请问您能帮我找到所有效力于 'Pistons' 的球员的名字吗？",
        "查询": "MATCH (v)-[:serve]->(t)\nWHERE id(t) == 'Pistons'\nRETURN v.player.name AS Name"
    },
    {
        "用户": "赫普兹巴·史密斯是哪个学院的？",
        "查询": "MATCH (n:character{name:'赫普兹巴·史密斯'})-[e:learn_from]-(n1:college) return n1.college.name"
    },
    {
        "用户": "Could you please help me identify the age of entities related to everything that a player named 'Damian Lillard' likes? Then, in chronological order of age, can you return me to the top three entities and their ages?",
        "查询": "MATCH (v:player{name: \"Damian Lillard\"})-[:like]-(v2)--(v3)\nWITH v3, v3.player.age AS age\nRETURN v3, age ORDER BY age LIMIT 3"
    },
    {
        "用户": "Can you help me find the team where the player who likes' Tim Duncan 'belongs? I want to count the number of players in these teams.",
        "查询": "MATCH (:player{name: \"Tim Duncan\"})-[e1:like]->()-[e2:serve*0..3]->()<-[e3:serve]-(v)\nRETURN count(v)"
    },
    {
        "用户": "吉姆·麦古的血统是什么？",
        "查询": "MATCH (n:character{name:'吉姆·麦古'}) return n.character.blood"
    },
    {
        "用户": "多少种病能够通过药物治疗方式治愈？",
        "查询": "MATCH (n:disease)-[]->(n1:cure{name:'药物治疗'}) return count(n)"
    },
    {
        "用户": "找出与 'Carmelo Anthony' 有喜欢关系的路径数量。",
        "查询": "GO FROM \"Carmelo Anthony\" OVER like YIELD like._dst| YIELD COUNT(*)"
    },
    {
        "用户": "找出名为'Carmelo Anthony'的球员所喜欢的所有实体，并返回该球员的姓名和年龄。",
        "查询": "MATCH (v:player)-[e:like]->(t) WHERE v.player.name=='Carmelo Anthony'  RETURN v.player.name, v.player.age"
    },
    {
        "用户": "Can you help me find the name of a player named 'Antetokounmpo'?",
        "查询": "MATCH (v:player{name:\"Giannis Antetokounmpo\"}) RETURN v.name AS vname"
    },
    {
        "用户": "Hello, please help me find the path for the 'like' relationship from 'Tim Duncan' to 'Nobody' or 'Spur', with a maximum of 3 nodes, and return these paths.",
        "查询": "FIND NOLOOP PATH FROM \"Tim Duncan\" TO \"Nobody\",\"Spur\" OVER like REVERSELY UPTO 3 STEPS YIELD path as p"
    },
    {
        "用户": "返回索尔·克罗克周边最多二跳关系的子图？",
        "查询": "GET SUBGRAPH 2 STEPS FROM \"索尔·克罗克\" YIELD VERTICES AS nodes, EDGES AS relationships;"
    },
    {
        "用户": "Can you help me find the name of the player named 'Tim Duncan'?",
        "查询": "MATCH (v:player{name: 'Tim Duncan'}) return v.player.name AS name"
    },
    {
        "用户": "Hello, please help me count the number of entities that a player named 'Irving' serves or likes, and the distance between relationships needs to be between 2 and 3 hops.",
        "查询": "MATCH (:player{name:\"Kyrie Irving\"})-[e:serve|like*2..3]-(v)\nRETURN count(v)"
    },
    {
        "用户": "查找所有球员之间的队友关系，返回球员的姓名。",
        "查询": "MATCH (p1)-[:teammate]->(p2)\nRETURN p1.player.name, p2.player.name"
    },
    {
        "用户": "找出与 'Kobe Bryant' 通过 '喜欢' 关系相连的实体，再返回这些实体的名称，包括两步路径上的实体。",
        "查询": "GO 2 STEPS FROM 'Kobe Bryant' OVER like REVERSELY YIELD $$.player.name"
    },
    {
        "用户": "心脏穿透伤的主要原因是什么？",
        "查询": "MATCH (n:disease{name:\"三尖瓣闭锁\"}) return n.disease.cause"
    },
    {
        "用户": "请问您能帮我查找一下2013年至2018年期间'Rajon Rondo'所效力的球队吗？我需要知道球员的姓名、开始年份、结束年份和球队名称。",
        "查询": "GO FROM \"Rajon Rondo\" OVER serve WHERE serve.start_year >= 2013 AND serve.end_year <= 2018\nYIELD $^.player.name, serve.start_year, serve.end_year, $$.team.name"
    },
    {
        "用户": "请问您能帮我找出与 'Tracy McGrady' 有 '喜欢' 关系的所有实体的 ID 吗？",
        "查询": "GO FROM \"Tracy McGrady\" OVER like YIELD like._dst"
    },
    {
        "用户": "Returns the edge type and quantity associated with a player named 'Rudy Gay'.",
        "查询": "MATCH (v:player{name: 'Rudy Gay'})-[e]->() RETURN type(e), count(*)"
    },
    {
        "用户": "小儿营养不良性消瘦的发病原因是什么？",
        "查询": "MATCH (n:disease{name:\"小儿营养不良性消瘦\"}) return n.disease.cause"
    },
    {
        "用户": "Identify all teammates and favorite entities of 'Ginobili' between the ages of 30 and 40, and return the ages and names of these entities.",
        "查询": "GO FROM \"Manu Ginobili\" OVER like, teammate REVERSELY WHERE $$.player.age > 30 and $$.player.age < 40\nYIELD DISTINCT $$.player.age, $$.player.name"
    },
    {
        "用户": "Can you help me find the shortest path between Tim Duncan and the Spurs team?",
        "查询": "MATCH p = allShortestPaths( (a:player)-[e:serve*..3]-(b:team) )\n  WHERE a.player.name == 'Tim Duncan' AND b.team.name == 'Spurs'\n  RETURN p"
    },
    {
        "用户": "您好，请问您能帮我查找一下球员'LeBron James'所在的球队' Cavaliers'的关系类型和球队名称吗？",
        "查询": "MATCH (v1:player{name: \"LeBron James\"}) -[r:serve]-> (v2:team{name: \"Cavaliers\"})\nRETURN type(r) AS Type, v2.team.name AS Name"
    },
    {
        "用户": "梅林达·波宾从属于哪些组织？",
        "查询": "MATCH (n:character{name:'梅林达·波宾'})-[e:belong_to]-(n1:group) return n1"
    },
    {
        "用户": "Find the first entity that Tim Duncan likes.",
        "查询": "GO FROM \"Tim Duncan\" OVER like LIMIT 1;"
    },
    {
        "用户": "霍奇金病的检查项目有哪些？",
        "查询": "GO FROM \"霍奇金病\" OVER need_check YIELD dst(edge);"
    },
    {
        "用户": "赫伯特·博克是哪个家族的成员？",
        "查询": "MATCH (n:character{name:'赫伯特·博克'})-[e]-(n1:group) return n1"
    },
    {
        "用户": "返回杜格德·麦克费尔周边最多二跳关系的子图？",
        "查询": "GET SUBGRAPH 2 STEPS FROM \"杜格德·麦克费尔\" YIELD VERTICES AS nodes, EDGES AS relationships;"
    },
    {
        "用户": "统计名为'Irving'的球员所服务或喜欢的实体数量，关系的距离为2到3跳。",
        "查询": "MATCH (:player{name:\"Kyrie Irving\"})-[e:serve|like*2..3]-(v)\nRETURN count(v)"
    },
    {
        "用户": " 您好，我想查询一下'Tracy McGrady'喜欢的实体，喜欢程度为90。能否帮我找出这些实体以及它们之间的关系呢？",
        "查询": "MATCH (:player{name:\"Tracy McGrady\"})-[e:like{likeness: 90}]->(v)\nRETURN e, v"
    },
    {
        "用户": "Find all entities with a distance of 2 jumps and a 'like' relationship with player 'Grant Hill' and return to the relevant path.",
        "查询": "MATCH p = ()-[:like*2]->(v:player) WHERE id(v) == 'Grant Hill' RETURN p"
    },
    {
        "用户": "Identify entities older than 38 that 'Tim Duncan' likes' and return information on the edges and entities between these entities and 'Tim Duncan'.",
        "查询": "GO FROM 'Tim Duncan' OVER like WHERE properties($$).age > 38 YIELD edge as e,  $$ as dst"
    },
    {
        "用户": "Can you help me identify the number of paths that have a 'like' relationship with 'Carmelo Anthony'?",
        "查询": "GO FROM \"Carmelo Anthony\" OVER like YIELD like._dst| YIELD COUNT(*)"
    },
    {
        "用户": "Hello, could you please help me find all the entities that a player named 'Tony Parker' likes and return them to me?",
        "查询": "FETCH PROP ON player 'Tony Parker' YIELD player.name as Name |\nGO FROM $-.Name OVER like YIELD like._dst"
    },
    {
        "用户": " 您好，请帮我查找一下名为'Duncan'的球员所喜欢的实体，可以包括2到3层关系吗？能否返回这些关系和实体给我呢？",
        "查询": "MATCH (:player{name: \"Tim Duncan\"})-[e:like*2..3]->(v)\nRETURN e, v"
    },
    {
        "用户": "上巴恩顿的汉吉斯的逝世日期是什么？",
        "查询": "MATCH (n:character{name:'上巴恩顿的汉吉斯'}) return n.character.dead"
    },
    {
        "用户": "与卡桑德拉·瓦布拉斯基具有两跳亲属关系的人有哪些？",
        "查询": "GO 2 STEPS FROM \"卡桑德拉·瓦布拉斯基\" OVER kindred YIELD dst(edge)"
    },
    {
        "用户": "酒精中毒性神经疾病的症状有哪些？",
        "查询": "MATCH (n:disease)-[e:has_symptom]->(n1:symptom) WHERE n.disease.name=='酒精中毒性神经疾病' return n1.symptom.name"
    },
    {
        "用户": "巴巴吉德·阿金巴德从属于哪个组织？",
        "查询": "MATCH (n:character{name:'巴巴吉德·阿金巴德'})-[e:belong_to]-(n1:group) return n1"
    },
    {
        "用户": "Identify the entities connected to 'Kobe Bryant' through a 'like' relationship, and then return the names of these entities, including those on the two-step path.",
        "查询": "GO 2 STEPS FROM 'Kobe Bryant' OVER like REVERSELY YIELD $$.player.name"
    },
    {
        "用户": "软组织损伤的预防措施有哪些？",
        "查询": "MATCH (n:disease{name:\"软组织损伤\"}) return n.disease.prevent"
    },
    {
        "用户": "小儿中暑和暑热症的预防措施有哪些？",
        "查询": "MATCH (n:disease{name:\"小儿中暑和暑热症\"}) return n.disease.prevent"
    },
    {
        "用户": "获取 'Boris Diaw' 和 'Tony Parker' 两个球员的姓名和年龄信息，并去重返回。",
        "查询": "FETCH PROP ON player \"Boris Diaw\", \"Tony Parker\" YIELD DISTINCT player.name, player.age"
    },
    {
        "用户": "您好，请帮我找到ID为'Carmelo'的球员，然后告诉我他的年龄是多少。",
        "查询": "match (v:player) where id(v)==\"Carmelo Anthony\" return properties(v).age;"
    },
    {
        "用户": "查看和胸痛相关的所有信息？",
        "查询": "GET SUBGRAPH 1 STEPS FROM \"胸痛\" YIELD VERTICES AS nodes, EDGES AS all_edges"
    },
    {
        "用户": "Identify all entities that like 'Tony Parker' and 'Tim Duncan', and return these entities and their relationships, but exclude the relationships between 'Tony Parker' and 'Tim Duncan'.",
        "查询": "MATCH (v:player)-[e:like]->(v2) WHERE none_direct_dst(e) IN [\"Tony Parker\", \"Tim Duncan\"] RETURN *\nMINUS\nMATCH (v:player)-[e:like]->(v2) WHERE id(v2) IN [\"Tony Parker\", \"Tim Duncan\"] RETURN *"
    },
    {
        "用户": "梅林达·波宾的血统是什么？",
        "查询": "MATCH (n:character{name:'梅林达·波宾'}) return n.character.blood"
    },
    {
        "用户": "Find all the physical paths that can be reached through a maximum of 5 steps starting from 'Tim Duncan' through the 'like' and 'service' relationships, and sort them by path length to return to the top 10 paths.",
        "查询": "GO FROM \"Tim Duncan\" over * YIELD like._dst AS src, serve._src AS dst |\nFIND SHORTEST PATH FROM $-.src TO $-.dst OVER like UPTO 5 STEPS YIELD path as p |\nORDER BY $-.p | LIMIT 10"
    },
    {
        "用户": "忒修斯·斯卡曼德的未婚妻是谁？",
        "查询": "MATCH (n:character{name:'忒修斯·斯卡曼德'})-[e:kindred{rel_type:'未婚妻'}]-(n1) return n1"
    },
    {
        "用户": "嘿，你能帮我查一下有没有关于'Kyrie Irving'的球员有2到3跳所服务或喜欢的实体吗？然后告诉我统计结果。",
        "查询": "MATCH (:player{name:\"Kyrie Irving\"})-[e:serve|like*2..3]-(v)\nRETURN count(v)"
    },
    {
        "用户": "Identify entities that have a 'liking' relationship with 'Tim Duncan', and then identify the entities that these entities serve.",
        "查询": "GO 1 STEPS FROM 'Tim Duncan' OVER like YIELD like._dst as id | GO FROM $-.id OVER serve YIELD serve._dst"
    },
    {
        "用户": "疰夏的注意事项有哪些？",
        "查询": "MATCH (n:disease{name:\"疰夏\"}) return n.disease.prevent"
    },
    {
        "用户": "查找年龄为40的球员，并返回他们的姓名。",
        "查询": "$a = LOOKUP ON player WHERE player.age == 40 YIELD id(vertex) as id;\nFETCH PROP ON player $a.id YIELD player.name"
    },
    {
        "用户": "Hello, could you please help me find the name of a player named 'Tim Duncan'?",
        "查询": "MATCH (v:player{name: 'Tim Duncan'}) return v.player.name AS name"
    },
    {
        "用户": "Find the player entity with ID 'Carmelo Anthony' and return its age attribute value.",
        "查询": "match (v:player) where id(v)==\"Carmelo Anthony\" return properties(v).age;"
    },
    {
        "用户": "厥脱的治疗科室是哪些？",
        "查询": "GO FROM \"厥脱\" OVER cure_department YIELD dst(edge);"
    },
    {
        "用户": "Hello, please help me find the player node for 'Boris Diaw' and return it to me.",
        "查询": "FETCH PROP ON player 'Boris Diaw' YIELD vertex as node"
    },
    {
        "用户": "找出 'Rajon Rondo' 在2013年至2018年期间所效力的球队，返回球员姓名、开始年份、结束年份和球队名称。",
        "查询": "GO FROM \"Rajon Rondo\" OVER serve WHERE serve.start_year >= 2013 AND serve.end_year <= 2018\nYIELD $^.player.name, serve.start_year, serve.end_year, $$.team.name"
    },
    {
        "用户": "从 'Tim Duncan' 开始，通过喜欢和效力关系，获取两步内的所有实体和关系。",
        "查询": "GET SUBGRAPH WITH PROP 2 STEPS FROM 'Tim Duncan' IN like, serve YIELD vertices as nodes, edges as relationships"
    },
    {
        "用户": "脑血康丸能治什么病？",
        "查询": "MATCH (n:disease)-[]->(n1:drug{name:'脑血康丸'}) return n.disease.name"
    },
    {
        "用户": "Returns the name of the player named 'Tim Duncan'.",
        "查询": "MATCH (v:player{name: 'Tim Duncan'}) return v.player.name AS name"
    },
    {
        "用户": "西莫·斐尼甘的父亲的妻子是谁？",
        "查询": "MATCH (n:character)-[e:kindred{rel_type:'妻子'}]-(n1) WHERE n.character.name=='西莫·斐尼甘的父亲' return n1"
    },
    {
        "用户": "莫恩的出生日期是什么？",
        "查询": "MATCH (n:character{name:'莫恩'}) return n.character.born"
    },
    {
        "用户": "雅各布·科瓦尔斯基的兄弟是什么物种？",
        "查询": "MATCH (n:character{name:'雅各布·科瓦尔斯基的兄弟'}) return n.character.species"
    },
    {
        "用户": "阿布拉克萨斯·马尔福的血统是什么？",
        "查询": "LOOKUP ON character WHERE character.name=='阿布拉克萨斯·马尔福' YIELD properties(vertex).blood AS blood"
    },
    {
        "用户": "Starting from the entity of 'Tim Duncan', extend the 'like' relationship outward 1 to 4 steps, and return the 'like degree' and edge information between each edge.",
        "查询": "go 1 to 4 steps from \"Tim Duncan\" over like yield like.likeness, edge as e"
    },
    {
        "用户": "查找ID为'Carmelo Anthony'的球员实体，并返回其年龄属性值。",
        "查询": "match (v:player) where id(v)==\"Carmelo Anthony\" return properties(v).age;"
    },
    {
        "用户": "找出与 'Tracy McGrady' 有 '喜欢' 关系的所有实体，并返回这些实体的 ID。",
        "查询": "GO FROM \"Tracy McGrady\" OVER like YIELD like._dst"
    },
    {
        "用户": "前列通片能治什么病？",
        "查询": "MATCH (n:disease)-[]->(n1:drug{name:'前列通片'}) return n.disease.name"
    },
    {
        "用户": "帕金 (追球手II)的父亲是谁？",
        "查询": "MATCH (n:character)-[e:kindred{rel_type:'父亲'}]-(n1) WHERE n.character.name=='帕金 (追球手II)' return n1"
    },
    {
        "用户": "吉米·珀克斯是哪个学院的？",
        "查询": "MATCH (n:character{name:'吉米·珀克斯'})-[e:learn_from]-(n1:college) return n1"
    },
    {
        "用户": "得了心脏病应该去哪个科室就诊？",
        "查询": "GO FROM \"心脏病\" OVER cure_department YIELD dst(edge);"
    },
    {
        "用户": "Identify player entities aged 29.5 or older and return their ID and age information.",
        "查询": "LOOKUP ON player WHERE player.age >= 29.5 YIELD id(vertex) as name, player.age AS Age"
    },
    {
        "用户": "找出所有球员之间的队友关系，返回球员1的姓名和球员2的姓名。",
        "查询": "MATCH (p1)-[:teammate]->(p2)\nRETURN p1.player.name, p2.player.name"
    },
    {
        "用户": "罗恩·韦斯莱的父亲是谁？",
        "查询": "MATCH (n:character{name:'罗恩·韦斯莱'})-[e:kindred{rel_type:'父亲'}]-(n1) return n1"
    },
    {
        "用户": "Hello, please help me find a 40 year old player and give me their name and age plus 1.",
        "查询": "LOOKUP ON player WHERE player.age == 40 YIELD player.name, player.age + 1"
    },
    {
        "用户": "西莫·斐尼甘从属于哪个组织？",
        "查询": "MATCH (n:character{name:'西莫·斐尼甘'})-[e:belong_to]-(n1:group) return n1"
    },
    {
        "用户": "获取 'Kidd' 球员的姓名和年龄属性。",
        "查询": "FETCH PROP ON player \"Jason Kidd\" YIELD player.name, player.age"
    },
    {
        "用户": "请问您能帮我找到 'Kristaps Porzingis' 喜欢的人吗？我需要他们的 vid。",
        "查询": "GO FROM \"Tony Parker\" OVER like YIELD id($$) AS vid | RETURN $-.vid AS dst"
    },
    {
        "用户": "找出与 'Manu Ginobili' 有关系的所有实体，并返回这些实体的 '喜欢程度'、'队友开始年份'、'服务开始年份'和终点球员名。",
        "查询": "GO FROM \"Manu Ginobili\" OVER * REVERSELY YIELD like.likeness, teammate.start_year, serve.start_year, $$.player.name"
    },
    {
        "用户": "戴西·多德里奇的眼睛颜色是什么？",
        "查询": "LOOKUP ON character WHERE character.name=='戴西·多德里奇' YIELD properties(vertex).eye AS eye"
    },
    {
        "用户": "Find all entities that like a player named 'Tim Duncan' with a preference level of 90, and have a relationship with 'Tim Duncan' of 2 to 3 hops. Return these entities and their relationship with the player.",
        "查询": "MATCH (:player{name:\"Tim Duncan\"})<-[e:like*2..3{likeness: 90}]-(v)\nRETURN e, v"
    },
    {
        "用户": "迁延性昏迷的易感人群是哪些？",
        "查询": "MATCH (n:disease{name:\"迁延性昏迷\"}) return n.disease.easy_get"
    },
    {
        "用户": "Returns the type and quantity of relationship between a player named 'Tim Duncan' and it.",
        "查询": "MATCH (v:player{name: 'Tim Duncan'})-[e]->() RETURN type(e), count(*)"
    },
    {
        "用户": "找出从 'Yao Ming' 到 'Tony Parker' 的最短路径，路径上可以经过 '喜欢' 和 '服务' 关系，最多经过5个步骤，并返回路径信息。",
        "查询": "YIELD \"Yao Ming\" AS src, \"Tony Parker\" AS dst\n| FIND SHORTEST PATH FROM $-.src TO $-.dst OVER like, serve UPTO 5 STEPS YIELD path as p"
    },
    {
        "用户": "得了戊型病毒性肝炎的治愈概率是多少？",
        "查询": "FETCH PROP ON disease \"戊型病毒性肝炎\" YIELD properties(vertex).cured_prob as prob"
    },
    {
        "用户": "约拉·布莱克的嫂子是谁？",
        "查询": "MATCH (n:character)-[e:Kindred{rel_type:'嫂子'}]-(n1) WHERE n.character.name=='约拉·布莱克' return n1"
    },
    {
        "用户": "得了白血病推荐吃什么食物？",
        "查询": "MATCH (n:disease)-[e:recommend_eat]->(n1:food) WHERE n.disease.name=='白血病' return n1.food.name"
    },
    {
        "用户": "您好，请帮我找出2001年加入球队的球员以及他们所在的球队名称。",
        "查询": "match (player)-[s:serve]->(team) where s.start_year == 2001 return player.player.name AS player, team.team.name AS team"
    },
    {
        "用户": "Identify all entities that have a 'like' relationship with 'Tracy McGrady' and return the IDs of these entities.",
        "查询": "GO FROM \"Tracy McGrady\" OVER like YIELD like._dst"
    },
    {
        "用户": "从 'Tim Duncan' 出发，找出两步内 '喜欢' 程度在95到100之间的所有实体和关系。",
        "查询": "GET SUBGRAPH WITH PROP 2 STEPS FROM 'Tim Duncan'\n  WHERE like.likeness > 95 AND like.likeness < 100\n  YIELD vertices as nodes, edges as relationships"
    },
    {
        "用户": "获取球员 'Grant Hill' 的姓名和年龄。",
        "查询": "FETCH PROP ON player \"Grant Hill\" YIELD player.name, player.age"
    },
    {
        "用户": "您好，请帮我查找一下名为'Tim Duncan'的球员的姓名好吗？",
        "查询": "MATCH (v:player{name: 'Tim Duncan'}) return v.player.name AS name"
    },
    {
        "用户": "找出从 'Tim Duncan' 开始，通过 '喜欢' 和 '服务' 关系最短的路径，最多5步，按路径长度排序，返回前10条路径。",
        "查询": "GO FROM \"Tim Duncan\" over * YIELD like._dst AS src, serve._src AS dst |\nFIND SHORTEST PATH FROM $-.src TO $-.dst OVER like UPTO 5 STEPS YIELD path as p |\nORDER BY $-.p | LIMIT 10"
    },
    {
        "用户": "找出 'Tony Parker' 喜欢的实体，距离为双向0到2，且去重，返回这些实体的 ID。",
        "查询": "GO 0 TO 2 STEPS FROM 'Tony Parker' OVER like BIDIRECT YIELD DISTINCT like._dst"
    },
    {
        "用户": "Hey, can you help me find a player I like named 'Tim Duncan'? Their preference level is all 90, and their relationship with 'Tim Duncan' should be between 2 and 3 jumps. Can you tell me all about these players and their relationship with 'Tim Duncan'?",
        "查询": "MATCH (:player{name:\"Tim Duncan\"})<-[e:like*2..3{likeness: 90}]-(v)\nRETURN e, v"
    },
    {
        "用户": "查找名为'Yao Ming'的球员所服务的球队或球员，并返回原始实体姓名。",
        "查询": "MATCH (v:player {name: \"Yao Ming\"})-[:serve*0..1]->() RETURN v.player.name"
    },
    {
        "用户": "霍奇金病的治愈概率是多少？",
        "查询": "FETCH PROP ON disease \"霍奇金病\" YIELD properties(vertex).cured_prob as prob"
    },
    {
        "用户": "从 'Tim Duncan' 出发，找出两步内所有与其有 '喜欢' 关系的实体，并返回这些关系的详细信息。",
        "查询": "GET SUBGRAPH 2 STEPS FROM \"Tim Duncan\" BOTH like YIELD edges as e\n| UNWIND $-.e as a | YIELD $-.a AS a"
    },
    {
        "用户": "Can you help me find all the entities that Porzingis likes and give me their IDs?",
        "查询": "GO FROM \"Kristaps Porzingis\" OVER like YIELD id($$) AS vid | RETURN $-.vid AS dst"
    },
    {
        "用户": "您好，请问您能帮我获取一下'Kidd'球员的姓名和年龄属性吗？",
        "查询": "FETCH PROP ON player \"Jason Kidd\" YIELD player.name, player.age"
    },
    {
        "用户": "得了软纤维瘤推荐吃什么药？",
        "查询": "GO FROM \"软纤维瘤\" OVER recommend_drug YIELD dst(edge);"
    },
    {
        "用户": " 嘿，你能帮我找一下与 'Tim Duncan' 有 '喜欢' 关系的人吗？然后再找出这些人所为谁 '服务' 的呢？",
        "查询": "GO 1 STEPS FROM 'Tim Duncan' OVER like YIELD like._dst as id | GO FROM $-.id OVER serve YIELD serve._dst"
    },
    {
        "用户": "Hello, please help me identify the entities that have a two hop 'like' relationship with player 'Grant Hill' and return these paths to me.",
        "查询": "MATCH p = ()-[:like*2]->(v:player) WHERE id(v) == 'Grant Hill' RETURN p"
    },
    {
        "用户": "Find the player named 'Yao Ming' and all the entities it serves, and return the name of the original entity.",
        "查询": "MATCH (v:player {name: \"Yao Ming\"})-[:serve*0..1]->() RETURN v.player.name"
    },
    {
        "用户": "凯文·布罗德莫的弟弟是谁？",
        "查询": "MATCH (n:character{name:'凯文·布罗德莫'})-[e]-(n1) WHERE e.rel_type=='弟弟' return n1"
    },
    {
        "用户": "找出和利奥波迪娜·斯梅绥克相关的两个人？",
        "查询": "MATCH (n:character{name:'利奥波迪娜·斯梅绥克'})-[]-(n1) return n1 LIMIT 2"
    },
    {
        "用户": "多少种病能够通过药物治疗方式治愈？",
        "查询": "MATCH (n:disease)-[]->(n1:cure{name:'药物治疗'}) return count(n)"
    },
    {
        "用户": "温迪克·温瑞迪安参与了多少个组织？",
        "查询": "MATCH (n:character{name:'温迪克·温瑞迪安'})-[e]-(n1:group) return count(n1)"
    },
    {
        "用户": "Find the name of a player named 'Ray Allen'.",
        "查询": "$v1 = YIELD \"Ray Allen\" AS a;\nFETCH PROP ON player $v1.a YIELD player.name AS name"
    },
    {
        "用户": "找出从 'Yao Ming' 到 'Tony Parker' 的最短路径，路径上包括喜欢和服务关系，最多经过5个步骤，并返回路径信息。",
        "查询": "YIELD \"Yao Ming\" AS src, \"Tony Parker\" AS dst\n| FIND SHORTEST PATH FROM $-.src TO $-.dst OVER like, serve UPTO 5 STEPS YIELD path as p"
    },
    {
        "用户": "Hey, can you help me check which team the player named 'Yao Ming' plays for? Also, can you tell me his real name?",
        "查询": "MATCH (v:player {name: \"Yao Ming\"})-[:serve*0..1]->() RETURN v.player.name"
    },
    {
        "用户": "找出与 'Kobe Bryant' 相关联的实体，包括两步以内的 '喜欢' 关系的所有实体，并返回这些实体的名称。",
        "查询": "GO 2 STEPS FROM 'Kobe Bryant' OVER like REVERSELY YIELD $$.player.name"
    },
    {
        "用户": "莫瑞根是什么血统？",
        "查询": "MATCH (n:character{name:'莫瑞根'}) return n.character.blood"
    },
    {
        "用户": "请问您能帮我获取一下'Tony Parker'球员的姓名和年龄属性吗？",
        "查询": "FETCH PROP ON player \"Tony Parker\" YIELD player.name, player.age"
    },
    {
        "用户": "找出名为'Cory Joseph'的球员有喜欢关系的所有实体，并返回这些实体之间的关系路径。",
        "查询": "MATCH p = (v:player{name: \"Cory Joseph\"})-[e:like]-(v2)\nRETURN p"
    },
    {
        "用户": "您好，请帮我找一下与 'Manu Ginobili' 有 '喜欢' 或 '队友' 关系的实体。如果是 '喜欢' 的话，请确保喜欢程度大于90，并返回这些实体的喜欢程度、与 'Manu Ginobili' 成为队友的起始年份以及实体名称。",
        "查询": "GO FROM \"Manu Ginobili\" OVER like, teammate REVERSELY WHERE like.likeness > 90\nYIELD like.likeness, teammate.start_year, $$.player.name"
    },
    {
        "用户": " 请问您能帮我查找一下名字叫'abc'的球员所服务的最多距离为3的所有实体，并返回它们的所有属性吗？",
        "查询": "MATCH (v:player{name: \"abc\"}) -[:serve*..3]-> ()\nRETURN *"
    },
    {
        "用户": "Find playing teams with a distance of 0 to 3 hops that are favored by players known as' Carter ', and count the total number of players served by these teams.",
        "查询": "MATCH (:player{name: \"Vince Carter\"})-[e1:like]->()-[e2:serve*0..3]->()<-[e3:serve]-(v)\nRETURN count(v)"
    },
    {
        "用户": "Hello, please help me identify all the players who like 'Tony Parker' and 'Tim Duncan', and give me their relationships, but do not include the likes between 'Tony Parker' and 'Tim Duncan'.",
        "查询": "MATCH (v:player)-[e:like]->(v2) WHERE none_direct_dst(e) IN [\"Tony Parker\", \"Tim Duncan\"] RETURN *\nMINUS\nMATCH (v:player)-[e:like]->(v2) WHERE id(v2) IN [\"Tony Parker\", \"Tim Duncan\"] RETURN *"
    },
    {
        "用户": "Find all the entities that Boris Diaw likes and return their IDs.",
        "查询": "GO FROM \"Boris Diaw\" OVER like YIELD like._dst"
    },
    {
        "用户": "阿布拉克萨斯·马尔福的祖先有哪些？",
        "查询": "GO 2 STEPS FROM \"阿布拉克萨斯·马尔福\" OVER kindred WHERE kindred.rel_type=='祖先' YIELD dst(edge)"
    },
    {
        "用户": "尼可·勒梅的眼睛颜色是什么？",
        "查询": "LOOKUP ON character WHERE character.name=='尼可·勒梅' YIELD properties(vertex).eye AS eye"
    },
    {
        "用户": "下消化道出血的治愈概率是多少？",
        "查询": "MATCH (n:disease{name:\"下消化道出血\"}) return n.disease.cured_prob"
    },
    {
        "用户": "您好，请帮我找出与 'Tim Duncan' 有 '喜欢' 关系的实体，它们与 'Tim Duncan' 的距离为2步。能否返回这些关系的边信息呢？",
        "查询": "GET SUBGRAPH 2 STEPS FROM \"Tim Duncan\" BOTH like YIELD edges as e\n| UNWIND $-.e as a | YIELD $-.a AS a"
    },
    {
        "用户": "找出和蒂尔登·图茨相关的两个人？",
        "查询": "MATCH (n:character{name:'蒂尔登·图茨'})-[e]-(n1) return n LIMIT 2"
    },
    {
        "用户": "返回与名为'Rudy'的球员节点所距0或1跳的服务关系的球员姓名。",
        "查询": "MATCH (v:player {name: \"Rudy Gay\"})-[:serve*0..1]->(n) RETURN n.player.name"
    },
    {
        "用户": "弗利蒙·波特的妻子是谁？",
        "查询": "MATCH (n:character)-[e:kindred{rel_type:'妻子'}]-(n1) WHERE n.character.name=='弗利蒙·波特' return n1"
    },
    {
        "用户": "帕金 (追球手II)有多少个兄妹？",
        "查询": "MATCH (n:character{name:'帕金 (追球手II)'})-[e]-(n1:character) WHERE e.rel_type=='兄妹' return count(n1)"
    },
    {
        "用户": "找出 'Porzingis' 所 '喜欢' 的所有实体，并返回这些实体的 ID。",
        "查询": "GO FROM \"Kristaps Porzingis\" OVER like YIELD id($$) AS vid | RETURN $-.vid AS dst"
    },
    {
        "用户": "Can you help me find the name of the team 'Spurs'?",
        "查询": "FETCH PROP ON team \"Spurs\" YIELD team.name"
    },
    {
        "用户": "找出所有 '喜欢' 'Steve Nash' 的实体，并返回这些实体与 'Steve Nash' 的关系中的目标实体。",
        "查询": "GO FROM \"Steve Nash\" OVER like REVERSELY YIELD like._dst"
    },
    {
        "用户": "您好，请帮我查找一下，从 'Ricky Rubio' 出发，沿着 '喜欢' 的边，距离在1到2步之间的所有实体的ID、关系权重和名称。",
        "查询": "GO 1 TO 2 STEPS FROM 'Tony Parker' OVER like YIELD DISTINCT like._dst, like.likeness, $$.player.name"
    },
    {
        "用户": "足外翻的症状有哪些？",
        "查询": "MATCH (n:disease)-[e:has_symptom]->(n1:symptom) WHERE n.disease.name=='足外翻' return n1.symptom.name"
    },
    {
        "用户": "嘿，你能帮我找一下'Tracy McGrady'喜欢的东西吗？喜欢程度是90。然后把这些东西和他们的关系都给我返回一下。",
        "查询": "MATCH (:player{name:\"Tracy McGrady\"})-[e:like{likeness: 90}]->(v)\nRETURN e, v"
    },
    {
        "用户": "找出从 'Tim Duncan' 开始，通过 '喜欢' 和 '服务' 关系，最多经过5步可到达的所有实体路径，并按路径长度排序，返回前10条路径。",
        "查询": "GO FROM \"Tim Duncan\" over * YIELD like._dst AS src, serve._src AS dst |\nFIND SHORTEST PATH FROM $-.src TO $-.dst OVER like UPTO 5 STEPS YIELD path as p |\nORDER BY $-.p | LIMIT 10"
    },
    {
        "用户": "下消化道出血的发病原因是什么？",
        "查询": "MATCH (n:disease{name:\"下消化道出血\"}) return n.disease.cause"
    },
    {
        "用户": "肌纤维组织炎的治疗药物有哪些？",
        "查询": "GO FROM \"肌纤维组织炎\" OVER recommend_drug YIELD dst(edge);"
    },
    {
        "用户": "Can you help me find out the teams' Rajon Rondo 'played for from 2013 to 2018? I need to know the player's name, start year, end year, and team name.",
        "查询": "GO FROM \"Rajon Rondo\" OVER serve WHERE serve.start_year >= 2013 AND serve.end_year <= 2018\nYIELD $^.player.name, serve.start_year, serve.end_year, $$.team.name"
    },
    {
        "用户": "嘿，你能帮我找一下为 'Pistons' 队效力的球员吗？我想知道他们的名字。",
        "查询": "MATCH (v)-[:serve]->(t)\nWHERE id(t) == 'Pistons'\nRETURN v.player.name AS Name"
    },
    {
        "用户": " 您好，请帮我查找一下名为‘Yao Ming’的球员以及他所从事的所有职务，然后将原始实体的名称返回给我。",
        "查询": "MATCH (v:player {name: \"Yao Ming\"})-[:serve*0..1]->() RETURN v.player.name"
    },
    {
        "用户": "请问您能帮我找一下，和 'Danny Green' 有 '喜欢' 关系的人吗？然后再找出这些人的 '队友'，并告诉我这些人和他们的队友的ID。",
        "查询": "$a = GO FROM 'Danny Green' OVER like YIELD like._src AS src, like._dst AS dst;\nGO FROM $a.dst OVER teammate YIELD $a.src AS src, $a.dst, teammate._dst AS dst"
    },
    {
        "用户": "找出 'Tony Parker' 所 '喜欢' 的所有实体，并返回这些实体的 ID。",
        "查询": "GO FROM \"Tony Parker\" OVER like YIELD like._dst"
    },
    {
        "用户": " 嘿，能帮我找出年龄超过35岁的球员吗？然后统计一下他们的数量、年龄总和、最大年龄、最小年龄，还有平均年龄再加1，还有他们的所属标签。最后按照id、数量、最大年龄、最小年龄的顺序排序，跳过前10个结果，给我返回20个结果。",
        "查询": "MATCH(n:player)-[:like]->(m)\n  WHERE n.player.age > 35\n  RETURN DISTINCT id(n) AS id,\n                  count(n) AS count,\n                  sum(floor(n.player.age)) AS sum,\n                  max(m.player.age) AS max,\n                  min(n.player.age) AS min,\n                  avg(distinct n.player.age)+1 AS age,\n                  labels(m) AS lb\n        ORDER BY id, count, max, min\n        SKIP 10 LIMIT 20;"
    },
    {
        "用户": "Could you please help me search for entities that have a liking or teammate relationship with 'Dwight Howard'? I need to know the level of liking of these entities, the starting year of my teammates, and the name of the endpoint entity.",
        "查询": "GO FROM \"Dwight Howard\" OVER like, teammate REVERSELY YIELD like.likeness, teammate.start_year, $$.player.name"
    },
    {
        "用户": "找出 'Russell Westbrook' 所效力和喜欢的所有实体，并返回这些实体的 ID。",
        "查询": "GO FROM 'Russell Westbrook' OVER serve, like YIELD serve._dst, like._dst"
    },
    {
        "用户": "呼吸系统疾病伴发的精神障碍的治愈概率是多少？",
        "查询": "MATCH (n:disease{name:\"呼吸系统疾病伴发的精神障碍\"}) return n.disease.cured_prob"
    },
    {
        "用户": "法尔科·艾萨伦的眼睛颜色是什么？",
        "查询": "LOOKUP ON character WHERE character.name=='法尔科·艾萨伦' YIELD properties(vertex).eye AS eye"
    },
    {
        "用户": "找出与 'Manu Ginobili' 有关系的实体，并返回这些实体的 '喜欢程度'、'队友开始年份'、'服务开始年份' 和 '球员姓名'。",
        "查询": "GO FROM \"Manu Ginobili\" OVER * REVERSELY YIELD like.likeness, teammate.start_year, serve.start_year, $$.player.name"
    },
    {
        "用户": "密德莉的眼睛颜色是什么？",
        "查询": "LOOKUP ON character WHERE character.name=='密德莉' YIELD properties(vertex).eye AS eye"
    },
    {
        "用户": "找出球员 'Tracy McGrady' 喜欢的球员，再找出这些球员所喜欢的球员的ID。",
        "查询": "$var = GO FROM \"Tracy McGrady\" OVER like YIELD like._dst as id; GO FROM $var.id OVER like YIELD like._dst"
    },
    {
        "用户": "冈希尔达·尼恩的婚姻状况是什么？",
        "查询": "MATCH (n:character{name:'冈希尔达·尼恩'}) return n.character.marital"
    },
    {
        "用户": "高血压的得病概率是多少？",
        "查询": "LOOKUP ON disease WHERE disease.name == \"高血压\" YIELD properties(vertex).get_prob"
    },
    {
        "用户": "Find the shortest path from 'Yao Ming' to 'Tony Parker', which can go through 'like' and 'service' relationships, and can take up to 5 steps, and return path information.",
        "查询": "YIELD \"Yao Ming\" AS src, \"Tony Parker\" AS dst\n| FIND SHORTEST PATH FROM $-.src TO $-.dst OVER like, serve UPTO 5 STEPS YIELD path as p"
    },
    {
        "用户": "全鹿丸能治什么病？",
        "查询": "MATCH (n:disease)-[]->(n1:drug{name:'全鹿丸'}) return n.disease.name"
    },
    {
        "用户": "Find players older than 30.5 and return their ID and age information.",
        "查询": "LOOKUP ON player WHERE player.age > 30.5 YIELD id(vertex) as name, player.age AS Age"
    },
    {
        "用户": "Can you help me find all the people who like Grant Hill? I need the endpoint ID for their favorite relationship with Grant Hill.",
        "查询": "GO FROM \"Grant Hill\" OVER like REVERSELY YIELD like._dst"
    },
    {
        "用户": "找出 'Kristaps Porzingis' 所 '喜欢' 的所有人，并返回这些人的 vid。",
        "查询": "GO FROM \"Tony Parker\" OVER like YIELD id($$) AS vid | RETURN $-.vid AS dst"
    },
    {
        "用户": "Hello, could you please help me check the information about LeBron James' team? The team name is Cavaliers. Can you tell me the path, relationship type, and team name?",
        "查询": "MATCH (v1:player{name: \"LeBron James\"}) -[r:serve]-> (v2:team{name: \"Cavaliers\"})\nRETURN type(r) AS Type, v2.team.name AS Name"
    },
    {
        "用户": "迪芙娜·弗马吉的头发颜色是什么？",
        "查询": "LOOKUP ON character WHERE character.name=='迪芙娜·弗马吉' YIELD properties(vertex).hair AS hair"
    },
    {
        "用户": "Returns the type and number of relationships between a player named 'Tim Duncan' and their ownership.",
        "查询": "MATCH (v:player{name: 'Tim Duncan'})-[e]->() RETURN type(e), count(*)"
    },
    {
        "用户": "Hello, please help me find entities related to 'Manu Ginobili' and provide me with their 'likes',' teammate start year ',' service start year ', and' player name '.",
        "查询": "GO FROM \"Manu Ginobili\" OVER * REVERSELY YIELD like.likeness, teammate.start_year, serve.start_year, $$.player.name"
    },
    {
        "用户": "查找年龄为40的球员，并返回这些球员的姓名。",
        "查询": "$a = LOOKUP ON player WHERE player.age == 40 YIELD id(vertex) as id;\nFETCH PROP ON player $a.id YIELD player.name"
    },
    {
        "用户": "哈利波特是伊格诺图斯的什么关系？",
        "查询": "MATCH (n:character{name:'伊格诺图斯·佩弗利尔'})-[e]-(n1:character{name:'哈利·波特'}) return n1"
    },
    {
        "用户": "拉道夫斯·莱斯特兰奇的出生时间是什么？",
        "查询": "MATCH (n:character{name:'拉道夫斯·莱斯特兰奇'}) return n.character.born"
    },
    {
        "用户": "Hey, can you help me insert an edge with a liking level of 99 from 'Tim Duncan' to 'Tim Parker'? There is also an edge with a liking level of 90 from 'Tim Parker' to 'Tony Parker' that needs to be inserted!",
        "查询": "INSERT EDGE like(likeness) VALUES \"Tim Duncan\"->\"Tim Parker\":(99);\nINSERT EDGE like(likeness) VALUES \"Tim Parker\"->\"Tony Parker\":(90);"
    },
    {
        "用户": "得了白血病推荐吃什么药？",
        "查询": "GO FROM \"白血病\" OVER recommend_drug YIELD dst(edge);"
    },
    {
        "用户": " 您好，请帮我获取'Boris Diaw'和'Tony Parker'这两位球员的姓名和年龄信息，并确保没有重复的返回给我。",
        "查询": "FETCH PROP ON player \"Boris Diaw\", \"Tony Parker\" YIELD DISTINCT player.name, player.age"
    },
    {
        "用户": "Identify entities related to 'Manu Ginobili' and return their 'likes',' teammate start year ',' service start year ', and' player name '.",
        "查询": "GO FROM \"Manu Ginobili\" OVER * REVERSELY YIELD like.likeness, teammate.start_year, serve.start_year, $$.player.name"
    },
    {
        "用户": "请问您能帮我查找一下'Boris Diaw'曾效力过的球队和他在每个球队的服务时间吗？我需要知道他的姓名、效力起始和结束年份以及队名。",
        "查询": "GO FROM \"Boris Diaw\" OVER serve YIELD $^.player.name, serve.start_year, serve.end_year, $$.team.name"
    },
    {
        "用户": "奥塔莱恩·甘布尔的性别是什么？",
        "查询": "MATCH (n:character{name:'奥塔莱恩·甘布尔'}) return n.character.gender"
    },
    {
        "用户": "血稠的治愈概率是多少？",
        "查询": "MATCH (n:disease{name:\"血稠\"}) return n.disease.cured_prob"
    },
    {
        "用户": "Find the shortest path from 'Yao Ming' to 'Tony Parker', which includes likes and service relationships. Go through a maximum of 5 steps and return path information.",
        "查询": "YIELD \"Yao Ming\" AS src, \"Tony Parker\" AS dst\n| FIND SHORTEST PATH FROM $-.src TO $-.dst OVER like, serve UPTO 5 STEPS YIELD path as p"
    },
    {
        "用户": "Obtain the name and age of the player with ID 'Carmelo Anthony'.",
        "查询": "FETCH PROP ON player \"Carmelo Anthony\" YIELD player.name, player.age"
    },
    {
        "用户": "嘿，你能帮我找出所有喜欢Tony Parker的实体吗？并且返回这些实体与Tony Parker之间喜欢关系的实体ID。",
        "查询": "GO FROM \"Tony Parker\" OVER like REVERSELY YIELD like._dst"
    },
    {
        "用户": "请问您能帮我找到所有球员的姓名和节点信息吗？",
        "查询": "match (v:player) return v.player.name, v"
    },
    {
        "用户": "返回球员'LeBron James'所在的球队' Cavaliers'的关系类型和球队名称。",
        "查询": "MATCH (v1:player{name: \"LeBron James\"}) -[r:serve]-> (v2:team{name: \"Cavaliers\"})\nRETURN type(r) AS Type, v2.team.name AS Name"
    },
    {
        "用户": "Find the shortest path starting from 'Tim Duncan' through the relationship between 'likes' and' services', with a maximum of 5 steps, sorted by path length, and return to the top 10 paths.",
        "查询": "GO FROM \"Tim Duncan\" over * YIELD like._dst AS src, serve._src AS dst |\nFIND SHORTEST PATH FROM $-.src TO $-.dst OVER like UPTO 5 STEPS YIELD path as p |\nORDER BY $-.p | LIMIT 10"
    },
    {
        "用户": "得了糖尿病应该去哪个科室就诊？",
        "查询": "GO FROM \"糖尿病\" OVER cure_department YIELD dst(edge);"
    },
    {
        "用户": "Find the entity that a player named 'Carmelo Anthony' likes and return the player's name and age.",
        "查询": "MATCH (v:player)-[e:like]->(t) WHERE v.player.name=='Carmelo Anthony'  RETURN v.player.name, v.player.age"
    },
    {
        "用户": "获取 'Tony Parker' 喜欢 'Tim Duncan' 和 'Grant Hill' 喜欢 'Tracy McGrady' 的关系属性，并返回这些属性。",
        "查询": "FETCH PROP ON like \"Tony Parker\"->\"Tim Duncan\", \"Grant Hill\" -> \"Tracy McGrady\" YIELD edge as relationship |\nYIELD properties($-.relationship)"
    },
    {
        "用户": "找出ID为'Paul Gasol'的顶点，且通过'serve'关系连接的所有球队，返回这个球员的名字和他效力的球队名称。",
        "查询": "MATCH (v)-[:serve]->(t)\nWHERE (NOT NOT id(v) == 'Paul Gasol') AND id(v) == 'Paul Gasol'\nRETURN v.player.name AS Name, t.team.name AS Team"
    },
    {
        "用户": "Returns the name of the player in the service relationship that is 0 or 1 jump away from the player node named 'Rudy'.",
        "查询": "MATCH (v:player {name: \"Rudy Gay\"})-[:serve*0..1]->(n) RETURN n.player.name"
    },
    {
        "用户": "请问您能帮我找一下，从 'Tim Duncan' 到 'Tony Parker' 的最多三步反向 '喜欢' 关系的路径信息吗？",
        "查询": "FIND NOLOOP PATH FROM \"Tim Duncan\" TO \"Tony Parker\" OVER like REVERSELY UPTO 3 STEPS YIELD path as p"
    },
    {
        "用户": "乔治·韦斯莱的妻子是谁？",
        "查询": "MATCH (n:character)-[e:kindred{rel_type:'妻子'}]-(n1) WHERE n.character.name=='乔治·韦斯莱' return n1"
    },
    {
        "用户": "您好，请帮我查找一下'Tony Parker'喜欢'Tim Duncan'和'Grant Hill'喜欢'Tracy McGrady'之间的关系属性，能帮我返回这些属性吗？",
        "查询": "FETCH PROP ON like \"Tony Parker\"->\"Tim Duncan\", \"Grant Hill\" -> \"Tracy McGrady\" YIELD edge as relationship |\nYIELD properties($-.relationship)"
    },
    {
        "用户": "与詹姆·小天狼星·波特具有两跳亲属关系的人有哪些？",
        "查询": "GO 2 STEPS FROM \"詹姆·小天狼星·波特\" OVER kindred YIELD dst(edge)"
    },
    {
        "用户": "嘿，你能帮我找到'Boris Diaw'在'Haw'球队的所有信息吗？我需要知道他的球员姓名、服役起始年份、服役结束年份和所在队伍名称。",
        "查询": "GO FROM 'Boris Diaw' OVER serve WHERE $$.team.name CONTAINS \"Haw\"\nYIELD $^.player.name, serve.start_year, serve.end_year, $$.team.name"
    },
    {
        "用户": "龙虎人丹能治什么病？",
        "查询": "MATCH (n:disease)-[]->(n1:drug{name:'龙虎人丹'}) return n.disease.name"
    },
    {
        "用户": "您好，请帮我查找一下，从'Ricky Rubio'开始，沿着'喜欢'的关系，向外扩展1到2步，返回所有实体的ID、关系权重和名称，可以吗？",
        "查询": "GO 1 TO 2 STEPS FROM 'Tony Parker' OVER like YIELD DISTINCT like._dst, like.likeness, $$.player.name"
    },
    {
        "用户": "Obtain the name and age of the player for 'Carmelo'.",
        "查询": "FETCH PROP ON player \"Carmelo Anthony\" YIELD player.name, player.age"
    },
    {
        "用户": "糖尿病的得病概率是多少？",
        "查询": "LOOKUP ON disease WHERE disease.name == \"糖尿病\" YIELD properties(vertex).get_prob"
    },
    {
        "用户": "Obtain the names and age information of two players, 'Boris Diaw' and 'Tony Parker', and go back.",
        "查询": "FETCH PROP ON player \"Boris Diaw\", \"Tony Parker\" YIELD DISTINCT player.name, player.age"
    },
    {
        "用户": "找出从 'Tim Duncan' 到 'Nobody' 或 'Spur' 的 '喜欢' 关系的路径，最多包含3个节点，并返回这些路径。",
        "查询": "FIND NOLOOP PATH FROM \"Tim Duncan\" TO \"Nobody\",\"Spur\" OVER like REVERSELY UPTO 3 STEPS YIELD path as p"
    },
    {
        "用户": "返回拉福尔周边最多二跳关系的子图？",
        "查询": "GET SUBGRAPH 2 STEPS FROM \"菲菲·拉福尔\" YIELD VERTICES AS nodes, EDGES AS relationships;"
    },
    {
        "用户": "Hello, could you please help me find all the paths from 'Tim Duncan' to 'Nobody' or 'Spur'? The relationship on the path is' like ', and there can be up to 3 nodes. Can you return these paths to me?",
        "查询": "FIND NOLOOP PATH FROM \"Tim Duncan\" TO \"Nobody\",\"Spur\" OVER like REVERSELY UPTO 3 STEPS YIELD path as p"
    },
    {
        "用户": "赫普兹巴·史密斯的头发颜色是什么？",
        "查询": "MATCH (n:character{name:'赫普兹巴·史密斯'}) return n.character.hair"
    },
    {
        "用户": "您好，请帮我查找一下，从 'Tony Parker' 出发，沿着双向 '喜欢' 关系，经过 0 到 2 步，返回所有不重复的实体的 ID。",
        "查询": "GO 0 TO 2 STEPS FROM 'Tony Parker' OVER like BIDIRECT YIELD DISTINCT like._dst"
    },
    {
        "用户": "找出年龄在30到40岁之间的 'Ginobili' 的所有队友和 '喜欢' 的实体，并返回这些实体的年龄和姓名。",
        "查询": "GO FROM \"Manu Ginobili\" OVER like, teammate REVERSELY WHERE $$.player.age > 30 and $$.player.age < 40\nYIELD DISTINCT $$.player.age, $$.player.name"
    },
    {
        "用户": "Identify all entities with a distance of 3 that have a 'like' and 'service' relationship with 'Tim Duncan' and are labeled and aged over 40, and return these entities.",
        "查询": "GO 3 STEPS FROM \"Tim Duncan\" OVER like,serve\n  WHERE size(labels($$))>0 AND $$.player.age>40\n  yield $$ as v"
    },
    {
        "用户": " 您好，请帮我找一下年龄超过30.5岁的球员，然后给我他们的ID和年龄信息。",
        "查询": "LOOKUP ON player WHERE player.age > 30.5 YIELD id(vertex) as name, player.age AS Age"
    },
    {
        "用户": "得了糖尿病推荐吃什么食物？",
        "查询": "MATCH (n:disease)-[e:recommend_eat]->(n1:food) WHERE n.disease.name=='糖尿病' return n1.food.name"
    },
    {
        "用户": "Return the name attributes of the first two players and sort them by name attribute.",
        "查询": "match (v:player) return properties(v).name AS name order by name limit 2;"
    },
    {
        "用户": "Hello, could you please help me find out which entities can be reached through the 'like' and 'serve' relationships of a jump starting from 'Tim Duncan'? And at most three jumps can be made to associate the two. Can you return these paths to me?",
        "查询": "GO FROM \"Tim Duncan\" over * YIELD like._dst AS src, serve._src AS dst |\nFIND ALL PATH FROM $-.src TO $-.dst OVER like UPTO 3 STEPS YIELD path as p"
    },
    {
        "用户": "请问您能帮我找到2001年加入球队的球员名称和他们所在的球队名称吗？",
        "查询": "match (player)-[s:serve]->(team) where s.start_year == 2001 return player.player.name AS player, team.team.name AS team"
    },
    {
        "用户": "Hello, please help me identify all entities that have a 'like' relationship with 'Tracy McGrady' and return their IDs.",
        "查询": "GO FROM \"Tracy McGrady\" OVER like YIELD like._dst"
    },
    {
        "用户": "请问您能帮我查找一下，2000年之后，名为'Tracy McGrady'的球员所服务或喜欢的实体及其关系吗？",
        "查询": "MATCH (:player{name:\"Tracy McGrady\"})-[e:serve|like{start_year: 2000}]->(v)\nRETURN e, v"
    },
    {
        "用户": "找出年龄在30到40岁之间的'Manu Ginobili'的所有队友和喜欢的实体，返回这些实体的年龄和姓名。",
        "查询": "GO FROM \"Manu Ginobili\" OVER like, teammate REVERSELY WHERE $$.player.age > 30 and $$.player.age < 40\nYIELD DISTINCT $$.player.age, $$.player.name"
    },
    {
        "用户": "找到ID为'Carmelo'的球员实体，返回其年龄属性值。",
        "查询": "match (v:player) where id(v)==\"Carmelo Anthony\" return properties(v).age;"
    },
    {
        "用户": "Search for teammate relationships between all players and return their names.",
        "查询": "MATCH (p1)-[:teammate]->(p2)\nRETURN p1.player.name, p2.player.name"
    },
    {
        "用户": "偏头痛的预防措施有哪些？",
        "查询": "MATCH (n:disease{name:\"偏头痛\"}) return n.disease.prevent"
    },
    {
        "用户": "从'Tim Duncan'的实体出发，沿着'喜欢'关系向外扩展1到4步，返回每个边之间的'喜欢程度'和边的信息。",
        "查询": "go 1 to 4 steps from \"Tim Duncan\" over like yield like.likeness, edge as e"
    },
    {
        "用户": "Returns the type and number of players named 'Rudy Gay' and their ownership relationships.",
        "查询": "MATCH (v:player{name: 'Rudy Gay'})-[e]->() RETURN type(e), count(*)"
    },
    {
        "用户": "查看和高血压相关的所有信息？",
        "查询": "GET SUBGRAPH 1 STEPS FROM \"高血压\" YIELD VERTICES AS nodes, EDGES AS all_edges"
    },
    {
        "用户": "小肠气痛的易感人群是哪些？",
        "查询": "MATCH (n:disease{name:\"小肠气痛\"}) return n.disease.easy_get"
    },
    {
        "用户": "Find player entities aged 29 or older and return their ID and age information.",
        "查询": "LOOKUP ON player WHERE player.age >= 29 YIELD id(vertex) as name, player.age AS Age"
    },
    {
        "用户": "特罗卡是哪个物种的？",
        "查询": "MATCH (n:character{name:'特罗卡'}) return n.character.species"
    },
    {
        "用户": "找出年龄大于45岁的球员和名为'Spurs'的球队之间最多三跳的最短的路径长度。",
        "查询": "MATCH p = shortestPath( (a:player)-[e:serve*..3]-(b:team) )\n  WHERE a.player.age > 45 AND b.team.name == 'Spurs'\n  RETURN length(p)"
    },
    {
        "用户": "Obtain the name and age attributes of the 'Jason Kidd' player.",
        "查询": "FETCH PROP ON player \"Jason Kidd\" YIELD player.name, player.age"
    },
    {
        "用户": " 嘿，你能帮我找一下名叫'Tim Duncan'的球员吗？我想知道他喜欢的实体，但是只限于2到3个跳的关系。能把所有信息都告诉我吗？",
        "查询": "MATCH (:player{name:\"Tim Duncan\"})-[e:like*2..3]->()\nRETURN *"
    },
    {
        "用户": "Hey, can you help me find a player named 'Tim Duncan'? I want to know the entity he likes, but it's only limited to 2-3 jump relationships. Can you tell me all the information?",
        "查询": "MATCH (:player{name:\"Tim Duncan\"})-[e:like*2..3]->()\nRETURN *"
    },
    {
        "用户": "诺比·利奇的性别是什么？",
        "查询": "LOOKUP ON character WHERE character.name=='诺比·利奇' YIELD properties(vertex).gender AS gender"
    },
    {
        "用户": "Hello, please help me find the first entity that 'Tim Duncan' likes.",
        "查询": "GO FROM \"Tim Duncan\" OVER like LIMIT 1;"
    },
    {
        "用户": "您好，请帮我找一下'Tony Parker'喜欢的东西，距离范围在0到2之间，还要去除重复的结果，最后给我返回这些东西的ID。",
        "查询": "GO 0 TO 2 STEPS FROM 'Tony Parker' OVER like BIDIRECT YIELD DISTINCT like._dst"
    },
    {
        "用户": "Find all players with names between 'Grant Hill' and 'Yao Ming' and return their information.",
        "查询": "MATCH (v:player)\nWHERE v.player.name>\"Grant Hill\" and  v.player.name<=\"Yao Ming\"\nRETURN v"
    },
    {
        "用户": "四物颗粒能治什么病？",
        "查询": "MATCH (n:disease)-[]->(n1:drug{name:'四物颗粒'}) return n.disease.name"
    },
    {
        "用户": "高血压的治愈概率是多少？",
        "查询": "FETCH PROP ON disease \"高血压\" YIELD properties(vertex).cured_prob as prob"
    },
    {
        "用户": "与温迪克·温瑞迪安具有两跳亲属关系的人有哪些？",
        "查询": "GO 2 STEPS FROM \"温迪克·温瑞迪安\" OVER kindred YIELD dst(edge)"
    },
    {
        "用户": "扎卡赖斯·史密斯的头发颜色是什么？",
        "查询": "MATCH (n:character{name:'扎卡赖斯·史密斯'}) return n.character.hair"
    },
    {
        "用户": "找出所有 '喜欢' 'Tony Parker' 的实体，并返回这些实体与 'Tony Parker' 的关系中 '喜欢' 的实体的 ID。",
        "查询": "GO FROM \"Tony Parker\" OVER like REVERSELY YIELD like._dst"
    },
    {
        "用户": "May I ask if you could help me find any entities that have a favorite relationship with 'Tim Duncan'? Can you then identify the entities with service relationships among these entities and return their IDs to me?",
        "查询": "GO 1 STEPS FROM 'Tim Duncan' OVER like YIELD like._dst as id | GO FROM $-.id OVER serve YIELD serve._dst"
    },
    {
        "用户": "Hello, could you help me find a player node named 'Boris Diaw' and return it?",
        "查询": "MATCH (n:player) WHERE id(n) == \"Boris Diaw\" RETURN n;"
    },
    {
        "用户": "女巫追捕小分队队长的血统是什么？",
        "查询": "LOOKUP ON character WHERE character.name=='女巫追捕小分队队长' YIELD properties(vertex).blood AS blood"
    },
    {
        "用户": "查找从 'Ricky Rubio' 出发，沿着 '喜欢' 的边，距离 1 到 2 步，并返回所有实体的 ID、关系权重和名称。",
        "查询": "GO 1 TO 2 STEPS FROM 'Tony Parker' OVER like YIELD DISTINCT like._dst, like.likeness, $$.player.name"
    },
    {
        "用户": "查找评分为666的喜欢关系，返回这些关系的起点和终点实体。",
        "查询": "LOOKUP ON like WHERE like.grade == 666 YIELD src(edge) as src, dst(edge) as dst"
    },
    {
        "用户": "Find all entities served by a player named 'abc' with a maximum distance of 3, and return all attributes of these entities.",
        "查询": "MATCH (v:player{name: \"abc\"}) -[:serve*..3]-> ()\nRETURN *"
    },
    {
        "用户": "您好，请帮我找出年龄大于38的实体，这些实体与'Tim Duncan'之间的边和信息。",
        "查询": "GO FROM 'Tim Duncan' OVER like WHERE properties($$).age > 38 YIELD edge as e,  $$ as dst"
    },
    {
        "用户": "温廷汉姆的出生年份是什么？",
        "查询": "MATCH (n:character{name:'赫尔曼·温廷汉姆'}) return n.character.born"
    },
    {
        "用户": "找到与名为'Tim Duncan'的球员所喜欢的球员距离为0到3跳的球队，统计为这些球队所效力球员的数量。",
        "查询": "MATCH (:player{name: \"Tim Duncan\"})-[e1:like]->()-[e2:serve*0..3]->()<-[e3:serve]-(v)\nRETURN count(v)"
    },
    {
        "用户": "您好，请帮我查找一下与名为'Tim Duncan'的球员相关的所有关系的类型和数量。",
        "查询": "MATCH (v:player{name: 'Tim Duncan'})-[e]->() RETURN type(e), count(*)"
    },
    {
        "用户": "您好，请帮我找出'Tim Duncan'喜欢的所有事物，并提供这些事物之间的关系属性的去重和关系本身，可以吗？",
        "查询": "MATCH (v:player)-[e:like]->(v2)\nWHERE id(v) == \"Tim Duncan\"\nRETURN DISTINCT properties(e) as props, e"
    },
    {
        "用户": "返回名为'Tim Duncan'的球员的姓名。",
        "查询": "MATCH (v:player{name: 'Tim Duncan'}) return v.player.name AS name"
    },
    {
        "用户": "三叉神经痛的得病概率是多少？",
        "查询": "MATCH (n:disease{name:\"三叉神经痛\"}) return n.disease.get_prob"
    },
    {
        "用户": "乳头肌功能不全的易感人群是哪些？",
        "查询": "MATCH (n:disease{name:\"乳头肌功能不全\"}) return n.disease.easy_get"
    },
    {
        "用户": "脐疝的治疗时长通常是多久？",
        "查询": "MATCH (n:disease{name:\"脐疝\"}) return n.disease.cure_lasttime"
    },
    {
        "用户": "希思科特·巴巴里参与了多少个组织？",
        "查询": "MATCH (n:character{name:'希思科特·巴巴里'})-[e:belong_to]-(n1:group) return count(n1)"
    },
    {
        "用户": "弗雷德·韦斯莱参与了多少个组织？",
        "查询": "MATCH (n:character{name:'弗雷德·韦斯莱'})-[e]-(n1:group) return count(n1)"
    },
    {
        "用户": "Hello, please help me find out. Starting from 'Tony Parker' and following the bidirectional 'like' relationship, after steps 0 to 2, return the IDs of all non repeating entities.",
        "查询": "GO 0 TO 2 STEPS FROM 'Tony Parker' OVER like BIDIRECT YIELD DISTINCT like._dst"
    },
    {
        "用户": "威尔米娜·塔夫特从属于哪个组织？",
        "查询": "MATCH (n:character{name:'威尔米娜·塔夫特'})-[e:belong_to]-(n1:group) return n1"
    },
    {
        "用户": "得了戊型病毒性肝炎的伴随症状有哪些？",
        "查询": "GO FROM \"戊型病毒性肝炎\" OVER accompany_with YIELD dst(edge);"
    },
    {
        "用户": "马琳·麦金农从属于哪些组织？",
        "查询": "MATCH (n:character{name:'马琳·麦金农'})-[e:belong_to]-(n1:group) return n1"
    },
    {
        "用户": "吉德罗·洛哈特的姐姐的母亲是谁？",
        "查询": "MATCH (n:character)-[e:kindred{rel_type:'母亲'}]-(n1) WHERE n.character.name=='吉德罗·洛哈特的姐姐' return n1"
    },
    {
        "用户": "Could you please help me check the name and age of the player with ID 'Carmelo Anthony'?",
        "查询": "FETCH PROP ON player \"Carmelo Anthony\" YIELD player.name, player.age"
    },
    {
        "用户": "急性乳腺炎的治疗科室是哪个？",
        "查询": "GO FROM \"急性乳腺炎\" OVER cure_department YIELD dst(edge);"
    },
    {
        "用户": "Hello, please help me find the vertex with ID 'Paul Gasol', then find all the teams connected through the 'serve' relationship, and finally return the name of this player and the team he plays for to me.",
        "查询": "MATCH (v)-[:serve]->(t)\nWHERE (NOT NOT id(v) == 'Paul Gasol') AND id(v) == 'Paul Gasol'\nRETURN v.player.name AS Name, t.team.name AS Team"
    },
    {
        "用户": "Hello, could you please help me find a path from players over 45 years old to a team named 'Spurs', with a maximum of three jumps, the shortest path, and tell me the length of the path.",
        "查询": "MATCH p = shortestPath( (a:player)-[e:serve*..3]-(b:team) )\n  WHERE a.player.age > 45 AND b.team.name == 'Spurs'\n  RETURN length(p)"
    },
    {
        "用户": "Can you help me find out the names of teams and related players related to 'LaMarcus Aldridge'?",
        "查询": "GO FROM \"LaMarcus Aldridge\" OVER * YIELD $$.team.name, $$.player.name"
    },
    {
        "用户": "什么病会伴随着高血压？",
        "查询": "MATCH (n:disease)-[e:accompany_with]->(n1:disease{name:'高血压'}) return n.disease.name"
    },
    {
        "用户": "找出 和'LaMarcus Aldridge' 相关的球队名称和有关联的球员的名称。",
        "查询": "GO FROM \"LaMarcus Aldridge\" OVER * YIELD $$.team.name, $$.player.name"
    },
    {
        "用户": "幼年型慢性关节炎及其伴发的葡萄膜炎的治愈概率是多少？",
        "查询": "MATCH (n:disease{name:\"幼年型慢性关节炎及其伴发的葡萄膜炎\"}) return n.disease.cured_prob"
    },
    {
        "用户": "Can you help me find the names of the top two players and sort them by name?",
        "查询": "match (v:player) return properties(v).name AS name order by name limit 2;"
    },
    {
        "用户": "小儿糖原贮积病Ⅳ型的治疗方法是什么？",
        "查询": "MATCH (n:disease{name:\"小儿糖原贮积病Ⅳ型\"})-[:cure_way]->(n1) return n1"
    },
    {
        "用户": "Identify all entities that 'Tim Duncan' likes' and return the de duplication attributes and relationships themselves of these relationships.",
        "查询": "MATCH (v:player)-[e:like]->(v2)\nWHERE id(v) == \"Tim Duncan\"\nRETURN DISTINCT properties(e) as props, e"
    },
    {
        "用户": "Can you help me find all entities that have a valid or favorite relationship with 'Tim Duncan'? And return the ID of these entities after deduplication.",
        "查询": "GO FROM 'Tim Duncan' OVER serve, like bidirect YIELD distinct dst(edge) as dst"
    },
    {
        "用户": "Hey, can you help me find all the things that this player 'Carmelo Anthony' likes? Also, can you tell me his name and age? “",
        "查询": "MATCH (v:player)-[e:like]->(t) WHERE v.player.name=='Carmelo Anthony'  RETURN v.player.name, v.player.age"
    },
    {
        "用户": "Hey, can you help me find something 'Tracy McGrady' likes? The level of liking is 90. Then return these things and their relationships to me.",
        "查询": "MATCH (:player{name:\"Tracy McGrady\"})-[e:like{likeness: 90}]->(v)\nRETURN e, v"
    },
    {
        "用户": "Find players aged 40 and return their names and age plus 1.",
        "查询": "LOOKUP ON player WHERE player.age == 40 YIELD player.name, player.age + 1"
    },
    {
        "用户": "能帮我返回托比亚·斯内普到帕金 (找球手)的最短路径吗？",
        "查询": "FIND SHORTEST PATH FROM \"托比亚·斯内普\" TO \"帕金 (找球手)\" OVER * YIELD path AS p"
    },
    {
        "用户": "插入一条 '喜欢' 边，从 'Tim Duncan' 指向 'Tim Parker'，喜欢程度为 99；插入一条 '喜欢' 边，从 'Tim Parker' 指向 'Tony Parker'，喜欢程度为 90。",
        "查询": "INSERT EDGE like(likeness) VALUES \"Tim Duncan\"->\"Tim Parker\":(99);\nINSERT EDGE like(likeness) VALUES \"Tim Parker\"->\"Tony Parker\":(90);"
    },
    {
        "用户": "请问您能帮我查询一下ID为'Carmelo Anthony'的球员的姓名和年龄吗？",
        "查询": "FETCH PROP ON player \"Carmelo Anthony\" YIELD player.name, player.age"
    },
    {
        "用户": "Hello, could you please help me? I would like to find the shortest path starting from 'Tim Duncan' through 'likes' and' services', with a maximum of 5 steps, and then sort it by path length to return to the top 10 paths.",
        "查询": "GO FROM \"Tim Duncan\" over * YIELD like._dst AS src, serve._src AS dst |\nFIND SHORTEST PATH FROM $-.src TO $-.dst OVER like UPTO 5 STEPS YIELD path as p |\nORDER BY $-.p | LIMIT 10"
    },
    {
        "用户": "Can you help me find 40 year old players and tell me their names?",
        "查询": "$a = LOOKUP ON player WHERE player.age == 40 YIELD id(vertex) as id;\nFETCH PROP ON player $a.id YIELD player.name"
    },
    {
        "用户": "塔奎因·麦克塔维什的邻居是什么物种？",
        "查询": "MATCH (n:character{name:'塔奎因·麦克塔维什的邻居'}) return n.character.species"
    },
    {
        "用户": "Find all entities with a preference of 90 and a distance of 2 to 3 that are favored by a player named 'Tim Duncan', and return these entities and their relationships.",
        "查询": "MATCH (:player{name:\"Tim Duncan\"})-[e:like*2..3{likeness: 90}]->(v)\nRETURN e, v"
    },
    {
        "用户": "Can you help me find the deduplicated IDs of all entities that have a 'like' relationship with 'Tim Duncan'?",
        "查询": "GO FROM \"Tim Duncan\" OVER like YIELD like._dst AS dst | YIELD DISTINCT $-.dst AS dst"
    },
    {
        "用户": "查找年龄大于30.5的球员，并返回这些球员的ID和年龄信息。",
        "查询": "LOOKUP ON player WHERE player.age > 30.5 YIELD id(vertex) as name, player.age AS Age"
    },
    {
        "用户": "查找球员名字在'Grant Hill'和'Yao Ming'之间的所有球员，并返回这些球员的信息。",
        "查询": "MATCH (v:player)\nWHERE v.player.name>\"Grant Hill\" and  v.player.name<=\"Yao Ming\"\nRETURN v"
    },
    {
        "用户": "Find the number of preferred physical paths for the player with ID 'Tim Duncan' and return.",
        "查询": "MATCH (a:player)\nWHERE id(a)=='Tim Duncan'\nMATCH (a)-[:like]-(b)\nRETURN count(*) AS cnt"
    },
    {
        "用户": "Returns the name of a player who has a direct or indirect service relationship with a player named 'Rudy Gay'.",
        "查询": "MATCH (v:player {name: \"Rudy Gay\"})-[:serve*0..1]->(n) RETURN n.player.name"
    },
    {
        "用户": "西弗勒斯·斯内普的头发颜色是什么？",
        "查询": "MATCH (n:character{name:'西弗勒斯·斯内普'}) return n.character.hair"
    },
    {
        "用户": "遗传性凝血因子ⅩⅢ缺乏的治疗科室是哪些？",
        "查询": "GO FROM \"遗传性凝血因子ⅩⅢ缺乏\" OVER cure_department YIELD dst(edge);"
    },
    {
        "用户": "Please help me find the team where 'Boris Diaw' is located, and then find out the time period and team information that includes' Haw 'in all team names. Finally, tell me the player's name, start year, end year, and team name.",
        "查询": "GO FROM 'Boris Diaw' OVER serve WHERE $$.team.name CONTAINS \"Haw\"\nYIELD $^.player.name, serve.start_year, serve.end_year, $$.team.name"
    },
    {
        "用户": "得了慢性淋巴细胞性白血病推荐吃什么药？",
        "查询": "GO FROM \"慢性淋巴细胞性白血病\" OVER recommend_drug YIELD dst(edge);"
    },
    {
        "用户": "亨利七世的孙女是谁？",
        "查询": "MATCH (n:character{name:'亨利七世'})-[e:kindred{rel_type:'孙女'}]-(n1) return n1"
    },
    {
        "用户": "您好，请帮我找出所有与其他球员喜欢程度为-1的球员之间的关系。",
        "查询": "match (v:player)-[e:like{likeness:-1}]->()  RETURN e"
    },
    {
        "用户": "Hello, please help me find a player named 'Jordan' and provide their node information.",
        "查询": "MATCH (v:player {name: \"DeAndre Jordan\"}) RETURN v"
    },
    {
        "用户": "寻找ID为'Tim Duncan'的球员所喜欢的球员，统计路径数量并返回。",
        "查询": "MATCH (a:player)\nWHERE id(a)=='Tim Duncan'\nMATCH (a)-[:like]-(b)\nRETURN count(*) AS cnt"
    },
    {
        "用户": "得了白血病应该去哪个科室就诊？",
        "查询": "GO FROM \"白血病\" OVER cure_department YIELD dst(edge);"
    },
    {
        "用户": "莫恩是哪个家族的成员？",
        "查询": "MATCH (n:character{name:'莫恩'})-[e:belong_to]-(n1:group) return n1"
    },
    {
        "用户": "获取 'Jason Kidd' 球员的姓名和年龄属性。",
        "查询": "FETCH PROP ON player \"Jason Kidd\" YIELD player.name, player.age"
    },
    {
        "用户": "眼氨肽滴眼液能治什么病？",
        "查询": "MATCH (n:disease)-[]->(n1:drug{name:'眼氨肽滴眼液'}) return n.disease.name"
    },
    {
        "用户": "Could you please help me count how many paths can connect player v1 to 'Tim Duncan', and can these paths also represent player v1's love for 'Tim Duncan' and their effective relationship?",
        "查询": "MATCH (v1)-[:like]->(v2:player)-[:serve]->(v3)\nWHERE id(v2) == 'Tim Duncan'\nRETURN COUNT(*)"
    },
    {
        "用户": "Hello, please help me find all entities with a distance of 3, starting from 'Tim Duncan' and through the relationship between 'likes' and' services'. These entities should have labels and be over 40 years old. Could you please return these entities to me.",
        "查询": "GO 3 STEPS FROM \"Tim Duncan\" OVER like,serve\n  WHERE size(labels($$))>0 AND $$.player.age>40\n  yield $$ as v"
    },
    {
        "用户": "返回所有在2001年加入球队的球员名称和他们所在的球队名称。",
        "查询": "match (player)-[s:serve]->(team) where s.start_year == 2001 return player.player.name AS player, team.team.name AS team"
    },
    {
        "用户": "Could you please help me find all entities served by a player named 'abc' with a maximum distance of 3 and return all their attributes?",
        "查询": "MATCH (v:player{name: \"abc\"}) -[:serve*..3]-> ()\nRETURN *"
    },
    {
        "用户": "请问您能帮我查找一下评分为666的喜欢关系吗？我需要获取这些关系的起点和终点实体。",
        "查询": "LOOKUP ON like WHERE like.grade == 666 YIELD src(edge) as src, dst(edge) as dst"
    },
    {
        "用户": "Find favorite relationships with a rating of 666 and return the starting and ending entities of these relationships.",
        "查询": "LOOKUP ON like WHERE like.grade == 666 YIELD src(edge) as src, dst(edge) as dst"
    },
    {
        "用户": "Returns the edges between all players with a liking level of -1 and other players.",
        "查询": "match (v:player)-[e:like{likeness:-1}]->()  RETURN e"
    },
    {
        "用户": "鲁道夫·布兰德是什么物种？",
        "查询": "MATCH (n:character{name:'鲁道夫·布兰德'}) return n.character.species"
    },
    {
        "用户": "哈维·瑞吉比特从属于哪个组织？",
        "查询": "MATCH (n:character{name:'哈维·瑞吉比特'})-[e:belong_to]-(n1:group) return n1"
    },
    {
        "用户": "Hello, please help me find something that 'Tony Parker' likes, with a distance range of 0 to 2, and remove duplicate results. Finally, return me the IDs of these things.",
        "查询": "GO 0 TO 2 STEPS FROM 'Tony Parker' OVER like BIDIRECT YIELD DISTINCT like._dst"
    },
    {
        "用户": "Can you help me find the player name between 'Grant Hill' and 'Yao Ming'? I need to return information about these players.",
        "查询": "MATCH (v:player)\nWHERE v.player.name>\"Grant Hill\" and  v.player.name<=\"Yao Ming\"\nRETURN v"
    },
    {
        "用户": "请问您能帮我查找一下名为 'Ray Allen' 的球员的姓名吗？",
        "查询": "$v1 = YIELD \"Ray Allen\" AS a;\nFETCH PROP ON player $v1.a YIELD player.name AS name"
    },
    {
        "用户": "莫迪丝蒂·拉布诺的姐姐是谁？",
        "查询": "MATCH (n:character)-[e:kindred{rel_type:'姐姐'}]-(n1) WHERE n.character.name=='莫迪丝蒂·拉布诺' return n1.character.name"
    },
    {
        "用户": "找出与 'Paul Gasol' 有喜欢、服务、队友关系的所有实体，并返回这些关系的目标实体的 ID。",
        "查询": "GO FROM \"Paul Gasol\" OVER * YIELD like._dst, serve._dst, teammate._dst"
    },
    {
        "用户": "蒂尔登·图茨的妻子是什么血统？",
        "查询": "MATCH (n:character)-[e:kindred{rel_type:'妻子'}]-(n1) WHERE n.character.name=='蒂尔登·图茨' return n1.character.blood"
    },
    {
        "用户": "什么病会伴随着糖尿病？",
        "查询": "MATCH (n:disease)-[e:accompany_with]->(n1:disease{name:'糖尿病'}) return n.disease.name"
    },
    {
        "用户": "得了无脉络膜症应该去哪个科室就诊？",
        "查询": "GO FROM \"无脉络膜症\" OVER cure_department YIELD dst(edge);"
    },
    {
        "用户": "Returns the names and node information of all players.",
        "查询": "match (v:player) return v.player.name, v"
    },
    {
        "用户": "Find all the entities that the player named 'Tony Parker' likes and return them.",
        "查询": "FETCH PROP ON player 'Tony Parker' YIELD player.name as Name |\nGO FROM $-.Name OVER like YIELD like._dst"
    },
    {
        "用户": "芙蓉·德拉库尔的丈夫是谁？",
        "查询": "MATCH (n:character)-[e:kindred{rel_type:'丈夫'}]-(n1) WHERE n.character.name=='芙蓉·德拉库尔' return n1"
    },
    {
        "用户": "Identify all entities that have a two jump 'like' relationship with player 'Grant Hill' and return these paths.",
        "查询": "MATCH p = ()-[:like*2]->(v:player) WHERE id(v) == 'Grant Hill' RETURN p"
    },
    {
        "用户": "您好，请帮我找出与 'Paul Gasol' 有喜欢、服务、队友关系的所有实体，并告诉我这些关系的目标实体的 ID。",
        "查询": "GO FROM \"Paul Gasol\" OVER * YIELD like._dst, serve._dst, teammate._dst"
    },
    {
        "用户": "多少种病能够通过手术治疗方式治愈？",
        "查询": "MATCH (n:disease)-[]->(n1:cure{name:'手术治疗'}) return count(n)"
    },
    {
        "用户": "Hello, please help me find players aged 29 or older and provide me with their ID and age information.",
        "查询": "LOOKUP ON player WHERE player.age >= 29 YIELD id(vertex) as name, player.age AS Age"
    },
    {
        "用户": "Identify the entities and relationships that players over the age of 20 like or indirectly like.",
        "查询": "match p= (v:player)-[e:like*1..2]->(d) where v.player.age > 20 return e"
    },
    {
        "用户": "Hello, please help me search for all entities and relationship subgraphs with a 'liking' level between 95 and 100 within two steps, starting from 'Tim Duncan'. Thank you.",
        "查询": "GET SUBGRAPH WITH PROP 2 STEPS FROM 'Tim Duncan'\n  WHERE like.likeness > 95 AND like.likeness < 100\n  YIELD vertices as nodes, edges as relationships"
    },
    {
        "用户": "胰腺囊腺瘤和囊腺癌的治愈概率是多少？",
        "查询": "MATCH (n:disease{name:\"胰腺囊腺瘤和囊腺癌\"}) return n.disease.cured_prob"
    },
    {
        "用户": "查找名为'Tim Duncan'的球员，返回其年龄和ID，并将ID展开，最后返回ID。",
        "查询": "LOOKUP ON player\nWHERE player.name == 'Tim Duncan'\nYIELD player.age as age, id(vertex) as vid\n| UNWIND $-.vid as a | YIELD $-.a AS a"
    },
    {
        "用户": "希思科特·巴巴里是什么物种？",
        "查询": "MATCH (n:character{name:'希思科特·巴巴里'}) return n.character.species"
    },
    {
        "用户": "返回所有和其他球员喜欢程度为-1的球员之间的关系。",
        "查询": "match (v:player)-[e:like{likeness:-1}]->()  RETURN e"
    },
    {
        "用户": "母儿ABO血型不合的预防措施是什么？",
        "查询": "MATCH (n:disease{name:\"母儿ABO血型不合\"}) return n.disease.prevent"
    },
    {
        "用户": "Could you please help me find a maximum of three reverse 'like' relationship paths from 'Tim Duncan' to 'Tony Parker'?",
        "查询": "FIND NOLOOP PATH FROM \"Tim Duncan\" TO \"Tony Parker\" OVER like REVERSELY UPTO 3 STEPS YIELD path as p"
    },
    {
        "用户": "找出名为'Damian Lillard'的球员所喜欢的所有实体中，与这些实体有关系的实体的年龄，并按年龄升序排序，返回前三个实体及其年龄。",
        "查询": "MATCH (v:player{name: \"Damian Lillard\"})-[:like]-(v2)--(v3)\nWITH v3, v3.player.age AS age\nRETURN v3, age ORDER BY age LIMIT 3"
    },
    {
        "用户": "Hey, can you help me find all the things' Kyrie Irving 'likes? I would like to know the entities he likes, as well as possible association relationships. It would be best if you could return all relevant information to me.",
        "查询": "MATCH (:player{name:\"Kyrie Irving\"})-[e:like*2..3]->()\nRETURN *"
    },
    {
        "用户": "罗伊斯顿·埃德温德的性别是什么？",
        "查询": "MATCH (n:character{name:'罗伊斯顿·埃德温德'}) return n.character.gender"
    },
    {
        "用户": "Can you help me find the relationship between players and their teammates?",
        "查询": "MATCH (v:player) WITH (v)-[:teammate]->() AS p RETURN p"
    },
    {
        "用户": "您好，请帮我找一下，从 'Tim Duncan' 开始，经过 '喜欢' 和 '服务' 的关系，找出距离为 3 的所有实体。这些实体应该有标签，并且年龄要大于 40。麻烦您返回这些实体给我。",
        "查询": "GO 3 STEPS FROM \"Tim Duncan\" OVER like,serve\n  WHERE size(labels($$))>0 AND $$.player.age>40\n  yield $$ as v"
    },
    {
        "用户": "得了霍奇金病忌吃什么食物？",
        "查询": "GO FROM \"霍奇金病\" OVER no_eat YIELD dst(edge);"
    },
    {
        "用户": "霍奇金病的原因是什么？",
        "查询": "MATCH (n:disease{name:\"霍奇金病\"}) return n.disease.cause"
    },
    {
        "用户": "神经棘红细胞增多症的易感人群是哪些？",
        "查询": "MATCH (n:disease{name:\"神经棘红细胞增多症\"}) return n.disease.easy_get"
    },
    {
        "用户": "返回所有和其他球员的喜欢程度为-1的球员之间的边。",
        "查询": "match (v:player)-[e:like{likeness:-1}]->()  RETURN e"
    },
    {
        "用户": "得了戊型病毒性肝炎的禁忌食物有哪些？",
        "查询": "GO FROM \"戊型病毒性肝炎\" OVER no_eat YIELD dst(edge);"
    },
    {
        "用户": "您好，请帮我查找一下从'Tim Duncan'这个人开始，往外扩展1到4步，找到每个边之间的'喜欢程度'和边的信息。",
        "查询": "go 1 to 4 steps from \"Tim Duncan\" over like yield like.likeness, edge as e"
    },
    {
        "用户": "岩骨斜坡脑膜瘤的治疗时长通常是多久？",
        "查询": "MATCH (n:disease{name:\"岩骨斜坡脑膜瘤\"}) return n.disease.cure_lasttime"
    },
    {
        "用户": "请问您能帮我查找一下球员之间的队友关系吗？我需要得到他们的姓名。",
        "查询": "MATCH (p1)-[:teammate]->(p2)\nRETURN p1.player.name, p2.player.name"
    },
    {
        "用户": "Return the relationship type and team name of player 'LeBron James''s team' Cavaliers'.",
        "查询": "MATCH (v1:player{name: \"LeBron James\"}) -[r:serve]-> (v2:team{name: \"Cavaliers\"})\nRETURN type(r) AS Type, v2.team.name AS Name"
    },
    {
        "用户": "赤丝虬脉的治愈概率是多少？",
        "查询": "MATCH (n:disease{name:\"赤丝虬脉\"}) return n.disease.cured_prob"
    },
    {
        "用户": "默西·刘易斯是什么物种？",
        "查询": "MATCH (n:character{name:'默西·刘易斯'}) return n.character.species"
    },
    {
        "用户": "获取 'Spurs' 球队的名称。",
        "查询": "FETCH PROP ON team \"Spurs\" YIELD team.name"
    },
    {
        "用户": "Hey, can you help me identify entities with a liking level of over 90 that have a liking relationship with 'Tim Duncan'? Returns the source entity name, target entity ID, target entity name, and liking level.",
        "查询": "GO FROM 'Tim Duncan' OVER like bidirect WHERE like.likeness > 90\nYIELD $^.player.name, like._dst, $$.player.name, like.likeness"
    },
    {
        "用户": "得了外阴银屑病推荐吃什么药？",
        "查询": "GO FROM \"外阴银屑病\" OVER recommend_drug YIELD dst(edge);"
    },
    {
        "用户": "您好，请帮我找一下年龄为40的球员，然后告诉我他们的姓名好吗？",
        "查询": "$a = LOOKUP ON player WHERE player.age == 40 YIELD id(vertex) as id;\nFETCH PROP ON player $a.id YIELD player.name"
    },
    {
        "用户": "Hello, please help me find all the entities related to 'Paul Gasol' that have likes, services, and teammate relationships, and return their IDs.",
        "查询": "GO FROM \"Paul Gasol\" OVER * YIELD like._dst, serve._dst, teammate._dst"
    },
    {
        "用户": "找出所有 'Boris Diaw' 所 '喜欢' 的实体，并返回这些实体的 ID。",
        "查询": "GO FROM \"Boris Diaw\" OVER like YIELD like._dst"
    },
    {
        "用户": "Returns the relationships between all players with a liking level of -1 and other players.",
        "查询": "match (v:player)-[e:like{likeness:-1}]->()  RETURN e"
    },
    {
        "用户": "Starting from 'Tim Duncan', through the 'like' and 'service' relationships, identify all entities with a distance of 3, and these entities have labels and are over 40 years old. Return these entities.",
        "查询": "GO 3 STEPS FROM \"Tim Duncan\" OVER like,serve\n  WHERE size(labels($$))>0 AND $$.player.age>40\n  yield $$ as v"
    },
    {
        "用户": "Find the team or player served by a player named 'Yao Ming' and return the original entity name.",
        "查询": "MATCH (v:player {name: \"Yao Ming\"})-[:serve*0..1]->() RETURN v.player.name"
    },
    {
        "用户": "查找年龄为40岁的球员，并返回他们的姓名。",
        "查询": "$a = LOOKUP ON player WHERE player.age == 40 YIELD id(vertex) as id;\nFETCH PROP ON player $a.id YIELD player.name"
    },
    {
        "用户": "Find all players who are liked by other players and return their names.",
        "查询": "MATCH (v:player) WHERE [t in [v] | (v)-[:like]->(t)] RETURN v.player.name AS name"
    },
    {
        "用户": "Find a player named 'Tim Duncan', return their age and ID, expand the ID, and finally return the ID.",
        "查询": "LOOKUP ON player\nWHERE player.name == 'Tim Duncan'\nYIELD player.age as age, id(vertex) as vid\n| UNWIND $-.vid as a | YIELD $-.a AS a"
    },
    {
        "用户": "找出球员 'Rajon Rondo' 在2013年至2018年期间所服役的球队，返回球员的姓名、效力开始的年份和结束的年份、球队名称。",
        "查询": "GO FROM \"Rajon Rondo\" OVER serve WHERE serve.start_year >= 2013 AND serve.end_year <= 2018\nYIELD $^.player.name, serve.start_year, serve.end_year, $$.team.name"
    },
    {
        "用户": "Could you please help me find out all the entities and relationships involved in playing or liking a player named 'Tracy McGrady' since 2000?",
        "查询": "MATCH (:player{name:\"Tracy McGrady\"})-[e:serve|like{start_year: 2000}]-(v)\nRETURN e, v"
    },
    {
        "用户": "请问您能帮我查找一下球员之间的队友关系吗？我需要知道球员1和球员2的姓名。",
        "查询": "MATCH (p1)-[:teammate]->(p2)\nRETURN p1.player.name, p2.player.name"
    },
    {
        "用户": "急性乳腺炎的症状有哪些？",
        "查询": "MATCH (n:disease{name:\"急性乳腺炎\"}) return n.disease.symptom"
    },
    {
        "用户": "得了戊型病毒性肝炎应该去哪个科室就诊？",
        "查询": "GO FROM \"戊型病毒性肝炎\" OVER cure_department YIELD dst(edge);"
    },
    {
        "用户": "霍奇金病的注意事项有哪些？",
        "查询": "LOOKUP ON disease WHERE disease.name == \"霍奇金病\" YIELD properties(vertex).prevent"
    },
    {
        "用户": "腹腔干动脉瘤的注意事项有哪些？",
        "查询": "MATCH (n:disease{name:\"腹腔干动脉瘤\"}) return n.disease.prevent"
    },
    {
        "用户": "Hello, could you please help me find the relationship properties between 'Tony Parker' liking 'Tim Duncan' and 'Grant Hill' liking 'Tracy McGrady'? Can you help me return these properties?",
        "查询": "FETCH PROP ON like \"Tony Parker\"->\"Tim Duncan\", \"Grant Hill\" -> \"Tracy McGrady\" YIELD edge as relationship |\nYIELD properties($-.relationship)"
    },
    {
        "用户": "气虚血瘀证的治疗时长是多久？",
        "查询": "MATCH (n:disease{name:\"气虚血瘀证\"}) return n.disease.cure_lasttime"
    },
    {
        "用户": "肾上腺素能依赖性尖端扭转性室性心动过速的治愈概率是多少？",
        "查询": "MATCH (n:disease{name:\"肾上腺素能依赖性尖端扭转性室性心动过速\"}) return n.disease.cured_prob"
    },
    {
        "用户": "马尔科姆是哪个组织的成员？",
        "查询": "MATCH (n:character{name:'马尔科姆'})-[e:belong_to]-(n1:group) return n1"
    },
    {
        "用户": "卡桑德拉·瓦布拉斯基参与了多少个组织？",
        "查询": "MATCH (n:character{name:'卡桑德拉·瓦布拉斯基'})-[e]-(n1:group) return count(n1)"
    },
    {
        "用户": "Find a maximum of three reverse 'like' relationship paths from 'Tim Duncan' to 'Tony Parker' and return path information.",
        "查询": "FIND NOLOOP PATH FROM \"Tim Duncan\" TO \"Tony Parker\" OVER like REVERSELY UPTO 3 STEPS YIELD path as p"
    },
    {
        "用户": "请问您能帮我找出'Boris Diaw'喜欢的所有实体，并给我它们的ID吗？",
        "查询": "GO FROM \"Boris Diaw\" OVER like YIELD like._dst"
    },
    {
        "用户": "卢克丽霞的侄女是谁？",
        "查询": "MATCH (n:character{name:'卢克丽霞·布莱克'})-[e:kindred{rel_type:'侄女'}]-(n1) return n1"
    },
    {
        "用户": "Hey, can you help me find everyone who likes' Tony Parker 'and' Tim Duncan '? Then tell me about the relationship between these people and other entities, but do not include the relationship between 'Tony Parker' and 'Tim Duncan'.",
        "查询": "MATCH (v:player)-[e:like]->(v2) WHERE none_direct_dst(e) IN [\"Tony Parker\", \"Tim Duncan\"] RETURN *\nMINUS\nMATCH (v:player)-[e:like]->(v2) WHERE id(v2) IN [\"Tony Parker\", \"Tim Duncan\"] RETURN *"
    },
    {
        "用户": " 请问您能帮我查找一下'Carter'喜欢的球员所在的球队吗？我想统计一下这些球队一共有多少名球员。",
        "查询": "MATCH (:player{name: \"Vince Carter\"})-[e1:like]->()-[e2:serve*0..3]->()<-[e3:serve]-(v)\nRETURN count(v)"
    },
    {
        "用户": "维奥莱塔·伯斯德从属于哪些组织？",
        "查询": "MATCH (n:character{name:'维奥莱塔·伯斯德'})-[e:belong_to]-(n1:group) return n1"
    },
    {
        "用户": "多洛雷斯·乌姆里奇的父亲是谁？",
        "查询": "MATCH (n:character)-[e:kindred{rel_type:'父亲'}]-(n1) WHERE n.character.name=='多洛雷斯·乌姆里奇' return n1"
    },
    {
        "用户": "Can you help me find the names of the players who joined the team in 2001 and the names of the teams they belong to?",
        "查询": "match (player)-[s:serve]->(team) where s.start_year == 2001 return player.player.name AS player, team.team.name AS team"
    },
    {
        "用户": "请问您能帮我查找一下名为'Antetokounmpo'的球员的姓名吗？",
        "查询": "MATCH (v:player{name:\"Giannis Antetokounmpo\"}) RETURN v.name AS vname"
    },
    {
        "用户": "卡桑德拉·瓦布拉斯基是什么物种？",
        "查询": "MATCH (n:character{name:'卡桑德拉·瓦布拉斯基'}) return n.character.species"
    },
    {
        "用户": "查询并返回所有球员的姓名和节点。",
        "查询": "match (v:player) return v.player.name, v"
    },
    {
        "用户": "嘿，你能帮我找出喜欢程度超过90的与'Tim Duncan'有喜欢关系的实体吗？返回源实体名、目标实体ID、目标实体名和喜欢程度。",
        "查询": "GO FROM 'Tim Duncan' OVER like bidirect WHERE like.likeness > 90\nYIELD $^.player.name, like._dst, $$.player.name, like.likeness"
    },
    {
        "用户": "Find all the entities that 'Porzingis' likes' and return their IDs.",
        "查询": "GO FROM \"Kristaps Porzingis\" OVER like YIELD id($$) AS vid | RETURN $-.vid AS dst"
    },
    {
        "用户": "多少种病能够通过物理治疗方式治愈？",
        "查询": "MATCH (n:disease)-n->(n1:cure{name:'物理治疗'}) return count(n)"
    },
    {
        "用户": "查找名为'Tim Duncan'的球员，返回其年龄和ID，最后返回展开后的ID。",
        "查询": "LOOKUP ON player\nWHERE player.name == 'Tim Duncan'\nYIELD player.age as age, id(vertex) as vid\n| UNWIND $-.vid as a | YIELD $-.a AS a"
    },
    {
        "用户": "玛姬·德思礼的母亲是谁？",
        "查询": "MATCH (n:character)-[e:kindred{rel_type:'母亲'}]-(n1) WHERE n.character.name=='玛姬·德思礼' return n1"
    },
    {
        "用户": "Can you help me find someone 'Kristas Porzingis' likes? I need their vid.",
        "查询": "GO FROM \"Tony Parker\" OVER like YIELD id($$) AS vid | RETURN $-.vid AS dst"
    },
    {
        "用户": "找出与 'Tim Duncan' 通过 '喜欢' 和 '服务' 关系，距离为 3 的所有实体，且这些实体有标签且年龄大于 40，返回这些实体。",
        "查询": "GO 3 STEPS FROM \"Tim Duncan\" OVER like,serve\n  WHERE size(labels($$))>0 AND $$.player.age>40\n  yield $$ as v"
    },
    {
        "用户": "酒精中毒性神经疾病的主要原因是什么？",
        "查询": "MATCH (n:disease{name:\"酒精中毒性神经疾病\"}) return n.disease.cause"
    },
    {
        "用户": "请问您能帮我找到'Spurs'球队的名字吗？",
        "查询": "FETCH PROP ON team \"Spurs\" YIELD team.name"
    },
    {
        "用户": "Obtain the player node of 'Boris Diaw' and return the node.",
        "查询": "FETCH PROP ON player 'Boris Diaw' YIELD vertex as node"
    },
    {
        "用户": "Hello, please help me find players over the age of 30.5 and provide me with their ID and age information.",
        "查询": "LOOKUP ON player WHERE player.age > 30.5 YIELD id(vertex) as name, player.age AS Age"
    },
    {
        "用户": "Can you help me find the name and age of the 'Carmelo' player?",
        "查询": "FETCH PROP ON player \"Carmelo Anthony\" YIELD player.name, player.age"
    },
    {
        "用户": "获取 'Boris Diaw' 和 'Tony Parker' 两个球员的姓名和年龄信息，去返回去重后的结果。",
        "查询": "FETCH PROP ON player \"Boris Diaw\", \"Tony Parker\" YIELD DISTINCT player.name, player.age"
    },
    {
        "用户": "霍奇金病的得病概率是多少？",
        "查询": "LOOKUP ON disease WHERE disease.name == \"霍奇金病\" YIELD properties(vertex).get_prob"
    },
    {
        "用户": "Hi, hello! I would like to ask you to help me find the shortest path length between players over 45 years old and a team named 'Spurs' that only requires up to three jumps, can you?",
        "查询": "MATCH p = shortestPath( (a:player)-[e:serve*..3]-(b:team) )\n  WHERE a.player.age > 45 AND b.team.name == 'Spurs'\n  RETURN length(p)"
    },
    {
        "用户": "Can you help me find the name and age of player 'Grant Hill'?",
        "查询": "FETCH PROP ON player \"Grant Hill\" YIELD player.name, player.age"
    },
    {
        "用户": "请问您能帮我查找与 'Tim Duncan' 有有效力或喜欢关系的所有实体吗？并且返回这些实体的去重后的 ID。",
        "查询": "GO FROM 'Tim Duncan' OVER serve, like bidirect YIELD distinct dst(edge) as dst"
    },
    {
        "用户": "足外翻的得病概率是多少？",
        "查询": "MATCH (n:disease{name:\"足外翻\"}) return n.disease.get_prob"
    },
    {
        "用户": "Identify the team names and player names associated with 'LaMarcus Aldridge'.",
        "查询": "GO FROM \"LaMarcus Aldridge\" OVER * YIELD $$.team.name, $$.player.name"
    },
    {
        "用户": "小儿莫拉雷脑膜炎的治愈概率是多少？",
        "查询": "MATCH (n:disease{name:\"小儿莫拉雷脑膜炎\"}) return n.disease.cured_prob"
    },
    {
        "用户": "您好，请问您能帮我找到喜欢'Tim Duncan'的球员吗？还能帮我统计一下路径数量并返回吗？",
        "查询": "MATCH (a:player)\nWHERE id(a)=='Tim Duncan'\nMATCH (a)-[:like]-(b)\nRETURN count(*) AS cnt"
    },
    {
        "用户": "Find the preferred entities of a player named 'Duncan', including 2 to 3 levels of relationships, return relationships, and entities.",
        "查询": "MATCH (:player{name: \"Tim Duncan\"})-[e:like*2..3]->(v)\nRETURN e, v"
    },
    {
        "用户": "您好，请帮我找一下，能不能找到一个路径，这个路径是从年龄大于45岁的球员到名为'Spurs'的球队之间的，而且最多只能有三个跳的，最短的路径，然后告诉我路径的长度。",
        "查询": "MATCH p = shortestPath( (a:player)-[e:serve*..3]-(b:team) )\n  WHERE a.player.age > 45 AND b.team.name == 'Spurs'\n  RETURN length(p)"
    },
    {
        "用户": "Can you help me find the player information with ID 'Boris Diaw'?",
        "查询": "MATCH (n:player) WHERE id(n) == \"Boris Diaw\" RETURN n;"
    },
    {
        "用户": "纵隔非霍奇金淋巴瘤的治疗药物有哪些？",
        "查询": "GO FROM \"纵隔非霍奇金淋巴瘤\" OVER recommend_drug YIELD dst(edge);"
    },
    {
        "用户": "能帮我返回赫敏到哈利波特的最短路径吗？",
        "查询": "FIND SHORTEST PATH FROM \"赫敏·格兰杰\" TO \"哈利·波特\" OVER * YIELD path AS p"
    },
    {
        "用户": "疰夏的治疗科室是哪些？",
        "查询": "GO FROM \"疰夏\" OVER cure_department YIELD dst(edge);"
    },
    {
        "用户": "您好，请您帮我一下，我想找出从 'Tim Duncan' 开始，通过 '喜欢' 和 '服务' 关系最短的路径，最多5步，然后按路径长度排序，返回前10条路径。",
        "查询": "GO FROM \"Tim Duncan\" over * YIELD like._dst AS src, serve._src AS dst |\nFIND SHORTEST PATH FROM $-.src TO $-.dst OVER like UPTO 5 STEPS YIELD path as p |\nORDER BY $-.p | LIMIT 10"
    },
    {
        "用户": "Find the players Tony Parker likes who play for the Spurs team, and finally return to all nodes in the path.",
        "查询": "MATCH (v1)-[:like]->(v2:player)-[:serve]->(v3)\nWHERE id(v3) == 'Spurs' AND id(v1) == 'Tony Parker'\nRETURN v1, v2, v3"
    },
    {
        "用户": "玛丽·卢·巴瑞波恩的养女是谁？",
        "查询": "MATCH (n:character{name:'玛丽·卢·巴瑞波恩'})-[e]-(n1) WHERE e.rel_type=='养女' return n1"
    },
    {
        "用户": "肱骨内髁骨折的治疗时长通常是多久？",
        "查询": "MATCH (n:disease{name:\"肱骨内髁骨折\"}) return n.disease.cure_lasttime"
    },
    {
        "用户": "西莫·斐尼甘是哪个学院的？",
        "查询": "MATCH (n:character{name:'西莫·斐尼甘'})-[e:learn_from]-(n1:college) return n1"
    },
    {
        "用户": "Obtain the team name attribute of the team named 'Spurs'.",
        "查询": "FETCH PROP ON team \"Spurs\" YIELD team.name"
    },
    {
        "用户": "Find relationships between players known as' Tim Duncan 'and other players that they like each other, and return the level of liking for these relationships.",
        "查询": "MATCH p2=(:player{name:\"Tim Duncan\"})-[e:like*1..2]-(:player{name:\"Tim Duncan\"})\nRETURN e.likeness AS e1"
    },
    {
        "用户": "找出与 'Tim Duncan' 通过 '喜欢' 关系相连的实体，然后在这些实体中找出通过 '服务' 关系相连的实体，并返回这些实体的 ID。",
        "查询": "GO 1 STEPS FROM 'Tim Duncan' OVER like YIELD like._dst as id | GO FROM $-.id OVER serve YIELD serve._dst"
    },
    {
        "用户": "杰基·杰尼根是哪个组织的成员？",
        "查询": "MATCH (n:character{name:'杰基·杰尼根'})-[]-(n1:group) return n1"
    },
    {
        "用户": "Hello, could you please help me find players aged 40 and tell me their names?",
        "查询": "$a = LOOKUP ON player WHERE player.age == 40 YIELD id(vertex) as id;\nFETCH PROP ON player $a.id YIELD player.name"
    },
    {
        "用户": "Starting from 'Tim Duncan', identify all entities and relationships with a 'liking' level between 95 and 100 within the two steps.",
        "查询": "GET SUBGRAPH WITH PROP 2 STEPS FROM 'Tim Duncan'\n  WHERE like.likeness > 95 AND like.likeness < 100\n  YIELD vertices as nodes, edges as relationships"
    },
    {
        "用户": "查找名为'Duncan'的球员所喜欢的实体，包括2到3层关系，返回关系和实体。",
        "查询": "MATCH (:player{name: \"Tim Duncan\"})-[e:like*2..3]->(v)\nRETURN e, v"
    },
    {
        "用户": "Find the player information with ID 'Boris Diaw' and return it.",
        "查询": "MATCH (n:player) WHERE id(n) == \"Boris Diaw\" RETURN n;"
    },
    {
        "用户": "找出 'Tim Duncan' 所 '喜欢' 的年龄大于38的实体，返回这些实体与 'Tim Duncan' 之间的边和实体的信息。",
        "查询": "GO FROM 'Tim Duncan' OVER like WHERE properties($$).age > 38 YIELD edge as e,  $$ as dst"
    },
    {
        "用户": "Find the entities that Tracy McGrady likes, and then find the entity IDs that these entities like.",
        "查询": "$var = GO FROM \"Tracy McGrady\" OVER like YIELD like._dst as id; GO FROM $var.id OVER like YIELD like._dst"
    },
    {
        "用户": "利奥波迪娜是哪个物种的？",
        "查询": "LOOKUP ON character WHERE character.name=='利奥波迪娜·斯梅绥克' YIELD properties(vertex).species AS species"
    },
    {
        "用户": "请问您能帮我找出与 'Tim Duncan'喜欢的所有实体的关系吗？我需要得到这些关系的去重属性和关系本身。",
        "查询": "MATCH (v:player)-[e:like]->(v2)\nWHERE id(v) == \"Tim Duncan\"\nRETURN DISTINCT properties(e) as props, e"
    },
    {
        "用户": "赫伯特·博克的妻子是谁？",
        "查询": "MATCH (n:character{name:'赫伯特·博克'})-[e]-(n1) WHERE e.rel_type=='妻子' return n1"
    },
    {
        "用户": "马尔科姆的血统是什么？",
        "查询": "MATCH (n:character{name:'马尔科姆'}) return n.character.blood"
    },
    {
        "用户": "巴希达·巴沙特是哪个学院的？",
        "查询": "MATCH (n:character{name:'巴希达·巴沙特'})-[e:learn_from]-(n1:college) return n1.character.name"
    },
    {
        "用户": "霍奇金病的食物推荐有哪些？",
        "查询": "GO FROM \"霍奇金病\" OVER recommend_eat YIELD dst(edge);"
    },
    {
        "用户": "哪些人物是普威特家族的成员？",
        "查询": "MATCH (n:character)-[e]-(n1:group{name:'普威特家族'}) return n"
    },
    {
        "用户": "劳拉·马德莱的性别是什么？",
        "查询": "MATCH (n:character{name:'劳拉·马德莱'}) return n.character.gender"
    },
    {
        "用户": " 您好，请帮我找一下Tony Parker喜欢的球员中在Spurs队效力的球员，然后把路径上的所有节点都返回给我。",
        "查询": "MATCH (v1)-[:like]->(v2:player)-[:serve]->(v3)\nWHERE id(v3) == 'Spurs' AND id(v1) == 'Tony Parker'\nRETURN v1, v2, v3"
    },
    {
        "用户": "Hello, please help me find entities that have a 'like' relationship with 'Danny Green', and then find the 'teammates' of these entities. Finally, can we return the IDs of the source and target nodes of these entities and their relationships?",
        "查询": "$a = GO FROM 'Danny Green' OVER like YIELD like._src AS src, like._dst AS dst;\nGO FROM $a.dst OVER teammate YIELD $a.src AS src, $a.dst, teammate._dst AS dst"
    },
    {
        "用户": "Can you help me find the name and age attributes of the 'Jason Kidd' player?",
        "查询": "FETCH PROP ON player \"Jason Kidd\" YIELD player.name, player.age"
    },
    {
        "用户": "查找所有评分为666的'喜欢'关系，返回这些关系的起始点和终止点。",
        "查询": "LOOKUP ON like WHERE like.grade == 666 YIELD src(edge) as src, dst(edge) as dst"
    },
    {
        "用户": "请问您能帮我找出与 'Tim Duncan' 有 '喜欢' 关系的所有实体的去重后的 ID 吗？",
        "查询": "GO FROM \"Tim Duncan\" OVER like YIELD like._dst AS dst | YIELD DISTINCT $-.dst AS dst"
    },
    {
        "用户": "Hey, can you help me check if there are any entities that Kyrie Irving's players serve or like for 2-3 hops? Then tell me the statistical results.",
        "查询": "MATCH (:player{name:\"Kyrie Irving\"})-[e:serve|like*2..3]-(v)\nRETURN count(v)"
    },
    {
        "用户": "Hey, can you help me find a player who plays for the 'Pistons' team? I want to know their names.",
        "查询": "MATCH (v)-[:serve]->(t)\nWHERE id(t) == 'Pistons'\nRETURN v.player.name AS Name"
    },
    {
        "用户": "查找 'Tony Parker' 所喜欢的所有实体，并返回这些实体。",
        "查询": "GO FROM \"Tony Parker\" OVER like YIELD like._dst"
    },
    {
        "用户": "吉德罗·洛哈特的姐姐的父亲是谁？",
        "查询": "MATCH (n:character)-[e:kindred{rel_type:'父亲'}]-(n1) WHERE n.character.name=='吉德罗·洛哈特的姐姐' return n1"
    },
    {
        "用户": " 嘿，你能帮我找一下名字叫'Tim Duncan'的球员吗？我需要知道他的年龄和ID，最后还要展示一下他的详细信息。",
        "查询": "LOOKUP ON player\nWHERE player.name == 'Tim Duncan'\nYIELD player.age as age, id(vertex) as vid\n| UNWIND $-.vid as a | YIELD $-.a AS a"
    },
    {
        "用户": "Can you help me find the IDs of all the people or things that Tony Parker likes?",
        "查询": "GO FROM \"Tony Parker\" OVER like YIELD like._dst"
    },
    {
        "用户": "特拉弗斯从属于哪些组织？",
        "查询": "MATCH (n:character{name:'特拉弗斯'})-[e:belong_to]-(n1:group) return n1"
    },
    {
        "用户": "请帮我查找一下，'Tracy McGrady'喜欢的东西是什么，然后再找出这些东西所对应的ID。",
        "查询": "$var = GO FROM \"Tracy McGrady\" OVER like YIELD like._dst as id; GO FROM $var.id OVER like YIELD like._dst"
    },
    {
        "用户": "您好，请帮我找一下，从 'Tim Duncan' 出发，经过 '喜欢' 和 '服务' 的关系，找出距离为2的子图，并返回节点和边的详细信息好吗？",
        "查询": "GET SUBGRAPH WITH PROP 2 STEPS FROM 'Tim Duncan' IN like, serve YIELD vertices as nodes, edges as relationships"
    },
    {
        "用户": "查找名为 'Tony Parker' 的球员喜欢的所有实体，并返回这些实体。",
        "查询": "FETCH PROP ON player 'Tony Parker' YIELD player.name as Name |\nGO FROM $-.Name OVER like YIELD like._dst"
    },
    {
        "用户": "Hey, can you help me find the shortest path from 'Yao Ming' to 'Tony Parker'? This path can be connected through the relationship between 'likes' and' services', but it can only go through a maximum of 5 steps. Then return the path information to me, okay?",
        "查询": "YIELD \"Yao Ming\" AS src, \"Tony Parker\" AS dst\n| FIND SHORTEST PATH FROM $-.src TO $-.dst OVER like, serve UPTO 5 STEPS YIELD path as p"
    },
    {
        "用户": "什么病会伴随着高血压？",
        "查询": "MATCH (n:disease)-[e:accompany_with]->(n1:disease{name:'高血压'}) return n.disease.name"
    },
    {
        "用户": " 嘿，你能帮我找一下喜欢名叫'Tim Duncan'的球员吗？他们喜好程度都是90，而且与'Tim Duncan'的关系要在2到3跳之间。能把这些球员和他们与'Tim Duncan'的关系都告诉我吗？",
        "查询": "MATCH (:player{name:\"Tim Duncan\"})<-[e:like*2..3{likeness: 90}]-(v)\nRETURN e, v"
    },
    {
        "用户": "Could you please help me find out the teams' Boris Diaw 'has played for and his service time for each team? I need to know his name, start and end years of service, and team name.",
        "查询": "GO FROM \"Boris Diaw\" OVER serve YIELD $^.player.name, serve.start_year, serve.end_year, $$.team.name"
    },
    {
        "用户": "Obtain the name attribute of the team named 'Spurs'.",
        "查询": "FETCH PROP ON team \"Spurs\" YIELD team.name"
    },
    {
        "用户": "Can you help me find all the players between 'Grant Hill' and 'Yao Ming'? I need their detailed information.",
        "查询": "MATCH (v:player)\nWHERE v.player.name>\"Grant Hill\" and  v.player.name<=\"Yao Ming\"\nRETURN v"
    },
    {
        "用户": "得了心脏病推荐吃什么食物？",
        "查询": "MATCH (n:disease)-[e:recommend_eat]->(n1:food) WHERE n.disease.name=='心脏病' return n1.food.name"
    },
    {
        "用户": "Hey, can you help me identify entities with a two-way 'like' relationship with 'Tim Duncan' and a 'like degree' greater than 90? Returns the source entity name, target entity ID, target entity name, and liking level.",
        "查询": "GO FROM 'Tim Duncan' OVER like bidirect WHERE like.likeness > 90\nYIELD $^.player.name, like._dst, $$.player.name, like.likeness"
    },
    {
        "用户": "霍奇金病的治疗时长通常是多久？",
        "查询": "MATCH (n:disease{name:\"霍奇金病\"}) return n.disease.cure_lasttime"
    },
    {
        "用户": "阿马利洛·莱斯托阿特的头发颜色是什么？",
        "查询": "MATCH (n:character{name:'阿马利洛·莱斯托阿特'}) return n.character.hair"
    },
    {
        "用户": "肾上腺素能依赖性尖端扭转性室性心动过速的症状有哪些？",
        "查询": "MATCH (n:disease{name:\"肾上腺素能依赖性尖端扭转性室性心动过速\"}) return n.disease.symptom"
    },
    {
        "用户": "嘿，我想找出从 'Tim Duncan' 出发，在两步内喜欢程度在95到100之间的所有实体和关系，你能帮我查找一下吗？",
        "查询": "GET SUBGRAPH WITH PROP 2 STEPS FROM 'Tim Duncan'\n  WHERE like.likeness > 95 AND like.likeness < 100\n  YIELD vertices as nodes, edges as relationships"
    },
    {
        "用户": "塞德瑞拉·布莱克的孙子有哪些？",
        "查询": "GO 2 STEPS FROM \"塞德瑞拉·布莱克\" OVER kindred WHERE kindred.rel_type=='儿子' YIELD dst(edge)"
    },
    {
        "用户": "找出所有被其他球员喜欢过的球员，并返回这些球员的姓名。",
        "查询": "MATCH (v:player) WHERE [t in [v] | (v)-[:like]->(t)] RETURN v.player.name AS name"
    },
    {
        "用户": "Starting from 'Ricky Rubio', follow the 'like' edge, distance 1 to 2 steps, and return the IDs, relationship weights, and names of all entities.",
        "查询": "GO 1 TO 2 STEPS FROM 'Tony Parker' OVER like YIELD DISTINCT like._dst, like.likeness, $$.player.name"
    },
    {
        "用户": "扎卡赖斯·史密斯的父亲是谁？",
        "查询": "MATCH (n:character)-[e:kindred{rel_type:'父亲'}]-(n1) WHERE n.character.name=='扎卡赖斯·史密斯' return n1"
    },
    {
        "用户": "请问能帮我找一下前两名球员的名字，并按照姓名进行排序吗？",
        "查询": "match (v:player) return properties(v).name AS name order by name limit 2;"
    },
    {
        "用户": "从 'Tim Duncan' 出发，找出距离为 2 步的所有实体，且这些实体与 'Tim Duncan' 之间存在 '喜欢' 的关系，返回这些关系的边信息。",
        "查询": "GET SUBGRAPH 2 STEPS FROM \"Tim Duncan\" BOTH like YIELD edges as e\n| UNWIND $-.e as a | YIELD $-.a AS a"
    },
    {
        "用户": "找出年龄大于20岁的球员所经过1到2跳喜欢的所有实体及其关系。",
        "查询": "match p= (v:player)-[e:like*1..2]->(d) where v.player.age > 20 return e"
    },
    {
        "用户": "返回亨利八世周边最多二跳关系的相关信息？",
        "查询": "GET SUBGRAPH 2 STEPS FROM \"亨利八世\" YIELD VERTICES AS nodes, EDGES AS relationships;"
    },
    {
        "用户": "维奥莱塔·伯斯德的丈夫是谁？",
        "查询": "MATCH (n:character)-[e:kindred{rel_type:'丈夫'}]-(n1) WHERE n.character.name=='维奥莱塔·伯斯德' return n1"
    },
    {
        "用户": "得了戊型病毒性肝炎的伴随病症有哪些？",
        "查询": "GO FROM \"戊型病毒性肝炎\" OVER accompany_with YIELD dst(edge);"
    },
    {
        "用户": "Hello, could you please help me find players aged 40 and return their names to me?",
        "查询": "$a = LOOKUP ON player WHERE player.age == 40 YIELD id(vertex) as id;\nFETCH PROP ON player $a.id YIELD player.name"
    },
    {
        "用户": "找出从 'Tim Duncan' 到 'Nobody' 或 'Spur' 的所有路径，路径上的关系为 '喜欢'，最多包含3个节点，并返回这些路径。",
        "查询": "FIND NOLOOP PATH FROM \"Tim Duncan\" TO \"Nobody\",\"Spur\" OVER like REVERSELY UPTO 3 STEPS YIELD path as p"
    },
    {
        "用户": "请问您能帮我查找球员和他们的队友之间的关系吗？",
        "查询": "MATCH (v:player) WITH (v)-[:teammate]->() AS p RETURN p"
    },
    {
        "用户": "Hey, can you help me check the friendly relationship between 'Tim Duncan' and other players? I want to know how much they like each other.",
        "查询": "MATCH p2=(:player{name:\"Tim Duncan\"})-[e:like*1..2]-(:player{name:\"Tim Duncan\"})\nRETURN e.likeness AS e1"
    },
    {
        "用户": "Can you help me search for the team name attributes of 'Spurs'?",
        "查询": "FETCH PROP ON team \"Spurs\" YIELD team.name"
    },
    {
        "用户": "得了高血压应该去哪个科室就诊？",
        "查询": "GO FROM \"高血压\" OVER cure_department YIELD dst(edge);"
    },
    {
        "用户": "Find all entities within 3 hops served by a player named 'abc' and return all attribute information of these entities.",
        "查询": "MATCH (v:player{name: \"abc\"}) -[:serve*..3]-> ()\nRETURN *"
    },
    {
        "用户": "Hello, please help me find all entities related to 'Manu Ginobili' and provide their 'likes',' teammate start year ',' service start year ', and endpoint player names.",
        "查询": "GO FROM \"Manu Ginobili\" OVER * REVERSELY YIELD like.likeness, teammate.start_year, serve.start_year, $$.player.name"
    },
    {
        "用户": "什么病会伴随着糖尿病？",
        "查询": "MATCH (n:disease)-[e:accompany_with]->(n1:disease{name:'糖尿病'}) return n.disease.name"
    },
    {
        "用户": "Find all the entities that Tony Parker likes and return their IDs.",
        "查询": "GO FROM \"Tony Parker\" OVER like YIELD like._dst"
    },
    {
        "用户": "您好，请帮我找出其他球员喜欢的球员，并告诉我他们的姓名好吗？\n嗨，你能帮我找出其他球员喜欢的球员吗？我想知道他们的姓名。\n您好，我想了解一下其他球员喜欢的球员，可以告诉我他们的姓名吗？",
        "查询": "MATCH (v:player) WHERE [t in [v] | (v)-[:like]->(t)] RETURN v.player.name AS name"
    },
    {
        "用户": "Hello, please help me identify entities with a 'like' and 'service' relationship with 'Tim Duncan' at a distance of 3. These entities need to be labeled and aged over 40, and then return them to me.",
        "查询": "GO 3 STEPS FROM \"Tim Duncan\" OVER like,serve\n  WHERE size(labels($$))>0 AND $$.player.age>40\n  yield $$ as v"
    },
    {
        "用户": "Find the team in which player 'Rajon Rondo' served between 2013 and 2018, and return the player's name, year of start and end of service, and team name.",
        "查询": "GO FROM \"Rajon Rondo\" OVER serve WHERE serve.start_year >= 2013 AND serve.end_year <= 2018\nYIELD $^.player.name, serve.start_year, serve.end_year, $$.team.name"
    },
    {
        "用户": "请问您能帮我找出Porzingis喜欢的所有实体并给我它们的ID吗？",
        "查询": "GO FROM \"Kristaps Porzingis\" OVER like YIELD id($$) AS vid | RETURN $-.vid AS dst"
    },
    {
        "用户": "老年人恶性心包积液的主要症状是什么？",
        "查询": "MATCH (n:disease{name:\"老年人恶性心包积液\"}) return n.disease.symptom"
    },
    {
        "用户": "查找年龄为40岁的球员，返回他们的姓名和年龄加1的结果。",
        "查询": "LOOKUP ON player WHERE player.age == 40 YIELD player.name, player.age + 1"
    },
    {
        "用户": "Starting from 'Ricky Rubio', follow the 'like' relationship and expand outward 1 to 2 steps to return the IDs, relationship weights, and names of all entities.",
        "查询": "GO 1 TO 2 STEPS FROM 'Tony Parker' OVER like YIELD DISTINCT like._dst, like.likeness, $$.player.name"
    },
    {
        "用户": "嘿，能帮我找出年龄超过35岁的球员吗？然后统计一下他们的数量、年龄总和、最大年龄、最小年龄以及平均年龄再加1，还有他们的标签。最后按照id、数量、最大年龄、最小年龄的顺序排序，跳过前面的10个结果，给我返回20个结果。",
        "查询": "MATCH(n:player)-[:like]->(m)\n  WHERE n.player.age > 35\n  RETURN DISTINCT id(n) AS id,\n                  count(n) AS count,\n                  sum(floor(n.player.age)) AS sum,\n                  max(m.player.age) AS max,\n                  min(n.player.age) AS min,\n                  avg(distinct n.player.age)+1 AS age,\n                  labels(m) AS lb\n        ORDER BY id, count, max, min\n        SKIP 10 LIMIT 20;"
    },
    {
        "用户": "芙蓉·德拉库尔是哪个学院的？",
        "查询": "MATCH (n:character{name:'芙蓉·德拉库尔'})-[e:learn_from]-(n1:college) return n1.character.name"
    },
    {
        "用户": "什么病会伴随着脾虚泄泻？",
        "查询": "MATCH (n:disease)-[e:accompany_with]->(n1:disease{name:'脾虚泄泻'}) return n.disease.name"
    },
    {
        "用户": "找出 'Tim Duncan' '喜欢' 的实体和这个实体喜欢的实体，返回这些实体的名称，分别为 'Player'、'Friend'、'FoF'。",
        "查询": "MATCH (v1) -[:like]-> (v2) -[:like]-> (v3)\nWHERE id(v1) == \"Tim Duncan\"\nRETURN v1.player.name AS Player, v2.player.name AS Friend, v3.player.name AS FoF"
    },
    {
        "用户": "Find the player with ID 'Tim Duncan' who likes the player, count the number of paths, and return.",
        "查询": "MATCH (a:player)\nWHERE id(a)=='Tim Duncan'\nMATCH (a)-[:like]-(b)\nRETURN count(*) AS cnt"
    },
    {
        "用户": "匹配喜欢 'Tim Duncan'的球员与'Tim Duncan' 所在的球队的数量相乘结果。",
        "查询": "MATCH (v1)-[:like]->(v2:player)-[:serve]->(v3)\nWHERE id(v2) == 'Tim Duncan'\nRETURN COUNT(*)"
    },
    {
        "用户": "Obtain the name and age attributes of player 'Grant Hill'.",
        "查询": "FETCH PROP ON player \"Grant Hill\" YIELD player.name, player.age"
    },
    {
        "用户": " 请问您能帮我查找一下球员和他们的队友之间的关系吗？",
        "查询": "MATCH (v:player) WITH (v)-[:teammate]->() AS p RETURN p"
    },
    {
        "用户": " 嘿，你能帮我找一下'Paul Gasol'这个球员的信息吗？我想知道他效力过的所有球队的名字。",
        "查询": "MATCH (v)-[:serve]->(t)\nWHERE (NOT NOT id(v) == 'Paul Gasol') AND id(v) == 'Paul Gasol'\nRETURN v.player.name AS Name, t.team.name AS Team"
    },
    {
        "用户": "Identify the number of paths that have a 'like' relationship with 'Carmelo Anthony'.",
        "查询": "GO FROM \"Carmelo Anthony\" OVER like YIELD like._dst| YIELD COUNT(*)"
    },
    {
        "用户": "Returns all players who joined the team in 2001 and the names of their respective teams.",
        "查询": "match (player)-[s:serve]->(team) where s.start_year == 2001 return player.player.name AS player, team.team.name AS team"
    },
    {
        "用户": "找出与 'Tim Duncan'所 '喜欢' 的所有实体，并返回这些关系的去重属性和关系本身。",
        "查询": "MATCH (v:player)-[e:like]->(v2)\nWHERE id(v) == \"Tim Duncan\"\nRETURN DISTINCT properties(e) as props, e"
    },
    {
        "用户": "Query and return the names and nodes of all players.",
        "查询": "match (v:player) return v.player.name, v"
    },
    {
        "用户": "找出与 'Tim Duncan' 有 '喜欢' 关系的所有实体，并返回这些实体的去重后的 ID。",
        "查询": "GO FROM \"Tim Duncan\" OVER like YIELD like._dst AS dst | YIELD DISTINCT $-.dst AS dst"
    },
    {
        "用户": "幼年型慢性关节炎及其伴发的葡萄膜炎的得病概率是多少？",
        "查询": "MATCH (n:disease{name:\"幼年型慢性关节炎及其伴发的葡萄膜炎\"}) return n.disease.get_prob"
    },
    {
        "用户": "迁延性昏迷的治疗时长通常是多久？",
        "查询": "MATCH (n:disease{name:\"迁延性昏迷\"}) return n.disease.cure_lasttime"
    },
    {
        "用户": "帕金 (找球手)的兄妹有哪些？",
        "查询": "MATCH (n:character{name:'帕金 (找球手)'})-[e]-(n1) return n1"
    },
    {
        "用户": "奥托·奥博梅尔从属于哪个组织？",
        "查询": "MATCH (n:character{name:'奥托·奥博梅尔'})-[e:belong_to]-(n1:group) return n1"
    },
    {
        "用户": "请问您能帮我找出在'Grant Hill'和'Yao Ming'之间的球员名字吗？我需要返回这些球员的信息。",
        "查询": "MATCH (v:player)\nWHERE v.player.name>\"Grant Hill\" and  v.player.name<=\"Yao Ming\"\nRETURN v"
    },
    {
        "用户": "返回名为'Antetokounmpo'的球员的姓名。",
        "查询": "MATCH (v:player{name:\"Giannis Antetokounmpo\"}) RETURN v.name AS vname"
    },
    {
        "用户": "获取 'Tony Parker' 球员的姓名和年龄。",
        "查询": "FETCH PROP ON player \"Tony Parker\" YIELD player.name, player.age"
    },
    {
        "用户": "Could you please help me find someone who has a 'like' relationship with 'Danny Green'? Then find out the 'teammates' of these people and tell me the IDs of these people and their teammates.",
        "查询": "$a = GO FROM 'Danny Green' OVER like YIELD like._src AS src, like._dst AS dst;\nGO FROM $a.dst OVER teammate YIELD $a.src AS src, $a.dst, teammate._dst AS dst"
    },
    {
        "用户": "返回鲁道夫·布兰德周边最多二跳关系的子图？",
        "查询": "GET SUBGRAPH 2 STEPS FROM \"鲁道夫·布兰德\" YIELD VERTICES AS nodes, EDGES AS relationships;"
    },
    {
        "用户": "周雅的头发颜色是什么？",
        "查询": "MATCH (n:character{name:'周雅'}) return n.character.hair"
    },
    {
        "用户": "哪些人物是斯莱特林学院的成员？",
        "查询": "MATCH (n:character)-[e]-(n1:college{name:'斯莱特林学院'}) return n"
    },
    {
        "用户": "Hello, could you please help me find players aged 20 and return all their node information to me?",
        "查询": "match (v:player{age: 1+19}) RETURN v"
    },
    {
        "用户": "Find all paths from 'Tim Duncan' to 'Nobody' or 'Spur', with a relationship of 'like' and a maximum of 3 nodes, and return these paths.",
        "查询": "FIND NOLOOP PATH FROM \"Tim Duncan\" TO \"Nobody\",\"Spur\" OVER like REVERSELY UPTO 3 STEPS YIELD path as p"
    },
    {
        "用户": "肌纤维组织炎的治疗时长通常是多久？",
        "查询": "MATCH (n:disease{name:\"肌纤维组织炎\"}) return n.disease.cure_lasttime"
    },
    {
        "用户": "Find all players with the team name 'Spurs' and return their node information.",
        "查询": "MATCH (v:team{name:\"Spurs\"})--(v2)\nRETURN v2 AS Player"
    },
    {
        "用户": "弗雷德·韦斯莱的头发颜色是什么？",
        "查询": "MATCH (n:character{name:'弗雷德·韦斯莱'}) return n.character.hair"
    },
    {
        "用户": "Hello, could you please help me find all the things' Tony Parker 'likes and return them to me?",
        "查询": "GO FROM \"Tony Parker\" OVER like YIELD like._dst"
    },
    {
        "用户": "蝶骨嵴脑膜瘤眼部病变的预防措施是什么？",
        "查询": "MATCH (n:disease{name:\"蝶骨嵴脑膜瘤眼部病变\"}) return n.disease.prevent"
    },
    {
        "用户": " 嘿，你能帮我找一下名字叫'abc'的球员所服务的三度关系吗？然后把这些实体的所有属性信息都给我返回一下。",
        "查询": "MATCH (v:player{name: \"abc\"}) -[:serve*..3]-> ()\nRETURN *"
    },
    {
        "用户": "特发性非硬化性门脉高压综合征的治疗时长是多久？",
        "查询": "MATCH (n:disease{name:\"特发性非硬化性门脉高压综合征\"}) return n.disease.cure_lasttime"
    },
    {
        "用户": "Find the entities connected to 'Dwight Howard' through a 'like' or 'teammate' relationship, and return their liking level, teammate start year, and endpoint entity names.",
        "查询": "GO FROM \"Dwight Howard\" OVER like, teammate REVERSELY YIELD like.likeness, teammate.start_year, $$.player.name"
    },
    {
        "用户": " 嘿，你能帮我查找一下'Duncan'球员和其他球员之间互相喜欢的关系吗？我想知道他们之间的喜欢程度。",
        "查询": "MATCH p2=(:player{name:\"Tim Duncan\"})-[e:like*1..2]-(:player{name:\"Tim Duncan\"})\nRETURN e.likeness AS e1"
    },
    {
        "用户": "Find the team 'Rajon Rondo' played for between 2013 and 2018, and return the player name, start year, end year, and team name.",
        "查询": "GO FROM \"Rajon Rondo\" OVER serve WHERE serve.start_year >= 2013 AND serve.end_year <= 2018\nYIELD $^.player.name, serve.start_year, serve.end_year, $$.team.name"
    },
    {
        "用户": "罗恩·韦斯莱的妻子是谁？",
        "查询": "MATCH (n:character{name:'罗恩·韦斯莱'})-[e:kindred{rel_type:'妻子'}]-(n1) return n1"
    },
    {
        "用户": "请问您能帮我查找一下，'Tony Parker' 喜欢的所有人或事物的 ID 吗？",
        "查询": "GO FROM \"Tony Parker\" OVER like YIELD like._dst"
    },
    {
        "用户": "找出 'Boris Diaw' 所在球队中，所有服务于球队名中包含 'Haw' 的时间段和球队信息，并返回球员姓名、效力开始年份、结束年份和球队名称。",
        "查询": "GO FROM 'Boris Diaw' OVER serve WHERE $$.team.name CONTAINS \"Haw\"\nYIELD $^.player.name, serve.start_year, serve.end_year, $$.team.name"
    },
    {
        "用户": "您好，请帮我找一下名为'Joseph'的球员，找出他与其他实体之间的喜欢关系，并给我返回这些实体和关系的路径好吗？",
        "查询": "MATCH p = (v:player{name: \"Cory Joseph\"})-[e:like]-(v2)\nRETURN p"
    },
    {
        "用户": "Hello, please help me find the types and quantities of all relationships related to a player named 'Tim Duncan'.",
        "查询": "MATCH (v:player{name: 'Tim Duncan'})-[e]->() RETURN type(e), count(*)"
    },
    {
        "用户": "细菌性阴道病的推荐药物是什么？",
        "查询": "GO FROM \"细菌性阴道病\" OVER recommend_drug YIELD dst(edge);"
    },
    {
        "用户": "Hello, could you please help me find the name and age attributes of player 'Grant Hill'?",
        "查询": "FETCH PROP ON player \"Grant Hill\" YIELD player.name, player.age"
    },
    {
        "用户": "找出和鲁道夫·布兰德相关的两个人？",
        "查询": "MATCH (n:character{name:'鲁道夫·布兰德'})-[e]-(n1) return n LIMIT 2"
    },
    {
        "用户": "Hello, please help me find the player named 'Yao Ming' and all the positions he holds, and then return the name of the original entity to me.",
        "查询": "MATCH (v:player {name: \"Yao Ming\"})-[:serve*0..1]->() RETURN v.player.name"
    },
    {
        "用户": "Hello, could you please help me obtain the name and age attributes of the 'Kidd' player?",
        "查询": "FETCH PROP ON player \"Jason Kidd\" YIELD player.name, player.age"
    },
    {
        "用户": "Find a player named 'Tim Duncan', return their age and ID, and finally return the expanded ID.",
        "查询": "LOOKUP ON player\nWHERE player.name == 'Tim Duncan'\nYIELD player.age as age, id(vertex) as vid\n| UNWIND $-.vid as a | YIELD $-.a AS a"
    },
    {
        "用户": "您好，请帮我找出所有喜欢Tony Parker的实体，并返回这些实体与Tony Parker的喜欢关系的终点ID。",
        "查询": "GO FROM \"Tony Parker\" OVER like REVERSELY YIELD like._dst"
    },
    {
        "用户": "帕金 (击球手II)的父亲是谁？",
        "查询": "MATCH (n:character{name:'帕金 (击球手II)'})-[e:kindred{rel_type:'父亲'}]-(n1) return n1"
    },
    {
        "用户": "能帮我返回吉米·珀克斯到塞缪尔·G·寇豪格的最短路径吗？",
        "查询": "FIND SHORTEST PATH FROM \"吉米·珀克斯\" TO \"塞缪尔·G·寇豪格\" OVER * YIELD path AS p"
    },
    {
        "用户": "拉道夫斯·莱斯特兰奇的后裔有哪些？",
        "查询": "MATCH (n:character{name:'拉道夫斯·莱斯特兰奇'})-[e:kindred{rel_type:'后裔'}]-(n1) return n1"
    },
    {
        "用户": " 嘿，你能帮我找一下Tony Parker喜欢的球员中效力于Spurs的球员吗？然后告诉我他们的球队和球员信息。",
        "查询": "MATCH (v1)-[:like]->(v2:player)-[:serve]->(v3)\nWHERE id(v3) == 'Spurs' AND id(v1) == 'Tony Parker'\nRETURN v1, v2, v3"
    },
    {
        "用户": "阿不思·西弗勒斯·波特的妹妹是谁？",
        "查询": "MATCH (n:character{name:'阿不思·西弗勒斯·波特'})-[e]-(n1) WHERE e.rel_type=='妹妹' return n1"
    },
    {
        "用户": "您好，请帮我找出'Tim Duncan'喜欢的第一个实体。",
        "查询": "GO FROM \"Tim Duncan\" OVER like LIMIT 1;"
    },
    {
        "用户": "您好，请帮我查找一下年龄为20岁的球员，然后返回这些球员的所有节点信息好吗？",
        "查询": "match (v:player{age: 1+19}) RETURN v"
    },
    {
        "用户": "Obtain the name and age of player 'Grant Hill'.",
        "查询": "FETCH PROP ON player \"Grant Hill\" YIELD player.name, player.age"
    },
    {
        "用户": "Hello, could you please help me find the player entity with ID 'Carmelo Anthony' and tell me his age?",
        "查询": "match (v:player) where id(v)==\"Carmelo Anthony\" return properties(v).age;"
    },
    {
        "用户": "找出 'Tim Duncan' 喜欢的实体以及此实体喜欢的实体，返回这三类实体的姓名。",
        "查询": "MATCH (v1) -[:like]-> (v2) -[:like]-> (v3)\nWHERE id(v1) == \"Tim Duncan\"\nRETURN v1.player.name AS Player, v2.player.name AS Friend, v3.player.name AS FoF"
    },
    {
        "用户": "从 'Tim Duncan' 出发，经过有 '喜欢' 和 '服务' 的关系，找出距离为2的子图，并返回节点和边的信息。",
        "查询": "GET SUBGRAPH WITH PROP 2 STEPS FROM 'Tim Duncan' IN like, serve YIELD vertices as nodes, edges as relationships"
    },
    {
        "用户": "请问您能帮我找到Tim Duncan喜欢的第一个人吗？",
        "查询": "GO FROM \"Tim Duncan\" OVER like LIMIT 1;"
    },
    {
        "用户": "西格纳斯·布莱克二世的妻子是谁？",
        "查询": "MATCH (n:character)-[e:kindred{rel_type:'妻子'}]-(n1) WHERE n.character.name=='西格纳斯·布莱克二世' return n1"
    },
    {
        "用户": "查看和心悸一跳相关的所有信息？",
        "查询": "GET SUBGRAPH 1 STEPS FROM \"心悸\" YIELD VERTICES AS nodes, EDGES AS all_edges;"
    },
    {
        "用户": "请问您能帮我查找一下球员 'Grant Hill' 的姓名和年龄吗？",
        "查询": "FETCH PROP ON player \"Grant Hill\" YIELD player.name, player.age"
    },
    {
        "用户": "Hello, could you please help me obtain the name and age of the 'Tony Parker' player?",
        "查询": "FETCH PROP ON player \"Tony Parker\" YIELD player.name, player.age"
    },
    {
        "用户": "Hey, can you help me find the third degree relationship that a player named 'abc' serves? Then return all the attribute information of these entities to me.",
        "查询": "MATCH (v:player{name: \"abc\"}) -[:serve*..3]-> ()\nRETURN *"
    },
    {
        "用户": "根尖脓肿的治疗时长通常是多久？",
        "查询": "MATCH (n:disease{name:\"根尖脓肿\"}) return n.disease.cure_lasttime"
    },
    {
        "用户": "得了糖尿病推荐吃什么药？",
        "查询": "GO FROM \"糖尿病\" OVER recommend_drug YIELD dst(edge);"
    },
    {
        "用户": "根尖脓肿的易感人群是哪些？",
        "查询": "MATCH (n:disease{name:\"根尖脓肿\"}) return n.disease.easy_get"
    },
    {
        "用户": "Returns a player node named 'DeAndre Jordan'.",
        "查询": "MATCH (v:player {name: \"DeAndre Jordan\"}) RETURN v"
    },
    {
        "用户": "布拉德利是哪个学院的？",
        "查询": "MATCH (n:character{name:'布拉德利'})-[e:learn_from]-(n1:college) return n1"
    },
    {
        "用户": "查找名为'abc'的球员所服务的3跳以内的所有实体，返回这些实体的所有属性信息。",
        "查询": "MATCH (v:player{name: \"abc\"}) -[:serve*..3]-> ()\nRETURN *"
    },
    {
        "用户": "Multiply the number of players who like 'Tim Duncan' by the team they belong to.",
        "查询": "MATCH (v1)-[:like]->(v2:player)-[:serve]->(v3)\nWHERE id(v2) == 'Tim Duncan'\nRETURN COUNT(*)"
    },
    {
        "用户": "您好，请帮我查找一下ID为'Carmelo Anthony'的球员实体，然后告诉我他的年龄是多少呢？",
        "查询": "match (v:player) where id(v)==\"Carmelo Anthony\" return properties(v).age;"
    },
    {
        "用户": "坎坦克卢斯·诺特的血统是什么？",
        "查询": "LOOKUP ON character WHERE character.name=='坎坦克卢斯·诺特' YIELD properties(vertex).blood AS blood"
    },
    {
        "用户": "细菌性阴道病的易感人群是哪些？",
        "查询": "MATCH (n:disease{name:\"细菌性阴道病\"}) return n.disease.easy_get"
    },
    {
        "用户": "Identify all 'like' and 'Steve Nash' entities and target them in the relationship.",
        "查询": "GO FROM \"Steve Nash\" OVER like REVERSELY YIELD like._dst"
    },
    {
        "用户": "Obtain the name and age of the 'Tony Parker' player.",
        "查询": "FETCH PROP ON player \"Tony Parker\" YIELD player.name, player.age"
    },
    {
        "用户": "查找 'Tim Duncan' 喜欢的第一个实体。",
        "查询": "GO FROM \"Tim Duncan\" OVER like LIMIT 1;"
    },
    {
        "用户": "Starting from 'Tim Duncan', identify all entities and relationship subgraphs with a 'like' degree between 95 and 100 within two steps.",
        "查询": "GET SUBGRAPH WITH PROP 2 STEPS FROM 'Tim Duncan'\n  WHERE like.likeness > 95 AND like.likeness < 100\n  YIELD vertices as nodes, edges as relationships"
    },
    {
        "用户": "Can you help me find the 'like' relationship with a rating of 666? I need to obtain the starting and ending points of these relationships.",
        "查询": "LOOKUP ON like WHERE like.grade == 666 YIELD src(edge) as src, dst(edge) as dst"
    },
    {
        "用户": "Returns the names of all players who joined the team in 2001 and their respective team names.",
        "查询": "match (player)-[s:serve]->(team) where s.start_year == 2001 return player.player.name AS player, team.team.name AS team"
    },
    {
        "用户": "找出与 'Carmelo Anthony' 有 '喜欢' 关系的路径数量。",
        "查询": "GO FROM \"Carmelo Anthony\" OVER like YIELD like._dst| YIELD COUNT(*)"
    },
    {
        "用户": "嘿，你能帮我弄到'Boris Diaw'和'Tony Parker'这两位球员的名字和年龄信息吗？然后把去重后的结果给我。",
        "查询": "FETCH PROP ON player \"Boris Diaw\", \"Tony Parker\" YIELD DISTINCT player.name, player.age"
    },
    {
        "用户": "克丽奥娜的出生地是哪里？",
        "查询": "MATCH (n:character{name:'克丽奥娜'}) return n.character.born"
    },
    {
        "用户": "Hello, please help me find a player node named 'DeAndre Jordan'.",
        "查询": "MATCH (v:player {name: \"DeAndre Jordan\"}) RETURN v"
    },
    {
        "用户": "得了脐疝应该去哪个科室就诊？",
        "查询": "GO FROM \"脐疝\" OVER cure_department YIELD dst(edge);"
    },
    {
        "用户": "Find players aged 30 and return their names and age plus 1.",
        "查询": "LOOKUP ON player WHERE player.age == 30 YIELD player.name, player.age + 1"
    },
    {
        "用户": "Could you please help me find the IDs of all the entities that 'Russell Westbrook' works for and likes?",
        "查询": "GO FROM 'Russell Westbrook' OVER serve, like YIELD serve._dst, like._dst"
    },
    {
        "用户": "血红蛋白E病的易感人群是哪些？",
        "查询": "MATCH (n:disease{name:\"血红蛋白E病\"}) return n.disease.easy_get"
    },
    {
        "用户": "从 'Tony Parker' 出发，沿着双向 '喜欢' 关系，经过 0 到 2 步，返回所有不重复的实体的 ID。",
        "查询": "GO 0 TO 2 STEPS FROM 'Tony Parker' OVER like BIDIRECT YIELD DISTINCT like._dst"
    },
    {
        "用户": "Hello, could you please help me find out what players over the age of 20 like or indirectly like, as well as their relationships?",
        "查询": "match p= (v:player)-[e:like*1..2]->(d) where v.player.age > 20 return e"
    },
    {
        "用户": "Hey, can you help me find information about the player 'Paul Gasol'? I want to know the names of all the teams he has played for.",
        "查询": "MATCH (v)-[:serve]->(t)\nWHERE (NOT NOT id(v) == 'Paul Gasol') AND id(v) == 'Paul Gasol'\nRETURN v.player.name AS Name, t.team.name AS Team"
    },
    {
        "用户": "得了高血压推荐吃什么食物？",
        "查询": "MATCH (n:disease)-[e:recommend_eat]->(n1:food) WHERE n.disease.name=='高血压' return n1.food.name"
    },
    {
        "用户": "Hello, could you help me find the name attributes of a team named 'Spurs'?",
        "查询": "FETCH PROP ON team \"Spurs\" YIELD team.name"
    },
    {
        "用户": "得了戊型病毒性肝炎应该做哪些检查？",
        "查询": "GO FROM \"戊型病毒性肝炎\" OVER need_check YIELD dst(edge);"
    },
    {
        "用户": "Returns the name of a player named 'Antetokounmpo'.",
        "查询": "MATCH (v:player{name:\"Giannis Antetokounmpo\"}) RETURN v.name AS vname"
    },
    {
        "用户": "奥拉·奎尔克是哪个学院的？",
        "查询": "MATCH (n:character{name:'奥拉·奎尔克'})-[e:learn_from]-(n1:college) return n1.college.name"
    },
    {
        "用户": "Hey, can you help me find those players who have been liked by other players? I want to know their names.",
        "查询": "MATCH (v:player) WHERE [t in [v] | (v)-[:like]->(t)] RETURN v.player.name AS name"
    },
    {
        "用户": "返回卢卡斯·皮奎利周边最多二跳关系的子图？",
        "查询": "GET SUBGRAPH 2 STEPS FROM \"卢卡斯·皮奎利\" YIELD VERTICES AS nodes, EDGES AS relationships;"
    },
    {
        "用户": "多少种病能够通过手术治疗方式治愈？",
        "查询": "MATCH (n:disease)-[]->(n1:cure{name:'手术治疗'}) return count(n)"
    },
    {
        "用户": "得了戊型病毒性肝炎的得病概率是多少？",
        "查询": "LOOKUP ON disease WHERE disease.name == \"戊型病毒性肝炎\" YIELD properties(vertex).get_prob"
    },
    {
        "用户": "Hello, could you please help me identify all the things' Tim Duncan 'likes and provide a de duplication of the relationship attributes between these things and the relationship itself?",
        "查询": "MATCH (v:player)-[e:like]->(v2)\nWHERE id(v) == \"Tim Duncan\"\nRETURN DISTINCT properties(e) as props, e"
    },
    {
        "用户": "塞德瑞拉·布莱克的姐姐是谁？",
        "查询": "MATCH (n:character{name:'塞德瑞拉·布莱克'})-[e]-(n1) WHERE e.rel_type=='姐姐' return n1"
    },
    {
        "用户": "Find all the entities that a player named 'Tracy McGrady' likes', with a liking level of 90, and return the relationships between these entities.",
        "查询": "MATCH (:player{name:\"Tracy McGrady\"})-[e:like{likeness: 90}]->(v)\nRETURN e, v"
    },
    {
        "用户": "老年人支气管扩张的主要症状是什么？",
        "查询": "MATCH (n:disease{name:\"老年人支气管扩张\"}) return n.disease.symptom"
    },
    {
        "用户": "Hello, please help me find the players who joined the team in 2001 and the names of the teams they belong to.",
        "查询": "match (player)-[s:serve]->(team) where s.start_year == 2001 return player.player.name AS player, team.team.name AS team"
    },
    {
        "用户": "Can you help me identify entities related to 'Kobe Bryant'? I want to know the entity that has a 'like' relationship with him, and the distance is not more than two steps. Can you tell me the names of these entities?",
        "查询": "GO 2 STEPS FROM 'Kobe Bryant' OVER like REVERSELY YIELD $$.player.name"
    },
    {
        "用户": "Find all entities and their relationships that a player named 'Joseph' likes and return the paths of these entities and relationships.",
        "查询": "MATCH p = (v:player{name: \"Cory Joseph\"})-[e:like]-(v2)\nRETURN p"
    },
    {
        "用户": "Returns path information for a maximum of three reverse 'like' relationship from 'Tim Duncan' to 'Tony Parker'.",
        "查询": "FIND NOLOOP PATH FROM \"Tim Duncan\" TO \"Tony Parker\" OVER like REVERSELY UPTO 3 STEPS YIELD path as p"
    },
    {
        "用户": "高血压的得病概率是多少？",
        "查询": "LOOKUP ON disease WHERE disease.name == \"高血压\" YIELD properties(vertex).get_prob"
    },
    {
        "用户": "找出Tony Parker所喜欢的球员中在Spurs队效力的球员，最后返回路径中的所有节点。",
        "查询": "MATCH (v1)-[:like]->(v2:player)-[:serve]->(v3)\nWHERE id(v3) == 'Spurs' AND id(v1) == 'Tony Parker'\nRETURN v1, v2, v3"
    },
    {
        "用户": "能帮我返回温廷汉姆到卢克丽霞·布莱克的最短路径吗？",
        "查询": "FIND SHORTEST PATH FROM \"赫尔曼·温廷汉姆\" TO \"卢克丽霞·布莱克\" OVER * YIELD path AS p"
    },
    {
        "用户": "Obtain the relationship properties of 'Tony Parker' liking 'Tim Duncan' and 'Grant Hill' liking 'Tracy McGrady' and return these properties.",
        "查询": "FETCH PROP ON like \"Tony Parker\"->\"Tim Duncan\", \"Grant Hill\" -> \"Tracy McGrady\" YIELD edge as relationship |\nYIELD properties($-.relationship)"
    },
    {
        "用户": "Could you please help me check the names and nodes of all the players?",
        "查询": "match (v:player) return v.player.name, v"
    },
    {
        "用户": "找出年龄大于35岁的球员，统计他们的数量、年龄总和、最大年龄、最小年龄、平均年龄加1和标签，并按照id、数量、最大年龄、最小年龄排序，跳过前10个结果，返回20个结果。",
        "查询": "MATCH(n:player)-[:like]->(m)\n  WHERE n.player.age > 35\n  RETURN DISTINCT id(n) AS id,\n                  count(n) AS count,\n                  sum(floor(n.player.age)) AS sum,\n                  max(m.player.age) AS max,\n                  min(n.player.age) AS min,\n                  avg(distinct n.player.age)+1 AS age,\n                  labels(m) AS lb\n        ORDER BY id, count, max, min\n        SKIP 10 LIMIT 20;"
    },
    {
        "用户": " 你能帮我找一下，喜欢'Tim Duncan'这个球员的球员所在的球队吗？我想统计一下这些球队的球员数量。",
        "查询": "MATCH (:player{name: \"Tim Duncan\"})-[e1:like]->()-[e2:serve*0..3]->()<-[e3:serve]-(v)\nRETURN count(v)"
    },
    {
        "用户": "贝内迪塔·多拉多是哪个学院的校长？",
        "查询": "MATCH (n:character{name:'贝内迪塔·多拉多'})-[e:belong_to]-(n1:college) return n1.character.name"
    },
    {
        "用户": "霍奇金病的药物推荐有哪些？",
        "查询": "GO FROM \"霍奇金病\" OVER recommend_drug YIELD dst(edge);"
    },
    {
        "用户": "Find the shortest path of up to 3 jumps between player Tim Duncan and team Spurs, and return to that path.",
        "查询": "MATCH p = allShortestPaths( (a:player)-[e:serve*..3]-(b:team) )\n  WHERE a.player.name == 'Tim Duncan' AND b.team.name == 'Spurs'\n  RETURN p"
    },
    {
        "用户": "尼古拉·韦尔斯是什么物种？",
        "查询": "MATCH (n:character{name:'尼古拉·韦尔斯'}) return n.character.species"
    },
    {
        "用户": "请问您能帮我查找一下，Tracy McGrady喜欢的球员是谁，然后再找出这些球员所喜欢的球员的ID吗？\n帮我查一下，Tracy McGrady喜欢的球员是谁，然后再找出这些球员所喜欢的球员的ID。\n您好，我想请您帮我查找一下，Tracy McGrady喜欢的球员是谁，然后再找出这些球员所喜欢的球员的ID，可以吗？",
        "查询": "$var = GO FROM \"Tracy McGrady\" OVER like YIELD like._dst as id; GO FROM $var.id OVER like YIELD like._dst"
    },
    {
        "用户": "芙蓉·德拉库尔的女儿有哪些？",
        "查询": "MATCH (n:character)-[e:kindred{rel_type:'女儿'}]-(n1) WHERE n.character.name=='芙蓉·德拉库尔' return n1"
    },
    {
        "用户": "请问您能帮我查找一下，关于'Tim'喜欢的实体以及与之相关的2-3层关系吗？",
        "查询": "MATCH (:player{name: \"Tim Duncan\"})-[e:like*2..3]->(v)\nRETURN e, v"
    },
    {
        "用户": "Can you help me identify the relationships with all the entities that Tim Duncan likes? I need to obtain the de duplication attributes of these relationships and the relationships themselves.",
        "查询": "MATCH (v:player)-[e:like]->(v2)\nWHERE id(v) == \"Tim Duncan\"\nRETURN DISTINCT properties(e) as props, e"
    },
    {
        "用户": "弗雷德·韦斯莱从属于哪个组织？",
        "查询": "MATCH (n:character{name:'弗雷德·韦斯莱'})-[e:belong_to]-(n1:group) return n1"
    },
    {
        "用户": "Returns the name of a player named 'Giannis Antetokounmpo'.",
        "查询": "MATCH (v:player{name:\"Giannis Antetokounmpo\"}) RETURN v.name AS vname"
    },
    {
        "用户": "餐后血糖过低症的治疗时长通常是多久？",
        "查询": "MATCH (n:disease{name:\"餐后血糖过低症\"}) return n.disease.cure_lasttime"
    },
    {
        "用户": "请问您能帮我查找一下'Jason Kidd'球员的姓名和年龄属性吗？",
        "查询": "FETCH PROP ON player \"Jason Kidd\" YIELD player.name, player.age"
    },
    {
        "用户": "Hello, could you help me find players that other players like and tell me their names?",
        "查询": "MATCH (v:player) WHERE [t in [v] | (v)-[:like]->(t)] RETURN v.player.name AS name"
    },
    {
        "用户": "返回与名为'Rudy Gay'的球员有直接或间接服务关系的球员的名称。",
        "查询": "MATCH (v:player {name: \"Rudy Gay\"})-[:serve*0..1]->(n) RETURN n.player.name"
    },
    {
        "用户": "与雷古勒斯·布莱克具有两跳亲属关系的人有哪些？",
        "查询": "GO 2 STEPS FROM \"雷古勒斯·布莱克\" OVER kindred YIELD dst(edge)"
    },
    {
        "用户": "塞蒂娜·沃贝克的第二任丈夫的前妻是谁？",
        "查询": "MATCH (n:character)-[e:kindred{rel_type:'前妻'}]-(n1) WHERE n.character.name=='塞蒂娜·沃贝克的第二任丈夫' return n1"
    },
    {
        "用户": "与乔治·韦斯莱具有两跳亲属关系的人有哪些？",
        "查询": "GO 2 STEPS FROM \"乔治·韦斯莱\" OVER kindred YIELD dst(edge)"
    },
    {
        "用户": "您好，请帮我查找一下与球员'Rudy Gay'相关的边类型及数量好吗？",
        "查询": "MATCH (v:player{name: 'Rudy Gay'})-[e]->() RETURN type(e), count(*)"
    },
    {
        "用户": "Hello, please help me identify the relationships between all players who have a -1 liking level with other players.",
        "查询": "match (v:player)-[e:like{likeness:-1}]->()  RETURN e"
    },
    {
        "用户": "找出与 'Manu Ginobili' 有 '喜欢' 或 '队友' 关系,若是 '喜欢' 则要求程度大于90的实体，返回这些实体的 '喜欢' 程度、与 'Manu Ginobili' 的队友关系开始年份以及实体名称。",
        "查询": "GO FROM \"Manu Ginobili\" OVER like, teammate REVERSELY WHERE like.likeness > 90\nYIELD like.likeness, teammate.start_year, $$.player.name"
    },
    {
        "用户": "找出名为'Tim Duncan'的球员与其他球员互相喜欢的关系，返回这些关系的喜欢程度。",
        "查询": "MATCH p2=(:player{name:\"Tim Duncan\"})-[e:like*1..2]-(:player{name:\"Tim Duncan\"})\nRETURN e.likeness AS e1"
    },
    {
        "用户": "冈希尔达·尼恩的丈夫是谁？",
        "查询": "MATCH (n:character)-[e:kindred{rel_type:'丈夫'}]-(n1) WHERE n.character.name=='冈希尔达·尼恩' return n1"
    },
    {
        "用户": "找出ID为'Tim Duncan'的球员所喜欢的实体路径数量并返回。",
        "查询": "MATCH (a:player)\nWHERE id(a)=='Tim Duncan'\nMATCH (a)-[:like]-(b)\nRETURN count(*) AS cnt"
    },
    {
        "用户": "查找'Tim'所喜欢的所有实体，包括2-3层关系，返回关系和实体。",
        "查询": "MATCH (:player{name: \"Tim Duncan\"})-[e:like*2..3]->(v)\nRETURN e, v"
    },
    {
        "用户": " 您好，请帮我查找一下，从'Tim Duncan'这个人开始，往外扩展1到4步，找到每个边之间的'喜欢程度'和边的信息。谢谢！",
        "查询": "go 1 to 4 steps from \"Tim Duncan\" over like yield like.likeness, edge as e"
    },
    {
        "用户": "Hello, please help me find players over the age of 30.5 and give me their ID and age.",
        "查询": "LOOKUP ON player WHERE player.age > 30.5 YIELD id(vertex) as name, player.age AS Age"
    },
    {
        "用户": "返回名为'Giannis Antetokounmpo'的球员的姓名。",
        "查询": "MATCH (v:player{name:\"Giannis Antetokounmpo\"}) RETURN v.name AS vname"
    },
    {
        "用户": "获取球队 'Spurs' 的名称。",
        "查询": "FETCH PROP ON team \"Spurs\" YIELD team.name"
    },
    {
        "用户": "Hello, please help me find someone who has a close and friendly relationship with 'Manu Ginobili' or his teammates. If it is a liking relationship, can you filter out entities with a liking level greater than 90 and provide their liking level, start year, and name. Thank you!",
        "查询": "GO FROM \"Manu Ginobili\" OVER like, teammate REVERSELY WHERE like.likeness > 90\nYIELD like.likeness, teammate.start_year, $$.player.name"
    },
    {
        "用户": "Hey, can you help me find players over 35 years old? Then count their number, total age, maximum age, minimum age, and average age plus 1, as well as their labels. Finally, sort by ID, quantity, maximum age, and minimum age, skip the previous 10 results, and return 20 results to me.",
        "查询": "MATCH(n:player)-[:like]->(m)\n  WHERE n.player.age > 35\n  RETURN DISTINCT id(n) AS id,\n                  count(n) AS count,\n                  sum(floor(n.player.age)) AS sum,\n                  max(m.player.age) AS max,\n                  min(n.player.age) AS min,\n                  avg(distinct n.player.age)+1 AS age,\n                  labels(m) AS lb\n        ORDER BY id, count, max, min\n        SKIP 10 LIMIT 20;"
    },
    {
        "用户": "您好，请帮我找出与 'Tracy McGrady' 有 '喜欢' 关系的所有实体，并返回它们的 ID。",
        "查询": "GO FROM \"Tracy McGrady\" OVER like YIELD like._dst"
    },
    {
        "用户": "您好，请帮我找出 'Russell Westbrook' 所 '服务' 和 '喜欢' 的所有实体，并返回它们的 ID。",
        "查询": "GO FROM 'Russell Westbrook' OVER serve, like YIELD serve._dst, like._dst"
    },
    {
        "用户": "Identify the entities connected to 'Tim Duncan' through a 'like' relationship, and then identify the entities connected through a 'service' relationship among these entities, and return the IDs of these entities.",
        "查询": "GO 1 STEPS FROM 'Tim Duncan' OVER like YIELD like._dst as id | GO FROM $-.id OVER serve YIELD serve._dst"
    },
    {
        "用户": "上巴恩顿的汉吉斯是什么物种？",
        "查询": "MATCH (n:character{name:'上巴恩顿的汉吉斯'}) return n.character.species"
    },
    {
        "用户": "Can you help me identify entities that have a liking relationship with 'Kobe Bryant'? Then return the names of these entities to me, including those connected through a two-step path.",
        "查询": "GO 2 STEPS FROM 'Kobe Bryant' OVER like REVERSELY YIELD $$.player.name"
    },
    {
        "用户": "Find all the entities that the player named 'Tony Parker' likes and return them.",
        "查询": "FETCH PROP ON player 'Tony Parker' YIELD player.name as Name |\nGO FROM $-.Name OVER like YIELD like._dst"
    },
    {
        "用户": "您好，请帮我查找一下与 'Paul Gasol' 有关的喜欢、服务和队友关系的所有实体，并返回它们的 ID。",
        "查询": "GO FROM \"Paul Gasol\" OVER * YIELD like._dst, serve._dst, teammate._dst"
    },
    {
        "用户": "宾利的婚姻状况是什么？",
        "查询": "LOOKUP ON character WHERE character.name=='宾利' YIELD properties(vertex).marital AS marital"
    },
    {
        "用户": "Starting from the entity of 'Tim Duncan', traverse 1 to 4 steps outward along the 'like' relationship to return the 'like degree' and edge information of the edge.",
        "查询": "go 1 to 4 steps from \"Tim Duncan\" over like yield like.likeness, edge as e"
    },
    {
        "用户": "Hello, please help me find the shortest path from 'Yao Ming' to 'Tony Parker'. The path should include likes and service relationships, and go through a maximum of 5 steps. Then provide me with the path information.",
        "查询": "YIELD \"Yao Ming\" AS src, \"Tony Parker\" AS dst\n| FIND SHORTEST PATH FROM $-.src TO $-.dst OVER like, serve UPTO 5 STEPS YIELD path as p"
    },
    {
        "用户": "哈维·瑞吉比特的眼睛颜色是什么？",
        "查询": "MATCH (n:character{name:'哈维·瑞吉比特'}) return n.character.eye"
    },
    {
        "用户": "找出ID为'Boris Diaw'的球员信息并返回。",
        "查询": "MATCH (n:player) WHERE id(n) == \"Boris Diaw\" RETURN n;"
    },
    {
        "用户": "塞德瑞拉·布莱克的儿子是谁？",
        "查询": "MATCH (n:character{name:'塞德瑞拉·布莱克'})-[e]-(n1) WHERE e.rel_type=='儿子' return n1"
    },
    {
        "用户": "哈桑·穆斯塔发从属于哪些组织？",
        "查询": "MATCH (n:character{name:'哈桑·穆斯塔发'})-[e:belong_to]-(n1:group) return n1"
    },
    {
        "用户": "双向查找与 'Tim Duncan' 具有效力或喜欢关系的所有实体，并返回这些实体的去重后的 ID。",
        "查询": "GO FROM 'Tim Duncan' OVER serve, like bidirect YIELD distinct dst(edge) as dst"
    },
    {
        "用户": "找出和博尔相关的三个人？",
        "查询": "MATCH (n:character{name:'博尔'})-[e]-(n1) return n LIMIT 3"
    },
    {
        "用户": "Match the relationships between all players and their teammates.",
        "查询": "MATCH (v:player) WITH (v)-[:teammate]->() AS p RETURN p"
    },
    {
        "用户": "Hey, can you help me identify entities over 38 years old, and what is the relationship and information between these entities and 'Tim Duncan'?",
        "查询": "GO FROM 'Tim Duncan' OVER like WHERE properties($$).age > 38 YIELD edge as e,  $$ as dst"
    },
    {
        "用户": "Can you help me find the name of the 'Spurs' team?",
        "查询": "FETCH PROP ON team \"Spurs\" YIELD team.name"
    },
    {
        "用户": "找出名为'Damian Lillard'的球员所喜欢的所有实体，并返回这些实体的年龄信息，按年龄从小到大排序，返回前三个实体及其年龄。",
        "查询": "MATCH (v:player{name: \"Damian Lillard\"})-[:like]-(v2)--(v3)\nWITH v3, v3.player.age AS age\nRETURN v3, age ORDER BY age LIMIT 3"
    },
    {
        "用户": "找出 'Tim Duncan' 喜欢的所有实体，并返回这些实体之间的关系属性的去重和关系本身。",
        "查询": "MATCH (v:player)-[e:like]->(v2)\nWHERE id(v) == \"Tim Duncan\"\nRETURN DISTINCT properties(e) as props, e"
    },
    {
        "用户": "弗拉德·德拉库的儿子是谁？",
        "查询": "MATCH (n:character{name:'弗拉德·德拉库'})-[e]-(n1) WHERE e.rel_type=='儿子' return n1"
    },
    {
        "用户": "找出名为 'Tony Parker' 的球员所 '喜欢' 的所有实体，并返回这些实体。",
        "查询": "FETCH PROP ON player 'Tony Parker' YIELD player.name as Name |\nGO FROM $-.Name OVER like YIELD like._dst"
    },
    {
        "用户": "Identify all time periods and team information that include 'Haw' in the team name served by 'Boris Diaw', and return the player name, start year, end year, and team name.",
        "查询": "GO FROM 'Boris Diaw' OVER serve WHERE $$.team.name CONTAINS \"Haw\"\nYIELD $^.player.name, serve.start_year, serve.end_year, $$.team.name"
    },
    {
        "用户": "得了高血压推荐吃什么食物？",
        "查询": "MATCH (n:disease)-[e:recommend_eat]->(n1:food) WHERE n.disease.name=='高血压' return n1.food.name"
    },
    {
        "用户": "多少种病能够通过药物治疗方式治愈？",
        "查询": "MATCH (n:disease)-[]->(n1:cure{name:'药物治疗'}) return count(n)"
    },
    {
        "用户": "返回名为'Tim Duncan'的球员与其所有关系的类型和数量。",
        "查询": "MATCH (v:player{name: 'Tim Duncan'})-[e]->() RETURN type(e), count(*)"
    },
    {
        "用户": "Can you help me identify the team names and related player names related to 'LaMarcus Aldridge'?",
        "查询": "GO FROM \"LaMarcus Aldridge\" OVER * YIELD $$.team.name, $$.player.name"
    },
    {
        "用户": "请问能帮我找出前两位球员的名字吗？还能按照名字属性进行排序吗？",
        "查询": "match (v:player) return properties(v).name AS name order by name limit 2;"
    },
    {
        "用户": "罗恩·韦斯莱是哪个学院的？",
        "查询": "MATCH (n:character{name:'罗恩·韦斯莱'})-[e:learn_from]-(n1:college) return n1"
    },
    {
        "用户": "嘿，我需要找出与名为'Dejounte'的人有喜欢关系的实体。按照年龄从大到小排序，姓名按照字母顺序排列。我想跳过前面的11个结果，只返回接下来的3个实体的姓名和年龄。能帮我做这个任务吗？",
        "查询": "MATCH (v1) -[:like]-> (v)\nWHERE id(v1) == 'Dejounte Murray'\nRETURN v.player.name AS Name, v.player.age AS Age\nORDER BY Age DESC, Name ASC\nSKIP 11\nLIMIT 3"
    },
    {
        "用户": "得了高血压应该去哪个科室就诊？",
        "查询": "GO FROM \"高血压\" OVER cure_department YIELD dst(edge);"
    },
    {
        "用户": "蒂莉·托克从属于哪个组织？",
        "查询": "MATCH (n:character{name:'蒂莉·托克'})-[e:belong_to]-(n1:group) return n1"
    },
    {
        "用户": "Hey, I need to identify entities that have a liking relationship with someone named 'Dejounte'. Sort by age, with names arranged in alphabetical order. I want to skip the previous 11 results and only return the names and ages of the next 3 entities. Can you help me with this task?",
        "查询": "MATCH (v1) -[:like]-> (v)\nWHERE id(v1) == 'Dejounte Murray'\nRETURN v.player.name AS Name, v.player.age AS Age\nORDER BY Age DESC, Name ASC\nSKIP 11\nLIMIT 3"
    },
    {
        "用户": "Count the number of entities served or liked by a player named 'Irving', with a relationship distance of 2 to 3 hops.",
        "查询": "MATCH (:player{name:\"Kyrie Irving\"})-[e:serve|like*2..3]-(v)\nRETURN count(v)"
    },
    {
        "用户": "查看和高血压相关的所有信息？",
        "查询": "GET SUBGRAPH 1 STEPS FROM \"高血压\" YIELD VERTICES AS nodes, EDGES AS all_edges"
    },
    {
        "用户": "返回所有在2001年加入球队的球员和他们所在的球队名称。",
        "查询": "match (player)-[s:serve]->(team) where s.start_year == 2001 return player.player.name AS player, team.team.name AS team"
    },
    {
        "用户": "Find all the entities that a player named 'Tracy McGrady' likes', with a level of liking of 90, and return these entities and their relationships.",
        "查询": "MATCH (:player{name:\"Tracy McGrady\"})-[e:like{likeness: 90}]->(v)\nRETURN e, v"
    },
    {
        "用户": "找出和 'Danny Green' 有 '喜欢' 关系的实体，再找出这些实体的 '队友'，返回这些实体及其关系的源节点和目标节点的ID。",
        "查询": "$a = GO FROM 'Danny Green' OVER like YIELD like._src AS src, like._dst AS dst;\nGO FROM $a.dst OVER teammate YIELD $a.src AS src, $a.dst, teammate._dst AS dst"
    },
    {
        "用户": "Count the number of paths, indicating that player v1 likes team paths with a relationship between 'Tim Duncan' and 'Tim Duncan'.",
        "查询": "MATCH (v1)-[:like]->(v2:player)-[:serve]->(v3)\nWHERE id(v2) == 'Tim Duncan'\nRETURN COUNT(*)"
    },
    {
        "用户": "软纤维瘤的得病概率是多少？",
        "查询": "LOOKUP ON disease WHERE disease.name == \"软纤维瘤\" YIELD properties(vertex).get_prob"
    },
    {
        "用户": "Hello, please help me identify entities that have a 'like' relationship with 'Tim Duncan', and their distance from 'Tim Duncan' is 2 steps. Can we return the edge information of these relationships?",
        "查询": "GET SUBGRAPH 2 STEPS FROM \"Tim Duncan\" BOTH like YIELD edges as e\n| UNWIND $-.e as a | YIELD $-.a AS a"
    },
    {
        "用户": "Hello, could you help me find a player who likes' Tim Duncan '? Can you help me count the number of paths and return them?",
        "查询": "MATCH (a:player)\nWHERE id(a)=='Tim Duncan'\nMATCH (a)-[:like]-(b)\nRETURN count(*) AS cnt"
    },
    {
        "用户": "卢卡斯·皮奎利的出生时间是什么？",
        "查询": "LOOKUP ON character WHERE character.name=='卢卡斯·皮奎利' YIELD properties(vertex).born AS born"
    },
    {
        "用户": "Can you help me find all the entities that like Steve Nash and their relationship with the target entity?",
        "查询": "GO FROM \"Steve Nash\" OVER like REVERSELY YIELD like._dst"
    },
    {
        "用户": "伯莎·乔金斯可能存在关系的人有哪些？",
        "查询": "MATCH (n:character{name:'伯莎·乔金斯'})-[e]-(n1) return n1"
    },
    {
        "用户": "遗传性耳瘘的治愈概率是多少？",
        "查询": "MATCH (n:disease{name:\"遗传性耳瘘\"}) return n.disease.cured_prob"
    },
    {
        "用户": "Hello, could you help me find the names of players who have a 0 or 1 hop service relationship with the player node named 'Rudy'?",
        "查询": "MATCH (v:player {name: \"Rudy Gay\"})-[:serve*0..1]->(n) RETURN n.player.name"
    },
    {
        "用户": "眼颧部褐蓝痣的治疗时长通常是多久？",
        "查询": "MATCH (n:disease{name:\"眼颧部褐蓝痣\"}) return n.disease.cure_lasttime"
    },
    {
        "用户": "Hello, please help me find the players Tony Parker likes who play for the Spurs team, and return all the nodes on the path to me.",
        "查询": "MATCH (v1)-[:like]->(v2:player)-[:serve]->(v3)\nWHERE id(v3) == 'Spurs' AND id(v1) == 'Tony Parker'\nRETURN v1, v2, v3"
    },
    {
        "用户": "赤丝虬脉的预防措施是什么？",
        "查询": "MATCH (n:disease{name:\"赤丝虬脉\"}) return n.disease.prevent"
    },
    {
        "用户": "若久耀西是哪个国家的魁地奇队员？",
        "查询": "MATCH (n:character{name:'若久耀西'})-[e:belong_to]-(n1:group) return n1"
    },
    {
        "用户": "您好，请帮我找一下球队名为'Spurs'的所有球员，然后把他们的节点信息给我返回一下好吗？",
        "查询": "MATCH (v:team{name:\"Spurs\"})--(v2)\nRETURN v2 AS Player"
    },
    {
        "用户": "您好，请帮我查找与 'Manu Ginobili' 有关系的所有实体，并提供这些实体的 '喜欢程度'、'队友开始年份'、'服务开始年份'以及终点球员名字。",
        "查询": "GO FROM \"Manu Ginobili\" OVER * REVERSELY YIELD like.likeness, teammate.start_year, serve.start_year, $$.player.name"
    },
    {
        "用户": "特发性非硬化性门脉高压综合征的得病概率是多少？",
        "查询": "MATCH (n:disease{name:\"特发性非硬化性门脉高压综合征\"}) return n.disease.get_prob"
    },
    {
        "用户": "Bidirectional search for all entities that have a valid or favorite relationship with 'Tim Duncan' and return the deduplicated IDs of these entities.",
        "查询": "GO FROM 'Tim Duncan' OVER serve, like bidirect YIELD distinct dst(edge) as dst"
    },
    {
        "用户": "罗恩·韦斯莱的头发颜色是什么？",
        "查询": "MATCH (n:character{name:'罗恩·韦斯莱'}) return n.character.hair"
    },
    {
        "用户": "您好，请帮我找到'Boris Diaw'的球员节点并返回给我。",
        "查询": "FETCH PROP ON player 'Boris Diaw' YIELD vertex as node"
    },
    {
        "用户": "高血压的注意事项有哪些？",
        "查询": "LOOKUP ON disease WHERE disease.name == \"高血压\" YIELD properties(vertex).prevent"
    },
    {
        "用户": "Hello, please help me calculate the result of multiplying the number of players who like 'Tim Duncan' by the number of teams' Tim Duncan 'belongs to.",
        "查询": "MATCH (v1)-[:like]->(v2:player)-[:serve]->(v3)\nWHERE id(v2) == 'Tim Duncan'\nRETURN COUNT(*)"
    },
    {
        "用户": "Hey, can you help me find the player Tony Parker likes who plays for Spurs? Then tell me their team and player information.",
        "查询": "MATCH (v1)-[:like]->(v2:player)-[:serve]->(v3)\nWHERE id(v3) == 'Spurs' AND id(v1) == 'Tony Parker'\nRETURN v1, v2, v3"
    },
    {
        "用户": "Identify all entities connected to 'Paul Gasol' through 'likes',' services', and 'teammates' relationships, and return the IDs of the target entities for these relationships.",
        "查询": "GO FROM \"Paul Gasol\" OVER * YIELD like._dst, serve._dst, teammate._dst"
    },
    {
        "用户": "Identify entities that have a 'liking' or 'teammate' relationship with 'Manu Ginobili'. If 'liking', entities with a degree greater than 90 are required. Return the 'liking' level of these entities, the start year of the teammate relationship with 'Manu Ginobili', and the entity name.",
        "查询": "GO FROM \"Manu Ginobili\" OVER like, teammate REVERSELY WHERE like.likeness > 90\nYIELD like.likeness, teammate.start_year, $$.player.name"
    },
    {
        "用户": "Hello, could you please help me find the preferred entity for a player named 'Duncan', which can include 2 to 3 levels of relationships? Can you return these relationships and entities to me?",
        "查询": "MATCH (:player{name: \"Tim Duncan\"})-[e:like*2..3]->(v)\nRETURN e, v"
    },
    {
        "用户": "西弗勒斯·斯内普从属于哪个组织？",
        "查询": "MATCH (n:character{name:'西弗勒斯·斯内普'})-[e:belong_to]-(n1:group) return n1"
    },
    {
        "用户": "Could you please help me find out all the physical paths that can be reached through a maximum of 5 steps, starting from 'Tim Duncan', through the relationship between 'likes' and' services'? Then sort by path length and return to the top 10 paths.",
        "查询": "GO FROM \"Tim Duncan\" over * YIELD like._dst AS src, serve._src AS dst |\nFIND SHORTEST PATH FROM $-.src TO $-.dst OVER like UPTO 5 STEPS YIELD path as p |\nORDER BY $-.p | LIMIT 10"
    },
    {
        "用户": "磨牙的注意事项有哪些？",
        "查询": "MATCH (n:disease{name:\"磨牙\"}) return n.disease.prevent"
    },
    {
        "用户": "蝶骨嵴脑膜瘤眼部病变的主要症状是什么？",
        "查询": "MATCH (n:disease{name:\"蝶骨嵴脑膜瘤眼部病变\"}) return n.disease.symptom"
    },
    {
        "用户": " 您好，请帮我计算一下喜欢'Tim Duncan'的球员数量和'Tim Duncan'所在球队的数量相乘的结果。",
        "查询": "MATCH (v1)-[:like]->(v2:player)-[:serve]->(v3)\nWHERE id(v2) == 'Tim Duncan'\nRETURN COUNT(*)"
    },
    {
        "用户": "Hello, could you please help me find out, starting from 'Ricky Rubio' and following the 'like' relationship, extending 1 to 2 steps outward to return the IDs, relationship weights, and names of all entities?",
        "查询": "GO 1 TO 2 STEPS FROM 'Tony Parker' OVER like YIELD DISTINCT like._dst, like.likeness, $$.player.name"
    },
    {
        "用户": "伯莎·乔金斯是哪个组织的成员？",
        "查询": "MATCH (n:character{name:'伯莎·乔金斯'})-[e:belong_to]-(n1:group) return n1"
    },
    {
        "用户": "Hey, I want to find all the entities and relationships that I like between 95 and 100 in two steps starting from 'Tim Duncan'. Can you help me find them?",
        "查询": "GET SUBGRAPH WITH PROP 2 STEPS FROM 'Tim Duncan'\n  WHERE like.likeness > 95 AND like.likeness < 100\n  YIELD vertices as nodes, edges as relationships"
    },
    {
        "用户": "您好，请帮我找出所有喜欢 'Tony Parker' 和 'Tim Duncan' 的球员，然后给我他们的关系，但是不要包括 'Tony Parker' 和 'Tim Duncan' 之间的喜欢关系。",
        "查询": "MATCH (v:player)-[e:like]->(v2) WHERE none_direct_dst(e) IN [\"Tony Parker\", \"Tim Duncan\"] RETURN *\nMINUS\nMATCH (v:player)-[e:like]->(v2) WHERE id(v2) IN [\"Tony Parker\", \"Tim Duncan\"] RETURN *"
    },
    {
        "用户": "Can you help me find out who Tracy McGrady likes and then find out the IDs of the players they like?",
        "查询": "$var = GO FROM \"Tracy McGrady\" OVER like YIELD like._dst as id; GO FROM $var.id OVER like YIELD like._dst"
    },
    {
        "用户": "Hello, could you please help me find all the players in the team named 'Spurs' and return their node information to me?",
        "查询": "MATCH (v:team{name:\"Spurs\"})--(v2)\nRETURN v2 AS Player"
    },
    {
        "用户": "请问您能帮我查找一下球员名为'Tim Duncan'的姓名吗？",
        "查询": "MATCH (v:player{name: 'Tim Duncan'}) return v.player.name AS name"
    },
    {
        "用户": "吉米·珀克斯是哪个组织的成员？",
        "查询": "MATCH (n:character{name:'吉米·珀克斯'})-[e:belong_to]-(n1:group) return n1"
    },
    {
        "用户": " 您好，请帮我找一下40岁的球员，然后给我他们的姓名和年龄加1的结果。",
        "查询": "LOOKUP ON player WHERE player.age == 40 YIELD player.name, player.age + 1"
    },
    {
        "用户": "哈维·瑞吉比特的眼睛颜色是什么？",
        "查询": "MATCH (n:character{name:'哈维·瑞吉比特'}) return n.character.eye"
    },
    {
        "用户": "肱骨内髁骨折的易感人群是哪些？",
        "查询": "MATCH (n:disease{name:\"肱骨内髁骨折\"}) return n.disease.easy_get"
    },
    {
        "用户": "鲍曼·赖特的头发颜色是什么？",
        "查询": "MATCH (n:character{name:'鲍曼·赖特'}) return n.character.hair"
    },
    {
        "用户": "请帮我查找一下名为'Damian Lillard'的球员喜欢的所有人物，并按照他们的年龄从小到大排序，给我返回前三个人物及其年龄信息好吗？",
        "查询": "MATCH (v:player{name: \"Damian Lillard\"})-[:like]-(v2)--(v3)\nWITH v3, v3.player.age AS age\nRETURN v3, age ORDER BY age LIMIT 3"
    },
    {
        "用户": "三叉神经痛的主要原因是什么？",
        "查询": "MATCH (n:disease{name:\"三叉神经痛\"}) return n.disease.cause"
    },
    {
        "用户": "从 'Tim Duncan' 出发，经过 '喜欢' 和 '服务' 关系，找出距离为 3 的所有实体，且这些实体有标签且年龄大于 40，返回这些实体。",
        "查询": "GO 3 STEPS FROM \"Tim Duncan\" OVER like,serve\n  WHERE size(labels($$))>0 AND $$.player.age>40\n  yield $$ as v"
    },
    {
        "用户": "找出和赫尔伯特·斯普林相关的两个人？",
        "查询": "MATCH (n:character{name:'赫尔伯特·斯普林'})-[e]-(n1) return n LIMIT 2"
    },
    {
        "用户": "得了戊型病毒性肝炎的治疗药物有哪些？",
        "查询": "GO FROM \"戊型病毒性肝炎\" OVER recommend_drug YIELD dst(edge);"
    },
    {
        "用户": "请问您能帮我查找一下评分为666的'喜欢'关系吗？我需要获取这些关系的起始点和终止点。",
        "查询": "LOOKUP ON like WHERE like.grade == 666 YIELD src(edge) as src, dst(edge) as dst"
    },
    {
        "用户": "Hello, could you please help me search for 'Tim Duncan' and expand 1 to 4 steps outward to find the 'likes' and edge information between each edge.",
        "查询": "go 1 to 4 steps from \"Tim Duncan\" over like yield like.likeness, edge as e"
    },
    {
        "用户": "小儿中暑和暑热症的易感人群是哪些？",
        "查询": "MATCH (n:disease{name:\"小儿中暑和暑热症\"}) return n.disease.easy_get"
    },
    {
        "用户": "Find all the teams' Boris Diaw 'belongs to, return the player name, start and end years of service, and team name.",
        "查询": "GO FROM \"Boris Diaw\" OVER serve YIELD $^.player.name, serve.start_year, serve.end_year, $$.team.name"
    },
    {
        "用户": "Hello, could you help me find entities and relationships that have a liking and effectiveness relationship with 'Tim Duncan'?",
        "查询": "GET SUBGRAPH WITH PROP 2 STEPS FROM 'Tim Duncan' IN like, serve YIELD vertices as nodes, edges as relationships"
    },
    {
        "用户": "查找年龄为（1+19）岁的球员，并返回这些球员的所有节点信息。",
        "查询": "match (v:player{age: 1+19}) RETURN v"
    },
    {
        "用户": "查找年龄为20岁的球员，并返回这些球员的所有节点信息。",
        "查询": "match (v:player{age: 1+19}) RETURN v"
    },
    {
        "用户": "急性肾功能不全的主要症状是什么？",
        "查询": "MATCH (n:disease{name:\"急性肾功能不全\"}) return n.disease.symptom"
    },
    {
        "用户": " 嘿，你能帮我找一下所有喜欢'Tony Parker'和'Tim Duncan'的人吗？然后告诉我这些人和其他实体之间的关系，但是不要包括'Tony Parker'和'Tim Duncan'之间的关系。",
        "查询": "MATCH (v:player)-[e:like]->(v2) WHERE none_direct_dst(e) IN [\"Tony Parker\", \"Tim Duncan\"] RETURN *\nMINUS\nMATCH (v:player)-[e:like]->(v2) WHERE id(v2) IN [\"Tony Parker\", \"Tim Duncan\"] RETURN *"
    },
    {
        "用户": "找出所有被其他球员喜欢的球员，并返回这些球员的姓名。",
        "查询": "MATCH (v:player) WHERE [t in [v] | (v)-[:like]->(t)] RETURN v.player.name AS name"
    },
    {
        "用户": "睾丸肿瘤的主要症状有哪些？",
        "查询": "MATCH (n:disease{name:\"睾丸肿瘤\"}) return n.disease.symptom"
    },
    {
        "用户": "查找名为'Tracy McGrady'的球员在2000年之后所服务或喜欢的实体及其关系。",
        "查询": "MATCH (:player{name:\"Tracy McGrady\"})-[e:serve|like{start_year: 2000}]->(v)\nRETURN e, v"
    },
    {
        "用户": "找出名为'Duncan'球员对其他球员具有互相喜欢的关系，返回这些关系的喜欢程度。",
        "查询": "MATCH p2=(:player{name:\"Tim Duncan\"})-[e:like*1..2]-(:player{name:\"Tim Duncan\"})\nRETURN e.likeness AS e1"
    },
    {
        "用户": "Obtain the attributes of the player for 'Boris Diaw' and return the player node.",
        "查询": "FETCH PROP ON player 'Boris Diaw' YIELD vertex as node"
    },
    {
        "用户": "母儿ABO血型不合的主要症状是什么？",
        "查询": "MATCH (n:disease{name:\"母儿ABO血型不合\"}) return n.disease.symptom"
    },
    {
        "用户": "找出名为'Joseph'的球员有喜欢关系的所有实体及其关系，并返回这些实体和关系的路径。",
        "查询": "MATCH p = (v:player{name: \"Cory Joseph\"})-[e:like]-(v2)\nRETURN p"
    },
    {
        "用户": "Starting from 'Tim Duncan', obtain all entities and relationships within two steps through liking and effectiveness relationships.",
        "查询": "GET SUBGRAPH WITH PROP 2 STEPS FROM 'Tim Duncan' IN like, serve YIELD vertices as nodes, edges as relationships"
    },
    {
        "用户": "嘿，你能帮我找一下'Spurs'这个团队里的所有球员吗？然后把这些球员的信息给我返回一下。",
        "查询": "MATCH (v:team{name:\"Spurs\"})--(v2)\nRETURN v2 AS Player"
    },
    {
        "用户": "得了戊型病毒性肝炎的治愈概率是多少？",
        "查询": "FETCH PROP ON disease \"戊型病毒性肝炎\" YIELD properties(vertex).cured_prob as prob"
    },
    {
        "用户": "获取名称为'Spurs'的球队的队名属性。",
        "查询": "FETCH PROP ON team \"Spurs\" YIELD team.name"
    },
    {
        "用户": "请问您能帮我找出与'LaMarcus Aldridge'有关的球队名称和相关球员的名称吗？",
        "查询": "GO FROM \"LaMarcus Aldridge\" OVER * YIELD $$.team.name, $$.player.name"
    },
    {
        "用户": "雷古勒斯·布莱克参与了多少个组织？",
        "查询": "MATCH (n:character{name:'雷古勒斯·布莱克'})-[e]-(n1:group) return count(n1)"
    },
    {
        "用户": "Find all entities that 'like' and 'Tony Parker', and return the IDs of the 'like' entities in their relationship with 'Tony Parker'.",
        "查询": "GO FROM \"Tony Parker\" OVER like REVERSELY YIELD like._dst"
    },
    {
        "用户": "Hey, can you help me find players over 35 years old? Then count their number, total age, maximum age, minimum age, average age plus 1, and their respective labels. Finally, sort by ID, quantity, maximum age, and minimum age, skip the top 10 results, and return me 20 results.",
        "查询": "MATCH(n:player)-[:like]->(m)\n  WHERE n.player.age > 35\n  RETURN DISTINCT id(n) AS id,\n                  count(n) AS count,\n                  sum(floor(n.player.age)) AS sum,\n                  max(m.player.age) AS max,\n                  min(n.player.age) AS min,\n                  avg(distinct n.player.age)+1 AS age,\n                  labels(m) AS lb\n        ORDER BY id, count, max, min\n        SKIP 10 LIMIT 20;"
    },
    {
        "用户": "找出与 'Dejounte' 有 '喜欢' 关系的实体，按照年龄降序、姓名升序排序，跳过前11个结果，返回接下来的3个实体的姓名和年龄。",
        "查询": "MATCH (v1) -[:like]-> (v)\nWHERE id(v1) == 'Dejounte Murray'\nRETURN v.player.name AS Name, v.player.age AS Age\nORDER BY Age DESC, Name ASC\nSKIP 11\nLIMIT 3"
    },
    {
        "用户": "返回 'Tony Parker' 喜欢 'Tim Duncan' 和 'Grant Hill' 喜欢 'Tracy McGrady' 的关系属性。",
        "查询": "FETCH PROP ON like \"Tony Parker\"->\"Tim Duncan\", \"Grant Hill\" -> \"Tracy McGrady\" YIELD edge as relationship |\nYIELD properties($-.relationship)"
    }
]